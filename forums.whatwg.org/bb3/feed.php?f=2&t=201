<br />
<b>Strict Standards</b>:  Non-static method phpbb_feed_factory::init() should not be called statically in <b>/home/whatforums/forums.whatwg.org/bb3/feed.php</b> on line <b>66</b><br />
<b>[phpBB Debug] PHP Notice</b>: in file <b>/feed.php</b> on line <b>171</b>: <b>Cannot modify header information - headers already sent by (output started at /feed.php:66)</b><br />
<b>[phpBB Debug] PHP Notice</b>: in file <b>/feed.php</b> on line <b>172</b>: <b>Cannot modify header information - headers already sent by (output started at /feed.php:66)</b><br />
<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="https://forums.whatwg.org/bb3/feed.php?f=2&amp;t=201" />

<title>WHATWG forums</title>
<subtitle>A Forum for HTML Discussions: Semantics, DOM APIs, Microdata, Canvas, WebGL, Offline Web Applications, Local Storage, WebM Video, WebSockets, Web Workers, Drag and Drop, Forms, Accessibility, Syntax, News, Keywords, Yet More Keywords &amp; More.</subtitle>
<link href="https://forums.whatwg.org/bb3/index.php" />
<updated>2010-05-13T02:01:57+00:00</updated>

<author><name><![CDATA[WHATWG forums]]></name></author>
<id>https://forums.whatwg.org/bb3/feed.php?f=2&amp;t=201</id>
<entry>
<author><name><![CDATA[phoebe]]></name></author>
<updated>2010-05-13T02:01:57+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=5868#p5868</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=5868#p5868"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=5868#p5868"><![CDATA[
The browser developers, server developers and the big search engine players that want to be the app portals of the future. And of course, the major players in the application and operating system products lineage, have to have their input.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=1158">phoebe</a> — Thu May 13, 2010 2:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-09-02T07:41:06+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=958#p958</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=958#p958"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=958#p958"><![CDATA[
Google's Chrome Browser, although it touts the goal of providing a favorable browsing environment for web applications, does not achieve what Koala is outlined to do.   Chrome will provide improved security in a way that is favorable, but it doesn't monitor the stream and eliminate malware and other problematic packets from the stream.  Instead, it sandboxes and restricts activity in a way that also limits functionality that Koala would prefer to promote.  It also favors tabs over secondary windows, a philosophy that may well restrict how tool pallettes and app interactivity is achieved. <br /><br />Chrome does introduce a new Java Vertual Machine which might hold some surprises, but it doesn't sound like a VM OS implementation that would allow fully robust web savy apps.   Gears by being included in the browser will allow greater client side disk usage, but ... ??? <br /><br />The future lies in opening up a mutual embrace between the OS environment and web environment.  Chrome doesn't do this.  It's a minor step on the path and puts google in the browser game.    Interclient communications will still rely on client to server requests, AJAX client polling of the server and  is in no way, server polling of clients.  No control apps are on the horizon.  No client to client interconnects, except via client to servier AJAX style polling. The share data and resource store will remain as a server component with the concept of client side data and resource store ... out of the question.  In short, Chrome, like current browsers, adheres to a paradigm where the client side initiates and sustains all web activity and only by direct connection to a server.  It will not be possible to have both the client and server be independently active in initiating communications.   Apparently, the fact that a client can be offline still spells IMPOSSIBLE to browser theorists and designers.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Tue Sep 02, 2008 7:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-08-20T19:16:12+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=933#p933</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=933#p933"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=933#p933"><![CDATA[
Could a large collaborative project to redefine browser, server and web technologies to enable fully robust web applications spike the economy? <br /><br />The answer is certainly, even with the outsourcing of globalization, there's a lot of manhours to be invested and the opportunities for new start ups are certainly there. <br /><br />Taking a brief inventory ...<br /><br />1)  Software Engineering and Comuter Scientists<br />These sectors of the economy benefit from needs to redefine browser internals and server infrastructures.  As normal desktop applications, large applications beyond those defined under the umbrella of Web Cloud and RIA find the new infrastructure available, a large number of traditional applications will see revisions to utilize web communications and a large number of new applications will be spawned.   Security issues will peak that sector of the industry without doubt as the new technology will require changes in how network security is implemented and its depth. <br /><br />2)  Hardware Engineering<br />Improvements in network bandwidth and QoS, place a need for changes in infrastructural hardware.  Security appliances which monitor network traffic and selectively remove or inhibit illicit or harmful packets will come to fore as new technology.  But the largest hardware sector growth will be seen in new appliances, ranging from hand held devices to traditional household appliances which do not normal function over the internet.  Industrial and Scientific control applications will find a fertile ground for new applications and will require new devices for controlled automation of processes and collection of information.  Probes, monitors and instrumentation will also find new methods of implementation. <br /><br />3) Service <br />ISPs, Advertising, Entertainment, Communications, Automated Processing and Information Gathering are likely to be among the largest featured service growth areas, but there is certainly a large list here to include, eductional, government, medicine and others which will benefit from the new technologies predicted here.   The transportation and shipping industries for example will find new ways to monitor, dispatch and control travel from reservations, priorities to tracking, futuring expenses and so forth. <br /><br />4) Manufacturing<br />When hardware changes, manufacturing benefits.  No need to say more. <br /><br />5) Administrative<br />This area is difficult to predict, but the legal sector might see some changes as security issues come to involve legal processes to a larger degree.  As well, intellectual property rights can be predicted to see some changes as elements which are traditionally not shared suddenly find expression in a widely shared global market. <br /><br /><br />The ripple out certainly has potential for affecting many other areas.<br /><br />As a follow-up question,  does it make sense to persue such a large collaborative project with the intention of stimulating economic growth as one of its primary goals?   <br /><br />It is natural for individual corporations to persue projects for their own financial growth and wall technologies to preserve their rights to those technologies.  When a large corporation stimulates the economy, some might believe that they preferentially do so through community, providing grants and other foundation-like contributions to stimulate production of the educated labor and management resources they require and infrastructures related to community to benefit their human assets. <br /><br />If we conclude that a general stimulus to the overall economy is a community benefit that lends itself to those corporate objectives, but on a much larger collaborative and partnered scope, then yes, it does make sense and is even more preferrential.  Albeit, it will requiring some steering to allow corporate competitive protections.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Wed Aug 20, 2008 7:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-08-15T04:00:25+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=922#p922</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=922#p922"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=922#p922"><![CDATA[
Looking into the crystal ball, there's a thing on the horizon that Koala will enable called Virtual Ownership Storage Systems ( VOSS ).  Technologies already exist today that are in fact, precursors to VOSS, in particular, websites which allow users free disk space to cache and share photographs and to purchase downloadable video and music tracks which can be used to create CD or DVDs.  With Koala, there is no need to create CDs or DVDs.  Matter of factly, it becomes preferable not to create such transferable mediums. <br /><br />Let's get a better idea of what VOSS is all about and how Koala enables VOSS technology. Koala as has already been pointed out, supports control systems and bi-directional role reversal protocols.  The future of hand held and other remote devices has been barely touched upon.  But lets take a look at a common appliance, the television set, for starters. Currently, we tie into a cable television service which serves up programming that is fixed or can be modified via 'pay per view' options.  Users of cable television are limited to one vendor and the finite programming it provides which varies on a periodic basis.  In the future, television programming will become a network available service.  The finite programming of cable television will be supplanted by multiple independent services available on the network.  Channel changing will become a search function where the user searches for the programming they desire and can tie into it at any time to get pre-recorded programs or tie into live broadcasts.  The televsion remote becomes a Koala hand-held client which is geared to communicate directly with the entertainment center of the future web surfer who may pay membership fees to access specific programming over the web or optionally, tie into free programming.  And that programming is no longer finite and limited by subscription to a specific cable company.  It is virtual and open to many different vendors of network televised communications. And it is two-way. Offers may come in and be displayed for user selection. <br /><br />So what happens to an individual's CD and DVD collections and all those CD Wallets and storage stands?  They go away.  The medium for such things becomes VOSS.  When a person wants to play a CD album, they connect to their VOSS storage vendor and the tracks are served up over the net.  Portable Players expand to include television, not just music tracks and of course, that includes boom boxes and in-dash automobile based systems. There's no need to pack along a CD wallet on those trips out of the house.  Your remote device accesses your personal VOSS over the net and you have access to your tunes and videos. <br /><br />VOSS will have many other purposes, including document storage and voice/video messaging. And of course, purchased software applications may reside on VOSS, including games of many types. But one very interesting economical implication of VOSS is virtual trade. Sound and Video tracks stored on VOSS don't wear out and there's potential for a type of web economy to evolve based not on currency, but virtual ownership objects ( VOO ).  The economic implications will be unusual, especially since VOO assets as they exist as a readily duplicatable medium, are counterfitable. In any regard, a discussion of these ramifications in the legal world changes is beyond the scope of this post.<br /><br />Should a user desire to pack their VOO assets with them to some remote place where they feel they will not be able to obtain web access to VOSS, the answer is simple via an already extant technology, flash drives.  Flash drive technology is much more compact than CD and DVD mediums and allows the user to pack along a huge library of VOO assets.  And Koala with its VM OS interface provides a very nice way to access these libraries on the client side, ie. the playback device.   Plug-in and Play!   The biggest challenge is that of providing good portable energy sources ( batteries ).<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Fri Aug 15, 2008 4:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-08-12T05:41:07+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=919#p919</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=919#p919"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=919#p919"><![CDATA[
Coming full circle in this discussion, back to AJAX and how it doesn't satisfy my idea of fully robust application development methodology or even limited Web Cloud or Rich Application Interfaces, consider the following ...<br /><br />Some folks are aware that there are at least five ways to trigger a client to server request which typifies best practice AJAX methods. <br /><br />1)  Hidden Frame with callback                                      <br />2)  Hidden IFrame with Callback                                    <br />3)  XMLHTTPREQUEST Object ( XHR )                             <br />4)  src attribute in image create                                     <br />5)  Javascript  Inline Scripting  with or without the DOM    <br /><br />The last two of these are especially interesting as they tell the tale of how some folks have bandaided in functionality by searching for ways to trigger a request to the server.  The original preconcept for AJAX itself, was not an intentionally built in feature of browsers.  The Image Creation technique is a great example; it does not create an image for viewing, only an empty image for triggering the request.  As part of the technique, a web programmer may use the image's size to imply status ...  success, an error, or whatever.  Status codes can't be returned any other way. You gotta love that sort of stuff.   It works!  Albeit, it's definitely a creative sort of solution that uses images in a bizzarre sort of way ... and its done even though images take up more load time than straight code!<br /><br />The virtues of the last two methods are that unlike the first three, you can make requests to different domains.  With the first three you can only use AJAX within the same domain.   It really makes a developer wonder why nobody has yet to implement functionality into the browser that accomplishes this functionality with a direct 'no smoke and mirrors' syntax.<br /><br />XHR is nice because it give status and a straight forward syntax methodology, but has liminations and disadvantages.  That's why some developers include all five techniques in their bag of tricks. <br /><br />Like I said, you gotta love this stuff.     It works!   But it is rather odd and well ...  you come up with a word for it. <br /><br />And this sort of spread for doing things in web development is not limited to AJAX alone.   The choices are many.    It's easy to see why Koala has as one of its prime objectives the condensation of all these overlaps into a single API.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Tue Aug 12, 2008 5:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-08-11T04:34:43+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=918#p918</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=918#p918"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=918#p918"><![CDATA[
Thus far, direct client/client communications with Koala have been discussed with traditional servers acting as startup connectivity catalysts and conduits for client/client dialogues once connections have been made. <br /><br />But there are some current and old technologies which deserve some speculation with regard to client/client dialogues.  The telephone switching system will likely never be the same again.  The telephone industry today is tetering on the edge of its own demise as cell phone, iphones and other hand held technologies spring up by the dozens to compete for communication service business.  And whether its land lines or via statellite, the heart of telephone interchanges are naturally positioned to take on the role of  servers for the startup connection role for web dialogues directly between clients.  It's just the refreshingly natural revival ticket that the big traditional phone companies might be praying for.  <br /><br />And with support for control system support, hand helds will take on a whole new range of roles and services, for industry, service and personal connectivity and interchange. Hand held devices will move to the fore which act as remote probes, switchers, medical instruments and ... well, the list can be quite endless.  <br /><br />Fault tolerance of such systems might be enhanced through backup connectivity using different infrastructures, land, satellite and others.  It's a seed waiting to germinate after being sewn by the introduction of Koala.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Mon Aug 11, 2008 4:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-08-05T05:40:22+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=907#p907</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=907#p907"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=907#p907"><![CDATA[
The secret of NAIM ( Native Application Interface Management ): <br /><br />In a previous post, the political ramifications of defining a specific API for the VM OS layer was assessed.  The goal was to achieve a standard homogeneous API that closely paralleled the OS interface and would allow condensation of existing technologies to a simpler more easily understood and usable interface. But in that post, it was not clear how to procede. <br /><br />There are actually a couple issues. <br /><br />1) It is required to define which API style should be used on the layer without creating a project collaboration rift.<br /><br />2) The Native OS API may be used for a large percentage of applications which run client side off the desktop using native library routines, but require web access and functionality, making them more than simple desktop applications. <br /><br /><br />And this in fact, suggests a universal solution which is based on an API that may be dynamically managed to suite developer/user preference.  It is known for example that most code will be at least byte-code translated before being dispatched.  This suggests then that coding may be done in syntactic variants.  NAIM would provide functionality that allows a programmer to choose an interface style, but only if there is a one to one correspondence for each variant such that they may be mapped to a common interface requirement. NAIM would provide web application developers the ability to choose between APIs that may be syntactically Unix-like, Windows-like, Apple-like, Java-like  or Koala basic. Developer comfort levels would be catered to there would be little requirement for any developer to learn new API syntax.  Through NAIM, Koala would be multi-linqual.<br /><br />NAIM would further allow developers to enter coded sequences directly on Koala browsers or servers and execute them in test bed or direct control scenarios, having full SQA functionality including full featured debuggers, built in and at the ready.  This type of expanded functionality need not be special or additional in nature.  As a standard Koala feature, this additional versatility of the browser serves not just developers, but knowledgable users as well.  Naim could in fact be tailored to present an extremely simple interface which would allow simple user defined actions within an application or directly upon the browser.  There is in fact, no reason why the developer may not define their own syntax through NAIM.  That syntax however, would be limited in scope to the developer's host, intranet or systems under the developer's influence.  One might well consider how this might figure in the deployment of special devices such as hand-helds or perhaps, navigation systems in vehicles, et al.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Tue Aug 05, 2008 5:40 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-08-03T01:12:21+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=899#p899</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=899#p899"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=899#p899"><![CDATA[
Coding for security on the web is one of those highly visible careers which can make or break a developer.  Rightfully, programmers working on security projects may often be subject to quite a bit of personal scrutiny, especially with money or other assets are involved. <br /><br />And working security solutions can be complex.  Programming for security demands continuous dynamic adaptation.  One might consider all possible avenues that security may be broken, but still miss identifying less than one percent of the issues and that will be enough to allow security to be broken.  And the programmer must always assume that they have indeed missed something, whether it be identifying a threat to security or providing a valid solution to eliminate that threat. <br /><br />With security, we could pose a couple theorems.  And these have likely already been stated somewhere, so I won't call them Brian L. Donat's Security Theorems.  If nobody's come up with these theorems yet, well, OK ... call them Brian L. Donat's Web Application Security Theorems. <br /><br /><br />Theorem #1:  The more complex a web application is, the more vulnerable it is to security breaches. <br /><br />Theorem #2:  No Web Applicaton can be totally immune to security Breaches.  If somebody wants in bad enough, they will find a way.  And they don't need to do it over the internet.<br /><br />Theorem #3:  Time increases the risk that security in a web application may be compromised. <br /><br /><br />The most total and certain form of security is complete isolation. <br /><br />In fact, isolation is the goal with security.  However, for a web application to be useful and achieve a degree of practicality, it can not be totally isolated.  Instead we impose limited isolation through restrictions. <br /><br />The simplest forms of security are based upon this concept and work together to enforce limited isolation ... or limited access, however you choose to term it. <br /><br />Access Lists<br />Permissions<br /><br /><br />Going beyond this, we find that most of a what an engineer must code for when evolving a secure web application environment, must compensate for those three theorems which may be reworded as follows ...<br /><br />Given enough time, security of web applications may ultimately be breached due to holes being discovered in the wall that would normally provide the limited isolation for the application's practical usage. Penultimately, an application's security may be breached via means that go beyond the web application itself and even the internet and the world wide web. <br /><br />We can rationalize then that web application security involves the practical use of isolation mechanisms and eliminating the holes in the application which may be used to compromise that isolation and in particular, to dynamically impose change upon the isolation mechanism to reduce the risk of breaches.  This should shed some light upon the motivation for dynamic token exchange as a means of securing communications between groupware clients which was defined in a previous post. <br /><br />Here are some typical holes in the security wall ...<br /><br />SQL Injections<br />HTML Injections<br />Scripted attempts to break passwords<br />Scripted attempts to utilize sessions<br />Scripted attempts to gain user ID and Password Information from registration code.<br />Phishing for Personal Information, most particularly, login IDs and Passwords<br />Detection of Application Sensitive Information by intentionally causing a web page to error.<br />Reading Code Pages on the web site. <br />Breaking into the web site via an alternate application running concurrently on the site, either in support of the server or as another available application through the same site. <br />Exposure of information in the URL of GET Requests to the server. <br /><br />and so on ...<br /><br />And now the scary part ... web application developers, even those whose job it is to code for security, do NOT understand all the possible holes.  Holes are often discovered AFTER a breach has occurred.   This does not however, preclude prediction or pre-identification of such holes ... based upon experience with prior or general applications. <br /><br />And so, it is accepted that it's a complex task to ensure security and that it can never truly be one hundred percent effective.  But the history of the web has demonstrated a pattern of abuse and certainly suggests a new approach. <br /><br />With Koala, the security philosophy implements a shift to the following objectives ...<br /><br />1) Eliminate the children who are hacking, such that the remaining hackers must be very good at what they do to be successful. <br />   The client 'option' to have security must be eliminated with a large part of the security task moved to the route or stream.  And that introduces yet another set of tasks for web application security ... monitoring, detection and elimination. <br /><br />2) Through detection, endeavor to idenify and eliminate the more highly skilled hackers. <br />   Methodologies necessarily go beyond the internet and the web and into law enforcement and the courts.  Detection and identification should be come key elments in web security scenarios of the future and the implementation of this vehicle should not be a client option.  Intrusion by law enforcement into offending systems to identify and track offenders should be explored once such intrusions by law enforcement are deemed justified by probable cause.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Sun Aug 03, 2008 1:12 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-08-01T23:55:48+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=897#p897</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=897#p897"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=897#p897"><![CDATA[
Let's have a little more fun with Koala, but for the sake of efficiency. <br /><br />When we talk about repetition in anything, we can visualize methods of re-use.  This is done quite often in the current genre of browsers and servers and I don't think I need to go into specific detailed examples.  If one puts their mind to it, the examples become obvious. <br /><br />No, instead, let's turn back to the languages a Koala Web Application Developer will have at their disposal.   There would be a trend toward C/C++ or more traditional high level languages to generate the applications that will run on the VM OS layer using more standardized APIs.   But let's toss something else out for reflection ... byte code packets.    If you've got an emulator that runs byte code for portability magic, why send HTML which needs to be parsed and compiled in situ on the client side?   It only makes sense to have re-usable byte code packets client side as part of the APP  ... or pre-compiled packets.   We've already said that with the VM OS layer it's possible to use the OS and all of its load libraries ... but for quick and dirty portable web app code ... ready mix byte code packets would be a charm. <br /><br />The packets BTW can be envisioned as having a signature such that for security reasons, packets not having that signature would not be allowed to run.   I'll keep from presenting what I envision that signature's content might be for now.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Fri Aug 01, 2008 11:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-08-01T01:24:03+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=895#p895</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=895#p895"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=895#p895"><![CDATA[
I like to bandy about a couple words with my own bastardized definitions, but perhaps not so bastardized.  When you have certain behaviors to describe and there is no neat word that describes them, you quite naturally borrow from something that is closely analogous even though it is used for some other definitive purpose.   Etymologically, that is how language grows. <br /><br /><br />The following terms might well be applied to information and control theory ... and artificial intelligence. <br /><br />Q: What is a tautology? <br /><br />A: The dictionary says that this is a needless repetition.  But hey ... OK ... is brushing your teeth every morning needless?   The bastardized definition might include such activity or behavior, right down to breathing. But in the BearState parlance, tautology is related to the act of learning. The common analogue is putting out your finger toward a hot stove, getting burned and learning not to do that again.  It's repetitive probing and it is a very common method of learning.   In fact, experimentation using the scientific method is tautological.  And so, we see that the dictionary requires some revision.  Tautologies are NOT needless repetitions.  They are useful methods to learn by proof and we all do it to some degree.  Some of us use recipes based on what other people have written about their tautological proofs while others use tautology more in the process of learning. These folks are likely much more analytical in their thinking.  Tautological learning behavior comes into play even when a person projects or predicts behavior through theory and then seeks to prove the theory. <br /><br />Q: What is tautomerism? <br /><br />A:  The dictionary defines tautomerism as a relationship between chemical isomers which are capable of changing form, particularly, exchanging each others form.  Evidently, this is a repetitive action.  The bastardized BearState definition is more general.   It relates to repeated measurements of some entity in a learning or experimental context.  In particular, I have used the word in the process of talking about 'chunnelling' such that routers exercise some AI to learn from repeated exchanges of traffic, such that they learn best routes.  I have suggested that the end points of a route ... the application nodes participate by carrying the route information with the transmitted packets and that this might help to use software to create the equivalent of static routes. <br /><br />I hope that helps for those who have stumbled over my usage of these terms and the context of their usage was not clear enough to illuminate the definition intended.<br /><br />NOTE:  It is entirely possible that I am not the first to bastardize these words to form precisely the same usage, so I claim no credit for being the founder of these definitions.  I would suspect that you'll find these words used precisely in this way in the behavioral sciences and perhaps even in AI and Information and Control Theory.  For example, in behavioral learning, once a tautological learning pattern becomes routine, it's definition becomes rote.  Before one can ride a bicycle, they must try it with a degree of repeitition that we can describe as a tautology.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Fri Aug 01, 2008 1:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-07-25T20:27:06+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=859#p859</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=859#p859"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=859#p859"><![CDATA[
Hmmm ...<br /><br />Actually, after looking over all of what I've posted in this thread, I think a white paper might be a good idea and fun thing to do with this concept. <br /><br />Originally, I just wanted to say a few words about a simple web application wish list ... <br /><br />1)  A simple API that in my mind would be similar to the Unix Programming API but expanded to include web features and allow for more robust web applications than are currently available and in some cases, possible. <br /><br />2)  Bi-Directional web communications to allow a more robust Groupware type of web application programming. <br /><br />3)  More comprehensive and effective security for the web and internet.<br /><br /><br />Well, instead of stopping there, I did a brain dump.    And yes, there was a lot to dump and I still haven't dumped it all ...    <br /><br />Yeah, I think a white paper would be fun.    I've never written one before.  It wouldn't be such as to market a corporate product, touting Koala's virtues to generate revenue.   Nah.   Nor would it be to support an organization's cause, since there is no organization to overcome the hurdles Koala would.    I would likely wind up hosting it on my own web site. <br /><br />I figure 3 sections ...<br /><br />1)  Executive  ... explaining the basic overview and general tenets. <br /><br />2)  Managerial  ... getting deaper to explain how Koala apps might serve organizational purposes and be marketable for products written for it.<br /><br />3)  Engineering ... the meat of the matter, perhaps even to greater detail than the brain dump presented here. <br /><br /><br />Yeah, a white paper, that'd be fun. <br /><br /><img src="https://forums.whatwg.org/bb3/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Fri Jul 25, 2008 8:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Le Sage]]></name></author>
<updated>2008-07-25T19:20:57+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=858#p858</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=858#p858"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=858#p858"><![CDATA[
Hum, that's very verbose. <img src="http://www.reant.net/smileys/curl-lip.png" alt="Image" /> If you haven't already, you should open a blog &amp; post all of that on it, you might have more readers there.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=206">Le Sage</a> — Fri Jul 25, 2008 7:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-07-25T16:22:39+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=855#p855</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=855#p855"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=855#p855"><![CDATA[
It is inevitable, that eventually, a proposed technology such as Koala will turn the corner of revelation, exposing the crux of why the quagmire exists in the first place and why, Koala and other web technologies that are so large in scope that they require collaborative effort, may be impossible to implement fully, if at all. <br /><br />Before getting back to Groupware and the certain interest it must have for application architects, let's take a look again at HTML and how it applies to full blown applications on the web.   Currently, large scale applications are written in a language like C/C++, reside on client-side diskspace and if they need services from the internet, do not use the web, but open a port to access those services.  This of course, means that those applications are not portable between platforms and are at least, OS versioned.  Further, there is no connection to the web interface.  Users have very little in the way of interacting with such applications as part of the web experience.<br /><br />In large server farms and other contexts, hypervisors serve to eliminate the portability issue, but at a cost.  They hypervisor is an intermediate layer which acts as an application on the OS that is a container to translate OS and other system calls for other applications. Historically, the general public has favored the MS Windows platform for its application availability.  Windows emulators can be run on Linux and Unix platforms to make that application wealth available on those platforms.  Processor speeds have increased and having such an intermediary level, even as a byte code interpretor for API languages is much more feasible today than it has been in the past. Yet the common API for such applications has yet to evolve as proposed here, for Koala. <br /><br />The political and practical crux of implementing the API will be a tricky one, indeed. The MS windows historical prominance as the base of most generally public applications might have some saying  &quot;Model that API after the Win32 API&quot; while other will tout ( as I do ) the straight forward nature of the UNIX System API as the preferred model.  If the historical precedent were not there with an established base for Windows Applications, the Unix API would definitely be more clear cut and preferred.   Remember, that the VM OS layer for Koala is a translator ... so the API as it appears to application programmers is independent of the native OS.  A third approach would be to have the API be something entirely different than either Windows Win32, Unix, Apple or any other API.  It would seem to be an impossibility to have the API cater to compatibility with more than one OS style.  In any case, this is a huge hurdle for the collaborative implementation of Koala to overcome.  If I were to say outright that the API should be modelled after the Unix API, the MS folks would balk. Yet I have looked at WIN32 and ... well, give me the UNIX API. The problem is going to be a tough sell, but it needs to be settled or the portability issue will remain.  It will just be moved from the OS to the browser. As can be imagined, going with the Unix API will make all those Windows applications suddenly available to Unix/Linux systems, not just the browsers. This could be the beginning of a great exodus from an OS that has historically seen a morass of security problems and other issues. <br /><br />I wish I knew that answer to how diplomacy can resolve this issue. The dream of having a straight forward simple API to develope full featured web applications on top of hinges on how the Koala API will look.  And even then, a large number of applications may be written to run directly on the native OS, using the browser's VM OS layer only for web services. <br /><br />There.  I've said it.  The great technological double bind for application developers is on the table.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Fri Jul 25, 2008 4:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-07-22T20:52:56+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=842#p842</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=842#p842"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=842#p842"><![CDATA[
Groupware ...<br /><br />Social networking, a sure-fire incubator for groupware, is all the rage these days.  On the web, we have evolved chat into messengers, mailing lists into forums, images into photo galleries and video expose's. And on the development side, opensource software pulls in contributors to various projects from all over the world. One type of application for social netoworking on the web, online gaming, provides a very fertile ground for discussing analogues for groupware and without doubt, gaming developers will likely provide some deep insights into what must be done to bring features to the fore for other groupware applications. Like other intelligent creatures, we learn by playing. And within the context of social networking, applications that may be described as groupware are at the pinacle of this play. <br /><br />In the online gaming sector which for fun and entertainment, utilizes some of the current web's most sosphisticated features to provide an interactive gaming experience, groupware will be the holy grail, bringing eden to the web. Certainly, some games on the web are solitary. These are no big deal.  But those that are pioneering multi-client group participation are currently limited by what web technology will do for them.  And Koala will remedy that. <br /><br />The big trick with groupware is sharing.  Sharing most particularly, hovers around specific information and processes and at the crux of this sharing is a very common data structure, the queue.  Now some of you might say no, it's a database or its the server.  But still, the database uses a queue to sequence operations, reads, writes, whatever. And the same is true of the server.  There may be several queues involved and these in turn may be enveloped within other structures and processes, to include for example, security shields, in particular. <br /><br />In present scenarios, databases provide their own security as do servers. But that's the present scenario. Groupware however is limited when the sharing mechanisms are limited to the database and server.  In Koala, client to client communications allow a whole different context of sharing, one that largely bypasses both the server and the database.  And that context must accomodate a definition of a secure group where sharing is possible with a mechanism of select privileges and exclusion of non-registered users.  Yet client to cleint connectivity is obscure.  In a client/server architecture the server is always a player and it knows about which clients are registered users, while also being capable of public privileges. In the current context, a server database defines the gamespace ( or workspace ) and users share the gamespace in a way that may be supplemented by messaging each other regarding their inputs to the game.   In a client/client context, clients are not necessarily directly privy to who is and who is not a registered user.  They have to be informed before a shared connectivity can be set up with privileges in place. Further, the gamespace or workspace is not centered at the server.  Part of this space may reside on the server, or it may be completely client-side. <br /><br />Certainly, a client can query the server to acknowledge another cleint's registration authenticity and security status, but this involves extra work.  An alternate methodology is token passing and exchange. When one client makes a request or responds to another client's request, tokens are exchanged which define authentication and security. These tokens must be mutable.  That is, to defeat hackers who would quickly capitalize upon volume traffic that involves a fixed token structure, the tokens should automatically modify their form in a way that is known to registered clients.  No hacker can ever fixate on the form of the token and run repeated scripted attempts to break in to the group.  Session IDs are open to such attacks, especially, when the number of users on a site is enormous. The odds in favor of the hacker's success increase with user volume.  Mutable tokens eliminate this volume advantage and make the hacker's success rate fall off to for all practical purposes, zero.  The required exchange of tokens ensures that the hacker can not capture a one-way token and use this to attempt to barter access.  The requesting client will always be required to present their token first.<br /><br />How a token's form is changed is algorithmic and the frequency or scheduling of the change might be tunable.  With very low user volumes, token mutation is required less frequently.  Higher user volumes would require more frequent changes.  When a groupware session between two clients overlaps the event of a token mutation, two methods may be used to update the clients, server polling of the clients or ... if the clients discover they are being denied inclusion, they can request a new token from the server.  Keep in mind however, that one client has the right and the capacity to specifically deny another client. This is a special form of denial in which the denied client will have enough information to know that it does not need to update it's token. <br /><br />Much still needs to be said about how Koala and its capacity for cleint/server role reversals impacts groupware and it is not beyond reason, that the traditional HTTP/HTML vehicle for information exchange may not only see alterations, but be supplemented by other vehicles and methods for exchange.  But that's meat for another post.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Tue Jul 22, 2008 8:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BearState]]></name></author>
<updated>2008-07-21T17:32:39+00:00</updated>
<id>https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=835#p835</id>
<link href="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=835#p835"/>
<title type="html"><![CDATA[Browsers as UI to Web Cloud Applications.]]></title>

<content type="html" xml:base="https://forums.whatwg.org/bb3/viewtopic.php?t=201&amp;p=835#p835"><![CDATA[
And here's another feature for the Koala wish list. <br /><br />Context Switching &amp; Scheduling must be possible in Koala. <br /><br />Tabbed browsers are fine, but for a web surfer to be able to readily switch between alternate contexts of an application ... or even to other applications is a highly desirable feature.  That's not to say that there aren't ways to do context switching with today's browsers. There are.  Bookmarks and Back and Forward reloading of previously viewed pages cleint side are in effect low level forms of context switching.  But we're talking something more here with Koala.  Context switching is more robust, allowing rapid access to application contexts, not just browser contexts. <br /><br />And with better event handling, scheduling becomes a dream come true. The browser user can set up web calenders to pop-up alerts for scheduled events.  It can start sessions or processes at specific times and have commencement conditional upon completion of some other session or process.  Again, the role of batch applications over the net come to prominance.  And with reliable scheduling, the user can be out soaking their toes in the sand at the beach.<br /><br />Quite naturally, logs of process or session executions become important features and playbacks, rarely heard of, even for operating systems will shine for the ability to roll back and redo processes that either failed or were being evaluated and tested.<br /><br />And please note that when we talk about scheduling, these are not administrator chores, but common setups that the user is empowered to do.<p>Statistics: Posted by <a href="https://forums.whatwg.org/bb3/memberlist.php?mode=viewprofile&amp;u=317">BearState</a> — Mon Jul 21, 2008 5:32 pm</p><hr />
]]></content>
</entry>
</feed>