<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"> <html lang="en-GB-hixie"> <head> <title> Web Applications 1.0 </title> <link href="/style/specification" rel="stylesheet" type="text/css"> <link href="/images/icon" rel="icon"> <style type="text/css"> h4 + .element { margin-top: -2.5em; padding-top: 2em; } h4 + p + .element { margin-top: -5em; padding-top: 4em; } .element { background: #EEFFEE; color: black; margin: 0 0 1em -1em; padding: 0 1em 0.25em 0.75em; border-left: solid #99FF99 0.25em; -padding: 0; /* that last decl is for IE6. Try removing it, it's hilarious! */ } </style> <body class="draft"> <div class="head"> <p> <a class="logo" href="http://www.whatwg.org/" rel="home"> <img
    alt="WHATWG" src="/images/logo"> </a> </p> <h1 id="web-applications"> Web Applications 1.0 </h1> <h2 class="no-num no-toc" id="early"> Early Working Draft &mdash; 1 <ins>January 2006 </ins> <del>September 2005 </del> </h2> <p> <ins>You can take part in this work. </ins> <a
    href="http://www.whatwg.org/mailing-list"> <ins>Join the working group's discussion list. </ins> </a> </p> <dl> <dt> This version: <dd> <a
     href="http://www.whatwg.org/specs/web-apps/2006-01-01/"> <ins>http://www.whatwg.org/specs/web-apps/2006-01-01/ </ins>  <del>http://www.whatwg.org/specs/web-apps/current-work/ </del> </a> <dt> Latest version: <dd> <a
     href="http://www.whatwg.org/specs/web-apps/current-work/"> http://www.whatwg.org/specs/web-apps/current-work/ </a> <dt> <ins>Previous versions: </ins> <dd> <a
     href="http://www.whatwg.org/specs/web-apps/2005-09-01/"> <ins>http://www.whatwg.org/specs/web-apps/2005-09-01/ </ins> </a> <ins>( </ins> <a href="diff-2005-09-01"> <ins>diffs </ins> </a> <ins>) </ins> <dt> Editor: <dd> Ian Hickson, <ins>Google, </ins> <del>Opera Software, </del> ian@hixie.ch </dl> <p class="copyright"> &copy; Copyright 2004, 2005 Apple Computer, Inc., Mozilla Foundation, and Opera Software ASA. </p> <p class="copyright"> You are granted a license to use, reproduce and create derivative works of this document. </p> </div> <hr> <h2 class="no-num no-toc" id="abstract"> Abstract </h2> <p> This specification introduces features to HTML and the DOM that ease the authoring of Web-based applications. Additions include the context menus, a direct-mode graphics canvas, inline popup windows, server-sent events, and more. <h2 class="no-num no-toc" id="status"> Status of this document </h2> <p> This is an archive copy of a working draft of Web Apps 1.0. It will be used as a milestone against which diffs can be generated, so that it is easier to track progress. Comments on this draft are very welcome, but it is suggested that you first check to see if the latest version has changed. If you do have comments, please send them to <a
   href="mailto:whatwg@whatwg.org"> whatwg@whatwg.org </a> . Thank you. <p> To find the latest version of this working draft, please follow the "Latest version" link above. <p> This draft may contain namespaces that use the <code> uuid: </code> URI scheme. These are temporary and will be changed before those parts of the specification are ready to be implemented in shipping products. <p> <ins>Sections marked </ins> <dfn id="tbw" title="TBW"> <ins>[TBW] </ins> </dfn> <ins>were placeholders for text not yet written. Sections marked </ins> <dfn id="wip"
   title="WIP"> <ins>[WIP] </ins> </dfn> <ins>were very early drafts that needed much more work. Other sections were first drafts that were ready for substantial comments. </ins> <p> <ins>Sections marked </ins> <dfn id="scs" title="SCS"> <ins>[SCS] </ins> </dfn> <ins>are sections intended to be self-contained (Self Contained Section). Such sections are considered logical units that it would make sense to implement independent of most of the rest of the specification, provided that enough of the infrastructure is already implemented. </ins> <h2 class="no-num no-toc" id="contents"> Table of contents </h2> <ul class="toc"> <li> <a href="#introduction"> <span class="secno"> 1. </span> Introduction </a> <ul class="toc"> <li> <a href="#scope"> <span class="secno"> 1.1. </span> Scope </a> <li> <a href="#structure"> <span class="secno"> 1.2. </span> Structure of this specification <span title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#requirements"> <span class="secno"> 1.3. </span> Requirements and ideas </a> <li> <a href="#relationship"> <span class="secno"> 1.4. </span> Relationship to HTML 4.01, XHTML 1.1, DOM2 HTML </a> <li> <a href="#relationship0"> <span class="secno"> 1.5. </span> Relationship to XHTML2 </a> <li> <a href="#relationship1"> <span class="secno"> 1.6. </span> Relationship to Web Forms 2.0 </a> <li> <a href="#relationship2"> <span class="secno"> 1.7. </span> Relationship to XUL, Avalon/XAML, and other proprietary UI languages </a> <li> <a href="#conformance"> <span class="secno"> 1.8. </span> Conformance requirements </a> <li> <a href="#terminology"> <span class="secno"> 1.9. </span> Terminology </a> <li> <a href="#miscellaneous"> <span class="secno"> 1.10. </span> Miscellaneous </a> </ul> <li> <a href="#semantics"> <span class="secno"> 2. </span> Semantics and structure of HTML elements </a> <ul class="toc"> <li> <a href="#introduction0"> <span class="secno"> 2.1. </span> Introduction <span title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#the-dom"> <span class="secno"> <ins>2.2. </ins> </span> <ins>The DOM </ins> </a> <ul class="toc"> <li> <a href="#dom-feature"> <span class="secno"> <ins>2.2.1. </ins> </span> <ins>DOM feature strings </ins> </a> <li> <a href="#reflecting"> <span class="secno"> <ins>2.2.2. </ins> </span> <ins>Reflecting content attributes in DOM attributes </ins> </a> <li> <a href="#event"> <span class="secno"> <ins>2.2.3. </ins> </span> <ins>Event listeners </ins> </a> <li> <a href="#event0"> <span class="secno"> <ins>2.2.4. </ins> </span> <ins>Event firing </ins> </a> <li> <a href="#the-textcontent"> <span class="secno"> <ins>2.2.5. </ins> </span> <ins>The </ins> <dfn id="textcontent"> <code> <ins>textContent </ins> </code> </dfn> <ins>attribute </ins> </a> <li> <a href="#common"> <span class="secno"> <ins>2.2.6. </ins> </span> <ins>Common DOM interfaces </ins> <span title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#the-document"> <span class="secno"> <ins>2.2.7. </ins> </span> <ins>The document </ins> <span title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#the-elements"> <span class="secno"> <ins>2.2.8. </ins> </span> <ins>The elements </ins> <span title="TBW"> <ins>[TBW] </ins> </span> </a> </ul> <li> <a href="#html-documents"> <span class="secno"> <ins>2.3. </ins> </span> <ins>HTML documents and document fragments </ins> </a> <ul class="toc"> <li> <a href="#semantics0"> <span class="secno"> <ins>2.3.1. </ins> <del>2.1.1. </del> </span> Semantics </a> <li> <a href="#structure0"> <span class="secno"> <ins>2.3.2. </ins> <del>2.1.2. </del> </span> Structure </a>    <del>2.1.3.  The DOM      2.1.3.1.  DOM feature strings     2.1.3.2.  Common DOM interfaces     2.1.3.3.  The document     2.1.3.4.  Reflecting content attributes in DOM attributes     2.1.3.5.  The   textContent   attribute </del>   <li> <a href="#kinds"> <span class="secno"> <ins>2.3.3. </ins> <del>2.1.4. </del> </span> Kinds of elements </a> <ul class="toc"> <li> <a href="#block-level"> <span class="secno"> <ins>2.3.3.1. </ins> <del>2.1.4.1. </del> </span> <dfn
          id="block-level0"> Block-level elements </dfn> </a> <li> <a href="#inline-level"> <span class="secno"> <ins>2.3.3.2. </ins> <del>2.1.4.2. </del> </span> <dfn
          id="inline-level0"> Inline-level content </dfn> </a> <li> <a href="#determining"> <span class="secno"> <ins>2.3.3.3. </ins> <del>2.1.4.3. </del> </span> <dfn
          id="determining1"> Determining if a particular element contains block-level elements or inline-level content </dfn> </a> <li> <a href="#interactive0"> <span class="secno"> <ins>2.3.3.4. </ins> </span> <dfn
          id="interactive2"> <del>2.1.4.4. </del>   Interactive elements </dfn> </a> </ul> <li> <a href="#global"> <span class="secno"> <ins>2.3.4. </ins> <del>2.1.5. </del> </span> Global attributes <span title="WIP"> <ins>[WIP] </ins> </span> </a> <li> <a href="#the-html"> <span class="secno"> <ins>2.3.5. </ins> <del>2.1.6. </del> </span> The <dfn
        id="html"> <code> html </code> </dfn> element </a> </ul> <li> <a href="#document"> <span class="secno"> <ins>2.4. </ins> <del>2.2. </del> </span> Document metadata </a> <ul class="toc"> <li> <a href="#the-head"> <span class="secno"> <ins>2.4.1. </ins> <del>2.2.1. </del> </span> The <dfn
        id="head"> <code> head </code> </dfn> element </a> <li> <a href="#the-title"> <span class="secno"> <ins>2.4.2. </ins> <del>2.2.2. </del> </span> The <dfn
        id="title"> <code> title </code> </dfn> element </a> <li> <a href="#the-base"> <span class="secno"> <ins>2.4.3. </ins> <del>2.2.3. </del> </span> The <dfn
        id="base"> <code> base </code> </dfn> element </a> <li> <a href="#the-link"> <span class="secno"> <ins>2.4.4. </ins> <del>2.2.4. </del> </span> The <dfn
        id="link"> <code> link </code> </dfn> element </a> <li> <a href="#the-meta"> <span class="secno"> <ins>2.4.5. </ins> <del>2.2.5. </del> </span> The <dfn
        id="meta"> <code> meta </code> </dfn> element </a> <ul class="toc"> <li> <a href="#charset"> <span class="secno"> <ins>2.4.5.1. </ins> <del>2.2.5.1. </del> </span> Specifying and establishing the document's character encoding </a> </ul> <li> <a href="#the-style"> <span class="secno"> <ins>2.4.6. </ins> <del>2.2.6. </del> </span> The <dfn
        id="style"> <code> style </code> </dfn> element </a> </ul> <li> <a href="#sections"> <span class="secno"> <ins>2.5. </ins> <del>2.3. </del> </span> Sections </a> <ul class="toc"> <li> <a href="#the-body"> <span class="secno"> <ins>2.5.1. </ins> <del>2.3.1. </del> </span> The <dfn
        id="body"> <code> body </code> </dfn> element </a> <li> <a href="#the-section"> <span class="secno"> <ins>2.5.2. </ins> <del>2.3.2. </del> </span> The <dfn
        id="section1"> <code> section </code> </dfn> element </a> <li> <a href="#the-nav"> <span class="secno"> <ins>2.5.3. </ins> <del>2.3.3. </del> </span> The <dfn
        id="nav"> <code> nav </code> </dfn> element </a> <li> <a href="#the-article"> <span class="secno"> <ins>2.5.4. </ins> <del>2.3.4. </del> </span> The <dfn
        id="article"> <code> article </code> </dfn> element </a> <li> <a href="#the-blockquote"> <span class="secno"> <ins>2.5.5. </ins> <del>2.3.5. </del> </span> The <dfn id="blockquote"> <code> blockquote </code> </dfn> element </a> <li> <a href="#the-aside"> <span class="secno"> <ins>2.5.6. </ins> <del>2.3.6. </del> </span> The <dfn
        id="aside"> <code> aside </code> </dfn> element </a> <li> <a href="#the-h1"> <span class="secno"> <ins>2.5.7. </ins> <del>2.3.7. </del> </span> The <dfn
        id="h1"> <code> h1 </code> </dfn> , <dfn id="h2"> <code> h2 </code> </dfn> , <dfn id="h3"> <code> h3 </code> </dfn> , <dfn
        id="h4"> <code> h4 </code> </dfn> , <dfn id="h5"> <code> h5 </code> </dfn> , and <dfn id="h6"> <code> h6 </code> </dfn> elements </a> <li> <a href="#the-header"> <span class="secno"> <ins>2.5.8. </ins> <del>2.3.8. </del> </span> The <dfn
        id="header"> <code> header </code> </dfn> element </a> <li> <a href="#the-footer"> <span class="secno"> <ins>2.5.9. </ins> <del>2.3.9. </del> </span> The <dfn
        id="footer"> <code> footer </code> </dfn> element </a> <li> <a href="#the-address"> <span class="secno"> <ins>2.5.10. </ins> <del>2.3.10. </del> </span> The <dfn
        id="address"> <code> address </code> </dfn> element </a> <li> <a href="#headings"> <span class="secno"> <ins>2.5.11. </ins> <del>2.3.11. </del> </span> <dfn
        id="headings0"> Headings and sections </dfn> </a> <ul class="toc"> <li> <a href="#outlines"> <span class="secno"> <ins>2.5.11.1. </ins> <del>2.3.11.1. </del> </span> Creating an outline </a> <li> <a href="#determining0"> <span class="secno"> <ins>2.5.11.2. </ins> <del>2.3.11.2. </del> </span> Determining which heading and section applies to a particular node </a> </ul> </ul> <li> <a href="#paragraphs"> <span class="secno"> <ins>2.6. </ins> <del>2.4. </del> </span> Paragraphs </a> <ul class="toc"> <li> <a href="#the-p"> <span class="secno"> <ins>2.6.1. </ins> <del>2.4.1. </del> </span> The <dfn
        id="p"> <code> p </code> </dfn> element </a> <li> <a href="#the-hr"> <span class="secno"> <ins>2.6.2. </ins> <del>2.4.2. </del> </span> The <dfn
        id="hr"> <code> hr </code> </dfn> element <span
        title="TBW"> <ins>[TBW] </ins> </span> </a> </ul> <li> <a href="#preformatted"> <span class="secno"> <ins>2.7. </ins> <del>2.5. </del> </span> Preformatted text </a> <ul class="toc"> <li> <a href="#the-pre"> <span class="secno"> <ins>2.7.1. </ins> <del>2.5.1. </del> </span> The <dfn
        id="pre"> <code> pre </code> </dfn> element </a> </ul> <li> <a href="#lists"> <span class="secno"> <ins>2.8. </ins> <del>2.6. </del> </span> Lists </a> <ul class="toc"> <li> <a href="#the-ol"> <span class="secno"> <ins>2.8.1. </ins> <del>2.6.1. </del> </span> The <dfn
        id="ol"> <code> ol </code> </dfn> element </a> <li> <a href="#the-ul"> <span class="secno"> <ins>2.8.2. </ins> <del>2.6.2. </del> </span> The <dfn
        id="ul"> <code> ul </code> </dfn> element </a> <li> <a href="#the-li"> <span class="secno"> <ins>2.8.3. </ins> <del>2.6.3. </del> </span> The <dfn
        id="li"> <code> li </code> </dfn> element </a> <li> <a href="#the-dl"> <span class="secno"> <ins>2.8.4. </ins> <del>2.6.4. </del> </span> The <dfn
        id="dl"> <code> dl </code> </dfn> element </a> <li> <a href="#the-dt"> <span class="secno"> <ins>2.8.5. </ins> <del>2.6.5. </del> </span> The <dfn
        id="dt"> <code> dt </code> </dfn> element </a> <li> <a href="#the-dd"> <span class="secno"> <ins>2.8.6. </ins> <del>2.6.6. </del> </span> The <dfn
        id="dd"> <code> dd </code> </dfn> element </a> </ul> <li> <a href="#phrase"> <span class="secno"> <ins>2.9. </ins> <del>2.7. </del> </span> Phrase elements </a> <ul class="toc"> <li> <a href="#the-a"> <span class="secno"> <ins>2.9.1. </ins> <del>2.7.1. </del> </span> The <dfn
        id="a"> <code> a </code> </dfn> element </a> <li> <a href="#the-em"> <span class="secno"> <ins>2.9.2. </ins> <del>2.7.2. </del> </span> The <dfn
        id="em"> <code> em </code> </dfn> element </a> <li> <a href="#the-strong"> <span class="secno"> <ins>2.9.3. </ins> <del>2.7.3. </del> </span> The <dfn
        id="strong"> <code> strong </code> </dfn> element </a> <li> <a href="#the-small"> <span class="secno"> <ins>2.9.4. </ins> <del>2.7.4. </del> </span> The <dfn
        id="small"> <code> small </code> </dfn> element </a> <li> <a href="#the-m"> <span class="secno"> <ins>2.9.5. </ins> <del>2.7.5. </del> </span> The <dfn
        id="m"> <code> m </code> </dfn> element </a> <li> <a href="#the-abbr"> <span class="secno"> <ins>2.9.6. </ins> <del>2.7.6. </del> </span> The <dfn
        id="abbr"> <code> abbr </code> </dfn> element </a> <li> <a href="#the-dfn"> <span class="secno"> <ins>2.9.7. </ins> <del>2.7.7. </del> </span> The <dfn
        id="dfn"> <code> dfn </code> </dfn> element </a> <li> <a href="#the-i"> <span class="secno"> <ins>2.9.8. </ins> <del>2.7.8. </del> </span> The <dfn
        id="i"> <code> i </code> </dfn> element </a> <li> <a href="#the-code"> <span class="secno"> <ins>2.9.9. </ins> <del>2.7.9. </del> </span> The <dfn
        id="code"> <code> code </code> </dfn> element </a> <li> <a href="#the-var"> <span class="secno"> <ins>2.9.10. </ins> <del>2.7.10. </del> </span> The <dfn
        id="var"> <code> var </code> </dfn> element </a> <li> <a href="#the-samp"> <span class="secno"> <ins>2.9.11. </ins> <del>2.7.11. </del> </span> The <dfn
        id="samp"> <code> samp </code> </dfn> element </a> <li> <a href="#the-kbd"> <span class="secno"> <ins>2.9.12. </ins> <del>2.7.12. </del> </span> The <dfn
        id="kbd"> <code> kbd </code> </dfn> element </a> <li> <a href="#the-sup"> <span class="secno"> <ins>2.9.13. </ins> <del>2.7.13. </del> </span> The <dfn
        id="sup"> <code> sup </code> </dfn> and <dfn
        id="sub"> <code> sub </code> </dfn> elements </a> <li> <a href="#the-q"> <span class="secno"> <ins>2.9.14. </ins> <del>2.7.14. </del> </span> The <dfn
        id="q"> <code> q </code> </dfn> element </a> <li> <a href="#the-cite"> <span class="secno"> <ins>2.9.15. </ins> <del>2.7.15. </del> </span> The <dfn
        id="cite"> <code> cite </code> </dfn> element </a> <li> <a href="#the-span"> <span class="secno"> <ins>2.9.16. </ins> <del>2.7.16. </del> </span> The <dfn
        id="span"> <code> span </code> </dfn> element </a> <li> <a href="#the-bdo"> <span class="secno"> <ins>2.9.17. </ins> <del>2.7.17. </del> </span> The <dfn
        id="bdo"> <code> bdo </code> </dfn> element </a> <li> <a href="#the-br"> <span class="secno"> <ins>2.9.18. </ins> <del>2.7.18. </del> </span> The <dfn
        id="br"> <code> br </code> </dfn> element </a> </ul> <li> <a href="#edits"> <span class="secno"> <ins>2.10. </ins> <del>2.8. </del> </span> Edits </a> <ul class="toc"> <li> <a href="#the-ins"> <span class="secno"> <ins>2.10.1. </ins> <del>2.8.1. </del> </span> The <dfn
        id="ins"> <code> ins </code> </dfn> element </a> <li> <a href="#the-del"> <span class="secno"> <ins>2.10.2. </ins> <del>2.8.2. </del> </span> The <dfn
        id="del"> <code> del </code> </dfn> element </a> <li> <a href="#attributes"> <span class="secno"> <ins>2.10.3. </ins> <del>2.8.3. </del> </span> Attributes common to <code> ins </code> and <code> del </code> elements </a> </ul> <li> <a href="#embedded"> <span class="secno"> <ins>2.11. </ins> <del>2.9. </del> </span> <dfn
      id="embedded0"> Embedded content </dfn> <span
      title="TBW"> <ins>[TBW] </ins> </span> </a> <ul class="toc"> <li> <a href="#the-img"> <span class="secno"> <ins>2.11.1. </ins> <del>2.9.1. </del> </span> The <dfn
        id="img"> <code> img </code> </dfn> element </a> </ul> <li> <a href="#tabular"> <span class="secno"> <ins>2.12. </ins> <del>2.10. </del> </span> Tabular data <span title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#forms"> <span class="secno"> <ins>2.13. </ins> <del>2.11. </del> </span> Forms <span
      title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#scripting"> <span class="secno"> <ins>2.14. </ins> <del>2.12. </del> </span> Scripting </a> <ul class="toc"> <li> <a href="#the-script"> <span class="secno"> <ins>2.14.1. </ins> <del>2.12.1. </del> </span> The <dfn
        id="script0"> <code> script </code> </dfn> element </a> <ul class="toc"> <li> <a href="#script"> <span class="secno"> <ins>2.14.1.1. </ins> <del>2.12.1.1. </del> </span> Script languages </a> </ul> <li> <a href="#the-noscript"> <span class="secno"> <ins>2.14.2. </ins> <del>2.12.2. </del> </span> The <dfn id="noscript"> <code> noscript </code> </dfn> element <span
        title="TBW"> <ins>[TBW] </ins> </span> </a> </ul> <li> <a href="#other"> <span class="secno"> <ins>2.15. </ins> <del>2.13. </del> </span> Other new elements <span title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#notes"> <span class="secno"> <ins>2.16. </ins> <del>2.14. </del> </span> Notes (draft sections to be moved elsewhere) <span title="TBW"> <ins>[TBW] </ins> </span> </a> <ul class="toc"> <li> <a href="#classes"> <span class="secno"> <ins>2.16.1. </ins> <del>2.14.1. </del> </span> Classes </a> <li> <a href="#link-types"> <span class="secno"> <ins>2.16.2. </ins> <del>2.14.2. </del> </span> Link types </a> <li> <a href="#document0"> <span class="secno"> <ins>2.16.3. </ins> <del>2.14.3. </del> </span> Document sections </a> <li> <a href="#section"> <span class="secno"> <ins>2.16.4. </ins> <del>2.14.4. </del> </span> Section headers </a> <li> <a href="#section0"> <span class="secno"> <ins>2.16.5. </ins> <del>2.14.5. </del> </span> <dfn
        id="section2"> Section groups </dfn> (tabs) </a> <li> <a href="#mutually"> <span class="secno"> <ins>2.16.6. </ins> <del>2.14.6. </del> </span> <dfn
        id="mutually0"> Mutually exclusive sections </dfn> </a> <li> <a href="#using"> <span class="secno"> <ins>2.16.7. </ins> <del>2.14.7. </del> </span> Using <code> switch </code> and <code> section </code> </a> </ul> <li> <a href="#scs-calendars">  <span class="secno"> <ins>2.17. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>2.15. </del> </span> Calendars: event data <span
      title="TBW"> <ins>[TBW] </ins> </span> </a> <ul class="toc"> <li> <a href="#intepreting"> <span class="secno"> <ins>2.17.1. </ins> <del>2.15.1. </del> </span> Intepreting calendar data </a> <li> <a href="#rendering"> <span class="secno"> <ins>2.17.2. </ins> <del>2.15.2. </del> </span> Rendering examples </a> </ul> <li> <a href="#scs-business">  <span class="secno"> <ins>2.18. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>2.16. </del> </span> Business cards: personal data <span
      title="TBW"> <ins>[TBW] </ins> </span> </a> <ul class="toc"> <li> <a href="#intepreting0"> <span class="secno"> <ins>2.18.1. </ins> <del>2.16.1. </del> </span> Intepreting card data </a> <li> <a href="#rendering0"> <span class="secno"> <ins>2.18.2. </ins> <del>2.16.2. </del> </span> Rendering examples </a> </ul> <li> <a href="#inline"> <span class="secno"> <ins>2.19. </ins> <del>2.17. </del> </span> Inline data <span
      title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#disclosure"> <span class="secno"> <ins>2.20. </ins> </span> <ins>Disclosure widget </ins> <span title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#gauges"> <span class="secno"> <ins>2.21. </ins> <del>2.18. </del> </span> Gauges <span
      title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#progress"> <span class="secno"> <ins>2.22. </ins> <del>2.19. </del> </span> Progress meters <span title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#interactive1">  <span class="secno"> <ins>2.23. </ins> </span> <ins>Interactive elements </ins> </a> <ul class="toc"> <li> <a href="#scs-the"> <span class="secno"> <ins>2.23.1. </ins> </span> <span
        title="SCS"> <ins>[SCS] </ins> </span> <ins>The </ins> <dfn
        id="datagrid"> <code> <ins>datagrid </ins> </code> </dfn> <ins>element </ins> <del>2.20.  Data grids and data trees </del> </a> <ul class="toc"> <li> <a href="#the-datagrid"> <span class="secno"> <ins>2.23.1.1. </ins> <del>2.20.1.  The   datagrid   element      2.20.1.1. </del> </span> The <code> datagrid </code> data model </a> <li> <a href="#the-data"> <span class="secno"> <ins>2.23.1.2. </ins> <del>2.20.1.2. </del> </span> The data provider interface </a> <li> <a href="#the-default"> <span class="secno"> <ins>2.23.1.3. </ins> <del>2.20.1.3. </del> </span> The default data provider </a> <ul class="toc"> <li> <a href="#commonDefaultDataGridMethodDefinitions"> <span
            class="secno"> <ins>2.23.1.3.1. </ins> <del>2.20.1.3.1. </del> </span> Common default data provider method definitions for cells </a> </ul> <li> <a href="#populating"> <span class="secno"> <ins>2.23.1.4. </ins> <del>2.20.1.4. </del> </span> Populating the <code> datagrid </code> element </a> <li> <a href="#updating"> <span class="secno"> <ins>2.23.1.5. </ins> <del>2.20.1.5. </del> </span> Updating the <code> datagrid </code> </a> <li> <a href="#requirements0"> <span class="secno"> <ins>2.23.1.6. </ins> <del>2.20.1.6. </del> </span> Requirements for interactive user agents </a> <li> <a href="#the-selection"> <span class="secno"> <ins>2.23.1.7. </ins> <del>2.20.1.7. </del> </span> The selection </a> <li> <a href="#columns"> <span class="secno"> <ins>2.23.1.8. </ins> <del>2.20.1.8. </del> </span> Columns and captions </a> </ul> <li> <a href="#the-command"> <span class="secno"> <ins>2.23.2. </ins> </span> <ins>The </ins> <dfn
        id="command"> <code> <ins>command </ins> </code> </dfn> <ins>element </ins> </a> <li> <a href="#the-menu"> <span class="secno"> <ins>2.23.3. </ins> </span> <ins>The </ins> <dfn
        id="menu"> <code> <ins>menu </ins> </code> </dfn> <ins>element </ins> </a> </ul> </ul> <li> <a href="#processing"> <span class="secno"> <ins>3. </ins> </span> <ins>Processing models </ins> </a> <ul class="toc"> <li> <a href="#commands"> <span class="secno"> <ins>3.1. </ins> </span> <ins>Commands </ins> </a> <ul class="toc"> <li> <a href="#using0"> <span class="secno"> <ins>3.1.1. </ins> </span> <dfn
        id="using5" title="a-command"> <ins>Using the </ins> <code> <ins>a </ins> </code> <ins>element to define a command </ins> </dfn> </a> <li> <a href="#using1"> <span class="secno"> <ins>3.1.2. </ins> </span> <dfn
        id="using6" title="button-command"> <ins>Using the </ins> <code> <ins>button </ins> </code> <ins>element to define a command </ins> </dfn> </a> <li> <a href="#using2"> <span class="secno"> <ins>3.1.3. </ins> </span> <dfn
        id="using7" title="input-command"> <ins>Using the </ins> <code> <ins>input </ins> </code> <ins>element to define a command </ins> </dfn> </a> <li> <a href="#using3"> <span class="secno"> <ins>3.1.4. </ins> </span> <dfn
        id="using8" title="option-command"> <ins>Using the </ins> <code> <ins>option </ins> </code> <ins>element to define a command </ins> </dfn> </a> <li> <a href="#using4"> <span class="secno"> <ins>3.1.5. </ins> </span> <ins>Using the </ins> <dfn
        id="command0" title="command-element"> <code> <ins>command </ins> </code> </dfn> <ins>element to define a command </ins> </a> </ul> <li> <a href="#forms0"> <span class="secno"> <ins>3.2. </ins> </span> <ins>Forms </ins> <span
      title="TBW"> <ins>[TBW] </ins> </span> </a> <ul class="toc"> <li> <a href="#form-submission"> <span class="secno"> <ins>3.2.1. </ins> </span> <ins>Form submission </ins> <span title="TBW"> <ins>[TBW] </ins> </span> </a> </ul> <li> <a href="#menus"> <span class="secno"> <ins>3.3. </ins> </span> <ins>Menus </ins> </a> <ul class="toc"> <li> <a href="#introduction1"> <span class="secno"> <ins>3.3.1. </ins> </span> <ins>Introduction </ins> <span title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#building"> <span class="secno"> <ins>3.3.2. </ins> </span> <dfn
        id="building0"> <ins>Building menus </ins> </dfn> </a> <li> <a href="#context"> <span class="secno"> <ins>3.3.3. </ins> </span> <dfn
        id="context0"> <ins>Context menus </ins> </dfn> </a> <li> <a href="#toolbars"> <span class="secno"> <ins>3.3.4. </ins> </span> <dfn
        id="toolbars0"> <ins>Toolbars </ins> </dfn> </a> </ul> <li> <a href="#repetition"> <span class="secno"> <ins>3.4. </ins> </span> <ins>Repetition templates </ins> <span title="TBW"> <ins>[TBW] </ins> </span> </a> </ul> <li> <a href="#browsing"> <span class="secno"> <ins>4. </ins> <del>3. </del> </span> Browsing contexts </a> <ul class="toc"> <li> <a href="#the-documentwindow"> <span class="secno"> <ins>4.1. </ins> <del>3.1. </del> </span> The <code> DocumentWindow </code> interface </a> <li> <a href="#the-window"> <span class="secno"> <ins>4.2. </ins> <del>3.2. </del> </span> The <code> Window </code> interface </a> <li> <a href="#events"> <span class="secno"> <ins>4.3. </ins> </span> <ins>Events </ins> </a> <li> <a href="#focus"> <span class="secno"> <ins>4.4. </ins> </span> <ins>Focus </ins> <span
      title="WIP"> <ins>[WIP] </ins> </span> </a> <ul class="toc"> <li> <a href="#the-tabindex">  <span class="secno"> <ins>4.4.1. </ins> </span> <ins>The </ins> <dfn
        id="tabindex"> <code> <ins>tabindex </ins> </code> </dfn> <ins>Attribute </ins> </a> <li> <a href="#the-elementfocus"> <span class="secno"> <ins>4.4.2. </ins> </span> <ins>The </ins> <dfn id="elementfocus"> <code> <ins>ElementFocus </ins> </code> </dfn> <ins>interface </ins> </a> <li> <a href="#the-documentfocus"> <span class="secno"> <ins>4.4.3. </ins> </span> <ins>The </ins> <dfn id="documentfocus"> <code> <ins>DocumentFocus </ins> </code> </dfn> <ins>interface </ins> </a> </ul> <li> <a href="#scs-runtime"> <span class="secno"> <ins>4.5. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>3.2.1. </del> </span> Runtime script errors </a> <li> <a href="#scs-timers">  <span class="secno"> <ins>4.6. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>3.2.2. </del> </span> Timers </a>  <li> <a href="#scs-session">  <span class="secno"> <ins>4.7. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>3.3. </del> </span> Session history and navigation </a> <ul class="toc"> <li> <a href="#the-session"> <span class="secno"> <ins>4.7.1. </ins> </span> <ins>The </ins> <dfn
        id="session"> <del>3.3.1.  The </del>  session history </dfn> of browsing contexts </a> <li> <a href="#the-history"> <span class="secno"> <ins>4.7.2. </ins> <del>3.3.2. </del> </span> The <code> History </code> interface </a> <li> <a href="#activating"> <span class="secno"> <ins>4.7.3. </ins> <del>3.3.3. </del> </span> <dfn
        id="activating0" title="activate the state object"> Activating state objects </dfn> </a> <li> <a href="#the-location"> <span class="secno"> <ins>4.7.4. </ins> <del>3.3.4. </del> </span> The <code> Location </code> interface </a> <li> <a href="#history-notes"> <span class="secno"> <ins>4.7.5. </ins> <del>3.3.5. </del> </span> Implementation notes for session history </a> </ul> <li> <a href="#scs-client-side">  <span class="secno"> <ins>4.8. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>3.4. </del> </span> Client-side session and persistent storage </a> <ul class="toc"> <li> <a href="#introduction2">  <span class="secno"> <ins>4.8.1. </ins> <del>3.4.1. </del> </span> Introduction </a> <li> <a href="#the-storage"> <span class="secno"> <ins>4.8.2. </ins> <del>3.4.2. </del> </span> The <code> Storage </code> interface </a> <li> <a href="#the-sessionstorage"> <span class="secno"> <ins>4.8.3. </ins> <del>3.4.3. </del> </span> The <code title="dom-sessionStorage"> sessionStorage </code> attribute </a> <li> <a href="#the-globalstorage"> <span class="secno"> <ins>4.8.4. </ins> <del>3.4.4. </del> </span> The <code title="dom-globalStorage"> globalStorage </code> attribute </a> <li> <a href="#the-storage0"> <span class="secno"> <ins>4.8.5. </ins> <del>3.4.5. </del> </span> The <code title="event-storage"> storage </code> event </a> <li> <a href="#miscellaneous0"> <span class="secno"> <ins>4.8.6. </ins> <del>3.4.6. </del> </span> Miscellaneous implementation requirements for storage areas </a> <ul class="toc"> <li> <a href="#disk-space"> <span class="secno"> <ins>4.8.6.1. </ins> <del>3.4.6.1. </del> </span> Disk space </a> <li> <a href="#threads"> <span class="secno"> <ins>4.8.6.2. </ins> <del>3.4.6.2. </del> </span> Threads </a> </ul> <li> <a href="#security"> <span class="secno"> <ins>4.8.7. </ins> <del>3.4.7. </del> </span> Security and privacy </a> <ul class="toc"> <li> <a href="#user-tracking"> <span class="secno"> <ins>4.8.7.1. </ins> <del>3.4.7.1. </del> </span> User tracking </a> <li> <a href="#cookie"> <span class="secno"> <ins>4.8.7.2. </ins> <del>3.4.7.2. </del> </span> Cookie resurrection </a> <li> <a href="#integrity"> <span class="secno"> <ins>4.8.7.3. </ins> <del>3.4.7.3. </del> </span> Integrity of "public" storage areas </a> <li> <a href="#cross-protocol"> <span class="secno"> <ins>4.8.7.4. </ins> <del>3.4.7.4. </del> </span> Cross-protocol attacks </a> <li> <a href="#cross-directory"> <span class="secno"> <ins>4.8.7.5. </ins> <del>3.4.7.5. </del> </span> Cross-directory attacks </a> <li> <a href="#implementation"> <span class="secno"> <ins>4.8.7.6. </ins> <del>3.4.7.6. </del> </span> Implementation risks </a> </ul> </ul> <li> <a href="#scs-browser">  <span class="secno"> <ins>4.9. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> </span> <ins>Browser state </ins> <del>3.5.  Selecting elements </del> </a> <li> <a href="#scs-alternate">  <span class="secno"> <ins>4.10. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>3.6.  Navigating DOM trees     3.7.  Serialization and parsed fragment replacement     3.8.  Events      3.8.1.  Event listeners      3.9. </del> </span> Alternate style <ins>sheets: the </ins> <code> <ins>DocumentStyle </ins> </code> <ins>interface </ins> <del>sheets </del> </a> <ul class="toc"> <li> <a href="#dynamically"> <span class="secno"> <ins>4.10.1. </ins> <del>3.9.1. </del> </span> Dynamically adding new style sheets </a> <ul class="toc"> <li> <a href="#adding"> <span class="secno"> <ins>4.10.1.1. </ins> <del>3.9.1.1. </del> </span> Adding style sheets </a> <li> <a href="#changing"> <span class="secno"> <ins>4.10.1.2. </ins> <del>3.9.1.2. </del> </span> Changing the preferred style sheet set </a> <li> <a href="#examples"> <span class="secno"> <ins>4.10.1.3. </ins> <del>3.9.1.3. </del> </span> Examples </a> </ul> <li> <a href="#interaction"> <span class="secno"> <ins>4.10.2. </ins> <del>3.9.2. </del> </span> Interaction with the User Interface </a> <ul class="toc"> <li> <a href="#persisting"> <span class="secno"> <ins>4.10.2.1. </ins> <del>3.9.2.1. </del> </span> Persisting the selected style sheet set </a> </ul> <li> <a href="#future"> <span class="secno"> <ins>4.10.3. </ins> <del>3.9.3. </del> </span> Future compatibility      <del>3.10.  Focus      3.10.1.  The   tabindex   Attribute     3.10.2.  The   ElementFocus   interface     3.10.3.  The   DocumentFocus   interface </del> </a> </ul> </ul> <li> <a href="#browser">  <span class="secno"> <ins>5. </ins> </span> <ins>Browser environment integration </ins> <del>4.  Editing </del> </a> <ul class="toc"> <li> <a href="#scs-editing">  <span class="secno"> <ins>5.1. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> </span> <ins>Editing and the </ins> <code> <ins>contenteditable </ins> <del>4.1.  The  contentEditable </del> </code> attribute </a> <ul class="toc"> <li> <a href="#user-editing">  <span class="secno"> <ins>5.1.1. </ins> </span> <ins>User editing actions </ins> </a> </ul> <del>4.2.  Undo history </del>  <li> <a href="#scs-drag">  <span class="secno"> <ins>5.2. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> </span> <dfn id="drag-and"> <del>4.3. </del>   Drag and drop </dfn> </a> <ul class="toc"> <li> <a href="#drag-and-drop"> <span class="secno"> <ins>5.2.1. </ins> <del>4.3.1. </del> </span> Drag-and-drop processing model </a> <ul class="toc"> <li> <a href="#for-drags"> <span class="secno"> <ins>5.2.1.1. </ins> <del>4.3.1.1. </del> </span> For drags initiated within the document </a> <li> <a href="#for-drags0"> <span class="secno"> <ins>5.2.1.2. </ins> <del>4.3.1.2. </del> </span> For drags initiated in other documents or applications <span
          title="TBW"> <ins>[TBW] </ins> </span> </a> </ul> <li> <a href="#the-draggable"> <span class="secno"> <ins>5.2.2. </ins> <del>4.3.2. </del> </span> The <dfn id="draggable"
        title="attr-draggable"> <code> draggable </code> </dfn> attribute <span
        title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#the-dragevent"> <span class="secno"> <ins>5.2.3. </ins> <del>4.3.3. </del> </span> The <code> DragEvent </code> interface and the <dfn id="datatransfer"
        title="dom-dataTransfer"> <code> dataTransfer </code> </dfn> object <span
        title="WIP"> <ins>[WIP] </ins> </span> </a> <li> <a href="#events0"> <span class="secno"> <ins>5.2.4. </ins> <del>4.3.4. </del> </span> Events fired during a drag-and-drop action </a> </ul> <li> <a href="#undo"> <span class="secno"> <ins>5.3. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> </span> <dfn id="undo-history"> <ins>Undo history </ins> </dfn> </a> <ul class="toc"> <li> <a href="#the-undomanager"> <span class="secno"> <ins>5.3.1. </ins> </span> <ins>The </ins> <code> <ins>UndoManager </ins> </code> <ins>interface </ins> </a> <li> <a href="#undo-moving"> <span class="secno"> <ins>5.3.2. </ins> </span> <dfn
        id="undo-moving0" title="do-undo"> <ins>Undo: moving back in the undo transaction history </ins> </dfn> </a> <li> <a href="#redo-moving"> <span class="secno"> <ins>5.3.3. </ins> </span> <dfn
        id="redo-moving0" title="do-redo"> <ins>Redo: moving forward in the undo transaction history </ins> </dfn> </a> <li> <a href="#the-undomanagerevent"> <span class="secno"> <ins>5.3.4. </ins> </span> <ins>The </ins> <code> <ins>UndoManagerEvent </ins> </code> <ins>interface and the </ins> <code
        title="event-undo"> <ins>undo </ins> </code> <ins>and </ins> <code
        title="event-redo"> <ins>redo </ins> </code> <ins>events </ins> </a> <li> <a href="#implementation0"> <span class="secno"> <ins>5.3.5. </ins> </span> <ins>Implementation notes </ins> </a> </ul> <li> <a href="#scs-command"> <span class="secno"> <ins>5.4. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> </span> <ins>Command APIs </ins> </a> <li> <a href="#selection"> <span class="secno"> <ins>5.5. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> </span> <ins>The text selection APIs </ins> </a> <ul class="toc"> <li> <a href="#apis-for"> <span class="secno"> <ins>5.5.1. </ins> </span> <ins>APIs for the browsing context selection </ins> </a> <li> <a href="#apis-for0"> <span class="secno"> <ins>5.5.2. </ins> </span> <ins>APIs for the text field selections </ins> </a> </ul> </ul> <li> <a href="#multimedia"> <span class="secno"> <ins>6. </ins> <del>5. </del> </span> Multimedia </a> <ul class="toc"> <li> <a href="#scs-dynamic">  <span class="secno"> <ins>6.1. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>5.1. </del> </span> Dynamic graphics: The bitmap canvas </a> <ul class="toc"> <li> <a href="#the-2d"> <span class="secno"> <ins>6.1.1. </ins> <del>5.1.1. </del> </span> The 2D context </a> <ul class="toc"> <li> <a href="#the-canvas"> <span class="secno"> <ins>6.1.1.1. </ins> <del>5.1.1.1. </del> </span> The canvas state </a> <li> <a href="#transformations"> <span class="secno"> <ins>6.1.1.2. </ins> <del>5.1.1.2. </del> </span> <dfn id="transformations0"> Transformations </dfn> </a> <li> <a href="#compositing"> <span class="secno"> <ins>6.1.1.3. </ins> <del>5.1.1.3. </del> </span> Compositing </a> <li> <a href="#colours"> <span class="secno"> <ins>6.1.1.4. </ins> <del>5.1.1.4. </del> </span> Colours and styles </a> <li> <a href="#line-styles"> <span class="secno"> <ins>6.1.1.5. </ins> <del>5.1.1.5. </del> </span> Line styles </a> <li> <a href="#shadows"> <span class="secno"> <ins>6.1.1.6. </ins> <del>5.1.1.6. </del> </span> <dfn
          id="shadows0"> Shadows </dfn> </a> <li> <a href="#shapes"> <span class="secno"> <ins>6.1.1.7. </ins> <del>5.1.1.7. </del> </span> Shapes </a> <li> <a href="#paths"> <span class="secno"> <ins>6.1.1.8. </ins> <del>5.1.1.8. </del> </span> Paths </a> <li> <a href="#images"> <span class="secno"> <ins>6.1.1.9. </ins> <del>5.1.1.9. </del> </span> Images </a> <li> <a href="#drawing"> <span class="secno"> <ins>6.1.1.10. </ins> <del>5.1.1.10. </del> </span> Drawing model </a> </ul> <li> <a href="#the-3d"> <span class="secno"> <ins>6.1.2. </ins> <del>5.1.2. </del> </span> The 3D context </a> </ul> <li> <a href="#scs-sound">  <span class="secno"> <ins>6.2. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>5.2. </del> </span> Sound </a> </ul> <li> <a href="#communication"> <span class="secno"> <ins>7. </ins> <del>6. </del> </span> Communication </a> <ul class="toc"> <li> <a href="#scs-server-sent">  <span class="secno"> <ins>7.1. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>6.1. </del> </span> Server-sent DOM events </a> <ul class="toc"> <li> <a href="#the-event-source"> <span class="secno"> <ins>7.1.1. </ins> <del>6.1.1. </del> </span> The <dfn id="event-source"> <code> event-source </code> </dfn> element </a> <li> <a href="#the-remoteeventtarget"> <span class="secno"> <ins>7.1.2. </ins> <del>6.1.2. </del> </span> The <dfn
        id="remoteeventtarget"> <code> RemoteEventTarget </code> </dfn> interface </a> <li> <a href="#processing0">  <span class="secno"> <ins>7.1.3. </ins> <del>6.1.3. </del> </span> Processing model </a> <li> <a href="#the-event"> <span class="secno"> <ins>7.1.4. </ins> <del>6.1.4. </del> </span> The event stream format </a> <li> <a href="#event-stream-interpretation"> <span class="secno"> <ins>7.1.5. </ins> <del>6.1.5. </del> </span> Event stream interpretation </a> <li> <a href="#the-remoteevent"> <span class="secno"> <ins>7.1.6. </ins> <del>6.1.6. </del> </span> The <code> RemoteEvent </code> interface </a> <li> <a href="#example">  <span class="secno"> <ins>7.1.7. </ins> <del>6.1.7. </del> </span> Example </a> </ul> <li> <a href="#scripted-http"> <span class="secno"> <ins>7.2. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>6.2. </del> </span> Scripted HTTP: <code> XMLHttpRequest </code> </a> <li> <a href="#scs-network">  <span class="secno"> <ins>7.3. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>6.3. </del> </span> Network connections </a> <ul class="toc"> <li> <a href="#introduction3"> <span class="secno"> <ins>7.3.1. </ins> </span> <ins>Introduction </ins> <span title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#the-connection"> <span class="secno"> <ins>7.3.2. </ins> </span> <ins>The </ins> <code> <ins>Connection </ins> </code> <ins>interface </ins> </a> <li> <a href="#connection"> <span class="secno"> <ins>7.3.3. </ins> </span> <ins>Connection Events </ins> </a> <li> <a href="#tcp-connections"> <span class="secno"> <ins>7.3.4. </ins> </span> <del>6.3.1. </del>   TCP connections  </a> <li> <a href="#broadcast"> <span class="secno"> <ins>7.3.5. </ins> </span> <del>6.3.2. </del>   Broadcast <ins>connections </ins> </a> <ul class="toc"> <li> <a href="#broadcasting"> <span class="secno"> <ins>7.3.5.1. </ins> </span> <ins>Broadcasting over TCP/IP </ins> </a> <li> <a href="#broadcasting0"> <span class="secno"> <ins>7.3.5.2. </ins> </span> <ins>Broadcasting over Bluetooth </ins> </a> <li> <a href="#broadcasting1"> <span class="secno"> <ins>7.3.5.3. </ins> </span> <ins>Broadcasting over IrDA </ins> </a> </ul> <li> <a href="#peer-to-peer"> <span class="secno"> <ins>7.3.6. </ins> </span> <ins>Peer-to-peer connections </ins> </a> <ul class="toc"> <li> <a href="#peer-to-peer0"> <span class="secno"> <ins>7.3.6.1. </ins> </span> <ins>Peer-to-peer connections over TCP/IP </ins> </a> <li> <a href="#peer-to-peer1"> <span class="secno"> <ins>7.3.6.2. </ins> </span> <ins>Peer-to-peer connections over Bluetooth </ins> </a> <li> <a href="#peer-to-peer2"> <span class="secno"> <ins>7.3.6.3. </ins> </span> <ins>Peer-to-peer connections over IrDA </ins> </a> </ul> <li> <a href="#the-common"> <span class="secno"> <ins>7.3.7. </ins> </span> <ins>The common protocol for TCP-based connections </ins> </a> <ul class="toc"> <li> <a href="#clients"> <span class="secno"> <ins>7.3.7.1. </ins> </span> <dfn
          id="clients0"> <ins>Clients connecting over TCP </ins> <del>formats </del> </dfn> </a> <li> <a href="#servers">  <span class="secno"> <ins>7.3.7.2. </ins> </span> <dfn
          id="servers0"> <ins>Servers accepting connections over TCP </ins> <del>6.3.3.   Peer connection formats </del> </dfn> </a> <li> <a href="#sending">  <span class="secno"> <ins>7.3.7.3. </ins> </span> <dfn
          id="sending0"> <ins>Sending and receiving data over TCP </ins> <del>6.3.4.   Announcing peer connections </del> </dfn> </a> </ul> <li> <a href="#security0"> <span class="secno"> <ins>7.3.8. </ins> </span> <ins>Security </ins> </a> <li> <a href="#relationship3"> <span class="secno"> <ins>7.3.9. </ins> </span> <ins>Relationship to other standards </ins> </a> </ul> <li> <a href="#crossDocumentMessages"> <span class="secno"> <ins>7.4. </ins> </span> <span title="SCS"> <ins>[SCS] </ins> <del>6.4. </del> </span> Cross-document messaging </a> <ul class="toc"> <li> <a href="#definitions"> <span class="secno"> <ins>7.4.1. </ins> <del>6.4.1. </del> </span> Definitions </a> <li> <a href="#processing1">  <span class="secno"> <ins>7.4.2. </ins> <del>6.4.2. </del> </span> Processing model </a> </ul> </ul> <li> <a href="#the-html0"> <span class="secno"> <ins>8. </ins> </span> <ins>The HTML syntax </ins> </a> <ul class="toc"> <li> <a href="#writing"> <span class="secno"> <ins>8.1. </ins> </span> <ins>Writing HTML documents </ins> <span title="TBW"> <ins>[TBW] </ins> </span> </a> <li> <a href="#parsing"> <span class="secno"> <ins>8.2. </ins> </span> <span
      title="SCS"> <ins>[SCS] </ins> <del>7. </del> </span> Parsing <ins>HTML documents </ins> <span
      title="TBW"> <ins>[TBW] </ins> </span> </a> </ul>  <li> <a href="#rendering1"> <span class="secno"> <ins>9. </ins> <del>8. </del> </span> Rendering <span
    title="TBW"> <ins>[TBW] </ins> </span> </a> <ul class="toc"> <li> <a href="#rendering2"> <span class="secno"> <ins>9.1. </ins> <del>8.1. </del> </span> Rendering and the DOM      <del>9.  Menus, buttons and commands      9.1.  Tutorial     9.2.   Commands       9.2.1.  The   command   attribute     9.2.2.  The  a  element and commands      9.2.2.1.   Using the  a  element to define a command      9.2.2.2.  Using the  a  element with the  command  attribute      9.2.3.  The  button  element and commands      9.2.3.1.   Using the  button  element to define a command      9.2.3.2.  Using the  button  element with the  command  attribute      9.2.4.  The  input  element and commands      9.2.4.1.   Using the  input  element to define a command      9.2.4.2.  Using the  input  element with the  command  attribute      9.2.5.  The  option  element and commands      9.2.5.1.   Using the  option  element to define a command      9.2.5.2.  Using the  option  element with the  command  attribute      9.2.6.  The  command  element and commands      9.2.6.1.  Using the   command   element to define a command     9.2.6.2.  Using the  command  element with the  command  attribute     9.2.6.3.  Command Sets      9.2.7.  The 'icon' property     9.2.8.  CSS pseudo-classes and commands      9.3.  Menus      9.3.1.  The   menu   element      9.3.1.1.  Menu labels      9.3.1.1.1.  The   menulabel   element      9.3.1.2.  Content model of menus     9.3.1.3.  Using  optgroup  s as menus     9.3.1.4.  Building menus     9.3.1.5.  Displaying menus      9.3.2.   Menu bars  : the   menubar   element      9.3.2.1.  Displaying menu bars inline     9.3.2.2.  Displaying menu bars as menu bars      9.3.3.   Menu links      9.3.4.  Context menus      9.4.   Keyboard shortcuts </del>  </a> </ul> <li> <a href="#things"> <span class="secno"> 10. </span> Things that you can't do with this specification because they are better handled using other technologies that are further described herein </a> <ul class="toc"> <li> <a href="#localisation"> <span class="secno"> 10.1. </span> Localisation </a> <li> <a href="#declarative"> <span class="secno"> 10.2. </span> Declarative 2D vector graphics and animation </a> <li> <a href="#declarative0"> <span class="secno"> 10.3. </span> Declarative 3D scenes </a> </ul> <li class="no-num"> <a href="#references"> References <span
    title="TBW"> <ins>[TBW] </ins> </span> </a> <li class="no-num"> <a href="#acknowledgements"> Acknowledgements </a> </ul> <hr> <h2 id="introduction"> <span class="secno"> 1. </span> Introduction </h2> <p> The World Wide Web's markup language has always been HTML. HTML was primarily designed as a language for semantically describing scientific documents, although its general design and adaptations over the years has enabled it to be used to describe a number of other types of documents. <p> The main area that has not been adequately addressed by HTML is a vague subject referred to as Web Applications. This specification attempts to rectify this, while at the same time updating the HTML specifications to address issues raised in the past few years. <h3 id="scope"> <span class="secno"> 1.1. </span> Scope </h3> <p> This specification is limited to providing a semantic-level markup language and associated semantic-level scripting APIs for authoring accessible pages on the Web ranging from static documents to dynamic applications. <p> The scope of this specification does not include addressing presentation concerns. <p> The scope of this specification does not include documenting every HTML or DOM feature supported by Web browsers. Browsers support many features that are considered to be very bad for accessibility or that are otherwise inappropriate. For example, the <code> blink </code> element is clearly presentational and authors wishing to cause text to blink should instead use CSS. <p> The scope of this specification is not to describe an entire operating system. In particular, office productivity applications, image manipulation, and other applications that users would be expected to use with high-end workstations on a daily basis are out of scope. In terms of applications, this specification is targetted specifically at applications that would be expected to be used by users on an occasional basis, or regularly but from disparate locations. For instance online purchasing systems, searching systems, games (especially multiplayer online games), public telephone books or address books, communications software (e-mail clients, instant messaging clients, discussion software), etc. <p> For sophisticated cross-platform applications, there already exist several proprietary solutions (such as Mozilla's XUL and Macromedia's Flash). These solutions are evolving faster than any standards process could follow, and the requirements are evolving even faster. These systems are also significantly more complicated to specify, and are orders of magnitude more difficult to achieve interoperability with, than the solutions described in this document. Platform-specific solutions for such sophisticated applications (for example the MacOS X Core APIs) are even further ahead. <h3 id="structure"> <span class="secno"> 1.2. </span> Structure of this specification <span title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p class="big-issue"> This spec is probably big enough to need a guide as to where to look for various things. Hence once the structure is stable we should probably fill out this section. <h3 id="requirements"> <span class="secno"> 1.3. </span> Requirements and ideas </h3> <p class="big-issue"> This section will probably be dropped in due course. <p> HTML, CSS, DOM, and JavaScript provide enough power that Web developers have managed to base entire businesses on them. What is required are extensions to these technologies to provide much-needed features such as: <ul> <li> Native pop-up menus and context menus. <li> Inline markup for pop-up windows, for example for dialog boxes or tool palettes, so that dialogs need not be defined in separate files. <li> Command updating: applications that have several access points for the same feature, for instance a menu item and a tool-bar button, would benefit from having to disable such commands only once, instead of having to keep each access point synchronized with the feature's availability at all times. Similarly menu items or tool-bar buttons that represent a toggle state could automatically stay synchronized whenever toggled. <li> Server-sent events: triggering DOM3 Events from the server-side, for example for tickers or status updates. <li> Client-server communications methods that do not require page loads, enabling on-demand data retrieval (where the UA automatically fetches data from the server as required), remote procedure calls (where script can invoke code on the server side and get an XML fragment in return), etc. <li> More device-independent DOM events: The DOM event set needs device-independent events, such as events that fire when a button or link is activated, whether via the mouse or the keyboard. <code> DOMActivate </code> is a start, but it lacks equivalent HTML attributes, and additional events may be needed. </li> <li> Sortable and multicolumn tree views and list views with rich formatting. </li> <li> Rich text editing: an underlying architecture upon which domain-specific editors can be created, including things like control over the caret position. <li> A predefined HTML editor based on the rich text editing architecture. <li> Drag and drop APIs. <li> Text selection manipulation APIs. <li> Clipboard APIs (if the security and privacy concerns can be addressed). </li> </ul> <p> Some less important features would be good to have as well: <ul> <li> Window-based state management (so that new windows don't interfere with existing sessions), for example implemented as a per-domain, per-window "file system". This would allow multiple instances of the same application (from the same site) to run without the instances overwriting each other's cookies. <li> Elements for semantics commonly found in applications, such as &lt;byline&gt;, &lt;footer&gt;, &lt;section&gt;, &lt;nav&gt;, etc. <li> Markup to denote <span> <a href="#mutually1"> mutually exclusive sections </a> </span> (as in the commonly seen wizard interfaces). </li> <li> Better defined user authentication state handling. (Being able to "log out" of sites reliably, for instance, or being able to integrate the HTTP authentication model into the Web page.) </ul> <p> Several of the features in these two lists have been supported in non-standard ways by some user agents for some time. <h3 id="relationship"> <span class="secno"> 1.4. </span> Relationship to HTML 4.01, XHTML 1.1, DOM2 HTML </h3> <p> This specification represents a new version of HTML4 and XHTML1, along with a new version of the associated DOM2 HTML API. Migration from HTML4 or XHTML1 to the format and APIs described in this specification should in most cases be straightforward, as care has been taken to ensure that backwards-compatibility is retained. </p> <h3 id="relationship0"> <span class="secno"> 1.5. </span> Relationship to XHTML2 </h3> <p> XHTML2 <a href="#refsXHTML2"> [XHTML2] </a> defines a new HTML vocabulary with better features for hyperlinks, multimedia content, annotating document edits, rich metadata, declarative interactive forms, and describing the semantics of human literary works such as poems and scientific papers. <p> However, it lacks elements to express the semantics of many of the non-document types of content often seen on the Web. For instance, forum sites, auction sites, search engines, online shops, and the like, do not fit the document metaphor well, and are not covered by XHTML2. <p> <em> This </em> specification aims to extend HTML so that it is also suitable in these contexts. </p> <p> XHTML2 and this specification use different namespaces and therefore can both be implemented in the same XML processor. <h3 id="relationship1"> <span class="secno"> 1.6. </span> Relationship to Web Forms 2.0 </h3> <p> This specification is designed to complement Web Forms 2.0. <a
   href="#refsWF2"> [WF2] </a> Where Web Forms concentrates on input controls, data validation, and form submission, this specification concentrates on client-side user interface features needed to create modern applications. <p class="big-issue"> Eventually WF2 will simply be folded into this spec. </p> <h3 id="relationship2"> <span class="secno"> 1.7. </span> Relationship to XUL, Avalon/XAML, and other proprietary UI languages </h3> <p> This specification is independent of the various proprietary UI languages that various vendors provide. </p> <h3 id="conformance"> <span class="secno"> 1.8. </span> Conformance requirements </h3> <p> As well as sections marked as non-normative, all diagrams, examples, and notes in this specification are non-normative. Everything else in this specification is normative. <p> The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this document are to be interpreted as described in <a
   href="#refsRFC2119"> [RFC2119] </a> . For readability, these words do not appear in all uppercase letters in this specification. </p> <p> This specification describes the conformance criteria for user agents (implementations and their implementors) and documents (and their authors). <p> Conformance requirements phrased as requirements on elements, attributes, methods or objects are conformance requirements on user agents. <p> User agents fall into several (overlapping) categories with different conformance requirements. <dl> <dt id="interactive"> Web browsers and other interactive user agents <dd> <p> Web browsers that support <span> <a href="#xhtml"> XHTML </a> </span> must process elements and attributes from the XHTML namespace found in XML documents as described in this specification, so that users can interact with them, unless the semantics of those elements have been overridden by other specifications. </p> <p class="example"> A conforming XHTML processor would, upon finding an XHTML <code> <a href="#script1"> script </a> </code> element in an XML document, execute the script contained in that element. However, if the element is found within an XSLT transformation sheet (assuming the UA also supports XSLT), then the processor would instead treat the <code> <a
     href="#script1"> script </a> </code> element as an opaque element that forms part of the transform. </p> <p> Web browsers that support <span> <a href="#html1"> HTML </a> </span> must process documents labelled as <code> text/html </code> as described in this specification, so that users can interact with them. </p> <dt id="non-interactive"> Non-interactive presentation user agents <dd> <p> User agents that process HTML and XHTML documents purely to render non-interactive versions of them must comply to the same conformance criteria as Web browsers, except that they are exempt from requirements regarding user interaction. </p> <p class="note"> Typical examples of non-interactive presentation user agents are printers (static UAs) and overhead displays (dynamic UAs). It is expected that most static non-interactive presentation user agents will also opt to <a href="#non-scripted"> lack scripting support </a> . </p> <p class="example"> A non-interactive but dynamic presentation UA would still execute scripts, allowing forms to be dynamically submitted, and so forth. However, since the concept of "focus" is irrelevant when the user cannot interact with the document, the UA would not need to support any of the focus-related DOM APIs. </p> <dt> User agents with no scripting support <dd id="non-scripted"> <p> Implementations that do not support scripting (or which have their scripting features disabled) are exempt from supporting the events and DOM interfaces mentioned in this specification. For the parts of this specification that are defined in terms of an events model or in terms of the DOM, such user agents must still act as if events and the DOM were supported. </p> <p class="note"> Scripting can form an integral part of an application. Web browsers that do not support scripting, or that have scripting disabled, might be unable to fully convey the author's intent. </p> <dt> Conformance checkers <dd id="conformance-checkers"> <p> Conformance checkers must verify that a document conforms to the applicable conformance criteria described in this specification. Conformance checkers are exempt from detecting errors that require interpretation of the author's intent (for example, while a document is non-conforming if the content of a <code> <a
     href="#blockquote0"> blockquote </a> </code> element is not a quote, conformance checkers do not have to check that <code> <a
     href="#blockquote0"> blockquote </a> </code> elements only contain quoted material). </p> <div class="note"> <p> The term "validation" specifically refers to a subset of conformance checking that only verifies that a document complies with the requirements given by an SGML or XML DTD. Conformance checkers that only perform validation are non-conforming, as there are many conformance requirements described in this specification that cannot be checked by SGML or XML DTDs. </p> <p> To put it another way, there are three types of conformance criteria: </p> <ol> <li> Criteria that can be expressed in a DTD. <li> Criteria that cannot be expressed by a DTD, but can still be checked by a machine. <li> Criteria that can only be checked by a human. </ol> <p> A conformance checker must check for the first two. A simple DTD-based validator only checks for the first class of errors and is therefore not a conforming conformance checker according to this specification. </p> </div> <dt> Data mining tools <dd id="data-mining"> <p> Applications and tools that process HTML and XHTML documents for reasons other than to either render the documents or check them for conformance should act in accordance to the semantics of the documents that they process. </p> <p class="example"> A tool that generates <span title="sections and
     headings"> document outlines </span> but increases the nesting level for each paragraph and does not increase the nesting level for each section would not be conforming. </p> <dt id="editors"> Authoring tools and markup generators <dd> <p> Authoring tools and markup generators must generate conforming documents. Conformance criteria that apply to authors also apply to authoring tools, where appropriate. </dl> <p> Conformance requirements phrased as algorithms or specific steps may be implemented in any manner, so long as the end result is equivalent. (In particular, the algorithms defined in this specification are intended to be easy to follow, and not intended to be performant.) <p class="note"> There is no implied relationship between document conformance requirements and implementation conformance requirements. User agents are not free to handle non-conformant documents as they please; the processing model described in this specification applies to implementations regardless of the conformity of the input documents. </p> <p> For compatibility with existing content and prior specifications, this specification describes two authoring formats: one based on XML (referred to as <dfn id="xhtml"> XHTML </dfn> ), and one using a <a
   href="#parsing"> custom format </a> inspired by SGML (referred to as <dfn
   id="html0"> HTML </dfn> ). Implementations may support only one of these two formats, although supporting both is encouraged. <p> XML documents using elements from the XHTML namespace that use the new features described in this specification and that are served over the wire (e.g. by HTTP) must be sent using an XML MIME type such as <code> application/xml </code> or <code> application/xhtml+xml </code> and must not be served as <code> text/html </code> . <a
   href="#refsRFC3023"> [RFC3023] </a> <p> These XML documents may contain a <code> DOCTYPE </code> if desired, but this is not required to conform to this specification. <p> HTML documents that use the new features described in this specification and that are served over the wire (e.g. by HTTP) must be sent as <code> text/html </code> and must start with the following DOCTYPE: <code> &lt;!DOCTYPE html&gt; </code> . <h3 id="terminology"> <span class="secno"> 1.9. </span> Terminology </h3> <p> This specification refers to both HTML and XML attributes and DOM attributes, often in the same context. When it is not clear which is being referred to, they are referred to as <dfn id="content">  content attributes </dfn> for HTML and XML attributes, and <dfn
   id="dom-attributes"> DOM attributes </dfn> for those from the DOM. Similarly, the term "properties" is used for both ECMAScript object properties and CSS properties. When these are ambiguous they are qualified as object properties and CSS properties respectively. </p> <p> To ease migration from HTML to XHTML, UAs conforming to this specification <ins>will </ins> <del>must </del> place elements in HTML in the <code> http://www.w3.org/1999/xhtml </code> namespace, at least for the purposes of the DOM and CSS. The term " <dfn id="elements"> elements in the HTML namespace </dfn> ", when used in this specification, thus refers to both HTML and XHTML elements. <p> Unless otherwise stated, all elements defined or mentioned in this specification are in the <code> http://www.w3.org/1999/xhtml </code> namespace, and all attributes defined or mentioned in this specification have no namespace (they are in the per-element partition). <p> Generally, when the specification states that a feature applies to HTML or XHTML, it also includes the other. When a feature specifically only applies to one of the two languages, it is called out by explicitly stating that it does not apply to the other format, as in "for HTML, ... (this does not apply to XHTML)". <p> The readability, the term URI is used to refer to both ASCII URIs and Unicode IRIs, as those terms are defined by <a
   href="#refsRFC3986"> [RFC3986] </a> and <a href="#refsRFC3987"> [RFC3987] </a> respectively. On the rare occasions where IRIs are not allowed but ASCII URIs are, this is called out explicitly. <p> The term <dfn id="root-element"> root element </dfn> , when not qualified to explicitly refer to the document's root element, means the furthest ancestor element node of whatever node is being discussed, or the node itself is there is none. When the node is a part of the document, then that is indeed the document's root element. However, if the node is not currently part of the document tree, the root element will be an orphaned node. <p> When it is stated that some element or attribute is ignored, or treated as some other value, or handled as if it was something else, this refers only to the processing of the node after it is in the DOM. A user agent must not mutate the DOM in such situations. <p> When an XML name, such as an attribute or element name, is referred to in the form <code> <var title=""> prefix </var> : <var
   title=""> localName </var> </code> , as in <code> xml:id </code> or <code> svg:rect </code> , it refers to a name with the local name <var
   title=""> localName </var> and the namespace given by the prefix, as defined by the following table: <dl> <dt> <code title=""> xml </code> <dd> <code> http://www.w3.org/XML/1998/namespace </code> <dt> <code title=""> html </code> <dd> <code> http://www.w3.org/1999/xhtml </code> </dl> <p> For simplicity, terms such as <em> shown </em> , <em> displayed </em> , and <em> visible </em> might sometimes be used when referring to the way a document is rendered to the user. These terms are not meant to imply a visual medium; they must be considered to apply to other media in equivalent ways. <p> This specification uses the term <em> HTML documents </em> to generally refer to any use of HTML, ranging from short static documents to long essays or reports with rich multimedia, as well as to fully-fledged interactive applications. <p> Various DOM interfaces are defined in this specification using pseudo-IDL. This looks like OMG IDL but isn't. For instance, method overloading is used, and types from the W3C DOM specifications are used without qualification. Language-specific bindings for these abstract interface definitions must be derived in the way consistent with W3C DOM specifications. Some interface-specific binding information for ECMAScript is included in this specification. <p> The construction "a <code> Foo </code> object", where <code> Foo </code> is actually an interface, is sometimes used instead of the more accurate "an object implementing the interface <code> Foo </code> ". <p> <ins>The terms </ins> <em> <ins>fire </ins> </em> <ins>and </ins> <em> <ins>dispatch </ins> </em> <ins>are used interchangeably in the context of events, as in the DOM Events specifications. </ins> <a
   href="#refsDOM3EVENTS"> <ins>[DOM3EVENTS] </ins> </a> <h3 id="miscellaneous"> <span class="secno"> 1.10. </span> Miscellaneous </h3> <p class="big-issue"> As the specification evolves, these conformance requirements will most likely be moved to more appropriate places. <p id="toNumber"> When a UA needs to convert a string to a number, algorithms equivalent to those specified in ECMA262 sections 9.3.1 ("ToNumber Applied to the String Type") and 8.5 ("The Number type") should be used (possibly after suitably altering the algorithms to handle numbers of the range that the UA can support). <a
   href="#refsECMA262"> [ECMA262] </a> </p> <p id="alt-tooltip"> The <code> alt </code> attribute on images must not be shown in a tooltip in visual browsers. <p id="mutation-during-parsing"> DOM mutation events must not fire for changes caused by the UA parsing the document. (Conceptually, the parser is not mutating the DOM, it is constructing it.) This includes the parsing of any content inserted using <code> document.write() </code> and <code> document.writeln() </code> calls. Other changes, including fragment insertions involving <code> innerHTML </code> and similar attributes, must fire mutation events. <a href="#refsDOM3Events"> [DOM3EVENTS] </a> <p id="default-content-style-type"> The default value of <code> Content-Style-Type </code> and the default value of the <code
   title="attr-style-type"> <a href="#type1"> type </a> </code> attribute of the <code> <a href="#style0"> style </a> </code> element is is <code> text/css </code> . <p id="default-content-script-type"> The default value of <code> Content-Script-Type </code> and the default value of the <code
   title="attr-script-type"> <a href="#type5"> type </a> </code> attribute of the <code> <a href="#script1"> script </a> </code> element is the ECMAScript MIME type. <p id="xmlBase"> User agents must follow the rules given by XML Base to resolve relative URIs in HTML and XHTML fragments. <a
   href="#refsXMLBASE"> [XMLBASE] </a> <p class="note"> It is possible for <code> xml:base </code> attributes to be present even in HTML fragments, as such attributes can be added dynamically using script. </p> <h2 id="semantics"> <span class="secno"> 2. </span> Semantics and structure of HTML elements </h2> <h3 id="introduction0"> <span class="secno"> 2.1. </span> Introduction <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p> <em> <ins>This section is non-normative. </ins> </em> <p class="big-issue"> <ins>An introduction to marking up a document. </ins> <h3 id="the-dom"> <span class="secno"> <ins>2.2. </ins> </span> <ins>The DOM </ins> </h3> <p> <ins>The Document Object Model (DOM) is a representation &mdash; a model &mdash; of the document and its content. </ins> <a
   href="#refsDOM3CORE"> <ins>[DOM3CORE] </ins> </a> <ins>The DOM is not just an API; operations on the in-memory document are defined, in this specifiation, in terms of the DOM. </ins> <h4 id="dom-feature"> <span class="secno"> <ins>2.2.1. </ins> </span> <ins>DOM feature strings </ins> </h4> <p> <ins>DOM3 Core defines mechanisms for checking for interface support, and for obtaining implementations of interfaces, using </ins> <a
   href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMFeatures"> <ins>feature strings </ins> </a> <ins>. </ins> <a href="#refsDOM3CORE"> <ins>[DOM3CORE] </ins> </a> <p> <ins>A DOM application can use the </ins> <dfn id="hasfeature"
   title="hasFeature"> <code> <ins>hasFeature( </ins> <var title=""> <ins>feature </ins> </var> <ins>, </ins> <var
   title=""> <ins>version </ins> </var> <ins>) </ins> </code> </dfn> <ins>method of the </ins> <code> <ins>DOMImplementation </ins> </code> <ins>interface with parameter values " </ins> <code
   title=""> <ins>HTML </ins> </code> <ins>" and " </ins> <code> <ins>5.0 </ins> </code> <ins>" (respectively) to determine whether or not this module is supported by the implementation. In addition to the feature string " </ins> <code title=""> <ins>HTML </ins> </code> <ins>", the feature string " </ins> <code title=""> <ins>XHTML </ins> </code> <ins>" (with version string " </ins> <code> <ins>5.0 </ins> </code> <ins>") can be used to check if the implementation supports XHTML. User agents should respond with a true value when the </ins> <code> <a
   href="#hasfeature"> <ins>hasFeature </ins> </a> </code> <ins>method is queried with these values. Authors are cautioned, however, that UAs returning true might not be perfectly compliant, and that UAs returning false might well have support for features in this specification; in general, therefore, use of this method is discouraged. </ins> <p> <ins>The values " </ins> <code title=""> <ins>HTML </ins> </code> <ins>" and " </ins> <code
   title=""> <ins>XHTML </ins> </code> <ins>" (both with version " </ins> <code> <ins>5.0 </ins> </code> <ins>") should also be supported in the context of the </ins> <code> <ins>getFeature() </ins> </code> <ins>and </ins> <code> <ins>isSupported() </ins> </code> <ins>methods, as defined by DOM3 Core. </ins> <p class="note"> <ins>The interfaces defined in this specification are not always supersets of the interfaces defined in DOM2 HTML; some features that were formerly deprecated, poorly supported, rarely used or considered unnecessary have been removed. Therefore it is not guarenteed that an implementation that supports " </ins> <code title=""> <ins>HTML </ins> </code> <ins>" " </ins> <code> <ins>5.0 </ins> </code> <ins>" also supports " </ins> <code title=""> <ins>HTML </ins> </code> <ins>" " </ins> <code> <ins>2.0 </ins> </code> <ins>". </ins> <h4 id="reflecting"> <span class="secno"> <ins>2.2.2. </ins> </span> <ins>Reflecting content attributes in DOM attributes </ins> </h4> <p> <ins>Some </ins> <span title="DOM attribute"> <ins>DOM attributes </ins> </span> <ins>are defined to </ins> <dfn id="reflect"> <ins>reflect </ins> </dfn> <ins>a particular </ins> <span> <ins>content attribute </ins> </span> <ins>. This means that on getting, the DOM attribute returns the current value of the content attribute, and on setting, the DOM attribute changes the value of the content attribute to the given value. </ins> <p> <ins>If a reflecting DOM attribute is a </ins> <code> <ins>DOMString </ins> </code> <ins>attribute defined to contain a URI, then on getting, the DOM attribute returns the value of the content attribute, resolved to an absolute URI, and on setting, sets the content attribute to the specified literal value. If the content attribute is absent, the DOM attribute must return the default value, if the content attribute has one, or else the empty string. </ins> <p> <ins>If a reflecting DOM attribute is a </ins> <code> <ins>DOMString </ins> </code> <ins>attribute that is not defined to contain a URI, then the getting and setting is done in a transparent, case-sensitive manner, except if the content attribute is defined to only allow a specific set of values. In this latter case, the attribute's value is first converted to lowercase before being returned. If the content attribute is absent, the DOM attribute must return the default value, if the content attribute has one, or else the empty string. </ins> <p> <ins>If a reflecting DOM attribute is a boolean attribute, then the DOM attribute returns true if the attribute is set, and false if it is absent. On setting, the content attribute is removed if the DOM attribute is set to false, and is set to have the same value as its name if the DOM attribute is set to true. </ins> <p> <ins>If a reflecting DOM attribute is a numeric type ( </ins> <code> <ins>long </ins> </code> <ins>) then the content attribute must be </ins> <a href="#toNumber"> <ins>converted to a numeric type </ins> </a> <ins>first (truncating any fractional part). If that fails, or if the attribute is absent, the default value should be returned instead, or 0 if there is no default value. On setting, the given value is converted to a string representing the number in base ten and then that string should be used as the new content attribute value. </ins> </p> <h4 id="event"> <span class="secno"> <ins>2.2.3. </ins> </span> <ins>Event listeners </ins> </h4> <p id="js-function-listener"> <ins>In the ECMAScript DOM binding, the ECMAScript native </ins> <code> <ins>Function </ins> </code> <ins>type must implement the </ins> <code> <ins>EventListener </ins> </code> <ins>interface such that invoking the </ins> <code> <ins>handleEvent() </ins> </code> <ins>method of that interface on the object from another language binding invokes the function itself, with the </ins> <code> <ins>event </ins> </code> <ins>argument as its only argument. In the ECMAScript binding itself, however, the </ins> <code> <ins>handleEvent() </ins> </code> <ins>method of the interface is not directly accessible on </ins> <code> <ins>Function </ins> </code> <ins>objects. Such functions must be called in the global scope. If the function returns false, the event's </ins> <code> <ins>preventDefault() </ins> </code> <ins>method must then invoked. Exception: for historical reasons, for the HTML </ins> <code> <ins>mouseover </ins> </code> <ins>event, the </ins> <code> <ins>preventDefault() </ins> </code> <ins>method must be called when the function returns true instead. </ins> <p id="event-handler-attributes"> <ins>In HTML, event handler attributes (such as </ins> <code> <ins>onclick </ins> </code> <ins>) are invoked as if they were functions implementing </ins> <code> <ins>EventListener </ins> </code> <ins>, with the argument called </ins> <code> <ins>event </ins> </code> <ins>. Such attributes are added as non-capture event listeners of the type given by their name (without the leading </ins> <code> <ins>on </ins> </code> <ins>prefix). Only attributes actually defined to exist by specifications implemented by the UA (e.g. HTML, Web Forms 2, Web Apps) are actually registered, however; for example if an author created an </ins> <code> <ins>onfoo </ins> </code> <ins>attribute, it would not be fired for </ins> <code> <ins>foo </ins> </code> <ins>events. </ins> <p id="scopeResolution"> <ins>The scope chain for ECMAScript executed in HTML event handler attributes must link from the activation object for the handler, to its </ins> <code> <ins>this </ins> </code> <ins>parameter (the event target), to the element's </ins> <code> <ins>form </ins> </code> <ins>element if it is a form control, to the document, to the default view (the </ins> <code> <a
   href="#window0"> <ins>Window </ins> </a> </code> <ins>object). </ins> <p class="note"> <ins>This definition is compatible with how most browsers implemented DOM Level 0, but does not exactly describe IE's behaviour. See also ECMA262 Edition 3, sections 10.1.6 and 10.2.3, for more details on activation objects. </ins> <a href="#refsECMA262"> <ins>[ECMA262] </ins> </a> <h4 id="event0"> <span class="secno"> <ins>2.2.4. </ins> </span> <ins>Event firing </ins> </h4> <p> <ins>Certain operations and methods are defined as firing events on elements. For example, the </ins> <code title="dom-command-click"> <a
   href="#click"> <ins>click() </ins> </a> </code> <ins>method on the </ins> <code> <a
   href="#htmlcommandelement0"> <ins>HTMLCommandElement </ins> </a> </code> <ins>is defined as firing a </ins> <code title="event-click"> <ins>click </ins> </code> <ins>event on the element. </ins> <a
   href="#refsDOM3EVENTS"> <ins>[DOM3EVENTS] </ins> </a> <p> <dfn id="firing" title="fire a click event"> <ins>Firing a </ins> <code
   title="event-click"> <ins>click </ins> </code> <ins>event </ins> </dfn> <ins>means that a </ins> <a
   href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-click"> <code> <ins>click </ins> </code> </a> <ins>event in the </ins> <code> <ins>http://www.w3.org/2001/xml-events </ins> </code> <ins>namespace, which bubbles and is cancelable, and which uses the </ins> <code> <ins>MouseEvent </ins> </code> <ins>interface, must be dispatched at the given element. The event object must have its </ins> <code title=""> <ins>screenX </ins> </code> <ins>, </ins> <code title=""> <ins>screenY </ins> </code> <ins>, </ins> <code title=""> <ins>clientX </ins> </code> <ins>, </ins> <code
   title=""> <ins>clientY </ins> </code> <ins>, and </ins> <code title=""> <ins>button </ins> </code> <ins>attributes set to 0, its </ins> <code title=""> <ins>ctrlKey </ins> </code> <ins>, </ins> <code title=""> <ins>shiftKey </ins> </code> <ins>, </ins> <code title=""> <ins>altKey </ins> </code> <ins>, and </ins> <code title=""> <ins>metaKey </ins> </code> <ins>attributes set according to the current state of the key input device, if any (false for any keys that are not available), its </ins> <code title=""> <ins>detail </ins> </code> <ins>attribute set to 1, and its </ins> <code title=""> <ins>relatedTarget </ins> </code> <ins>attribute set to null. The </ins> <code title=""> <ins>getModifierState() </ins> </code> <ins>method on the object must return values appropriately describing the state of the key input device at the time the event is created. </ins> <p> <dfn id="firing0" title="fire a change event"> <ins>Firing a </ins> <code
   title="event-change"> <ins>change </ins> </code> <ins>event </ins> </dfn> <ins>means that a </ins> <a
   href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-change"> <code> <ins>change </ins> </code> </a> <ins>event in the </ins> <code> <ins>http://www.w3.org/2001/xml-events </ins> </code> <ins>namespace, which bubbles but is not cancelable, and which uses the </ins> <code> <ins>Event </ins> </code> <ins>interface, must be dispatched at the given element. The event object must have its </ins> <code title=""> <ins>detail </ins> </code> <ins>attribute set to 0. </ins> <p> <dfn id="firing1" title="fire a contextmenu event"> <ins>Firing a </ins> <code
   title="event-contextmenu"> <ins>contextmenu </ins> </code> <ins>event </ins> </dfn> <ins>means that a </ins> <code title="event-contextmenu"> <ins>contextmenu </ins> </code> <ins>event in the </ins> <code> <ins>http://www.w3.org/2001/xml-events </ins> </code> <ins>namespace, which bubbles and is cancelable, and which uses the </ins> <code> <ins>Event </ins> </code> <ins>interface, must be dispatched at the given element. The event object must have its </ins> <code
   title=""> <ins>detail </ins> </code> <ins>attribute set to 0. </ins> <p> <dfn id="firing2" title="fire a show event"> <ins>Firing a </ins> <code
   title="event-show"> <ins>show </ins> </code> <ins>event </ins> </dfn> <ins>means that a </ins> <code
   title="event-show"> <ins>show </ins> </code> <ins>event in the </ins> <code> <ins>http://www.w3.org/2001/xml-events </ins> </code> <ins>namespace, which does not bubble but is cancelable, and which uses the </ins> <code> <ins>Event </ins> </code> <ins>interface, must be dispatched at the given element. The event object must have its </ins> <code title=""> <ins>detail </ins> </code> <ins>attribute set to 0. </ins> </p> <p> <ins>The default action of these event is to do nothing unless otherwise stated. </ins> <p class="big-issue"> <ins>If you dispatch a custom "click" event at an element that would normally have default actions, they should get triggered. We need to go through the entire spec and make sure that any default actions are defined in terms of </ins> <em> <ins>any </ins> </em> <ins>event of the right type on that element, not those that are dispatched in expected ways. </ins> <h4 id="the-textcontent"> <span class="secno"> <ins>2.2.5. </ins> </span> <ins>The </ins> <dfn
   id="textcontent0"> <code> <ins>textContent </ins> </code> </dfn> <ins>attribute </ins> </h4> <p> <ins>Some elements are defined in terms of their DOM </ins> <code> <a
   href="#textcontent0"> <ins>textContent </ins> </a> </code> <ins>attribute. This is an attribute defined on the </ins> <code> <ins>Node </ins> </code> <ins>interface in DOM3 Core. </ins> <a
   href="#refsDOM3CORE"> <ins>[DOM3CORE] </ins> </a> <p class="big-issue"> <ins>Should textContent be defined differently for dir="" and &lt;bdo>? Should we come up with an alternative to textContent that handles those and other things, like alt=""? </ins> <h4 id="common"> <span class="secno"> <ins>2.2.6. </ins> </span> <ins>Common DOM interfaces </ins> <span title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h4> <p class="big-issue"> <ins>Still need to define </ins> <code> <ins>HTMLCollection </ins> </code> <ins>. </ins> </p> <pre class="idl"> <ins>interface </ins> <dfn id="domtokenstring"> <ins>DOMTokenString </ins> </dfn> <ins>{ bool </ins> <span title="dom-tokenstring-has"> <ins>has </ins> </span> <ins>(in DOMString token); void </ins> <span title="dom-tokenstring-add"> <ins>add </ins> </span> <ins>(in DOMString token); void </ins> <span title="dom-tokenstring-remove"> <ins>remove </ins> </span> <ins>(in DOMString token); }; </ins> </pre> <p class="big-issue"> <ins>Need to define those members. </ins> </p> <h4 id="the-document"> <span class="secno"> <ins>2.2.7. </ins> </span> <ins>The document </ins> <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h4> <p> <ins>Every XML and HTML document in an HTML UA must be represented by a </ins> <code> <ins>Document </ins> </code> <ins>object. </ins> <a href="#refsDOM3CORE"> <ins>[DOM3CORE] </ins> </a> <p> <ins>All </ins> <code> <ins>Document </ins> </code> <ins>objects (in user agents implementing this specification) must also implement the </ins> <code> <a
   href="#htmldocument"> <ins>HTMLDocument </ins> </a> </code> <ins>interface, available using binding-specific methods. </ins> <p> <code> <ins>Document </ins> </code> <ins>objects must also implement the document-level interface of any other namespaces found in the document that the UA supports. For example, if an HTML implementation also supports SVG, then the </ins> <code> <ins>Document </ins> </code> <ins>object must implement </ins> <code> <a
   href="#htmldocument"> <ins>HTMLDocument </ins> </a> </code> <ins>and </ins> <code> <ins>SVGDocument </ins> </code> <ins>. </ins> <pre
   class="idl"> <ins>interface </ins> <dfn id="htmldocument"> <ins>HTMLDocument </ins> </dfn> <ins>: </ins> <span> <ins>Document </ins> </span> <ins>{ attribute DOMString </ins> <span title="dom-document-title"> <ins>title </ins> </span> <ins>; readonly attribute DOMString </ins> <span title="dom-document-referrer"> <ins>referrer </ins> </span> <ins>; readonly attribute DOMString </ins> <span title="dom-document-domain"> <ins>domain </ins> </span> <ins>; readonly attribute DOMString </ins> <span title="dom-document-URL"> <ins>URL </ins> </span> <ins>; attribute </ins> <span> <a href="#htmlelement"> <ins>HTMLElement </ins> </a> </span> <span title="dom-document-body"> <ins>body </ins> </span> <ins>; readonly attribute </ins> <span> <ins>HTMLCollection </ins> </span> <span title="dom-document-images"> <ins>images </ins> </span> <ins>; readonly attribute </ins> <span> <ins>HTMLCollection </ins> </span> <span title="dom-document-applets"> <ins>applets </ins> </span> <ins>; readonly attribute </ins> <span> <ins>HTMLCollection </ins> </span> <span title="dom-document-links"> <ins>links </ins> </span> <ins>; readonly attribute </ins> <span> <ins>HTMLCollection </ins> </span> <span title="dom-document-forms"> <ins>forms </ins> </span> <ins>; readonly attribute </ins> <span> <ins>HTMLCollection </ins> </span> <span title="dom-document-anchors"> <ins>anchors </ins> </span> <ins>; attribute DOMString </ins> <span title="dom-document-cookie"> <ins>cookie </ins> </span> <ins>; void </ins> <span title="dom-document-open"> <ins>open </ins> </span> <ins>(); void </ins> <span title="dom-document-close"> <ins>close </ins> </span> <ins>(); void </ins> <span title="dom-document-write"> <ins>write </ins> </span> <ins>(in DOMString text); void </ins> <span title="dom-document-writeln"> <ins>writeln </ins> </span> <ins>(in DOMString text); NodeList </ins> <span title="dom-document-getElementsByName"> <ins>getElementsByName </ins> </span> <ins>(in DOMString elementName); NodeList </ins> <span title="dom-document-getElementsByClassName"> <a href="#getelementsbyclassname"> <ins>getElementsByClassName </ins> </a> </span> <ins>(in DOMString className1 [, in DOMString className2, ...] ); }; </ins> </pre> <p class="note"> <ins>The </ins> <code> <ins>Document </ins> </code> <ins>objects of documents that are being rendered in a </ins> <span> <a href="#browsing0"> <ins>browsing context </ins> </a> </span> <ins>will also implement the </ins> <code> <a
   href="#documentwindow"> <ins>DocumentWindow </ins> </a> </code> <ins>and </ins> <code> <a
   href="#documentstyle"> <ins>DocumentStyle </ins> </a> </code> <ins>interfaces. </ins> <p class="big-issue"> <ins>Need to define those members; the </ins> <code
   title="dom-document-body"> <ins>body </ins> </code> <ins>attribute will be used to define </ins> <dfn id="the-body0"> <ins>the </ins> <code title=""> <ins>body </ins> </code> <ins>element </ins> </dfn> <ins>. </ins> </p> <p> <ins>The </ins> <dfn id="getelementsbyclassname"
   title="dom-document-getElementsByClassName"> <code> <ins>getElementsByClassName() </ins> </code> </dfn> <ins>method takes one or more strings representing classes and must return all the elements in that document that are of all those classes. HTML, XHTML, SVG and MathML elements define which classes they are in by having an attribute in the per-element partition with the name </ins> <code> <a
   href="#class"> <ins>class </ins> </a> </code> <ins>containing a space-separated list of classes to which the element belongs. Other specifications may also allow elements in their namespaces to be labelled as being in specific classes. UAs must not assume that all attributes of the name </ins> <code> <a
   href="#class"> <ins>class </ins> </a> </code> <ins>for elements in any namespace work in this way, however, and must not assume that such attributes, when used as global attributes, label other elements as being in specific classes. </ins> <p class="big-issue"> <ins>There is an open issue on whether we should use multiple arguments or just one argument that needs to be split on spaces. </ins> <p> <ins>The space character (U+0020) is not special in the method's arguments. In HTML, XHTML, SVG and MathML it is impossible for an element to belong to a class whose name contains a space character, however, and so typically the method would return no nodes if one of its arguments contained a space. </ins> <p> <ins>Similarly, if the method is passed an argument consisting of the empty string, it will typically not return any nodes since in HTML, XHTML, SVG and MathML it is impossible to assign an element to the "" class. </ins> <div class="example"> <p> <ins>Given the following XHTML fragment: </ins> </p> <pre> <ins>&lt;div id="example"&gt; &lt;p id="p1" class="aaa bbb"/&gt; &lt;p id="p2" class="aaa ccc"/&gt; &lt;p id="p3" class="bbb ccc"/&gt; &lt;/div&gt; </ins> </pre> <p> <ins>A call to </ins> <code> <ins>document.getElementById('example').getElementsByClassName('aaa') </ins> </code> <ins>would return a </ins> <code> <ins>NodeList </ins> </code> <ins>with the two paragraphs </ins> <code> <ins>p1 </ins> </code> <ins>and </ins> <code> <ins>p2 </ins> </code> <ins>in it. A call to </ins> <code> <ins>getElementsByClassName('ccc', 'bbb') </ins> </code> <ins>would only return one node, however, namely </ins> <code> <ins>p3 </ins> </code> <ins>. </ins> </p> <p> <ins>A call to </ins> <code> <ins>getElementsByClassName('aaa bbb') </ins> </code> <ins>would return no nodes; none of the elements above are in the "aaa bbb" class. </ins> </p> </div> <p class="issue"> <ins>We could also have a getElementBySelector() method, but it seems that it would be best to let the CSSWG define that. </ins> </p> <h4 id="the-elements"> <span class="secno"> <ins>2.2.8. </ins> </span> <ins>The elements </ins> <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h4> <p> <ins>The nodes representing HTML elements in the DOM must implement, and expose to scripts, the interfaces listed for them in the relevant sections of this specification. This includes XHTML elements in XML documents, even when those documents are in another context (e.g. inside an XSLT transform). </ins> <p> <ins>The basic interface, from which all the HTML elements' interfaces inherit, and which is used by elements that have no additional requirements, is the </ins> <code> <a href="#htmlelement"> <ins>HTMLElement </ins> </a> </code> <ins>interface. </ins> <p class="big-issue"> <ins>Define HTMLElement here. </ins> <p> <ins>In HTML documents, for HTML elements, the DOM APIs must return tag names and attributes names in uppercase, regardless of the case with which they were created. This does not apply to XML documents; in XML documents, the DOM APIs must always return tag names and attribute names in the original case used to create those nodes. </ins> <h3 id="html-documents"> <span class="secno"> <ins>2.3. </ins> </span> <ins>HTML documents and document fragments </ins> </h3> <h4 id="semantics0"> <span class="secno"> <ins>2.3.1. </ins> <del>2.1.1. </del> </span> Semantics </h4> <p> Elements, attributes, and attribute values in HTML are defined (by this specification) to have certain meanings (semantics). For example, the <code> <a href="#ol0"> ol </a> </code> element represents an ordered list, and the <code title="lang"> <a href="#lang"> lang </a> </code> attribute represents the language of the content. <p> Authors must only use elements, attributes, and attribute values for their appropriate semantic purposes. <div class="example"> <p> For example, the following document is non-conforming, despite being syntactically correct: </p> <pre> &lt;!DOCTYPE html&gt; &lt;html lang="en-GB"&gt; &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; My favourite animal is the cat. &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &mdash;&lt;a href="http://example.org/~ernest/"&gt;&lt;cite&gt;Ernest&lt;/cite&gt;&lt;/a&gt;, in an essay from 1992 &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; </pre> <p> ...because the data placed in the cells is clearly not tabular data. A corrected version of this document might be: </p> <pre> &lt;!DOCTYPE html&gt; &lt;html lang="en-GB"&gt; &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;blockquote&gt; &lt;p&gt; My favourite animal is the cat. &lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt; &mdash;&lt;a href="http://example.org/~ernest/"&gt;&lt;cite&gt;Ernest&lt;/cite&gt;&lt;/a&gt;, in an essay from 1992 &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; </pre> <p> This next document fragment, intended to represent the heading of a corporate site, is similarly non-conforming because the second line is not intended to be a heading of a subsection, but merely a subheading or subtitle (a subordinate heading for the same section). </p> <pre> &lt;body&gt; &lt;h1&gt;ABC Company&lt;/h1&gt; &lt;h2&gt;Leading the way in widget design since 1432&lt;/h2&gt; ... </pre> <p> The <code> <a href="#header0"> header </a> </code> element should be used in these kinds of situations: </p> <pre> &lt;body&gt; &lt;header&gt; &lt;h1&gt;ABC Company&lt;/h1&gt; &lt;h2&gt;Leading the way in widget design since 1432&lt;/h2&gt; &lt;/header&gt; ... </pre> </div> <h4 id="structure0"> <span class="secno"> <ins>2.3.2. </ins> <del>2.1.2. </del> </span> Structure </h4> <p> All the elements in this specification have a defined content model, which describes what nodes are allowed inside the elements, and thus what the structure of an HTML document or fragment must look like. Authors must only put elements inside an element if that element allows them to be there according to its content model. <p> For the purposes of determining if an element matches its content model or not, CDATA nodes in the DOM must be treated as text nodes, and character entity reference nodes must be treated as if they were expanded in place. </p> <p> The whitespace characters U+0020 SPACE, U+000A LINE FEED, and U+000D CARRIAGE RETURN are always allowed between elements. User agents must always represent these characters between elements in the source markup as text nodes in the DOM. Empty text nodes and text nodes consisting of just sequences of those characters are considered <dfn
   id="inter-element"> inter-element whitespace </dfn> and must be ignored when establishing whether an element matches its content model or not. </p> <p> Authors must only use elements from the HTML namespace in the contexts where they are allowed, as defined for each element. For XML compound documents, these contexts could be inside elements from other namespaces, if those elements are defined as providing the relevant contexts. <div class="example"> <p> The SVG specification defines the SVG <code> foreignObject </code> element as allowing foreign namespaces to be included, thus allowing compound documents to be created by inserting subdocument content under that element. <em> This </em> specification defines the XHTML <code> <a
    href="#html1"> html </a> </code> element as being allowed where subdocument fragments are allowed in a compound document. Together, these two definitions mean that placing an XHTML <code> <a
    href="#html1"> html </a> </code> element as a child of an SVG <code> foreignObject </code> element is conforming. </p> </div>   <del>2.1.3.  The DOM   The Document Object Model (DOM) is a representation &mdash; a model &mdash; of the document and its content.  [DOM3CORE]  The DOM is not just an API; operations on the in-memory document are defined, in this specifiation, in terms of the DOM.  HTML elements in the DOM, including XHTML elements in XML documents, even when those documents are in another context (e.g. inside an XSLT transform), must implement, and expose to scripts, the interfaces listed for them in the relevant sections of this specification.  The basic interface, from which all the HTML elements' interfaces inherit, and which is used by elements that have no additional requirements, is the   HTMLElement   interface (defined below).  To ease migration from HTML to XHTML, UAs must assign the  http://www.w3.org/1999/xhtml  namespace to elements in that are parsed in documents labelled as  text/html  , at least for the purposes of the DOM and CSS.  In HTML documents, for HTML elements, the DOM APIs must return tag names and attributes names in uppercase, regardless of the case with which they were created. This does not apply to XML documents; in XML documents, the DOM APIs must always return tag names and attribute names in the original case used to create those nodes.   2.1.3.1.  DOM feature strings   DOM3 Core defines mechanisms for checking for interface support, and for obtaining implementations of interfaces, using  feature strings  .  [DOM3CORE]   A DOM application can use the   hasFeature(  feature  ,  version  )   method of the  DOMImplementation  interface with parameter values "  HTML  " and "  5.0  " (respectively) to determine whether or not this module is supported by the implementation. In addition to the feature string "  HTML  ", the feature string "  XHTML  " (with version string "  5.0  ") can be used to check if the implementation supports XHTML. User agents should respond with a true value when the   hasFeature   method is queried with these values. Authors are cautioned, however, that UAs returning true might not be perfectly compliant, and that UAs returning false might well have support for features in this specification; in general, therefore, use of this method is discouraged.  The values "  HTML  " and "  XHTML  " (both with version "  5.0  ") should also be supported in the context of the  getFeature()  and  isSupported()  methods, as defined by DOM3 Core.  The interfaces defined in this specification are not always supersets of the interfaces defined in DOM2 HTML; some features that were formerly deprecated, poorly supported, rarely used or considered unnecessary have been removed. Therefore it is not guarenteed that an implementation that supports "  HTML  " "  5.0  " also supports "  HTML  " "  2.0  ".   2.1.3.2.  Common DOM interfaces   Still need to define  HTMLCollection  .   interface  DOMTokenString  { bool  has  (in DOMString token); void  add  (in DOMString token); void  remove  (in DOMString token); }   Need to define those members.    2.1.3.3.  The document   Every XML and HTML document in an HTML UA must be represented by a  Document  object.  [DOM3CORE]   This object must also implement the document-level interface of any other namespaces found in the document that the UA supports. For example, if the implementation supports both HTML and SVG, then the  Document  object must also implement   HTMLDocument   and  SVGDocument  .  The  Document  object of documents that are being rendered in a   browsing context   must also implement the   DocumentWindow   interface.  interface  HTMLDocument  :  Document  { attribute DOMString  title  ; readonly attribute DOMString  referrer  ; readonly attribute DOMString  domain  ; readonly attribute DOMString  URL  ; attribute   HTMLElement    body  ; readonly attribute  HTMLCollection   images  ; readonly attribute  HTMLCollection   applets  ; readonly attribute  HTMLCollection   links  ; readonly attribute  HTMLCollection   forms  ; readonly attribute  HTMLCollection   anchors  ; attribute DOMString  cookie  ; void  open  (); void  close  (); void  write  (in DOMString text); void  writeln  (in DOMString text); NodeList  getElementsByName  (in DOMString elementName); };   Need to define those members.    2.1.3.4.  Reflecting content attributes in DOM attributes   Some DOM attributes are defined to  reflect  a particular content attribute. This means that on getting, the DOM attribute returns the current value of the content attribute, and on setting, the DOM attribute changes the value of the content attribute to the given value.  If a reflecting DOM attribute is a  DOMString  attribute defined to contain a URI, then on getting, the DOM attribute returns the value of the content attribute, resolved to an absolute URI, and on setting, sets the content attribute to the specified literal value. If the content attribute is absent, the DOM attribute must return the default value, if the content attribute has one, or else the empty string.  If a reflecting DOM attribute is a  DOMString  attribute that is not defined to contain a URI, then the getting and setting is done in a transparent, case-sensitive manner, except if the content attribute is defined to only allow a specific set of values. In this latter case, the attribute's value is first converted to lowercase before being returned. If the content attribute is absent, the DOM attribute must return the default value, if the content attribute has one, or else the empty string.  If a reflecting DOM attribute is a boolean attribute, then the DOM attribute returns true if the attribute is set, and false if it is absent. On setting, the content attribute is removed if the DOM attribute is set to false, and is set to have the same value as its name if the DOM attribute is set to true.  If a reflecting DOM attribute is a numeric type (  long  ) then the content attribute must be  converted to a numeric type  first (truncating any fractional part). If that fails, or if the attribute is absent, the default value should be returned instead, or 0 if there is no default value. On setting, the given value is converted to a string representing the number in base ten and then that string should be used as the new content attribute value.    2.1.3.5.  The   textContent   attribute   Some elements are defined in terms of their DOM   textContent   attribute. This is an attribute defined on the  Node  interface in DOM3 Core.  [DOM3CORE]   Should textContent be defined differently for dir="" and &lt;bdo>? Should we come up with an alternative to textContent that handles those and other things, like alt=""? </del> <h4 id="kinds"> <span class="secno"> <ins>2.3.3. </ins> <del>2.1.4. </del> </span> Kinds of elements </h4> <p> Each element in HTML falls into zero or more categories that group elements with similar characteristics together. This specification uses the following categories: <ul> <li> <span> <a href="#metadata"> Metadata elements </a> </span> <li> <span> <a href="#sectioning"> Sectioning elements </a> </span> <li> <span> <a href="#block-level1"> Block-level elements </a> </span> <li> <span> <a href="#strictly"> Strictly inline-level content </a> </span> <li> <span> <a href="#structured"> Structured inline-level elements </a> </span> <li> <span> <a href="#interactive3">  Interactive elements </a> </span> <li> <span> Form control elements </span> </ul> <p> Some elements have unique requirements and do not fit into any particular category. </p> <h5 id="block-level"> <span class="secno"> <ins>2.3.3.1. </ins> <del>2.1.4.1. </del> </span> <dfn
   id="block-level1"> Block-level elements </dfn> </h5> <p> Block-level elements are used for structural grouping of page content. <p> There are several kinds of block-level elements: <ul> <li> Some can only contain other block-level elements: <code> <a
    href="#blockquote0"> blockquote </a> </code> , <code> <a
    href="#section3"> section </a> </code> , <code> <a
    href="#article0"> article </a> </code> , <code> <a
    href="#header0"> header </a> </code> . <li> Some can only contain <span> <a href="#inline-level1"> inline-level content </a> </span> : <code> <a href="#p0"> p </a> </code> , <code> <a
    href="#h10"> h1 </a> </code> - <code> <a href="#h60"> h6 </a> </code> , <code> <a
    href="#address0"> address </a> </code> . <li> Some can contain either block-level elements or <span> <a
    href="#inline-level1"> inline-level content </a> </span> (but not both): <code> <a href="#nav0"> nav </a> </code> , <code> <a
    href="#aside0"> aside </a> </code> , <code> <a
    href="#footer0"> footer </a> </code> , <code> div </code> . <li> Finally, some have very specific content models: <code> <a
    href="#ul0"> ul </a> </code> , <code> <a href="#ol0"> ol </a> </code> , <code> <a
    href="#dl0"> dl </a> </code> , <code> table </code> , <code> <a
    href="#script1"> script </a> </code> . </ul> <p> There are also elements that seem to be block-level but aren't, such as <code> <a href="#body0"> body </a> </code> , <code> <a
   href="#li0"> li </a> </code> , <code> <a href="#dt0"> dt </a> </code> , <code> <a
   href="#dd0"> dd </a> </code> , and <code> td </code> . These elements are allowed only in specific places, not simply anywhere that block-level elements are allowed. <p> Some block-level elements play multiple roles. For instance, the <code> <a href="#script1"> script </a> </code> elements is allowed inside <code> <a href="#head0"> head </a> </code> elements and can also be used as <span> <a href="#inline-level1"> inline-level content </a> </span> . Similarly, the <code> <a href="#ul0"> ul </a> </code> , <code> <a
   href="#ol0"> ol </a> </code> , <code> <a href="#dl0"> dl </a> </code> , <code> table </code> , and <code> <a href="#blockquote0"> blockquote </a> </code> elements play dual roles as both block-level and inline-level elements. <h5 id="inline-level"> <span class="secno"> <ins>2.3.3.2. </ins> <del>2.1.4.2. </del> </span> <dfn
   id="inline-level1"> Inline-level content </dfn> </h5> <p> Inline-level content consists of text and various elements to annotate the text, as well as some <span> <a href="#embedded1"> embedded content </a> </span> (such as images or sound clips). <p> Inline-level content comes in various types: <dl> <dt> <dfn id="strictly"> Strictly inline-level content </dfn> <dd> Text, embedded content, and elements that annotate the text without introducing structural grouping. For example: <code> <a
    href="#a0"> a </a> </code> , <code> <a href="#i0"> i </a> </code> , <code> <a
    href="#noscript0"> noscript </a> </code> . Elements used in contexts allowing only strictly inline-level content must not contain anything other than strictly inline-level content. <dt> <dfn id="structured"> Structured inline-level elements </dfn> <dd> Block-level elements that can also be used as inline-level content. For example: <code> <a href="#ol0"> ol </a> </code> , <code> <a
    href="#blockquote0"> blockquote </a> </code> , <code> table </code> . </dl> <p> Unless an element's content model explicitly states that it must contain <span> <a href="#significant"> significant inline content </a> </span> , simply having no text nodes and no elements satisfies an element whose content model is some kind of inline <ins>content. </ins> <del>contet. </del> <p> Some elements are defined to have as a content model <dfn
   id="significant"> significant inline content </dfn> . This means that at least one descendant of the element must be <span> <a
   href="#significant0"> significant text </a> </span> or <span> <a
   href="#embedded1"> embedded content </a> </span> . </p> <p> <dfn id="significant0"> Significant text </dfn> , for the purposes of determining the presence of <span> <a href="#significant"> significant inline content </a> </span> , consists of any character other than those falling in the <a
   href="http://unicode.org/Public/UNIDATA/UCD.html#General_Category_Values"> Unicode categories </a> Zs, Zl, Zp, Cc, and Cf. <a
   href="#refsUNICODE"> [UNICODE] </a> <div class="example"> <p> The following three paragraphs are non-conforming because their content model is not satisfied (they all count as empty). </p> <pre> &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;&amp;#x00A0;&lt;/em&gt;&lt;/p&gt; &lt;p&gt; &lt;ol&gt; &lt;li&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/p&gt; </pre> </div> <h5 id="determining"> <span class="secno"> <ins>2.3.3.3. </ins> <del>2.1.4.3. </del> </span> <dfn
   id="determining2"> Determining if a particular element contains block-level elements or inline-level content </dfn> </h5> <p> Some elements are defined to have content models that allow either <span> <a href="#block-level1"> block-level elements </a> </span> or <span> <a
   href="#inline-level1"> inline-level content </a> </span> , but not both. For example, the <code> <a href="#aside0"> aside </a> </code> and <code> <a
   href="#li0"> li </a> </code> elements. <p> To establish whether such an element is being used as a block-level container or as an inline-level container, for example in order to determine if a document conforms to these requirements, user agents must look at the element's child nodes. If any of the child nodes are not allowed in block-level contexts, then the element is being used for <span> <a href="#inline-level1"> inline-level content </a> </span> . If all the child nodes are allowed in a block-level context, then the element is being used for <span> <a href="#block-level1"> block-level elements </a> </span> . <div class="example"> <p> For instance, in the following (non-conforming) fragment, the <code> <a
    href="#li0"> li </a> </code> element is being used as an inline-level element container, because the <code> <a href="#style0"> style </a> </code> element is not allowed in a block-level context. (It doesn't matter, for the purposes of determining whether it is an inline-level or block-level context, that the <code> <a href="#style0"> style </a> </code> element is not allowed in inline-level contexts either.) </p> <pre> &lt;ol&gt; &lt;li&gt; &lt;p&gt; Hello World &lt;/p&gt; &lt;style&gt; /* This example is illegal. */ &lt;/style&gt; &lt;/li&gt; &lt;/ol&gt; </pre> <p> In the following fragment, the <code> <a href="#aside0"> aside </a> </code> element is being used as a block-level container, because even though all the elements it contains could be considered inline-level elements, there are no nodes that can only be considered inline-level. </p> <pre> &lt;aside&gt; &lt;ol&gt; &lt;li&gt; ... &lt;/li&gt; &lt;/ol&gt; &lt;ul&gt; &lt;li&gt; ... &lt;/li&gt; &lt;/ul&gt; &lt;/aside&gt; </pre> <p> On the other hand, in the following similar fragment, the <code> <a
    href="#aside0"> aside </a> </code> element is an inline-level container, because the text ("Foo") can only be considered inline-level. </p> <pre> &lt;aside&gt; &lt;ol&gt; &lt;li&gt; ... &lt;/li&gt; &lt;/ol&gt; Foo &lt;/aside&gt; </pre> </div> <h5 id="interactive0"> <span class="secno"> <ins>2.3.3.4. </ins> </span> <dfn
   id="interactive3"> <del>2.1.4.4. </del>   Interactive elements </dfn> </h5> <p> Certain elements in HTML can be activated, for instance <code> <a
   href="#a0"> a </a> </code> elements, <code> button </code> elements, or <code> input </code> elements when their <code> type </code> attribute is set to <code> radio </code> . Activation of those elements can happen in various (UA-defined) ways, for instance via the mouse or keyboard. <p> When activation is performed via some method other than clicking the pointing device, the default action of the event that triggers the activation must, instead of being activating the element directly, be <ins>to </ins> <span> <a href="#firing"> <ins>fire a </ins> <code title=""> <del>the dispatching of a new event, </del>   click </code> <ins>event </ins> </a> </span>  <del>, </del> on the same <ins>element. </ins> <del>element, with the mouse-specific fields (  button  ,  screenX  , etc) set to zero, and the key fields set according to the current state of the key input device, if any (false for any keys that are not available).  [DOM3EVENTS] </del>  <p> The default action of this <code title="event-click">  click </code> event, or of the real <code title="event-click">  click </code> event if the element was activated by clicking a pointing device, <ins>must </ins> <del>shall </del> be to dispatch yet another event, namely <a
   href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMActivate"> <code> DOMActivate </code> </a> . It is the default action of <em> that </em> event that then performs the actual action. </p> <p> For certain form controls, this process is complicated further by <a
   href="http://whatwg.org/specs/web-forms/current-work/#the-click"> changes that must happen around the click event </a> . <a href="#refsWF2"> [WF2] </a> </p> <p class="note"> Most interactive elements have content models that disallowed nesting interactive elements. <p class="big-issue"> Need to define how default actions actually work. For instance, if you click an event inside a link, the event is triggered on that element, but then we'd like a click is sent on the link itself. So how does that happen? Does the link have a bubbling listener that triggers that second click event? what if there are multiple nested links, which one should we send that event to? </p> <h4 id="global"> <span class="secno"> <ins>2.3.4. </ins> <del>2.1.5. </del> </span> Global attributes <span
   title="WIP"> <a href="#wip"> <ins>[WIP] </ins> </a> </span> </h4> <p> User agents must support the following common attributes on all elements in the HTML namespace (including elements that are not defined to exist by this specification). <dl> <dt> <dfn id="id" title="attr-id">  <code> id </code> </dfn> <dd> <p> The element's unique identifier. The value must be unique in the document and must contain at least one character. </p> <p> If the value is not the empty string, user agents must associate the element with the given value (exactly) for the purposes of ID matching (e.g. for selectors in CSS or for the <code> getElementById() </code> method in the DOM). </p> <p> Identifiers are opaque strings. Particular meanings should not be derived from the value of the <code title="attr-id"> <a
     href="#id">   id </a> </code> attribute. </p> <p> When an element has an ID set through multiple methods (for example, if it has both <code title="attr-id">  <a href="#id"> id </a> </code> and <code> xml:id </code> attributes simultaneously <a
     href="#refsXMLID">  [XMLID] </a> ), then the element has multiple identifiers. User agents must use all of an HTML element's identifiers (including those that are in error according to their relevant specification) for the purposes of ID matching. </p> <dt> <dfn id="title0" title="attr-title"> <code> title </code> </dfn> <dd> <p> Advisory information for the element, such as would be appropriate for a tooltip. On a link, this could be the title or a description of the target resource; on an image, it could be the caption or a description of the image; on a paragraph, it could be a footnote or commentary on the text; on a citation, it could be further information about the source; and so forth. The value is text. </p> <p> If this attribute is omitted from an element, then it implies that the <code title="attr-title"> <a href="#title0"> title </a> </code> attribute of the nearest ancestor with a <code title="attr-title"> <a
     href="#title0"> title </a> </code> attribute set is also relevant to this element. Setting the attribute overrides this, explicitly stating that the advisory information of any ancestors is not relevant to this element. Setting the attribute to the empty string indicates that the element has no advisory information. </p> <p class="note"> <ins>Some elements, such as </ins> <code> <a
     href="#link0"> <del>The </del>   link </a> </code> <del>,   style   ,   abbr   , </del> and <code> <a href="#dfn0"> dfn </a> </code> <ins>, </ins> <del>elements </del> define their own <code title="">  title </code> attributes instead of using the global <code title="attr-title">  <a href="#title0"> title </a> </code> attribute. </p> <dt> <dfn id="lang"> <code> lang </code> </dfn> (HTML only) and <dfn
    id="xmllang"> <code> xml:lang </code> </dfn> (XML only) <dd> <p> The primary language for the element's contents and for any of the element's attributes that contain text. The value must be a valid RFC 3066 language code, or the empty string. <a
     href="#refsRFC3066"> RFC3066 </a> </p> <p> If this attribute is omitted from an element, then it implies that the language of this element is the same as the language of the parent element. Setting the attribute to the empty string indicates that the primary language is unknown. </p> <p> The <code> <a href="#lang"> lang </a> </code> attribute only applies to HTML documents. Authors must not use the <code> <a
     href="#lang"> lang </a> </code> attribute in XML documents. Authors must instead use the <code> <a href="#xmllang"> xml:lang </a> </code> attribute, defined in XML. <a href="#refsXML"> [XML] </a> </p> <p> To determine the language of a node, user agents must look at the nearest ancestor element (including the element itself if the node is an element) that has a <code> <a href="#lang"> lang </a> </code> or <code> <a
     href="#xmllang"> xml:lang </a> </code> attribute set. That specifies the language of the node. </p> <p> If both the <code> <a href="#xmllang"> xml:lang </a> </code> attribute and the <code> <a href="#lang"> lang </a> </code> attribute are set, user agents must use the <code> <a href="#xmllang"> xml:lang </a> </code> attribute, and the <code> <a href="#lang"> lang </a> </code> attribute must be ignored for the purposes of determining the element's language. </p> <p> If no explicit language is given for the <span> <a
     href="#root-element"> root element </a> </span> , then language information from a higher-level protocol (such as HTTP), if any, must be used as the final fallback language. In the absence of any language information, the default value is unknown (the empty string). </p> <p> User agents may use the element's language to determine proper processing or rendering (e.g. in the selection of appropriate fonts or pronounciations, or for dictionary selection). </p> <dt> <dfn id="dir"> <code> dir </code> </dfn> <dd> <p> The element's text directionality. The attribute, if specified, must have either the literal value <code> ltr </code> or the literal value <code> rtl </code> . </p> <p> If the attribute has the literal value <code> ltr </code> , the element's directionality is left-to-right. If the attribute has the literal value <code> rtl </code> , the element's directionality is right-to-left. If the attribute is omitted or has another value, then the directionality is unchanged. </p> <p> The processing of this attribute depends on the presentation layer. For example, CSS 2.1 defines a mapping from this attribute to the CSS 'direction' and 'unicode-bidi' properties, and defines rendering in terms of those property. </p> <dt> <dfn id="class"> <code> class </code> </dfn> <dd> <p> The element's classes. The value must be a list of zero or more words (consisting of one or more non-space characters) separated by one or more spaces. </p> <p> User agents must assign all the given classes to the element, for the purposes of class matching (e.g. for selectors in CSS or for the <code
     title="dom-document-getElementsByClassName"> <a
     href="#getelementsbyclassname">   getElementsByClassName() </a> </code> method in the DOM). </p> <p> Unless defined by one of the URIs given in the <code> <a
     href="#profile"> profile </a> </code> attribute, classes are opaque strings. Particular meanings must not be derived from undefined values in the <code> <a href="#class"> class </a> </code> attribute. </p> <p> Authors should bear in mind that using the <code> <a
     href="#class"> class </a> </code> attribute does not convey any additional meaning to the element (unless using classes defined by a <code> <a
     href="#profile"> profile </a> </code> ). There is no semantic difference between an element <em> with </em> a class attribute and one <em> without </em> . Authors that use classes that are not defined in a <code> <a href="#profile"> profile </a> </code> should make sure, therefore, that their documents make as much sense once all <code> <a
     href="#class"> class </a> </code> attributes have been removed as they do with the attributes present. </p> <dt> <dfn id="contextmenu"
    title="attr-contextmenu"> <code> <ins>contextmenu </ins> </code> </dfn> <dd> <p> <ins>The element's </ins> <span title="context menus"> <a href="#context1"> <ins>context menu </ins> </a> </span> <ins>. The value must be the ID of a </ins> <code> <a
     href="#menu0"> <ins>menu </ins> </a> </code> <ins>element in the DOM. If the node that would be obtained by the invoking the </ins> <code> <ins>getElementById() </ins> </code> <ins>method using the attribute's value as the only argument is null or not a </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element, then the element has no assigned context menu. Otherwise, the element's assigned context menu is the element so identified. </ins> </p> </dd> </dl> <p class="big-issue"> Event handler attributes aren't handled yet. <p> The following DOM interface, common to elements in the HTML namespace, provides scripts with convenient access to the content attributes listed above: <pre
   class="idl"> interface <dfn id="htmlelement"> HTMLElement </dfn> : <span> Element </span> { attribute DOMString <span title="dom-id"> <a href="#id0"> id </a> </span> ; attribute DOMString <span title="dom-title"> <a href="#title1"> title </a> </span> ; attribute DOMString <span title="dom-lang"> <a href="#lang0"> lang </a> </span> ; attribute DOMString <span title="dom-dir"> <a href="#dir0"> dir </a> </span> ; attribute DOMString <span title="dom-className"> <a href="#classname"> className </a> </span> ; <ins>NodeList </ins> <span title="dom-htmlelement-getElementsByClassName"> <a href="#getelementsbyclassname0"> <ins>getElementsByClassName </ins> </a> </span> <ins>(in DOMString className1 [, in DOMString className2, ...] ); </ins> }; </pre> <p> The <dfn id="id0" title="dom-id"> <code> id </code> </dfn> attribute must <span> <a href="#reflect"> reflect </a> </span> the content <code
   title="attr-id"> <a href="#id">   id </a> </code> attribute. <p> The <dfn id="title1" title="dom-title"> <code> title </code> </dfn> attribute must <span> <a href="#reflect"> reflect </a> </span> the content <code title="attr-title"> <a href="#title0"> title </a> </code> attribute. <p> The <dfn id="lang0" title="dom-lang"> <code> lang </code> </dfn> attribute must <span> <a href="#reflect"> reflect </a> </span> the content <code> <a
   href="#lang"> lang </a> </code> attribute. <p> The <dfn id="dir0" title="dom-dir"> <code> dir </code> </dfn> attribute must <span> <a href="#reflect"> reflect </a> </span> the content <code> <a
   href="#dir"> dir </a> </code> attribute. <p> The <dfn id="classname"
   title="dom-className"> <code> className </code> </dfn> attribute must <span> <a
   href="#reflect"> reflect </a> </span> the content <code> <a
   href="#class"> class </a> </code> attribute. <p class="big-issue"> should also introduce a DOMTokenString accessor for the class attribute <p> <ins>The </ins> <dfn id="getelementsbyclassname0"
   title="dom-htmlelement-getElementsByClassName"> <code> <ins>getElementsByClassName() </ins> </code> </dfn> <ins>method must return the nodes that the </ins> <code> <a
   href="#htmldocument"> <ins>HTMLDocument </ins> </a> </code> <code
   title="dom-document-getElementsByClassName"> <a
   href="#getelementsbyclassname"> <ins>getElementsByClassName() </ins> </a> </code> <ins>method would return, excluding any elements that are not descendants of the </ins> <code> <a href="#htmlelement"> <ins>HTMLElement </ins> </a> </code> <ins>on which the method was invoked. </ins> </p> <h4 id="the-html"> <span class="secno"> <ins>2.3.5. </ins> <del>2.1.6. </del> </span> The <dfn
   id="html1"> <code> html </code> </dfn> element </h4> <dl class="element"> <dt> Contexts in which this element may be used: <dd> As the root element of a document. <dd> Wherever a subdocument fragment is allowed in a compound document. <dt> Content model: <dd> A <code> <a href="#head0"> head </a> </code> element followed by a <code> <a href="#body0"> body </a> </code> element. </dd> <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#html1"> html </a> </code> element represents the root of an HTML document. <h3 id="document"> <span class="secno"> <ins>2.4. </ins> <del>2.2. </del> </span> Document metadata </h3> <p> Document metadata is represented by <dfn id="metadata"> metadata elements </dfn> in the document's <code> <a href="#head0"> head </a> </code> element. <h4 id="the-head"> <span class="secno"> <ins>2.4.1. </ins> <del>2.2.1. </del> </span> The <dfn
   id="head0"> <code> head </code> </dfn> element </h4> <dl class="element"> <dt> Contexts in which this element may be used: <dd> As the first element in an <code> <a href="#html1"> html </a> </code> element. <dt> Content model: <dd> In any order, exactly one <code> <a href="#title2"> title </a> </code> element, optionally one <code> <a href="#base0"> base </a> </code> element (HTML only), and zero or more other <span> <a href="#metadata"> metadata elements </a> </span> (in particular, <code> <a
    href="#link0"> link </a> </code> , <code> <a href="#meta0"> meta </a> </code> , <code> <a href="#style0"> style </a> </code> , and <code> <a
    href="#script1"> script </a> </code> ). <dt> Element-specific attributes: <dd> <code> <a href="#profile"> profile </a> </code> (optional) <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmlheadelement"> HTMLHeadElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute DOMString <span title="dom-profile"> <a href="#profile0"> profile </a> </span> ; }; </pre> </dl> <p> The <code> <a href="#head0"> head </a> </code> element collects the document's metadata. <p> The <dfn id="profile"> <code> profile </code> </dfn> attribute must, if specified, contain a list of zero or more URIs (or IRIs) representing definitions of classes, metadata names, and link relations. These URIs are opaque strings, like namespaces; user agents are not expected to determine any useful information from the resources that they reference. <p> Each time a class, metadata, or link relationship name that is not defined by this specification is found in a document, the UA must check whether any of the URIs in the <code> <a href="#profile"> profile </a> </code> attribute are known (to the UA) to define that name. The class, metadata, or link relationship shall then be interpreted using the semantics given by the first URI that is known to define the name. If the name is not defined by this specification and none of the specified URIs defines the name either, then the class, metadata, or link relationship is meaningless and the UA must not assign special meaning to that name. <p> If two profiles define the same name, then the semantic is given by the first URI specified in the <code> <a href="#profile"> profile </a> </code> attribute. There is no way to use the names from both profiles in one document. <p> User agents must ignore all the URIs given in the <code> <a
   href="#profile"> profile </a> </code> attribute that follow a URI that the UA does not recognise. (Otherwise, if a name is defined in two profiles, UAs would assign meanings to the document differently based on which profiles they supported.) <p class="note"> If a profile's definition introduces new definitions over time, documents that use multiple profiles can change defined meaning over time. So as to avoid this problem, authors are encouraged to avoid using multiple profiles. <p> The <dfn id="profile0" title="dom-profile"> <code> profile </code> </dfn> DOM attribute must <span> <a href="#reflect"> reflect </a> </span> the <code> <a href="#profile"> profile </a> </code> content attribute on getting and setting. <h4 id="the-title"> <span class="secno"> <ins>2.4.2. </ins> <del>2.2.2. </del> </span> The <dfn
   id="title2"> <code> title </code> </dfn> element </h4> <p> <span title="metadata elements"> <a href="#metadata"> Metadata element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> In a <code> <a href="#head0"> head </a> </code> element containing no other <code> <a href="#title2"> title </a> </code> elements. <dt> Content model: <dd> Text (for details, see prose). <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#title2"> title </a> </code> element represents the document's title or name. Authors should use titles that identify their documents even when they are used out of context, for example in a user's history or bookmarks, or in search results. The document's title is often different from its first header, since the first header does not have to stand alone when taken out of context. <div class="example"> <p> Here are some examples of appropriate titles, contrasted with the top-level headers that might be used on those same pages. </p> <pre> &lt;title>Introduction to The Mating Rituals of Bees&lt;/title> ... &lt;h1>Introduction&lt;/h1> &lt;p>This companion guide to the highly successful &lt;cite>Introduction to Medieval Bee-Keeping&lt;/cite> book is... </pre> <p> The next page might be a part of the same site. Note how the title describes the subject matter unambiguously, while the first header assumes the reader knowns what the context is and therefore won't wonder if the dances are Salsa or <ins>Waltz: </ins> <del>Waltz. </del> </p> <pre> &lt;title>Dances used during bee mating rituals&lt;/title> ... &lt;h1>The Dances&lt;/h1> </pre> </div> <p> In HTML (as opposed to XHTML), the <code> <a
   href="#title2"> title </a> </code> element must not contain content other than text and entities; user agents <del>must </del> parse the element so that entities are recognised and processed, but all other markup is interpreted as literal text. </p> <p> In XHTML, the <code> <a href="#title2"> title </a> </code> element must not contain any elements. <p> User agents must concatenate the contents of all the text nodes and CDATA nodes that are direct children of the <code> <a
   href="#title2"> title </a> </code> element (ignoring any other nodes such as comments or elements), in tree order, to get the string to use as the document's title. User agents should use the document's title when referring to the document in their user interface. </p> <h4 id="the-base"> <span class="secno"> <ins>2.4.3. </ins> <del>2.2.3. </del> </span> The <dfn
   id="base0"> <code> base </code> </dfn> element </h4> <p> <span title="metadata elements"> <a href="#metadata"> Metadata element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> In a <code> <a href="#head0"> head </a> </code> element, before any elements that use relative URIs, and only if there are no other <code> <a
    href="#base0"> base </a> </code> elements anywhere in the document. Only in HTML documents (never in XML documents). <dt> Content model: <dd> Empty. <dt> Element-specific attributes: <dd> <code title="attr-base-href"> <a href="#href"> href </a> </code> (optional) <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmlbaseelement"> HTMLBaseElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute DOMString <span title="dom-base-href"> <a href="#href0"> href </a> </span> ; }; </pre> </dl> <p> The <code> <a href="#base0"> base </a> </code> element allows authors to specify the document's base URI for the purposes of resolving relative URIs. <p> The <dfn id="href" title="attr-base-href"> <code> href </code> </dfn> content attribute, if specified, must contain a URI (or IRI). <p> User agents must use the value of the <code
   title="att-base-href"> href </code> attribute on the first <code> <a
   href="#base0"> base </a> </code> element in the document as the document entity's base URI for the purposes of section 5.1.1 of RFC 2396 ("Establishing a Base URI": "Base URI within Document Content"). <a
   href="#refsRFC2396"> [RFC2396] </a> Note that this base URI from RFC 2396 is referred to by the algorithm given in XML Base, which <a
   href="#xmlBase"> is a normative part of this specification </a> . <p> If the base URI given by this attribute is a relative URI, it must be resolved relative to the higher-level base URIs (i.e. the base URI from the encapsulating entity or the URI used to retrieve the entity) to obtain an absolute base URI. <p> The <code title="attr-base-href"> <a href="#href"> href </a> </code> content attribute must be reflected by the DOM <dfn id="href0"
   title="dom-base-href"> <code> href </code> </dfn> attribute. <p> Authors must not use the <code> <a href="#base0"> base </a> </code> element in XML documents. Authors should instead use the <code> xml:base </code> attribute. <a href="#refsXMLBASE"> [XMLBASE] </a> <h4 id="the-link"> <span class="secno"> <ins>2.4.4. </ins> <del>2.2.4. </del> </span> The <dfn
   id="link0"> <code> link </code> </dfn> element </h4> <p> <span title="metadata elements"> <a href="#metadata"> Metadata element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> In a <code> <a href="#head0"> head </a> </code> element. <dt> Content model: <dd> Empty. <dt> Element-specific attributes: <dd> <code title="attr-link-href"> <a href="#href1"> href </a> </code> (optional) <dd> <code title="attr-link-rel"> <a href="#rel"> rel </a> </code> (optional) <dd> <code title="attr-link-media"> <a href="#media"> media </a> </code> (optional) <dd> <code title="attr-link-hreflang"> <a
    href="#hreflang"> hreflang </a> </code> (optional) <dd> <code title="attr-link-type"> <a href="#type"> type </a> </code> (optional) <dd> <code title="attr-link-title"> <a href="#title3"> title </a> </code> (optional) <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmllinkelement"> HTMLLinkElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute boolean <span title="dom-link-disabled"> <a href="#disabled"> disabled </a> </span> ; attribute DOMString <span title="dom-link-href"> <a href="#href2"> href </a> </span> ; attribute DOMString <span title="dom-link-rel"> <a href="#rel0"> rel </a> </span> ; attribute DOMString <span title="dom-link-media"> <a href="#media0"> media </a> </span> ; attribute DOMString <span title="dom-link-hreflang"> <a href="#hreflang0"> hreflang </a> </span> ; attribute DOMString <span title="dom-link-type"> <a href="#type0"> type </a> </span> ; }; </pre> <p> The <a
     href="http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html#StyleSheets-LinkStyle"> <code> LinkStyle </code> </a> interface defined in DOM2 Style must also be implemented by this element. <a href="#refsDOM2STYLE"> [DOM2STYLE] </a> </p> </dl> <p> The <code> <a href="#link0"> link </a> </code> element allows authors to indicate explicit relationships between their document and other resources. <p> The destination of the link is given by the <dfn id="href1"
   title="attr-link-href"> <code> href </code> </dfn> attribute, which must be a URI (or IRI). If the <code title="attr-link-href"> <a
   href="#href1"> href </a> </code> attribute is absent, then the element does not define a link. <p> The type of link indicated (the relationship) is given by the value of the <dfn id="rel" title="attr-link-rel"> <code> rel </code> </dfn> attribute. The <a href="#linkTypes"> allowed values and their meanings </a> are defined in a later section. If the <code title="attr-link-rel"> <a
   href="#rel"> rel </a> </code> attribute is absent, or if the value used is not allowed according to the definitions in this specification, then the element does not define a link. <p> Two categories of links can be created using the <code> <a
   href="#link0"> link </a> </code> element. <dfn id="links" title="external
   resource link"> Links to external resources </dfn> are links to resources that are to be used to augment the current document, and <dfn
   id="hyperlinks" title="hyperlink link"> hyperlinks </dfn> are links to other documents. The <a href="#linkTypes"> link types section </a> defines whether a particular link type is an external resource or a hyperlink. One element can create multiple links (of which some might be external resource links and some might be hyperlinks). User agents should process the links on a per-link basis, not a per-element basis. <p> The exact behaviour for links to external resources depends on the exact relationship, as defined for the relevant link type. Some of the attributes control whether or not the external resource is to be applied (as defined below). For external resources that are represented in the DOM (for example, style sheets), the DOM representation must be made available even if the resource is not applied. (However, user agents may opt to only fetch such resources when they are needed, instead of pro-actively downloading all the external resources that are not applied.) <p> Interactive user agents should provide users with a means to <span
   title="following hyperlinks"> follow the hyperlinks </span> created using the <code> <a
   href="#link0"> link </a> </code> element, somewhere within their user interface. The exact interface is not defined by this specification, but it should include the following information (obtained from the element's attributes, again as defined below), in some form or another (possibly simplified), for each hyperlink created with each <code> <a
   href="#link0"> link </a> </code> element in the document: <ul> <li> The relationship between this document and the resource (given by the <code title="attr-link-rel"> <a href="#rel"> rel </a> </code> attribute) <li> The title of the resource (given by the <code
    title="attr-link-title"> <a href="#title3"> title </a> </code> attribute). <li> The URI of the resource (given by the <code title="attr-link-href"> <a
    href="#href1"> href </a> </code> attribute). <li> The language of the resource (given by the <code
    title="attr-link-hreflang"> <a href="#hreflang"> hreflang </a> </code> attribute). <li> The optimum media for the resource (given by the <code
    title="attr-link-media"> <a href="#media"> media </a> </code> attribute). </ul> <p> User agents may also include other information, such as the type of the resource (as given by the <code title="attr-link-type"> <a
   href="#type"> type </a> </code> attribute). <p> The <dfn id="media" title="attr-link-media"> <code> media </code> </dfn> attribute says which media the resource applies to. The value must be a valid media query. <a href="#refsMQ"> [MQ] </a> <p> If the link is a <span title="hyperlink link"> <a
   href="#hyperlinks"> hyperlink </a> </span> then the <code
   title="attr-link-media"> <a href="#media"> media </a> </code> attribute is purely advisory, and describes for which media the document in question was designed. <p> However, if the link is an <span> <a href="#links"> external resource link </a> </span> , then the <code title="attr-link-media"> <a
   href="#media"> media </a> </code> attribute is prescriptive. The user agent must only apply the external resource to <a href="#views"> views </a> while their state match the listed media. <p id="default-media"> The default, if the <code title="attr-link-media"> <a
   href="#media"> media </a> </code> attribute is omitted, is <code> all </code> , meaning that by default links apply to all media. <p> The <dfn id="hreflang"
   title="attr-link-hreflang"> <code> hreflang </code> </dfn> attribute gives the language of the linked resource. It is purely advisory. The value must be a valid RFC 3066 language code. <a href="#refsRFC3066"> RFC3066 </a> User agents must not consider this attribute authoritative &mdash; upon fetching the resource, user agents must only use language information associated with the resource to determine its language, not metadata included in the link to the resource. <p> The <dfn id="type" title="attr-link-type"> <code> type </code> </dfn> attribute gives the MIME type of the linked resource. It is purely advisory. The value must be a valid MIME type, optionally with parameters. <a href="#refsRFC2046"> [RFC2046] </a> <p> For <span title="external resource link"> <a href="#links"> external resource links </a> </span> , user agents may use the type given in this attribute to decide whether or not to consider using the resource at all. If the UA does not support the given MIME type for the given link relationship, then the UA may opt not to download and apply the resource. <p> User agents must not consider the <code title="attr-link-type"> <a
   href="#type"> type </a> </code> attribute authoritative &mdash; upon fetching the resource, user agents must only use the Content-Type information associated with the resource to determine its type, not metadata included in the link to the resource. <p> If the attribute is omitted, then the UA must fetch the resource to determine its type and thus determine if it supports (and can apply) that external resource. <div class="example"> <p> If a document contains three style sheet links labelled as follows: </p> <pre> &lt;link rel="stylesheet" href="A" type="text/css"&gt; &lt;link rel="stylesheet" href="B" type="text/plain"&gt; &lt;link rel="stylesheet" href="C"&gt; </pre> <p> ...then a compliant UA that supported only CSS style sheets would fetch the A and C files, and skip the B file (since <code> text/plain </code> is not the MIME type for CSS style sheets). For these two files, it would then check the actual types returned by the UA. For those that are sent as <code> text/css </code> , it would apply the styles, but for those labelled as <code> text/plain </code> , or any other type, it would not. </p> </div> <p> The <dfn id="title3" title="attr-link-title"> <code> title </code> </dfn> attribute gives the title of the link. With one exception, it is purely advisory. The value is text. The exception is for style sheet links, where the <code title="attr-link-title"> <a href="#title3"> title </a> </code> attribute defines <a href="#stylesheetTitle"> alternate style sheet sets </a> . </p> <p class="note"> The <code title="attr-link-title"> <a
   href="#title3"> title </a> </code> attribute on <code> <a
   href="#link0"> link </a> </code> elements differs from the global <code
   title="attr-title"> <a href="#title0"> title </a> </code> attribute of <ins>most </ins> <del>all the </del> other elements in that a link without a title does not inherit the title of the parent element: it merely has no title. <p> Some versions of HTTP defined a <code title=""> Link: </code> header, to be processed like a series of <code> <a href="#link0"> link </a> </code> elements. When processing links, those must be taken into consideration as well. For the purposes of ordering, links defined by HTTP headers must be assumed to come before any links in the document, in the order that they were given in the HTTP entity header. Relative URIs in these headers must be resolved according to the rules given in HTTP, not relative to base URIs set by the document (e.g. using a <code> <a
   href="#base0"> base </a> </code> element or <code> xml:base </code> attributes). <a href="#refsRFC2616"> [RFC2616] </a> <a
   href="#refsRFC2068"> [RFC2068] </a> <p> The DOM attributes <dfn id="href2"
   title="dom-link-href"> <code> href </code> </dfn> , <dfn id="rel0"
   title="dom-link-rel"> <code> rel </code> </dfn> , <dfn id="media0"
   title="dom-link-media"> <code> media </code> </dfn> , <dfn id="hreflang0"
   title="dom-link-hreflang"> <code> hreflang </code> </dfn> , and <dfn id="type0"
   title="dom-link-type"> <code> type </code> </dfn> each <span> <a
   href="#reflect"> reflect </a> </span> the respective content attributes of the same name. <p> The DOM attribute <dfn id="disabled"
   title="dom-link-disabled"> <code> disabled </code> </dfn> only applies to style sheet links. When the <code> <a href="#link0"> link </a> </code> element defines a style sheet link, then the <code title="dom-link-disabled"> <a
   href="#disabled"> disabled </a> </code> attribute behaves as defined <a
   href="#stylesheetDisabled"> for the alternate <ins>style sheets </ins> <del>stylesheets </del> DOM </a> . For all other <code> <a href="#link0"> link </a> </code> elements it must always return false and must do nothing on setting. </p> <h4 id="the-meta"> <span class="secno"> <ins>2.4.5. </ins> <del>2.2.5. </del> </span> The <dfn
   id="meta0"> <code> meta </code> </dfn> element </h4> <p> <span title="metadata elements"> <a href="#metadata"> Metadata element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> In a <code> <a href="#head0"> head </a> </code> element. <dt> Content model: <dd> Empty. <dt> Element-specific attributes: <dd> <code title="attr-meta-name"> <a href="#name"> name </a> </code> (optional) <dd> <code title="attr-meta-http-equiv"> <a
    href="#http-equiv"> http-equiv </a> </code> (HTML only, optional) <dd> <code title="attr-meta-content"> <a href="#content0">  content </a> </code> (optional) <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmlmetaelement"> HTMLMetaElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute DOMString <span title="dom-meta-content"> <a href="#content1">  content </a> </span> ; attribute DOMString <span title="dom-meta-name"> <a href="#name0"> name </a> </span> ; }; </pre> </dl> <p> The <code> <a href="#meta0"> meta </a> </code> element allows authors to specify document metadata that cannot be expressed using the <code> <a
   href="#title2"> title </a> </code> , <code> <a href="#base0"> base </a> </code> , <code> <a href="#link0"> link </a> </code> , <code> <a
   href="#style0"> style </a> </code> , and <code> <a
   href="#script1"> script </a> </code> elements. The metadata is expressed in terms of name/value pairs: the <dfn id="name"
   title="attr-meta-name"> <code> name </code> </dfn> attribute on the <code> <a
   href="#meta0"> meta </a> </code> element gives the name, and the <dfn
   id="content0" title="attr-meta-content">  <code> content </code> </dfn> attribute on the same element gives the value. <p> To set metadata with <code> <a href="#meta0"> meta </a> </code> elements, authors must first specify a profile that defines metadata names, using the <code> <a href="#profile"> profile </a> </code> attribute. The value of the <code title="attr-meta-name"> <a href="#name"> name </a> </code> attribute must be defined by one of the profiles, and the value of the <code
   title="attr-meta-content"> <a href="#content0">  content </a> </code> attribute must conform to the syntax given by the profile. <p> How user agents handle metadata set in this way depends on the definitions of the profiles involved. <p> If a <code> <a href="#meta0"> meta </a> </code> element has no <code
   title="attr-meta-name"> <a href="#name"> name </a> </code> attribute, it does not set document metadata. If a <code> <a href="#meta0"> meta </a> </code> element has no <code title="attr-meta-content"> <a
   href="#content0">  content </a> </code> attribute, then the value part of the metadata name/value pair is the empty string. <p> The DOM attributes <dfn id="name0"
   title="dom-meta-name"> <code> name </code> </dfn> and <dfn id="content1"
   title="dom-meta-content">  <code> content </code> </dfn> <span> <a
   href="#reflect"> reflect </a> </span> the respective content attributes of the same name. </p> <h5 id="charset"> <span class="secno"> <ins>2.4.5.1. </ins> <del>2.2.5.1. </del> </span> Specifying and establishing the document's character encoding </h5> <p> The <code> <a href="#meta0"> meta </a> </code> element may also be used, in HTML only (not in XHTML) to provide UAs with character encoding information for the file. To do this, the <code> <a
   href="#meta0"> meta </a> </code> element must be the first element in the <code> <a href="#head0"> head </a> </code> element, it must have the <dfn
   id="http-equiv" title="attr-meta-http-equiv"> <code> http-equiv </code> </dfn> attribute set to the literal value <code> Content-Type </code> , and must have the <code title="attr-meta-content"> <a
   href="#content0">  content </a> </code> attribute set to the literal value <code> text/html; charset= </code> immediately followed by the character encoding, which must be a valid character encoding name. <a
   href="#refsIANACHARSET"> [IANACHARSET] </a> When the <code> <a href="#meta0"> meta </a> </code> element is used in this way, there must be no other attributes set on the <ins>element, and the </ins> <code> <ins>http-equiv </ins> </code> <ins>attribute must be listed first in the source. </ins> <del>element. </del> Other than for giving the document's character encoding in this way, the <code title="attr-meta-http-equiv"> <a
   href="#http-equiv">   http-equiv </a> </code> attribute must not be used. <p> In XHTML, the XML declaration should be used for inline character encoding information. <p> Authors should avoid including inline character encoding information. Character encoding information should instead be included at the transport level (e.g. using the HTTP <code> Content-Type </code> header). <p> For HTML, user agents must use the following algorithm in determining the character encoding of a document: <ol> <li> If the transport layer specifies an encoding, use that. <li> Otherwise, if the user agent can find a <code> <a
    href="#meta0"> meta </a> </code> element that specifies character encoding information (as described above), then use that. <ins>(The exact parsing rules for using this information are not described in this specification.) </ins> </li> <li> Otherwise, if the user agent can autodetect the character encoding from applying frequency analysis or other algorithms to the data stream, then use that. <li> Otherwise, use an implementation-defined or user-specified default character encoding ( <code> ISO-8859-1 </code> , <code> windows-1252 </code> , and <code> UTF-8 </code> are recommended as defaults, and can in many cases be identified by inspection as they have different ranges of valid bytes). </ol> <p> For XML documents, the algorithm user agents must use to determine the character encoding is given by the XML specification. <a
   href="#refsXML"> [XML] </a> <h4 id="the-style"> <span class="secno"> <ins>2.4.6. </ins> <del>2.2.6. </del> </span> The <dfn
   id="style0"> <code> style </code> </dfn> element </h4> <p> <span title="metadata elements"> <a href="#metadata"> Metadata element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> In a <code> <a href="#head0"> head </a> </code> element. <dt> Content model: <dd> Depends on the value of the <code title="attr-style-type"> <a
    href="#type1"> type </a> </code> attribute. <dt> Element-specific attributes: <dd> <code title="attr-style-type"> <a href="#type1"> type </a> </code> (optional) <dd> <code title="attr-style-media"> <a href="#media1"> media </a> </code> (optional) <dd> <code title="attr-style-title"> <a href="#title4"> title </a> </code> (optional) <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmlstyleelement"> HTMLStyleElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute boolean <code title="dom-style-disabled"> <a href="#disabled0"> disabled </a> </code> ; attribute DOMString <code title="dom-style-media"> <a href="#media2"> media </a> </code> ; attribute DOMString <code title="dom-style-type"> <a href="#type2"> type </a> </code> ; }; </pre> <p> The <a
     href="http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html#StyleSheets-LinkStyle"> <code> LinkStyle </code> </a> interface defined in DOM2 Style must also be implemented by this element. <a href="#refsDOM2STYLE"> [DOM2STYLE] </a> </p> </dl> <p> The <code> <a href="#style0"> style </a> </code> element allows authors to embed style information in their documents. <p> If the <dfn id="type1" title="attr-style-type"> <code> type </code> </dfn> attribute is given, it must contain a MIME type, optionally with parameters, that designates a styling language. <a
   href="#refsRFC2046"> [RFC2046] </a> If the attribute is absent, the type defaults to <code> text/css </code> . <a href="#refsRFC2318"> [RFC2138] </a> <p> If the UA supports the given styling language, then the UA must use the given styles as appropriate for that language. </p> <p> When examining types to determine if they support the language, user agents must not ignore unknown MIME parameters &mdash; types with unknown parameters must be assumed to be unsupported. <p> The <dfn id="media1" title="attr-style-media"> <code> media </code> </dfn> attribute says which media the styles apply to. The value must be a valid media query. <a href="#refsMQ"> [MQ] </a> User agents must only apply the styles to <a href="#views"> views </a> while their state match the listed media. <p id="style-default-media"> The default, if the <code
   title="attr-style-media"> <a href="#media1"> media </a> </code> attribute is omitted, is <code> all </code> , meaning that by default styles apply to all media. <p id="title-on-style"> The <dfn id="title4"
   title="attr-style-title"> <code> title </code> </dfn> attribute on <code> <a
   href="#style0"> style </a> </code> elements <a
   href="#stylesheetTitle"> defines alternate style sheet sets </a> . If the <code> <a href="#style0"> style </a> </code> element has no <code
   title="attr-style-title"> <a href="#title4"> title </a> </code> attribute, then it has no title; the <code title="attr-title"> <a
   href="#title0"> title </a> </code> attribute of ancestors does not apply to the <code> <a href="#style0"> style </a> </code> element. </p> <p class="note"> <ins>The </ins> <code title="attr-style-title"> <a
   href="#title4"> <ins>title </ins> </a> </code> <ins>attribute on </ins> <code> <a
   href="#style0"> <ins>style </ins> </a> </code> <ins>elements, like the </ins> <code
   title="attr-link-title"> <a href="#title3"> <ins>title </ins> </a> </code> <ins>attribute on </ins> <code> <a href="#link0"> <ins>link </ins> </a> </code> <ins>elements, differs from the global </ins> <code title="attr-title"> <a href="#title0"> <ins>title </ins> </a> </code> <ins>attribute in that a </ins> <code> <a href="#style0"> <ins>style </ins> </a> </code> <ins>block without a title does not inherit the title of the parent element: it merely has no title. </ins> <p> <ins>All descendant elements must be processed, according to their semantics, before the </ins> <code> <a href="#style0"> <ins>style </ins> </a> </code> <ins>element itself is evaluated. </ins>  For styling languages that consist of pure text, user agents must <ins>evaluate </ins> <code> <a href="#style0"> <ins>style </ins> </a> </code> <ins>elements by passing the </ins> <del>use a </del> concatenation of the contents of all the text nodes and CDATA nodes that are direct children of the <code> <a href="#style0"> style </a> </code> element <ins>(not </ins> <del>(ignoring </del> any other nodes such as comments or elements), in tree <ins>order, to the style system. </ins> <del>order. </del> For XML-based styling languages, user agents must <ins>pass </ins> <del>use </del> all the children nodes of the <code> <a
   href="#style0">  style </a> </code> element <ins>to the style system. </ins> <p class="note"> <ins>This specification does not specify a style system, but CSS is expected to be supported by most Web browsers. </ins> <a
   href="#refsCSS21"> <ins>[CSS21] </ins> </a> <del>as the style. </del> <p> The DOM attributes <dfn id="media2"
   title="dom-style-media"> <code> media </code> </dfn> and <dfn id="type2"
   title="dom-style-type"> <code> type </code> </dfn> each <span> <a
   href="#reflect"> reflect </a> </span> the respective content attributes of the same name. <p> The DOM <dfn id="disabled0"
   title="dom-style-disabled"> <code> disabled </code> </dfn> attribute behaves as defined <a href="#stylesheetDisabled"> for the alternate <ins>style sheets </ins> <del>stylesheets </del> DOM </a> . <h3 id="sections"> <span class="secno"> <ins>2.5. </ins> <del>2.3. </del> </span> Sections </h3> <p> <dfn id="sectioning"> Sectioning elements </dfn> are elements that divide the page into, for lack of a better word, sections. This section describes HTML's sectioning elements and elements that support them. <p id="applyToSection"> Some elements are scoped to their nearest ancestor sectioning element. For example, <code> <a
   href="#address0"> address </a> </code> elements apply just to their section. For such elements <var title=""> x </var> , the elements that apply to a sectioning element <var title=""> e </var> are all the <var title=""> x </var> elements whose nearest sectioning element is <var title=""> e </var> . <h4 id="the-body"> <span class="secno"> <ins>2.5.1. </ins> <del>2.3.1. </del> </span> The <dfn
   id="body0"> <code> body </code> </dfn> element </h4> <p> <span title="sectioning elements"> <a href="#sectioning"> Sectioning element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> As the second element in an <code> <a href="#html1"> html </a> </code> element. <dt> Content model: <dd> Zero or more <span> <a href="#block-level1"> block-level elements </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#body0"> body </a> </code> element represents the main content of the document. <p> The <code> <a href="#body0"> body </a> </code> element potentially has a heading. See the section on <span> <a href="#headings1"> headings and sections </a> </span> for further details. <p class="note"> Some DOM operations (for example, parts of the <span> <a
   href="#drag-and0">  drag and drop </a> </span> model) are defined in terms of " <span> <a href="#the-body0"> <ins>the </ins> <code> <del>the </del>   body  </code> element </a> </span> ". See the definition of the <code title="dom-document-body"> document.body </code> DOM attribute for details. </p> <h4 id="the-section"> <span class="secno"> <ins>2.5.2. </ins> <del>2.3.2. </del> </span> The <dfn
   id="section3"> <code> section </code> </dfn> element </h4> <p> <span title="sectioning elements"> <a
   href="#sectioning"> Sectioning </a> </span> <span title="block-level
   elements"> <a href="#block-level1"> block-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dt> Content model: <dd> Zero or more <span> <a href="#block-level1"> block-level elements </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#section3"> section </a> </code> element represents a generic document or application section. A section, in this context, is a thematic grouping of content, typically with a header, possibly with a footer. <p class="example"> Examples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the numbered sections of a thesis. A Web site's home page could be split into sections for an introduction, news items, contact information. <p> Each <code> <a href="#section3"> section </a> </code> element potentially has a heading. See the section on <span> <a href="#headings1"> headings and sections </a> </span> for further details. <h4 id="the-nav"> <span class="secno"> <ins>2.5.3. </ins> <del>2.3.3. </del> </span> The <dfn
   id="nav0"> <code> nav </code> </dfn> element </h4> <p> <span title="sectioning elements"> <a
   href="#sectioning"> Sectioning </a> </span> <span title="block-level
   elements"> <a href="#block-level1"> block-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dt> Content model: <dd> Zero or more <span> <a href="#block-level1"> block-level elements </a> </span> , or <span> <a href="#inline-level1"> inline-level content </a> </span> (but not both). <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#nav0"> nav </a> </code> element represents a section of a page that links to other pages or to parts within the page: a section with navigation links. <p> When <span title="Determining if a particular element contains
   block-level elements or inline-level content"> <a href="#determining2"> used as an inline-level content </a> </span> container, the element represents a <span> <a href="#paragraph"> paragraph </a> </span> . <p> Each <code> <a href="#nav0"> nav </a> </code> element potentially has a heading. See the section on <span> <a href="#headings1"> headings and sections </a> </span> for further details. <h4 id="the-article"> <span class="secno"> <ins>2.5.4. </ins> <del>2.3.4. </del> </span> The <dfn
   id="article0"> <code> article </code> </dfn> element </h4> <p> <span title="sectioning elements"> <a
   href="#sectioning"> Sectioning </a> </span> <span title="block-level
   elements"> <a href="#block-level1"> block-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dt> Content model: <dd> Zero or more <span> <a href="#block-level1"> block-level elements </a> </span> . <dt> Element-specific attributes: <dd> None. </dd> <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#article0"> article </a> </code> element represents a section of a page that consists of a composition that forms an independent part of a document, page, or site. This could be a forum post, a magazine or newspaper article, a Web log entry, a user-submitted comment, or any other independent item of content. <p class="note"> An <code> <a href="#article0"> article </a> </code> element is "independent" in that its contents could stand alone, for example in syndication. However, the element is still associated with its ancestors; for instance, contact information that <a href="#applyTo"> applies </a> to a parent <code> <a href="#body0"> body </a> </code> element still covers the <code> <a href="#article0"> article </a> </code> as well. <p> When <code> <a href="#article0"> article </a> </code> elements are nested, the inner <code> <a href="#article0"> article </a> </code> elements represent articles that are in principle related to the contents of the outer article. For instance, a Web log entry on a site that accepts user-submitted comments could represent the comments as <code> <a
   href="#article0"> article </a> </code> elements nested within the <code> <a
   href="#article0"> article </a> </code> element for the Web log entry. <p> Author information associated with an <code> <a
   href="#article0"> article </a> </code> element (q.v. the <code> <a
   href="#address0"> address </a> </code> element) does not apply to nested <code> <a href="#article0"> article </a> </code> elements. <p> Each <code> <a href="#article0"> article </a> </code> element potentially has a heading. See the section on <span> <a href="#headings1"> headings and sections </a> </span> for further details. <h4 id="the-blockquote"> <span class="secno"> <ins>2.5.5. </ins> <del>2.3.5. </del> </span> The <dfn
   id="blockquote0"> <code> blockquote </code> </dfn> element </h4> <p> <span title="sectioning elements"> <a
   href="#sectioning"> Sectioning </a> </span> <span title="block-level
   elements"> <a href="#block-level1"> block-level element </a> </span> , and <span title="structured inline-level elements"> <a
   href="#structured"> structured inline-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dd> Where <span> <a href="#structured"> structured inline-level elements </a> </span> are allowed. <dt> Content model: <dd> Zero or more <span> <a href="#block-level1"> block-level elements </a> </span> . <dt> Element-specific attributes: <dd> <code title="attr-blockquote-cite"> <a href="#cite0"> cite </a> </code> (optional) <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmlquoteelement"> HTMLQuoteElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute DOMString <span title="dom-quote-cite"> <a href="#cite1"> cite </a> </span> ; }; </pre> <p class="note"> The <code> <a
     href="#htmlquoteelement"> HTMLQuoteElement </a> </code> interface is also used by the <code> <a href="#q0"> q </a> </code> element. </p> </dl> <p> The <code> <a href="#blockquote0"> blockquote </a> </code> element represents a section that is quoted from another source. <p> Content inside a <code> <a href="#blockquote0"> blockquote </a> </code> must be quoted from another source, whose URI, if it has one, should be cited in the <dfn id="cite0"
   title="attr-blockquote-cite"> <code> cite </code> </dfn> attribute. <p> If the <code title="attr-blockquote-cite"> <a
   href="#cite0"> cite </a> </code> attribute is present, it must be a URI (or IRI). User agents should allow users to follow such citation links. <p> Each <code> <a href="#blockquote0"> blockquote </a> </code> element potentially has a heading. See the section on <span> <a
   href="#headings1"> headings and sections </a> </span> for further details. <p> The <dfn id="cite1" title="dom-quote-cite"> <code> cite </code> </dfn> DOM attribute <code> reflects </code> the element's <code title=""> cite </code> content attribte. <div class="example"> <p> The <code> <a href="#blockquote0"> blockquote </a> </code> element can be used with the <code> <a href="#ol0"> ol </a> </code> and <code> <a
    href="#cite3"> cite </a> </code> elements to mark up dialogue. This example demonstrates this using an extract from Abbot and Costello's famous sketch, <cite> Who's on first </cite> : </p> <pre> &lt;ol> &lt;li> &lt;cite>Costello&lt;/cite> &lt;blockquote> &lt;p> Look, you gotta first baseman? &lt;/p> &lt;/blockquote> &lt;li> &lt;cite>Abbott&lt;/cite> &lt;blockquote> &lt;p> Certainly. &lt;/p> &lt;/blockquote> &lt;li> &lt;cite>Costello&lt;/cite> &lt;blockquote> &lt;p> Who's playing first? &lt;/p> &lt;/blockquote> &lt;li> &lt;cite>Abbott&lt;/cite> &lt;blockquote> &lt;p> That's right. &lt;/p> &lt;/blockquote> &lt;li> &lt;cite>Costello&lt;/cite> &lt;blockquote> &lt;p> When you pay off the first baseman every month, who gets the money? &lt;/p> &lt;/blockquote> &lt;li> &lt;cite>Abbott&lt;/cite> &lt;blockquote> &lt;p> Every dollar of it. &lt;/p> &lt;/blockquote> &lt;/ol> </pre> </div> <h4 id="the-aside"> <span class="secno"> <ins>2.5.6. </ins> <del>2.3.6. </del> </span> The <dfn
   id="aside0"> <code> aside </code> </dfn> element </h4> <p> <span title="sectioning elements"> <a
   href="#sectioning"> Sectioning </a> </span> <span title="block-level
   elements"> <a href="#block-level1"> block-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dt> Content model: <dd> Zero or more <span> <a href="#block-level1"> block-level elements </a> </span> , or <span> <a href="#inline-level1"> inline-level content </a> </span> (but not both). <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#aside0"> aside </a> </code> element represents a section of a page that consists of content that is tangentially related to the content around the <code> <a href="#aside0"> aside </a> </code> element, and which could be considered separate from that content. Such sections are often represented as sidebars in printed typography. <p> When <span title="Determining if a particular element contains
   block-level elements or inline-level content"> <a href="#determining2"> used as an inline-level content </a> </span> container, the element represents a <span> <a href="#paragraph"> paragraph </a> </span> . <p> Each <code> <a href="#aside0"> aside </a> </code> element potentially has a heading. See the section on <span> <a href="#headings1"> headings and sections </a> </span> for further details. <h4 id="the-h1"> <span class="secno"> <ins>2.5.7. </ins> <del>2.3.7. </del> </span> The <dfn
   id="h10"> <code> h1 </code> </dfn> , <dfn id="h20"> <code> h2 </code> </dfn> , <dfn
   id="h30"> <code> h3 </code> </dfn> , <dfn id="h40"> <code> h4 </code> </dfn> , <dfn
   id="h50"> <code> h5 </code> </dfn> , and <dfn id="h60"> <code> h6 </code> </dfn> elements </h4> <p> <span> <a href="#block-level1"> Block-level elements </a> </span> . <dl class="element"> <dt> Contexts in which these elements may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dt> Content model: <dd> <span title="significant inline content"> <a
    href="#significant"> Significant </a> </span> <span> <a
    href="#strictly"> strictly inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> These elements define headers for their sections. <p> The semantics and meaning of these elements are defined in the section on <span> <a href="#headings1"> headings and sections </a> </span> . <p> These elements have a <dfn id="rank"> rank </dfn> given by the number in their name. The <code> <a href="#h10"> h1 </a> </code> element is said to <ins>have </ins> <del>hve </del> the highest rank, the <code> <a href="#h60"> h6 </a> </code> element has the lowest rank, and two elements with the same name have equal rank. <p> These elements must not be <span title="significant inline content"> <a
   href="#significant"> empty </a> </span> . <h4 id="the-header"> <span class="secno"> <ins>2.5.8. </ins> <del>2.3.8. </del> </span> The <dfn
   id="header0"> <code> header </code> </dfn> element </h4> <p> <span title="block-level elements"> <a href="#block-level1"> Block-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected and there are no <code> <a href="#header0"> header </a> </code> ancestors. <dt> Content model: <dd> Zero or more <span> <a href="#block-level1"> block-level elements </a> </span> , including at least one descendant <code> <a
    href="#h10"> h1 </a> </code> , <code> <a href="#h20"> h2 </a> </code> , <code> <a
    href="#h30"> h3 </a> </code> , <code> <a href="#h40"> h4 </a> </code> , <code> <a
    href="#h50"> h5 </a> </code> , or <code> <a href="#h60"> h6 </a> </code> element, but no <span> sectioning element </span> descendants, no <code> <a
    href="#header0"> header </a> </code> element descendants, and no <code> <a
    href="#footer0"> footer </a> </code> element descendants. <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#header0"> header </a> </code> element represents the header of a section. Headers may contain more than just the section's heading &mdash; for example it would be reasonable for the header to include version history information. <p> <code> <a href="#header0"> header </a> </code> elements must not contain any <code> <a href="#header0"> header </a> </code> elements, <code> <a
   href="#footer0"> footer </a> </code> elements, or any sectioning elements (such as <code> <a href="#section3"> section </a> </code> ) as descendants. <p> <code> <a href="#header0"> header </a> </code> elements must have at least one <code> <a href="#h10"> h1 </a> </code> , <code> <a
   href="#h20"> h2 </a> </code> , <code> <a href="#h30"> h3 </a> </code> , <code> <a
   href="#h40"> h4 </a> </code> , <code> <a href="#h50"> h5 </a> </code> , or <code> <a
   href="#h60"> h6 </a> </code> element as a descendant. <p> For the purposes of document summaries, outlines, and the like, <code> <a
   href="#header0"> header </a> </code> elements are equivalent to the highest <span title="rank"> <a href="#rank"> ranked </a> </span> <code> <a
   href="#h10"> h1 </a> </code> - <code> <a href="#h60"> h6 </a> </code> element descendant (the first such element if there are multiple elements with that <span> <a href="#rank"> rank </a> </span> ). <p> Other heading elements indicate subheadings or subtitles. <div class="example"> <p> Here are some examples of valid headers. In each case, the emphasised text represents the text that would be used as the header in an application extracting header data and ignoring subheadings. </p> <pre> &lt;header&gt; &lt;h1&gt; <strong> The reality dysfunction </strong> &lt;/h1&gt; &lt;h2&gt;Space is not the only void&lt;/h2&gt; &lt;/header&gt; </pre> <pre> &lt;header&gt; &lt;p&gt;Welcome to...&lt;/p&gt; &lt;h1&gt; <strong> Voidwars! </strong> &lt;/h1&gt; &lt;/header&gt; </pre> <pre> &lt;header&gt; &lt;h1&gt; <strong> Scalable Vector Graphics (SVG) 1.2 </strong> &lt;/h1&gt; &lt;h2&gt;W3C Working Draft 27 October 2004&lt;/h2&gt; &lt;dl&gt; &lt;dt&gt;This version:&lt;/dt&gt; &lt;dd&gt;&lt;a href="http://www.w3.org/TR/2004/WD-SVG12-20041027/"&gt;http://www.w3.org/TR/2004/WD-SVG12-20041027/&lt;/a&gt;&lt;/dd&gt; &lt;dt&gt;Previous version:&lt;/dt&gt; &lt;dd&gt;&lt;a href="http://www.w3.org/TR/2004/WD-SVG12-20040510/"&gt;http://www.w3.org/TR/2004/WD-SVG12-20040510/&lt;/a&gt;&lt;/dd&gt; &lt;dt&gt;Latest version of SVG 1.2:&lt;/dt&gt; &lt;dd&gt;&lt;a href="http://www.w3.org/TR/SVG12/"&gt;http://www.w3.org/TR/SVG12/&lt;/a&gt;&lt;/dd&gt; &lt;dt&gt;Latest SVG Recommendation:&lt;/dt&gt; &lt;dd&gt;&lt;a href="http://www.w3.org/TR/SVG/"&gt;http://www.w3.org/TR/SVG/&lt;/a&gt;&lt;/dd&gt; &lt;dt&gt;Editor:&lt;/dt&gt; &lt;dd&gt;Dean Jackson, W3C, &lt;a href="mailto:dean@w3.org"&gt;dean@w3.org&lt;/a&gt;&gt;&lt;/dd&gt; &lt;dt&gt;Authors:&lt;/dt&gt; &lt;dd&gt;See &lt;a href="#authors"&gt;Author List&lt;/a&gt;&lt;/dd&gt; &lt;/dl&gt; &lt;p class="copyright"&gt;&lt;a href="http://www.w3.org/Consortium/Legal/ipr-notic <em> ... </em> &lt;/header&gt; </pre> </div> <p> The section on <span> <a href="#headings1"> headings and sections </a> </span> defines how <code> <a href="#header0"> header </a> </code> elements are assigned to individual sections. <p> The <span> <a href="#rank"> rank </a> </span> of a <code> <a
   href="#header0"> header </a> </code> element is the same as for an <code> <a
   href="#h10"> h1 </a> </code> element (the highest rank). <h4 id="the-footer"> <span class="secno"> <ins>2.5.9. </ins> <del>2.3.9. </del> </span> The <dfn
   id="footer0"> <code> footer </code> </dfn> element </h4> <p> <span title="block-level elements"> <a href="#block-level1"> Block-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dt> Content model: <dd> Either zero or more <span> <a href="#block-level1"> block-level elements </a> </span> , but with no <code> <a href="#h10"> h1 </a> </code> , <code> <a href="#h20"> h2 </a> </code> , <code> <a href="#h30"> h3 </a> </code> , <code> <a href="#h40"> h4 </a> </code> , <code> <a href="#h50"> h5 </a> </code> , <code> <a href="#h60"> h6 </a> </code> , <code> <a
    href="#header0"> header </a> </code> , or <code> <a
    href="#footer0"> footer </a> </code> elements as descendants, and with no <span title="sectioning elements"> <a href="#sectioning"> sectioning elements </a> </span> as descendants; or, <span> <a
    href="#inline-level1"> inline-level content </a> </span> (but not both). <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#footer0"> footer </a> </code> element represents the footer for the section it <a href="#applyToSection"> applies </a> to. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like. <p> <code> <a href="#footer0"> footer </a> </code> elements must not contain any <code> <a href="#footer0"> footer </a> </code> , <code> <a
   href="#header0"> header </a> </code> , <code> <a href="#h10"> h1 </a> </code> , <code> <a href="#h20"> h2 </a> </code> , <code> <a href="#h30"> h3 </a> </code> , <code> <a href="#h40"> h4 </a> </code> , <code> <a href="#h50"> h5 </a> </code> , or <code> <a href="#h60"> h6 </a> </code> elements, or any of the sectioning elements (such as <code> <a href="#section3"> section </a> </code> ), as descendants. <p> When <span title="Determining if a particular element contains
   block-level elements or inline-level content"> <a href="#determining2"> used as an inline-level content </a> </span> container, the element represents a <span> <a href="#paragraph"> paragraph </a> </span> . <p> Contact information for the section given in a <code> <a
   href="#footer0"> footer </a> </code> should be marked up using the <code> <a
   href="#address0"> address </a> </code> element. </p> <h4 id="the-address"> <span class="secno"> <ins>2.5.10. </ins> <del>2.3.10. </del> </span> The <dfn
   id="address0"> <code> address </code> </dfn> element </h4> <p> <span title="block-level elements"> <a href="#block-level1"> Block-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dt> Content model: <dd> <span> <a href="#inline-level1"> Inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#address0"> address </a> </code> element represents a <span> <a href="#paragraph"> paragraph </a> </span> of contact information for the section it <a href="#applyToSection"> applies </a> to. <div class="example"> <p> For example, a page at the W3C Web site related to HTML might include the following contact information: </p> <pre> &lt;ADDRESS> &lt;A href="../People/Raggett/">Dave Raggett&lt;/A>, &lt;A href="../People/Arnaud/">Arnaud Le Hors&lt;/A>, contact persons for the &lt;A href="Activity">W3C HTML Activity&lt;/A> &lt;/ADDRESS> </pre> </div> <p> The <code> <a href="#address0"> address </a> </code> element must not be used to represent arbitrary addresses (e.g. postal addresses), unless those addresses are contact information for the section. (The <code> <a
   href="#p0"> p </a> </code> element is the appropriate element for marking up such addresses.) <p> The <code> <a href="#address0"> address </a> </code> element must not contain information other than contact information. <div class="example"> <p> For example, the following is non-conforming use of the <code> <a
    href="#address0"> address </a> </code> element: </p> <pre> &lt;ADDRESS>Last Modified: 1999/12/24 23:37:50&lt;/ADDRESS> </pre> </div> <p> Typically, the <code> <a href="#address0"> address </a> </code> element would be included with other information in a <code> <a
   href="#footer0"> footer </a> </code> element. <p> To determine the contact information for a sectioning element (such as the <code> <a href="#body0"> body </a> </code> element, which would give the contact information for the page), UAs must collect all the <code> <a
   href="#address0"> address </a> </code> elements that <a
   href="#applyToSection"> apply </a> to that sectioning element and its ancestor sectioning elements. The contact information is the collection of all the information given by those elements. <p class="note"> Contact information for one sectioning element, e.g. a <code> <a href="#aside0"> aside </a> </code> element, does not apply to its ancestor elements, e.g. the page's <code> <a href="#body0"> body </a> </code> . <h4 id="headings"> <span class="secno"> <ins>2.5.11. </ins> <del>2.3.11. </del> </span> <dfn
   id="headings1"> Headings and sections </dfn> </h4> <p> The <code> <a href="#h10"> h1 </a> </code> - <code> <a
   href="#h60"> h6 </a> </code> elements and the <code> <a
   href="#header0"> header </a> </code> element are headings. <p> The first heading in a sectioning element gives the header for that section. Subsequent headers of equal or higher <span> <a
   href="#rank"> rank </a> </span> start new (implied) sections, headers of lower <span> <a href="#rank"> rank </a> </span> start subsections that are part of the previous one. <p> Sectioning elements other than <code> <a
   href="#blockquote0"> blockquote </a> </code> are always considered subsections of their nearest ancestor sectioning element, regardless of what implied sections other headings may have created. However, <code> <a
   href="#blockquote0"> blockquote </a> </code> elements <em> are </em> associated with implied sections. Effectively, <code> <a
   href="#blockquote0"> blockquote </a> </code> elements act like sections on the inside, and act opaquely on the outside. <div class="example"> <p> For the following fragment: </p> <pre> &lt;body&gt; &lt;h1&gt;Foo&lt;/h1&gt; &lt;h2&gt;Bar&lt;/h2&gt; &lt;blockquote&gt; &lt;h3&gt;Bla&lt;/h3&gt; &lt;/blockquote&gt; &lt;p&gt;Baz&lt;/p&gt; &lt;h2&gt;Quux&lt;/h2&gt; &lt;section&gt; &lt;h3&gt;Thud&lt;/h3&gt; &lt;/section&gt; &lt;p&gt;Grunt&lt;/p&gt; &lt;/body&gt; </pre> <p> ...the structure would be: </p> <ol> <li> Foo (heading of explicit <code> <a href="#body0"> body </a> </code> section) <ol> <li> Bar (heading starting implied section) <ol> <li> Bla (heading of explicit <code> <a
         href="#blockquote0"> blockquote </a> </code> section) </ol> Baz (paragraph) <li> Quux (heading starting implied section) <li> Thud (heading of explicit <code> <a
       href="#section3"> section </a> </code> section) </ol> Grunt (paragraph) </ol> <p> Notice how the <code> <a href="#blockquote0"> blockquote </a> </code> nests inside an implicit section while the <code> <a
    href="#section3"> section </a> </code> does not (and in fact, ends the earlier implicit section so that a later paragraph is back at the top level). </p> </div> <p> Sections may contain headers of any <span> <a
   href="#rank"> rank </a> </span> , but authors are strongly encouraged to either use only <code> <a href="#h10"> h1 </a> </code> elements, or to use elements of the appropriate <span> <a href="#rank"> rank </a> </span> for the section's nesting level. <p> Authors are also encouraged to explictly wrap sections in sectioning elements, instead of relying on the implicit sections generated by having multiple heading in one sectioning element. <div class="example"> <p> For example, the following is correct: </p> <pre> &lt;body&gt; &lt;h4&gt;Apples&lt;/h4&gt; &lt;p&gt;Apples are fruit.&lt;/p&gt; &lt;section&gt; &lt;h2&gt;Taste&lt;/h2&gt; &lt;p&gt;They taste lovely.&lt;/p&gt; &lt;h6&gt;Sweet&lt;/h6&gt; &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt; &lt;h1&gt;Colour&lt;/h1&gt; &lt;p&gt;Apples come in various colours.&lt;/p&gt; &lt;/section&gt; &lt;/body&gt; </pre> <p> However, the same document would be more clearly expressed as: </p> <pre> &lt;body&gt; &lt;h1&gt;Apples&lt;/h1&gt; &lt;p&gt;Apples are fruit.&lt;/p&gt; &lt;section&gt; &lt;h2&gt;Taste&lt;/h2&gt; &lt;p&gt;They taste lovely.&lt;/p&gt; &lt;section&gt; &lt;h3&gt;Sweet&lt;/h3&gt; &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt; &lt;/section&gt; &lt;/section&gt; &lt;section&gt; &lt;h2&gt;Colour&lt;/h2&gt; &lt;p&gt;Apples come in various colours.&lt;/p&gt; &lt;/section&gt; &lt;/body&gt; </pre> <p> Both of the documents above are semantically identical and would produce the same outline in compliant user agents. </p> </div> <h5 id="outlines"> <span class="secno"> <ins>2.5.11.1. </ins> <del>2.3.11.1. </del> </span> Creating an outline </h5> <p> HTML documents can be viewed as a tree of sections, which defines how each element in the tree is semantically related to the others, in terms of the overall section structure. This tree is related to the document tree, but there is not a one-to-one relationship between elements in the DOM and the document's sections. <p> The tree of sections should be used when generating document outlines, for example when generating tables of contents. <p> To derive the tree of sections from the document tree, a hypothetical tree is used, consisting of a view of the document tree containing only the <code> <a href="#h10"> h1 </a> </code> - <code> <a href="#h60"> h6 </a> </code> and <code> <a href="#header0"> header </a> </code> elements, and the sectioning elements other than <code> <a
   href="#blockquote0"> blockquote </a> </code> . Descendants of <code> <a
   href="#h10"> h1 </a> </code> - <code> <a href="#h60"> h6 </a> </code> , <code> <a
   href="#header0"> header </a> </code> , and <code> <a
   href="#blockquote0"> blockquote </a> </code> elements must be removed from this view. <p> The hypothetical tree must be rooted at the <span> <a
   href="#root-element"> root element </a> </span> or at a sectioning element. In particular, while the sections inside <code> <a
   href="#blockquote0"> blockquote </a> </code> s do not contribute to the document's tree of sections, <code> <a
   href="#blockquote0"> blockquote </a> </code> s can have outlines of their own. <p> UAs must take this hypothetical tree (which will become the outline) and mutate it by walking it depth first in tree order and, for each <code> <a
   href="#h10"> h1 </a> </code> - <code> <a href="#h60"> h6 </a> </code> or <code> <a
   href="#header0"> header </a> </code> element that is not the first element of its parent sectioning element, inserting a new sectioning element, as follows: <dl class="switch">  <dt> If the element is a <code> <a href="#header0"> header </a> </code> element, or if it is an <code> <a href="#h10"> h1 </a> </code> - <code> <a
    href="#h60"> h6 </a> </code> node of <span> <a href="#rank"> rank </a> </span> equal to or higher than the first element in the parent sectioning element (assuming that is also an <code> <a
    href="#h10"> h1 </a> </code> - <code> <a href="#h60"> h6 </a> </code> node), or if the first element of the parent sectioning element is a sectioning element: <dd> Insert the new sectioning element as the immediately following sibling of the parent sectioning element, and move all the elements from the current heading element up to the end of the parent sectioning element into the new sectioning element. <dt> Otherwise: <dd> Move the current heading element, and all subsequent siblings up to but excluding the next sectioning element, <code> <a
    href="#header0"> header </a> </code> element, or <code> <a
    href="#h10"> h1 </a> </code> - <code> <a href="#h60"> h6 </a> </code> of equal or higher <span> <a href="#rank"> rank </a> </span> , whichever comes first, into the new sectioning element, then insert the new sectioning element where the current header was. </dl> <p> The outline is then the resulting hypothetical tree. The <span> <a
   href="#rank"> rank </a> </span> s of the headers become irrelevant at this point: each sectioning element in the hypothetical tree contains either no or one heading element child. If there is one, then it gives the section's heading, of there isn't, the section has no heading. <p> Sections are nested as in the hypothetical tree. If a sectioning element is a child of another, that means it is a subsection of that other section. <p> When creating an interactive table of contents, entries should jump the user to the relevant section element, if it was a real element in the original document, or to the heading, if the section element was one of those created during the above process. <p class="example"> Selecting the first section of the document therefore always takes the user to the top of the document, regardless of where the first header in the <code> <a href="#body0"> body </a> </code> is to be found. </p> <div class="note"> <p> The hypothetical tree (before mutations) could be generated by creating a <code> TreeWalker </code> with the following <a
    href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeFilter"> <code> NodeFilter </code> </a> (described here as an anonymous ECMAScript function). <a
    href="#refsDOMTR"> [DOMTR] </a> <a href="#refsECMA262"> [ECMA262] </a> </p> <pre> function (n) { // This implementation only knows about HTML elements. // An implementation that supports other languages might be // different. // Reject anything that isn't an element. if (n.nodeType != Node.ELEMENT_NODE) return NodeFilter.FILTER_REJECT; // Skip any descendants of headings. if (n.parentNode && n.parentNode.namespaceURI == 'http://www.w3.org/1999/xhtml') && (n.parentNode.localName == 'h1' || n.parentNode.localName == 'h2' || n.parentNode.localName == 'h3' || n.parentNode.localName == 'h4' || n.parentNode.localName == 'h5' || n.parentNode.localName == 'h6' || n.parentNode.localName == 'header') return NodeFilter.FILTER_REJECT; // Skip any blockquotes. if (n.namespaceURI == 'http://www.w3.org/1999/xhtml') && (n.localName == 'blockquote')) return NodeFilter.FILTER_REJECT; // Accept HTML elements in the list given in the prose above. if ((n.namespaceURI == 'http://www.w3.org/1999/xhtml') && (n.localName == 'body' || /*n.localName == 'blockquote' ||*/ n.localName == 'section' || n.localName == <ins>'nav' </ins> <del>'navigation' </del> || n.localName == 'article' || n.localName == 'aside' || n.localName == 'h1' || n.localName == 'h2' || n.localName == 'h3' || n.localName == 'h4' || n.localName == 'h5' || n.localName == 'h6' || n.localName == 'header')) return NodeFilter.FILTER_ACCEPT; // Skip the rest. return NodeFilter.FILTER_SKIP; } </pre> </div> <h5 id="determining0"> <span class="secno"> <ins>2.5.11.2. </ins> <del>2.3.11.2. </del> </span> Determining which heading and section applies to a particular node </h5> <p> Given a particular node, user agents must use the following algorithm, <em> in the given order </em> , to determine which heading and section the node is most closely associated with. The processing of this algorithm must stop as soon as the associated section and heading are established (even if they are established to be nothing). <ol> <li> If the node has an ancestor that is a <code> <a
    href="#header0"> header </a> </code> element, then the associated heading is the most distant such ancestor. The associated section is that <code> <a
    href="#header0"> header </a> </code> 's associated section (i.e. repeat this algorithm for that <code> <a href="#header0"> header </a> </code> ). <li> If the node has an ancestor that is an <code> <a
    href="#h10"> h1 </a> </code> - <code> <a href="#h60"> h6 </a> </code> element, then the associated heading is the most distant such ancestor. The associated section is that heading's section (i.e. repeat this algorithm for that heading element). <li> If the node is an <code> <a href="#h10"> h1 </a> </code> - <code> <a
    href="#h60"> h6 </a> </code> element or a <code> <a
    href="#header0"> header </a> </code> element, then the associated heading is the element itself. The UA must then generate the <a
    href="#outlines"> hypothetical section tree </a> described in the previous section, rooted at the nearest section ancestor (or the <span> <a
    href="#root-element"> root element </a> </span> if there is no such ancestor). If the parent of the heading in that hypothetical tree is an element in the real document tree, then that element is the associated section. Otherwise, there is no associated section element. <li> If the node is a sectioning element, then the associated section is itself. The UA must then generate the <a href="#outlines"> hypothetical section tree </a> described in the previous section, rooted at the section itself. If the section element, in that hypothetical tree, has a child element that is an <code> <a href="#h10"> h1 </a> </code> - <code> <a
    href="#h60"> h6 </a> </code> element or a <code> <a
    href="#header0"> header </a> </code> element, then that element is the associated heading. Otherwise, there is no associated heading element. <li> If the node is a <code> <a href="#footer0"> footer </a> </code> or <code> <a href="#address0"> address </a> </code> element, then the associated section is the nearest ancestor sectioning element, if there is one. The node's associated heading is the same as that sectioning element's associated heading (i.e. repeat this algorithm for that sectioning element). If there is no ancestor sectioning element, the element has no associated section nor an associated heading. <li> Otherwise, the node is just a normal node, and the document has to be examined more closely to determine its section and heading. Create a view rooted at the nearest ancestor sectioning element (or the <span> <a
    href="#root-element"> root element </a> </span> if there is none) that has just <code> <a href="#h10"> h1 </a> </code> - <code> <a
    href="#h60"> h6 </a> </code> elements, <code> <a
    href="#header0"> header </a> </code> elements, the node itself, and sectioning elements other than <code> <a
    href="#blockquote0"> blockquote </a> </code> elements. (Descendants of any of the nodes in this view can be ignored, as can any node later in the tree than the node in question, as the algorithm below merely walks backwards up this view.) <li> Let <var title=""> n </var> be an iterator for this view, initialised at the node in question. <li> Let <var title=""> c </var> be the current best candidate heading, initially null, and initially not used. It is used when top-level heading candidates are to be searched for (see below). <li> Repeat these steps (which effectively goes backwards through the node's previous siblings) until an answer is found: <ol> <li> If <var title=""> n </var> points to a node with no previous sibling, and <var title=""> c </var> is null, then return the node's parent node as the answer. If the node has no parent node, return null as the answer. <li> Otherwise, if <var title=""> n </var> points to a node with no previous sibling, return <var title=""> c </var> as the answer. <li> Adjust <var title=""> n </var> so that it points to the previous sibling of the current position. <li> If <var title=""> n </var> is pointing at an <code> <a
      href="#h10"> h1 </a> </code> or <code> <a href="#header0"> header </a> </code> element, then return that element as the answer. <li> If <var title=""> n </var> is pointing at an <code> <a
      href="#h20"> h2 </a> </code> - <code> <a href="#h60"> h6 </a> </code> element, and heading candidates are not being searched for, then return that element as the answer. <li> Otherwise, if <var title=""> n </var> is pointing at an <code> <a
      href="#h20"> h2 </a> </code> - <code> <a href="#h60"> h6 </a> </code> element, and either <var title=""> c </var> is still null, or <var
      title=""> c </var> is a heading of lower <span> <a
      href="#rank"> rank </a> </span> than this one, then set <var
      title=""> c </var> to be this element, and continue going backwards through the previous siblings. <li> If <var title=""> n </var> is pointing at a sectioning element, then from this point on top-level heading candidates are being searched for. (Specifically, we are looking for the nearest top-level header for the current section.) Continue going backwards through the previous siblings. </ol> <li> If the answer from the previous step (the loop) is null, which can only happen if the node has no preceeding headings and is not contained in a sectioning element, then there is no associated heading and no associated section. <li> Otherwise, if the answer from the earlier loop step is a sectioning element, then the associated section is that element and the associated heading is that sectioning element's associated heading (i.e. repeat this algorithm for that section). <li> Otherwise, if the answer from that same earlier step is an <code> <a
    href="#h10"> h1 </a> </code> - <code> <a href="#h60"> h6 </a> </code> element or a <code> <a href="#header0"> header </a> </code> element, then the associated heading is that element and the associated section is that heading element's associated section (i.e. repeat this algorithm for that heading). </ol> <p class="note"> Not all nodes have an associated header or section. For example, if a section is implied, as when multiple headers are found in one sectioning element, then a node in that section has an anonymous associated section (its section is not represented by a real element), and the algorithm above does not associate that node with any particular sectioning element. <div class="example"> <p> For the following fragment: </p> <pre> &lt;body&gt; &lt;h1&gt;X&lt;/h1&gt; &lt;h2&gt;X&lt;/h2&gt; &lt;blockquote&gt; &lt;h3&gt;X&lt;/h3&gt; &lt;/blockquote&gt; &lt;p id="a"&gt;X&lt;/p&gt; &lt;h4&gt;Text Node A&lt;/h4&gt; &lt;section&gt; &lt;h5&gt;X&lt;/h5&gt; &lt;/section&gt; &lt;p&gt;Text Node B&lt;/p&gt; &lt;/body&gt; </pre> <p> The associations are as follows (not all associations are shown): </p> <table> <thead> <tr> <th> Node <th> Associated heading <th> Associated section <tbody> <tr> <td> <code> &lt;body&gt; </code> <td> <code> &lt;h1&gt; </code> <td> <code> &lt;body&gt; </code> <tr> <td> <code> &lt;h1&gt; </code> <td> <code> &lt;h1&gt; </code> <td> <code> &lt;body&gt; </code> <tr> <td> <code> &lt;h2&gt; </code> <td> <code> &lt;h2&gt; </code> <td> None. <tr> <td> <code> &lt;blockquote&gt; </code> <td> <code> &lt;h2&gt; </code> <td> None. <tr> <td> <code> &lt;h3&gt; </code> <td> <code> &lt;h3&gt; </code> <td> <code> &lt;blockquote&gt; </code> <tr> <td> <code> &lt;p id="a"&gt; </code> <td> <code> &lt;h2&gt; </code> <td> None. <tr> <td> <code> Text Node A </code> <td> <code> &lt;h4&gt; </code> <td> None. <tr> <td> <code> Text Node B </code> <td> <code> &lt;h1&gt; </code> <td> <code> &lt;body&gt; </code> </table> </div> <h3 id="paragraphs"> <span class="secno"> <ins>2.6. </ins> <del>2.4. </del> </span> Paragraphs </h3> <p> A <dfn id="paragraph"> paragraph </dfn> is typically a block of text with one or more sentences that discuss a particular topic, as in typography, but can also be used for more general thematic grouping. For instance, an address is also a paragraph, as is a part of a form, a byline, or a stanza in a poem. <p> Paragraphs can be represented by several elements. The <code> <a
   href="#address0"> address </a> </code> element always represents a paragraph of contact information for its section, the <code> <a
   href="#aside0"> aside </a> </code> , <code> <a href="#nav0"> nav </a> </code> , <code> <a href="#footer0"> footer </a> </code> , <code> <a
   href="#li0"> li </a> </code> , and <code> <a href="#dd0"> dd </a> </code> elements represent paragraphs with various specific semantics when they are <span
   title="Determining if a particular element contains block-level elements
   or inline-level content"> <a href="#determining2"> used as inline-level content containers </a> </span> , and the <code> <a href="#p0"> p </a> </code> element represents all the other kinds of paragraphs, for which there are no dedicated elements. <h4 id="the-p"> <span class="secno"> <ins>2.6.1. </ins> <del>2.4.1. </del> </span> The <dfn
   id="p0"> <code> p </code> </dfn> element </h4> <p> <span title="block-level elements"> <a href="#block-level1"> Block-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dt> Content model: <dd> <span title="significant inline content"> <a
    href="#significant"> Significant </a> </span> <span> <a
    href="#inline-level1"> inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#p0"> p </a> </code> element represents a <span> <a
   href="#paragraph"> paragraph </a> </span> . <p> <code> <a href="#p0"> p </a> </code> elements can contain a mixture of <span> <a href="#strictly"> strictly inline-level content </a> </span> , such as text, images, hyperlinks, etc, and <span> <a
   href="#structured"> structured inline-level elements </a> </span> , such as lists, tables, and block quotes. <code> <a href="#p0"> p </a> </code> elements must not be <span title="significant inline content"> <a
   href="#significant"> empty </a> </span> . <div class="example"> <p> The following examples are conforming HTML fragments: </p> <pre> &lt;p&gt;The little kitten gently seated himself on a piece of carpet. Later in his life, this would be referred to as the time the cat sat on the mat.&lt;/p&gt; </pre> <pre> &lt;fieldset&gt; &lt;legend&gt;Personal information&lt;/legend&gt; &lt;p&gt; &lt;label&gt;Name: &lt;input name="n"&gt;&lt;/label&gt; &lt;label&gt;&lt;input name="anon" type="checkbox"&gt; Hide from other users&lt;/label&gt; &lt;/p&gt; &lt;p&gt;&lt;label&gt;Address: &lt;textarea name="a"&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt; &lt;/fieldset&gt; </pre> <pre> &lt;p&gt;There was once an example from Femley,&lt;br&gt; Whose markup was of dubious quality.&lt;br&gt; The validator complained,&lt;br&gt; So the author was pained,&lt;br&gt; To move the error from the markup to the rhyming.&lt;/p&gt; </pre> </div> <p> The <code> <a href="#p0"> p </a> </code> element should not be used when a more specific element is more appropriate. <div class="example"> <p> The following example is technically correct: </p> <pre> &lt;section&gt; &lt;!-- ... --&gt; &lt;p&gt;Last modified: 2001-04-23&lt;/p&gt; &lt;p&gt;Author: fred@example.com&lt;/p&gt; &lt;/section&gt; </pre> <p> However, it would be better marked-up as: </p> <pre> &lt;section&gt; &lt;!-- ... --&gt; &lt;footer&gt;Last modified: 2001-04-23&lt;/footer&gt; &lt;address&gt;Author: fred@example.com&lt;/address&gt; &lt;/section&gt; </pre> <p> Or: </p> <pre> &lt;section&gt; &lt;!-- ... --&gt; &lt;footer&gt; &lt;p&gt;Last modified: 2001-04-23&lt;/p&gt; &lt;address&gt;Author: fred@example.com&lt;/address&gt; &lt;/footer&gt; &lt;/section&gt; </pre> </div> <h4 id="the-hr"> <span class="secno"> <ins>2.6.2. </ins> <del>2.4.2. </del> </span> The <dfn
   id="hr0"> <code> hr </code> </dfn> element <span title="TBW"> <a
   href="#tbw"> <ins>[TBW] </ins> </a> </span> </h4> <p class="big-issue"> thematic separator. break. transition. hinge realignment. reconstruction, refinement, remodeling, reversal, revision, revolution. Maybe an 'html respite' or a 'hypertext rest'? . <h3 id="preformatted"> <span class="secno"> <ins>2.7. </ins> <del>2.5. </del> </span> Preformatted text </h3> <h4 id="the-pre"> <span class="secno"> <ins>2.7.1. </ins> <del>2.5.1. </del> </span> The <dfn
   id="pre0"> <code> pre </code> </dfn> element </h4> <p> <span title="block-level elements"> <a href="#block-level1"> Block-level element </a> </span> , and <span title="structured inline-level elements"> <a
   href="#structured"> structured inline-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dd> Where <span> <a href="#structured"> structured inline-level elements </a> </span> are allowed. <dt> Content model: <dd> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#pre0"> pre </a> </code> element represents a block of preformatted text, in which structure is represented by typographic conventions rather than by elements. <p> Some examples of cases where the <code> <a href="#pre0"> pre </a> </code> element could be used: <ul> <li> Including an e-mail, with paragraphs indicated by blank lines, lists indicated by lines prefixed with a bullet, and so on. <li> Including fragments of computer code, with structure indicated according to the conventions of that language. <li> Displaying ASCII art. </li> </ul> <p> If, ignoring text nodes consisting only of white space, the only child of a <code> <a href="#pre0"> pre </a> </code> is a <code> <a
   href="#code0"> code </a> </code> element, then the <code> <a
   href="#pre0"> pre </a> </code> element represents a block of computer code. <p> If, ignoring text nodes consisting only of white space, the only child of a <code> <a href="#pre0"> pre </a> </code> is a <code> <a
   href="#samp0"> samp </a> </code> element, then the <code> <a
   href="#pre0"> pre </a> </code> element represents a block of computer output. </p> <h3 id="lists"> <span class="secno"> <ins>2.8. </ins> <del>2.6. </del> </span> Lists </h3> <h4 id="the-ol"> <span class="secno"> <ins>2.8.1. </ins> <del>2.6.1. </del> </span> The <dfn
   id="ol0"> <code> ol </code> </dfn> element </h4> <p> <span title="block-level elements"> <a href="#block-level1"> Block-level element </a> </span> , and <span title="structured inline-level elements"> <a
   href="#structured"> structured inline-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dd> Where <span> <a href="#structured"> structured inline-level elements </a> </span> are allowed. <dt> Content model: <dd> Zero or more <code> <a href="#li0"> li </a> </code> elements. <dt> Element-specific attributes: <dd> <code> <a href="#start"> start </a> </code> (optional) <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmlolistelement"> HTMLOListElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute long <span title="dom-start"> <a href="#start0"> start </a> </span> ; }; </pre> </dl> <p> The <code> <a href="#ol0"> ol </a> </code> element represents an ordered list of items (which are represented by <code> <a href="#li0"> li </a> </code> elements). <p> The <dfn id="start"> <code> start </code> </dfn> attribute, if present, must have a value that consists of an optional U+002D HYPHEN-MINUS followed by one or more digits (U+0030 to U+0039) expressing a base ten integer giving the ordinal value of the first list item. <p> If the <code> <a href="#start"> start </a> </code> attribute is present, user agents must <a href="#toNumber"> convert the value to a numeric type </a> , truncating any fractional part, in order to determine the attribute's value. The default value, used if the attribute is missing or if the value cannot be converted to a number according to the referenced algorithm, is 1. <p> The items of the list are the <code> <a href="#li0"> li </a> </code> element child nodes of the <code> <a href="#ol0"> ol </a> </code> element, in tree order. <p> The first item in the list has the ordinal value given by the <code> <a
   href="#ol0"> ol </a> </code> element's <code> <a
   href="#start"> start </a> </code> attribute (unless it is further overridden by that <code> <a href="#li0"> li </a> </code> element's <code> <a
   href="#value"> value </a> </code> attribute). <p> Each subsequent item in the list has the ordinal value given by its <code> <a href="#value"> value </a> </code> attribute, if it has one, or, if it doesn't, the ordinal value of the previous item, plus one. <p> The <dfn id="start0" title="dom-start"> <code> start </code> </dfn> DOM attribute must <span> <a href="#reflect"> reflect </a> </span> the value of the <code> <a href="#start"> start </a> </code> content attribute. </p> <h4 id="the-ul"> <span class="secno"> <ins>2.8.2. </ins> <del>2.6.2. </del> </span> The <dfn
   id="ul0"> <code> ul </code> </dfn> element </h4> <p> <span title="block-level elements"> <a href="#block-level1"> Block-level element </a> </span> , and <span title="structured inline-level elements"> <a
   href="#structured"> structured inline-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dd> Where <span> <a href="#structured"> structured inline-level elements </a> </span> are allowed. <dt> Content model: <dd> Zero or more <code> <a href="#li0"> li </a> </code> elements. <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#ul0"> ul </a> </code> element represents an unordered list of items (which are represented by <code> <a href="#li0"> li </a> </code> elements). <p> The items of the list are the <code> <a href="#li0"> li </a> </code> element child nodes of the <code> <a href="#ul0"> ul </a> </code> element. <h4 id="the-li"> <span class="secno"> <ins>2.8.3. </ins> <del>2.6.3. </del> </span> The <dfn
   id="li0"> <code> li </code> </dfn> element </h4> <dl class="element"> <dt> Contexts in which this element may be used: <dd> Inside <code> <a href="#ol0"> ol </a> </code> elements. <dd> Inside <code> <a href="#ul0"> ul </a> </code> elements. <dd> Inside <code> <a href="#menu0"> menu </a> </code> elements. <dt> Content model: <dd> When the element is a child of an <code> <a href="#ol0"> ol </a> </code> or <code> <a href="#ul0"> ul </a> </code> element and the grandchild of an element that is <span title="Determining if a particular element contains
    block-level elements or inline-level content"> <a
    href="#determining2"> being used as an inline-level content container </a> </span> , or, when the element is a child of a <code> <a
    href="#menu0"> menu </a> </code> element: <span> <a
    href="#inline-level1"> inline-level content </a> </span> . <dd> Otherwise: zero or more <span> <a href="#block-level1"> block-level elements </a> </span> , or <span> <a href="#inline-level1"> inline-level content </a> </span> (but not both). <dt> Element-specific attributes: <dd> If the element is a child of an <code> <a href="#ol0"> ol </a> </code> element: <code> <a href="#value"> value </a> </code> (optional) <dd> If the element is not the child of an <code> <a
    href="#ol0"> ol </a> </code> element: None. <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmllielement"> HTMLLIElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute long <span title="dom-value"> <a href="#value0"> value </a> </span> ; }; </pre> </dl> <p> The <code> <a href="#li0"> li </a> </code> element represents a list item. <p> When the list item is the child of an <code> <a href="#ol0"> ol </a> </code> or <code> <a href="#ul0"> ul </a> </code> element, the content model of the item depends on the way that parent element was used. If it was used as structured inline content (i.e. if <em> that </em> element's parent was <span title="Determining if a particular element contains block-level
   elements or inline-level content"> <a href="#determining2"> used as an inline-level content </a> </span> container), then the <code> <a
   href="#li0"> li </a> </code> element must only contain <span> <a
   href="#inline-level1"> inline-level content </a> </span> . Otherwise, the element may be used either for <span title="inline-level content"> <a
   href="#inline-level1"> inline content </a> </span> or <span> <a
   href="#block-level1"> block-level elements </a> </span> . <p> When the list item is the child of a <code> <a
   href="#menu0"> menu </a> </code> element, the <code> <a
   href="#li0"> li </a> </code> element must contain only <span> <a
   href="#inline-level1"> inline-level content </a> </span> . <p> When the list item is not the child of an <code> <a
   href="#ol0"> ol </a> </code> , <code> <a href="#ul0"> ul </a> </code> , or <code> <a
   href="#menu0"> menu </a> </code> element, e.g. because it is an orphaned node not in the document, it may contain either for <span title="inline-level
   content"> <a href="#inline-level1"> inline content </a> </span> or <span> <a
   href="#block-level1"> block-level elements </a> </span> . <p> When <span title="Determining if a particular element contains
   block-level elements or inline-level content"> <a href="#determining2"> used as an inline-level content </a> </span> container, the list item represents a single <span> <a href="#paragraph"> paragraph </a> </span> . <p> The <dfn id="value"> <code> value </code> </dfn> attribute, if present, must have a value that consists of an optional U+002D HYPHEN-MINUS followed by one or more digits (U+0030 to U+0039) expressing a base ten integer giving the ordinal value of the first list item. <p> If the <code> <a href="#value"> value </a> </code> attribute is present, user agents must <a href="#toNumber"> convert the value to a numeric type </a> , truncating any fractional part, in order to determine the attribute's value. If the attribute's value cannot be converted to a number, it is treated as if the attribute was absent. The attribute has no default value. <p> The <code> <a href="#value"> value </a> </code> attribute is processed by the parent <code> <a href="#ol0"> ol </a> </code> element, if there is one. If there is not, the attribute has no effect. <p> The <dfn id="value0" title="dom-value"> <code> value </code> </dfn> DOM attribute must <span> <a href="#reflect"> reflect </a> </span> the value of the <code> <a href="#value"> value </a> </code> content attribute. <h4 id="the-dl"> <span class="secno"> <ins>2.8.4. </ins> <del>2.6.4. </del> </span> The <dfn
   id="dl0"> <code> dl </code> </dfn> element </h4> <p> <span title="block-level elements"> <a href="#block-level1"> Block-level element </a> </span> , and <span title="structured inline-level elements"> <a
   href="#structured"> structured inline-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dd> Where <span> <a href="#structured"> structured inline-level elements </a> </span> are allowed. <dt> Content model: <dd> Zero or more groups each consisting of one or more <code> <a
    href="#dt0"> dt </a> </code> elements followed by one or mode <code> <a
    href="#dd0"> dd </a> </code> elements. <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#dl0"> dl </a> </code> element introduces an unordered association list consisting of zero or more name-value groups. Each group must consist of one or more names ( <code> <a href="#dt0"> dt </a> </code> elements) followed by one or more values ( <code> <a
   href="#dd0"> dd </a> </code> elements). <p> Name-value groups may be terms and definitions, metadata topics and values, or any other groups of name-value data. <div class="example"> <p> The following are all conforming HTML fragments. </p> <p> In the following example, one entry ("Authors") is linked to two values ("John" and "Luke"). </p> <pre> &lt;dl&gt; &lt;dt&gt; Authors &lt;dd&gt; John &lt;dd&gt; Luke &lt;dt&gt; Editor &lt;dd&gt; Frank &lt;/dl&gt; </pre> <p> In the following example, one definition is linked to two terms. </p> <pre> &lt;dl&gt; &lt;dt lang="en-US"&gt; <ins>&lt;dfn>color&lt;/dfn> </ins> <del>color </del> &lt;/dt&gt; &lt;dt lang="en-GB"&gt; <ins>&lt;dfn>colour&lt;/dfn> </ins> <del>colour </del> &lt;/dt&gt; &lt;dd&gt; A sensation which (in humans) derives from the ability of the fine structure of the eye to distinguish three differently filtered analyses of a view. &lt;/dd&gt; &lt;/dl&gt; </pre> <p> The following example illustrates the use of the <code> <a
    href="#dl0"> dl </a> </code> element to mark up metadata of sorts. At the end of the example, one group has two metadata labels ("Authors" and "Editors") and two values ("Robert Rothman" and "Daniel Jackson"). </p> <pre> &lt;dl&gt; &lt;dt&gt; Last modified time &lt;/dt&gt; &lt;dd&gt; 2004-12-23T23:33Z &lt;/dd&gt; &lt;dt&gt; Recommended update interval &lt;/dt&gt; &lt;dd&gt; 60s &lt;/dd&gt; &lt;dt&gt; Authors &lt;/dt&gt; &lt;dt&gt; Editors &lt;/dt&gt; &lt;dd&gt; Robert Rothman &lt;/dd&gt; &lt;dd&gt; Daniel Jackson &lt;/dd&gt; &lt;/dl&gt; </pre> </div> <p> If a <code> <a href="#dl0"> dl </a> </code> element is empty, it contains no groups. <p> If a <code> <a href="#dl0"> dl </a> </code> element contains non-whitespace text nodes, or elements other than <code> <a href="#dt0"> dt </a> </code> and <code> <a href="#dd0"> dd </a> </code> , then those elements or text nodes do not form part of any groups in that <code> <a href="#dl0"> dl </a> </code> , and the document is non-conforming. <p> If a <code> <a href="#dl0"> dl </a> </code> element contains only <code> <a
   href="#dt0"> dt </a> </code> elements, then it consists of one group with names but no values, and the document is non-conforming. <p> If a <code> <a href="#dl0"> dl </a> </code> element contains only <code> <a
   href="#dd0"> dd </a> </code> elements, then it consists of one group with values but no names, and the document is non-conforming. <p class="note"> The <code> <a href="#dl0"> dl </a> </code> element is inappropriate for marking up dialogue, since dialogue is ordered (each speaker/line pair comes after the next). For an example of how to mark up dialogue, see the <code> <a href="#blockquote0"> blockquote </a> </code> element. <h4 id="the-dt"> <span class="secno"> <ins>2.8.5. </ins> <del>2.6.5. </del> </span> The <dfn
   id="dt0"> <code> dt </code> </dfn> element </h4> <dl class="element"> <dt> Contexts in which this element may be used: <dd> Before <code> <a href="#dd0"> dd </a> </code> elements inside <code> <a
    href="#dl0"> dl </a> </code> elements. <dt> Content model: <dd> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#dt0"> dt </a> </code> element represents the term, or name, part of a name-value group in a <code> <a href="#dl0"> dl </a> </code> element. <p class="note"> The <code> <a href="#dt0"> dt </a> </code> element itself does not indicate that its contents are a term being defined, but this can be indicated using the <code> <a href="#dfn0"> dfn </a> </code> element. <h4 id="the-dd"> <span class="secno"> <ins>2.8.6. </ins> <del>2.6.6. </del> </span> The <dfn
   id="dd0"> <code> dd </code> </dfn> element </h4> <dl class="element"> <dt> Contexts in which this element may be used: <dd> After <code> <a href="#dt0"> dt </a> </code> elements inside <code> <a
    href="#dl0"> dl </a> </code> elements. <dt> Content model: <dd> When the element is a child of a <code> <a href="#dl0"> dl </a> </code> element and the grandchild of an element that is <span title="Determining
    if a particular element contains block-level elements or inline-level
    content"> <a href="#determining2"> being used as an inline-level content container </a> </span> : <span> <a href="#inline-level1"> inline-level content </a> </span> . <dd> Otherwise: zero or more <span> <a href="#block-level1"> block-level elements </a> </span> , or <span> <a href="#inline-level1"> inline-level content </a> </span> (but not both). <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#dd0"> dd </a> </code> element represents the definition, or value, part of a name-value group in a <code> <a
   href="#dl0"> dl </a> </code> element. <p> The content model of a <code> <a href="#dd0"> dd </a> </code> element depends on the way its parent element is being used. If the parent element is a <code> <a href="#dl0"> dl </a> </code> element that is being used as structured inline content (i.e. if the <code> <a href="#dl0"> dl </a> </code> element's parent element is being <span title="Determining if a particular
   element contains block-level elements or inline-level content"> <a
   href="#determining2"> used as an inline-level content </a> </span> container), then the <code> <a href="#dd0"> dd </a> </code> element must only contain <span> <a href="#inline-level1"> inline-level content </a> </span> . <p> Otherwise, the element may be used either for <span title="inline-level
   content"> <a href="#inline-level1"> inline content </a> </span> or <span> <a
   href="#block-level1"> block-level elements </a> </span> . <h3 id="phrase"> <span class="secno"> <ins>2.9. </ins> <del>2.7. </del> </span> Phrase elements </h3> <h4 id="the-a"> <span class="secno"> <ins>2.9.1. </ins> <del>2.7.1. </del> </span> The <dfn
   id="a0"> <code> a </code> </dfn> element </h4> <p> <span title="interactive elements"> <a
   href="#interactive3">  Interactive </a> </span> , <span> <a
   href="#strictly"> strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed, if there are no ancestor <span> <a
    href="#interactive3">  interactive elements </a> </span> . <dt> Content model: <dd> When used in an element whose content model is only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> : only <span
    title="significant inline content"> <a
    href="#significant"> significant </a> </span> <span> <a
    href="#strictly"> strictly inline-level content </a> </span> , but there must be no <span title="interactive elements"> <a
    href="#interactive3">  interactive </a> </span> descendants. <dd> Otherwise: any <span title="significant inline content"> <a
    href="#significant"> significant </a> </span> <span> <a
    href="#inline-level1"> inline-level content </a> </span> , but there must be no <span title="interactive elements"> <a
    href="#interactive3">  interactive </a> </span> descendants. <dt> Element-specific attributes: <dd> <code title="attr-a-href"> <a href="#href3"> href </a> </code> (optional) <dd> <code title="attr-a-rel"> <a href="#rel1"> rel </a> </code> (optional) <dd> <code title="attr-a-media"> <a href="#media3"> media </a> </code> (optional) <dd> <code title="attr-a-hreflang"> <a href="#hreflang1"> hreflang </a> </code> (optional) <dd> <code title="attr-a-type"> <a href="#type3"> type </a> </code> <ins>(optional) </ins> <dd> <code title="attr-a-ping"> <a href="#ping"> <ins>ping </ins> </a> </code> (optional) <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmlanchorelement"> HTMLAnchorElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute DOMString <span title="dom-a-href"> <a href="#href4"> href </a> </span> ; attribute DOMString <span title="dom-a-rel"> <a href="#rel2"> rel </a> </span> ; attribute DOMString <span title="dom-a-media"> <a href="#media4"> media </a> </span> ; attribute DOMString <span title="dom-a-hreflang"> <a href="#hreflang2"> hreflang </a> </span> ; attribute DOMString <span title="dom-a-type"> <a href="#type4"> type </a> </span> ; <ins>attribute DOMString </ins> <span title="dom-a-ping"> <a href="#ping0"> <ins>ping </ins> </a> </span> <ins>; </ins> }; </pre> <p> <ins>The </ins> <code title="command-ro"> <a href="#command3"> <ins>Command </ins> </a> </code> <ins>interface must also be implemented by this element. </ins> </p> </dl> <p> If the <code> <a href="#a0"> a </a> </code> element has an <dfn id="href3"
   title="attr-a-href"> <code> href </code> </dfn> attribute, then it represents a hyperlink. <p> If the <code> <a href="#a0"> a </a> </code> element has no <code
   title="attr-a-href"> <a href="#href3"> href </a> </code> attribute, then the element is a placeholder for where a link might otherwise have been placed, if it had been relevant. <div class="example"> <p> If a site uses a consistent navigation toolbar on every page, then the link that would normally link to the page itself could be marked up using an <code> <a href="#a0"> a </a> </code> element: </p> <pre> &lt;nav> &lt;ul> &lt;li> &lt;a href="/">Home&lt;/a> &lt;/li> &lt;li> &lt;a href="/news">News&lt;/a> &lt;/li> &lt;li> &lt;a>Examples&lt;/a> &lt;/li> &lt;li> &lt;a href="/legal">Legal&lt;/a> &lt;/li> &lt;/ul> &lt;/nav> </pre> </div> <p> The <code title="attr-a-href"> <a href="#href3"> href </a> </code> attribute, if present, must have a value that is a URI (or IRI). <p> The relationship between the document containing the hyperlink and the destination resource indicated by the hyperlink is given by the value of the <dfn id="rel1" title="attr-a-rel"> <code> rel </code> </dfn> attribute. The <a href="#linkTypes"> allowed values and their meanings </a> are defined in a later section. The <code title="attr-a-rel"> <a
   href="#rel1"> rel </a> </code> attribute has no default value. If the attribute is omitted or if none of the values in the attribute are recognised by the UA, then the document has no particular relationship with the destination resource other than there being a hyperlink between the two. <p> Interactive user agents should allow users to <span title="following
   hyperlinks"> follow hyperlinks </span> created using the <code> <a href="#a0"> a </a> </code> element. The <code
   title="attr-a-rel"> <a href="#rel1"> rel </a> </code> , <code
   title="attr-a-media"> <a href="#media3"> media </a> </code> , <code
   title="attr-a-hreflang"> <a href="#hreflang1"> hreflang </a> </code> , and <code title="attr-a-type"> <a href="#type3"> type </a> </code> attributes may be used to indicate to the user the likely nature of the target resource. </p> <p> The <dfn id="media3" title="attr-a-media"> <code> media </code> </dfn> attribute describes for which media the target document was designed. It is purely advisory. The value must be a valid media query. <a
   href="#refsMQ"> [MQ] </a> The default, if the <code title="attr-a-media"> <a
   href="#media3"> media </a> </code> attribute is omitted or has an invalid value, is <code> all </code> . <p> The <dfn id="hreflang1"
   title="attr-a-hreflang"> <code> hreflang </code> </dfn> attribute, if present, gives the language of the linked resource. It is purely advisory. The value must be a valid RFC 3066 language code. <a
   href="#refsRFC3066"> RFC3066 </a> User agents must not consider this attribute authoritative &mdash; upon fetching the resource, user agents must only use language information associated with the resource to determine its language, not metadata included in the link to the resource. <p> The <dfn id="type3" title="attr-a-type"> <code> type </code> </dfn> attribute, if present, gives the MIME type of the linked resource. It is purely advisory. The value must be a valid MIME type, optionally with parameters. <a href="#refsRFC2046"> [RFC2046] </a> User agents must not consider the <code title="attr-a-type"> <a href="#type3"> type </a> </code> attribute authoritative &mdash; upon fetching the resource, user agents must only use the Content-Type information associated with the resource to determine its type, not metadata included in the link to the resource. <p> The <dfn id="ping" title="attr-a-ping"> <code> <ins>ping </ins> </code> </dfn> <ins>attribute, if present, gives the URIs of the resources that are interested in being notified if the user follows the hyperlink. The value must be a space separated list of one or more URIs. </ins> <p> <ins>If the element has an </ins> <code title="attr-a-href"> <a
   href="#href3"> <ins>href </ins> </a> </code> <ins>attribute and a </ins> <code title="attr-a-ping"> <a
   href="#ping"> <ins>ping </ins> </a> </code> <ins>attribute and the user follows the hyperlink, the user agent should take the </ins> <code title="attr-a-ping"> <a
   href="#ping"> <ins>ping </ins> </a> </code> <ins>attribute's value, strip leading and trailing spaces (U+0020), split the value on sequences of spaces, treat each resulting part as a URI (resolving relative URIs according to element's base URI) and then send a request to each of the resulting URIs. This may be done in parallel with the primary request, and is independent of the result of that request. </ins> <p> <ins>User agents should allow the user to adjust this behaviour, for example in conjunction with a setting that disables the sending of HTTP Referrer headers. Based on the user's preferences, UAs may either ignore the </ins> <code
   title="attr-a-ping"> <a href="#ping"> <ins>ping </ins> </a> </code> <ins>attribute altogether, or selectively ignore URIs in the list (e.g. ignoring any third-party URIs). </ins> <p> <ins>For URIs that are HTTP URIs, the requests must be performed using the POST method (with an empty entity body in the request). User agents must ignore any entity bodies returned in the responses, but must honour the HTTP headers &mdash; in particular, HTTP cookie headers. </ins> <a
   href="#refsRFC2965"> <ins>[RFC2965] </ins> </a> <p class="note"> <ins>To save bandwidth, implementors might wish to consider omitting optional headers such as </ins> <code> <ins>Accept </ins> </code> <ins>from these requests. </ins> <p> <ins>When the </ins> <code title="attr-a-ping"> <a href="#ping"> <ins>ping </ins> </a> </code> <ins>attribute is present, user agents should clearly indicate to the user that following the hyperlink will also cause secondary requests to be sent in the background, possibly including listing the actual target URIs. </ins> <p class="note"> <ins>The </ins> <code title="attr-a-ping"> <a
   href="#ping"> <ins>ping </ins> </a> </code> <ins>attribute allows Web pages to track which off-site links are most popular, as well as allowing advertisers to track click-through rates without obscuring the final target URI. It is possible to track users without this feature, but authors are encouraged to use the </ins> <code title="attr-a-ping"> <a href="#ping"> <ins>ping </ins> </a> </code> <ins>attribute so that the user agent can improve the user experience. </ins> </p> <p> <ins>The </ins> <code> <a href="#a0"> a </a> </code> element must not be <span
   title="significant inline content"> <a
   href="#significant"> empty </a> </span> . <p> The DOM attributes <dfn id="href4"
   title="dom-a-href"> <code> href </code> </dfn> , <dfn id="rel2"
   title="dom-a-rel"> <code> rel </code> </dfn> , <dfn id="media4"
   title="dom-a-media"> <code> media </code> </dfn> , <dfn id="hreflang2"
   title="dom-a-hreflang"> <code> hreflang </code> </dfn> , <del>and </del> <dfn id="type4"
   title="dom-a-type"> <code> type </code> </dfn> <ins>, and </ins> <dfn id="ping0"
   title="dom-a-ping"> <code> <ins>ping </ins> </code> </dfn> each <span> <a
   href="#reflect"> reflect </a> </span> the respective content attributes of the same name. <h4 id="the-em"> <span class="secno"> <ins>2.9.2. </ins> <del>2.7.2. </del> </span> The <dfn
   id="em0"> <code> em </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> When used in an element whose content model is only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> : only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> . <dd> Otherwise: any <span> <a href="#inline-level1"> inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#em0"> em </a> </code> element represents stress emphasis of its contents. <p> The level of emphasis that a particlar piece of content has is given by its number of ancestor <code> <a href="#em0"> em </a> </code> elements. <p> The placement of emphasis changes the meaning of the sentence. The element thus forms an integral part of the content. The precise way in which emphasis is used in this way depends on the language. <div class="example"> <p> These examples show how changing the emphasis changes the meaning. First, a general statement of fact, with no emphasis: </p> <pre> &lt;p>Cats are cute animals.&lt;/p> </pre> <p> By emphasising the first word, the statement implies that the kind of animal under discussion is in question (maybe someone is asserting that dogs are cute): </p> <pre> &lt;p>&lt;em>Cats&lt;/em> are cute animals.&lt;/p> </pre> <p> Moving the emphasis to the verb, one highlights that the truth of the entire sentence is in question (maybe someone is saying cats are not cute): </p> <pre> &lt;p>Cats &lt;em>are&lt;/em> cute animals.&lt;/p> </pre> <p> By moving it to the adjective, the exact nature of the the cats is reasserted (maybe someone suggested cats were <em> mean </em> animals): </p> <pre> &lt;p>Cats are &lt;em>cute&lt;/em> animals.&lt;/p> </pre> <p> Similarly, if someone asserted that cats were vegetables, someone correcting this might emphasise the last word: </p> <pre> &lt;p>Cats are cute &lt;em>animals&lt;/em>.&lt;/p> </pre> <p> By emphasising the entire sentence, it becomes clear that the speaker is fighting hard to get the point across. This kind of emphasis also typically affects the punctuation, hence the exclamation mark here. </p> <pre> &lt;p>&lt;em>Cats are cute animals!&lt;/em>&lt;/p> </pre> <p> Anger mixed with emphasising the cuteness could lead to markup such as: </p> <pre> &lt;p>&lt;em>Cats are &lt;em>cute&lt;/em> animals!&lt;/em>&lt;/p> </pre> </div> <h4 id="the-strong"> <span class="secno"> <ins>2.9.3. </ins> <del>2.7.3. </del> </span> The <dfn
   id="strong0"> <code> strong </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> When used in an element whose content model is only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> : only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> . <dd> Otherwise: any <span> <a href="#inline-level1"> inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#strong0"> strong </a> </code> element represents strong importance for its contents. <p> The relative level of importance of a piece of content is given by its number of ancestor <code> <a href="#strong0"> strong </a> </code> elements; each <code> <a href="#strong0"> strong </a> </code> element increases the importance of its contents. <p> Changing the importance of a piece of text with the <code> <a
   href="#strong0"> strong </a> </code> element does not change the meaning of the sentence. <div class="example"> <p> Here is an example of a warning notice in a game, with the various parts marked up according to how important they are: </p> <pre> &lt;p>&lt;strong>Warning.&lt;/strong> This dungeon is dangerous. &lt;strong>Avoid the ducks.&lt;/strong> Take any gold you find. &lt;strong>&lt;strong>Do not take any of the diamonds&lt;/strong>, they are explosive and &lt;strong>will destroy anything within ten meters.&lt;/strong>&lt;/strong> You have been warned.&lt;/p> </pre> </div> <h4 id="the-small"> <span class="secno"> <ins>2.9.4. </ins> <del>2.7.4. </del> </span> The <dfn
   id="small0"> <code> small </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> When used in an element whose content model is only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> : only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> . <dd> Otherwise: any <span> <a href="#inline-level1"> inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#small0"> small </a> </code> element represents small print (part of a document often describing legal restrictions, such as copyrights or other disadvantages), or other side comments. <p class="note"> The <code> <a href="#small0"> small </a> </code> element does not "de-emphasise" or lower the importance of text emphasised by the <code> <a href="#em0"> em </a> </code> element or marked as important with the <code> <a href="#strong0"> strong </a> </code> element. <div class="example"> <p> In this example the footer contains contact information and a copyright. </p> <pre> &lt;footer> &lt;address> For more details, contact &lt;a href="mailto:js@example.com">John Smith&lt;/a>. &lt;/address> &lt;p>&lt;small>&copy; copyright 2038 Example Corp.&lt;/small>&lt;/p> &lt;/footer> </pre> <p> In this second example, the <code> <a href="#small0"> small </a> </code> element is used for a side comment. </p> <pre> &lt;p>Example Corp today announced record profits for the second quarter &lt;small>(Full Disclosure: Foo News is a subsidiary of Example Corp)&lt;/small>, leading to speculation about a third quarter merger with Demo Group.&lt;/p> </pre> <p> In this last example, the <code> <a href="#small0"> small </a> </code> element is marked as being <em> important </em> small print. </p> <pre> &lt;p>&lt;strong>&lt;small>Continued use of this service will result in a kiss.&lt;/small>&lt;/strong>&lt;/p> </pre> </div> <h4 id="the-m"> <span class="secno"> <ins>2.9.5. </ins> <del>2.7.5. </del> </span> The <dfn
   id="m0"> <code> m </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> When used in an element whose content model is only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> : only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> . <dd> Otherwise: any <span> <a href="#inline-level1"> inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#m0"> m </a> </code> element represents a run of text marked or highlighted. <p class="big-issue"> Should we just repurpose <code> u </code> or <code> b </code> for this semantic instead? What would they stand for? <div class="example"> <p> In the following snippet, a paragraph of text refers to a specific part of a code fragment. </p> <pre> &lt;p>The highlighted part below is where the error lies:&lt;/p> &lt;pre>&lt;code>var i: Integer; begin i := &lt;m>1.1&lt;/m>; end.&lt;/code>&lt;/pre> </pre> <p> Another example of the <code> <a href="#m0"> m </a> </code> element is highlighting parts of a document that are matching some search string. If someone looked at a document, and the server knew that the user was searching for the word "kitten", then the server might return the document with one paragraph modified as follows: </p> <pre> &lt;p>I also have some &lt;m>kitten&lt;/m>s who are visiting me these days. They're really cute. I think they like my garden!&lt;/p> </pre> </div> <h4 id="the-abbr"> <span class="secno"> <ins>2.9.6. </ins> <del>2.7.6. </del> </span> The <dfn
   id="abbr0"> <code> abbr </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dt> Element-specific attributes: <dd> <code title="attr-abbr-title"> <a href="#title5"> title </a> </code> (optional) <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#abbr0"> abbr </a> </code> element represents an abbreviation or acronym. The <dfn id="title5"
   title="attr-abbr-title"> <code> title </code> </dfn> attribute should be used to provide an expansion of the abbreviation. If present, the attribute must only contain an expansion of the abbreviation. <div class="example"> <p> The paragraph below contains an abbreviation marked up with the <code> <a href="#abbr0"> abbr </a> </code> element. </p> <pre> &lt;p>The &lt;abbr title="Web Hypertext Application Technology Working Group">WHATWG&lt;/abbr> is a loose unofficial collaboration of Web browser manufacturers and interested parties who wish to develop new technologies designed to allow authors to write and deploy Applications over the World Wide Web.&lt;/p> </pre> </div> <p> The <code title="attr-abbr-title"> <a href="#title5"> title </a> </code> attribute may be omitted if there is a <code> <a
   href="#dfn0"> dfn </a> </code> element in the document whose <span> <a
   href="#defining"> defining term </a> </span> is the abbreviation (the <code> <a href="#textcontent0"> textContent </a> </code> of the <code> <a
   href="#abbr0"> abbr </a> </code> element). <div class="example"> <p> In the example below, the word "Zat" is used as an abbreviation in the second paragraph. The abbreviation is defined in the first, so the explanatory <code title="attr-abbr-title"> <a
    href="#title5"> title </a> </code> attribute has been omitted. Because of the way <code> <a href="#dfn0"> dfn </a> </code> elements are defined, the second <code> <a href="#abbr0"> abbr </a> </code> element in this example would be connected (in some UA-specific way) to the first. </p> <pre> &lt;p>The &lt;dfn>&lt;abbr>Zat&lt;/abbr>&lt;/dfn>, short for Zat'ni'catel, is a weapon.&lt;/p> &lt;p>Jack used a &lt;abbr>Zat&lt;/abbr> to make the boxes of evidence disappear.&lt;/p> </pre> </div> <h4 id="the-dfn"> <span class="secno"> <ins>2.9.7. </ins> <del>2.7.7. </del> </span> The <dfn
   id="dfn0"> <code> dfn </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed, if there are no ancestor <code> <a
    href="#dfn0"> dfn </a> </code> elements. <dt> Content model: <dd> <span> <a href="#strictly"> Strictly inline-level content </a> </span> , but there must be no descendant <code> <a href="#dfn0"> dfn </a> </code> elements. <dt> Element-specific attributes: <dd> <code title="attr-dfn-title"> <a href="#title6"> title </a> </code> (optional) <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#dfn0"> dfn </a> </code> element represents the defining instance of a term. The <span> <a href="#paragraph"> paragraph </a> </span> , <span title="dl"> <a href="#dl0"> definition list group </a> </span> , or <span
   title="sectioning elements"> <a href="#sectioning"> section </a> </span> that contains the <code> <a href="#dfn0"> dfn </a> </code> element contains the definition for the term given by the contents of the <code> <a
   href="#dfn0"> dfn </a> </code> element. <p> <code> <a href="#dfn0"> dfn </a> </code> elements must not be nested. <p> <dfn id="defining"> Defining term </dfn> : If the <code> <a
   href="#dfn0"> dfn </a> </code> element has a <dfn id="title6"
   title="attr-dfn-title"> <code> title </code> </dfn> attribute, then the exact value of that attribute is the term being defined. Otherwise, if it contains exactly one element child node and no child text nodes, and that child element is an <code> <a href="#abbr0"> abbr </a> </code> element with a <code title="attr-abbr-title"> <a href="#title5"> title </a> </code> attribute, then the exact value of <em> that </em> attribute is the term being defined. Otherwise, it is the exact <code> <a
   href="#textcontent0"> textContent </a> </code> of the <code> <a
   href="#dfn0"> dfn </a> </code> element that gives the term being defined. </p> <p> If the <code title="attr-dfn-title"> <a href="#title6"> title </a> </code> attribute of the <code> <a href="#dfn0"> dfn </a> </code> element is present, then it must only contain the term being defined. <p> There must only be one <code> <a href="#dfn0"> dfn </a> </code> element per document for each term defined (i.e. there must not be any duplicate <span
   title="defining term"> <a href="#defining"> terms </a> </span> ). <p class="note"> The <code title="attr-title"> <a
   href="#title0"> title </a> </code> attribute of ancestor elements does not affect <code> <a href="#dfn0"> dfn </a> </code> elements. <p> The <code> <a href="#dfn0"> dfn </a> </code> element enables automatic cross-references. Specifically, any <code> <a
   href="#span0"> span </a> </code> , <code> <a href="#abbr0"> abbr </a> </code> , <code> <a href="#code0"> code </a> </code> , <code> <a
   href="#var0"> var </a> </code> , <code> <a href="#samp0"> samp </a> </code> , or <code> <a href="#i0"> i </a> </code> element that has a non-empty <code
   title="attr-title"> <a href="#title0"> title </a> </code> attribute whose value exactly equals the <span title="defining term"> <a
   href="#defining"> term </a> </span> of a <code> <a href="#dfn0"> dfn </a> </code> element in the same document, or which has no <code title="attr-title"> <a
   href="#title0"> title </a> </code> attribute but whose <code> <a
   href="#textcontent0"> textContent </a> </code> exactly equals the <span
   title="defining term"> <a href="#defining"> term </a> </span> of a <code> <a
   href="#dfn0"> dfn </a> </code> element in the document, and that has no <span> <a href="#interactive3">  interactive elements </a> </span> or <code> <a
   href="#dfn0"> dfn </a> </code> elements either as ancestors or descendants, and has no other elements as ancestors that are themselves matching these conditions, should be presented in such a way that the user can jump from the element to the first <code> <a href="#dfn0"> dfn </a> </code> element giving the defining instance of that term. </p> <div class="example"> <p> In the following fragment, the term "DHD" is first defined in the first paragraph, then used in the second. A compliant UA could provide a link from the <code> <a href="#abbr0"> abbr </a> </code> element in the second paragraph to the <code> <a href="#dfn0"> dfn </a> </code> element in the first. </p> <pre> &lt;p>The &lt;dfn>&lt;abbr title="Dial Home Device">DHD&lt;/abbr>&lt;/dfn> is a device that allows off-world teams to open the iris.&lt;/p> &lt;!-- ... later in the document: --> &lt;p>Teal'c activated his &lt;abbr title="Dial Home Device">DHD&lt;/abbr> and so Hammond ordered the iris to be opened.&lt;/p> </pre> </div> <h4 id="the-i"> <span class="secno"> <ins>2.9.8. </ins> <del>2.7.8. </del> </span> The <dfn
   id="i0"> <code> i </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#i0"> i </a> </code> element represents an instance of the use of a term, such as a taxonomic designation, technical term, an idiomatic phrase from another language, or similar. <p> Terms in languages different from the main text should be annotated with <code> <a href="#lang"> lang </a> </code> attributes ( <code> <a
   href="#xmllang"> xml:lang </a> </code> in XML). <div class="example"> <p> The examples below show uses of the <code> <a href="#i0"> i </a> </code> element: </p> <pre> &lt;p>The &lt;i>felis silvestris catus&lt;/i> is cute.&lt;/p> &lt;p>The &lt;i>block-level elements&lt;/i> are defined above.&lt;/p> &lt;p>There is a certain &lt;i lang="fr">je ne sais quoi&lt;/i> in the air.&lt;/p> </pre> </div> <p class="note"> The <code> <a href="#i0"> i </a> </code> element is not appropriate for marking up names (e.g. of people, or of ships). </p> <h4 id="the-code"> <span class="secno"> <ins>2.9.9. </ins> <del>2.7.9. </del> </span> The <dfn
   id="code0"> <code> code </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> When used in an element whose content model is only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> : only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> . <dd> Otherwise: any <span> <a href="#inline-level1"> inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#code0"> code </a> </code> element represents a fragment of computer code. This could be an XML element name, a filename, a computer program, or any other string that a computer would recognise. <p class="note"> See the <code> <a href="#pre0"> pre </a> </code> element for more detais. <div class="example"> <p> The following example shows how a block of code could be marked up using the <code> <a href="#pre0"> pre </a> </code> and <code> <a
    href="#code0"> code </a> </code> elements. </p> <pre> &lt;pre>&lt;code>var i: Integer; begin i := 1; end.&lt;/code>&lt;/pre> </pre> </div> <h4 id="the-var"> <span class="secno"> <ins>2.9.10. </ins> <del>2.7.10. </del> </span> The <dfn
   id="var0"> <code> var </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#var0"> var </a> </code> element represents a variable. This could be an actual variable in a mathematical expression or programming context, or it could just be a term used as a placeholder in prose. <div class="example"> <p> In the paragraph below, the letter "n" is being used as a variable in prose: </p> <pre> &lt;p>If there are &lt;var>n&lt;/var> pipes leading to the ice cream factory then I expect at &lt;em>least&lt;/em> &lt;var>n&lt;/var> flavours of ice cream to be available for purchase!&lt;/p> </pre> </div> <h4 id="the-samp"> <span class="secno"> <ins>2.9.11. </ins> <del>2.7.11. </del> </span> The <dfn
   id="samp0"> <code> samp </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> When used in an element whose content model is only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> : only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> . <dd> Otherwise: any <span> <a href="#inline-level1"> inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#samp0"> samp </a> </code> element represents (sample) output from a program or computing system. <p class="note"> See the <code> <a href="#pre0"> pre </a> </code> and <code> <a
   href="#kbd0"> kbd </a> </code> elements for more detais. <div class="example"> <p> This example shows the <code> <a href="#samp0"> samp </a> </code> element being used inline: </p> <pre> &lt;p>The computer said &lt;samp>Too much cheese in tray two&lt;/samp> but I didn't know what that meant.&lt;/p> </pre> <p> This second example shows a block of sample output. Nested <code> <a
    href="#samp0"> samp </a> </code> and <code> <a href="#kbd0"> kbd </a> </code> elements allow for the styling of specific elements of the sample output using a <ins>style sheet. </ins> <del>stylesheet. </del> </p> <pre> &lt;pre>&lt;samp>&lt;samp class="prompt">jdoe@mowmow:~$&lt;/samp> &lt;kbd>ssh demo.example.com&lt;/kbd> Last login: Tue Apr 12 09:10:17 2005 from mowmow.example.com on pts/1 Linux demo 2.6.10-grsec+gg3+e+fhs6b+nfs+gr0501+++p3+c4a+gr2b-reslog-v6.189 #1 SMP Tue Feb 1 11:22:36 PST 2005 i686 unknown &lt;samp <ins>class="prompt">jdoe@demo:~$&lt;/samp> </ins> <del>class="prompt">jdoe@mowmow:~$&lt;/samp> </del> &lt;samp class="cursor">_&lt;/samp>&lt;/samp>&lt;/pre> </pre> </div> <h4 id="the-kbd"> <span class="secno"> <ins>2.9.12. </ins> <del>2.7.12. </del> </span> The <dfn
   id="kbd0"> <code> kbd </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#kbd0"> kbd </a> </code> element represents user input (typically keyboard input, although it may also be used to represent other input, such as voice commands). <p> When the <code> <a href="#kbd0"> kbd </a> </code> element is nested inside a <code> <a href="#samp0"> samp </a> </code> element, it represents the input as it was echoed by the system. <p> When the <code> <a href="#kbd0"> kbd </a> </code> element <em> contains </em> a <code> <a href="#samp0"> samp </a> </code> element, it represents input based on system output, for example invoking a menu item. <p> When the <code> <a href="#kbd0"> kbd </a> </code> element is nested inside another <code> <a href="#kbd0"> kbd </a> </code> element, it represents an actual key or other single unit of input as appropriate for the input mechanism. <div class="example"> <p> Here the <code> <a href="#kbd0"> kbd </a> </code> element is used to indicate keys to press: </p> <pre> &lt;p>To make George eat an apple, press &lt;kbd>&lt;kbd>Shift&lt;/kbd>+&lt;kbd>F3&lt;/kbd>&lt;/kbd>&lt;/p> </pre> <p> In this second example, the user is told to pick a particular menu item. The outer <code> <a href="#kbd0"> kbd </a> </code> element marks up a block of input, with the inner <code> <a href="#kbd0"> kbd </a> </code> elements representing each individual step of the input, and the <code> <a
    href="#samp0"> samp </a> </code> elements inside them indicating that the steps are input based on something being displayed by the system, in this case menu labels: </p> <pre> &lt;p>To make George eat an apple, select &lt;kbd>&lt;kbd>&lt;samp>File&lt;/samp>&lt;/kbd>|&lt;kbd>&lt;samp>Eat Apple...&lt;/samp>&lt;/kbd>&lt;/kbd> &lt;/p> </pre> </div> <h4 id="the-sup"> <span class="secno"> <ins>2.9.13. </ins> <del>2.7.13. </del> </span> The <dfn
   id="sup0"> <code> sup </code> </dfn> and <dfn id="sub0"> <code> sub </code> </dfn> elements </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which these elements may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#sup0"> sup </a> </code> element represents a superscript and the <code> <a href="#sub0"> sub </a> </code> element represents a subscript. <p> These elements must only be used to mark up typographical conventions with specific meanings, not for typographical presentation for presentation's sake. For example, it would be inappropriate for the <code> <a href="#sup0"> sup </a> </code> and <code> <a
   href="#sub0"> sub </a> </code> elements to be used in the name of the LaTeX document preparation system. In general, authors should not use these elements if the <em> absence </em> of those elements would not change the meaning of the content. <p> When the <code> <a href="#sub0"> sub </a> </code> element is used inside a <code> <a href="#var0"> var </a> </code> element, it represents the subscript that identifies the variable in a family of variables. <div class="example"> <pre> &lt;p>The coordinate of the &lt;var>i&lt;/var>th point is (&lt;var>x&lt;sub>&lt;var>i&lt;/var>&lt;/sub>&lt;/var>, &lt;var>y&lt;sub>&lt;var>i&lt;/var>&lt;/sub>&lt;/var>). For example, the 10th point has coordinate (&lt;var>x&lt;sub>10&lt;/sub>&lt;/var>, &lt;var>y&lt;sub>10&lt;/sub>&lt;/var>).&lt;/p> </pre> </div> <p> In certain languages, superscripts are part of the typographical conventions for some abbreviations. <div class="example"> <pre> &lt;p>The most beautiful women are &lt;span lang="fr">&lt;abbr>M&lt;sup>lle&lt;/sup>&lt;/abbr> Gwendoline&lt;/span> and &lt;span lang="fr">&lt;abbr>M&lt;sup>me&lt;/sup>&lt;/abbr> Denise&lt;/span>.&lt;/p> </pre> </div> <p> Mathematical expressions often use subscripts and superscripts. Authors are encouraged to use MathML for marking up mathematical, but authors may opt to use <code> <a href="#sub0"> sub </a> </code> and <code> <a
   href="#sup0"> sup </a> </code> if detailed mathematical markup is not desired. <a href="#refsMathML"> [MathML] </a> <div class="example"> <pre> &lt;var>E&lt;/var>=&lt;var>m&lt;/var>&lt;var>c&lt;/var>&lt;sup>2&lt;/sup> </pre> <pre> f(&lt;var>x&lt;/var>, &lt;var>n&lt;/var>) = log&lt;sub>4&lt;/sub>&lt;var>x&lt;/var>&lt;sup>&lt;var>n&lt;/var>&lt;/sup> </pre> </div> <h4 id="the-q"> <span class="secno"> <ins>2.9.14. </ins> <del>2.7.14. </del> </span> The <dfn
   id="q0"> <code> q </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> When used in an element whose content model is only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> : only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> . <dd> Otherwise: any <span> <a href="#inline-level1"> inline-level content </a> </span> . <dt> Element-specific attributes: <dd> <code title="attr-q-cite"> <a href="#cite2"> cite </a> </code> (optional) <dt> DOM interface: <dd> The <code> <a href="#q0"> q </a> </code> element uses the <code> <a
    href="#htmlquoteelement"> HTMLQuoteElement </a> </code> interface. </dl> <p> The <code> <a href="#q0"> q </a> </code> element represents a part of a paragraph quoted from another source. <p> Content inside a <code> <a href="#q0"> q </a> </code> element must be quoted from another source, whose URI, if it has one, should be cited in the <dfn
   id="cite2" title="attr-q-cite"> <code> cite </code> </dfn> attribute. <p> If the <code title="attr-q-cite"> <a href="#cite2"> cite </a> </code> attribute is present, it must be a URI (or IRI). User agents should allow users to follow such citation links. </p> <h4 id="the-cite"> <span class="secno"> <ins>2.9.15. </ins> <del>2.7.15. </del> </span> The <dfn
   id="cite3"> <code> cite </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dd> </dl> <p> The <code> <a href="#cite3"> cite </a> </code> element represents a citation: the source, or reference, for a quote or statement made in the document. <p class="note"> A <em> citation </em> is not a <em> quote </em> (for which the <code> <a href="#q0"> q </a> </code> element is appropriate). <div class="example"> <p> This is incorrect usage: </p> <pre> &lt;p>&lt;cite>This is wrong!&lt;/cite>, said Ian.&lt;/p> </pre> <p> This is the correct way to do it: </p> <pre> &lt;p>&lt;q>This is correct!&lt;/q>, said &lt;cite>Ian&lt;/cite>.&lt;/p> </pre> <p> This is also wrong, because the title and the name are not references or citations: </p> <pre> &lt;p>My favourite book is &lt;cite>The Reality Dysfunction&lt;/cite> by &lt;cite>Peter F. Hamilton&lt;/cite>.&lt;/p> </pre> </div> <h4 id="the-span"> <span class="secno"> <ins>2.9.16. </ins> <del>2.7.16. </del> </span> The <dfn
   id="span0"> <code> span </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> When used in an element whose content model is only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> : only <span> <a
    href="#strictly"> strictly inline-level content </a> </span> . <dd> Otherwise: any <span> <a href="#inline-level1"> inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#span0"> span </a> </code> element doesn't mean anything on its own, but can be useful when used together with other attributes, e.g. <code> <a href="#lang"> lang </a> </code> or <code> <a
   href="#dir"> dir </a> </code> . </p> <h4 id="the-bdo"> <span class="secno"> <ins>2.9.17. </ins> <del>2.7.17. </del> </span> The <dfn
   id="bdo0"> <code> bdo </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dt> Element-specific attributes: <dd> None, but the <code> <a href="#dir"> dir </a> </code> global attribute is required on this element. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#bdo0"> bdo </a> </code> element allows authors to override the Unicode bidi algorithm by explicitly specifying a direction override. <a href="#refsBIDI"> [BIDI] </a> <p> Authors must specify the <code> <a href="#dir"> dir </a> </code> attribute on this element, with the value <code> ltr </code> to specify a left-to-right override and with the value <code> rtl </code> to specify a right-to-left override. <p> If the element has the <code> <a href="#dir"> dir </a> </code> attribute set to the exact value <code> ltr </code> , then for the purposes of the bidi algorithm, the user agent must act as if there was a U+202D LEFT-TO-RIGHT OVERRIDE character at the start of the element, and a U+202C POP DIRECTIONAL FORMATTING at the end of the element. <p> If the element has the <code> <a href="#dir"> dir </a> </code> attribute set to the exact value <code> rtl </code> , then for the purposes of the bidi algorithm, the user agent must act as if there was a U+202E RIGHT-TO-LEFT OVERRIDE character at the start of the element, and a U+202C POP DIRECTIONAL FORMATTING at the end of the element. <p> The requirements on handling the <code> <a href="#bdo0"> bdo </a> </code> element for the bidi algorithm may be implemented indirectly through the style layer. For example, an HTML+CSS user agent should implement these requirements by implementing the CSS <code> unicode-bidi </code> property. <a href="#refsCSS21"> [CSS21] </a> </p> <h4 id="the-br"> <span class="secno"> <ins>2.9.18. </ins> <del>2.7.18. </del> </span> The <dfn
   id="br0"> <code> br </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> Empty. <dt> Element-specific attributes: <dd> None. <dt> DOM interface: <dd> No difference from <code> <a
    href="#htmlelement"> HTMLElement </a> </code> . </dl> <p> The <code> <a href="#br0"> br </a> </code> element represents a line break. <p> <code> <a href="#br0"> br </a> </code> elements must be empty. Any content inside <code> <a href="#br0"> br </a> </code> elements must not be considered part of the surrounding text. <p> <code> <a href="#br0"> br </a> </code> elements must only be used for line breaks that are actually part of the content, as in poems or addresses. <div class="example"> <p> The following example is correct usage of the <code> <a
    href="#br0"> br </a> </code> element: </p> <pre> &lt;p&gt;P. Sherman&lt;br&gt; 42 Wallaby Way&lt;br&gt; Sydney&lt;/p&gt; </pre> </div> <p> <code> <a href="#br0"> br </a> </code> elements must not be used for separating thematic groups in a paragraph. <div class="example"> <p> The following examples are non-conforming, as they abuse the <code> <a
    href="#br0"> br </a> </code> element: </p> <pre> &lt;p&gt;&lt;a ...&gt;34 comments.&lt;/a&gt;&lt;br&gt; &lt;a ...&gt;Add a comment.&lt;a&gt;&lt;/p&gt; </pre> <pre> &lt;p&gt;Name: &lt;input name="name"&gt;&lt;br&gt; Address: &lt;input name="address"&gt;&lt;/p&gt; </pre> <p> Here are alternatives to the above, which are correct: </p> <pre> &lt;p&gt;&lt;a ...&gt;34 comments.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a ...&gt;Add a comment.&lt;a&gt;&lt;/p&gt; </pre> <pre> &lt;p&gt;Name: &lt;input name="name"&gt;&lt;/p&gt; &lt;p&gt;Address: &lt;input name="address"&gt;&lt;/p&gt; </pre> </div> <h3 id="edits"> <span class="secno"> <ins>2.10. </ins> <del>2.8. </del> </span> Edits </h3> <p> The <code> <a href="#ins0"> ins </a> </code> and <code> <a
   href="#del0"> del </a> </code> elements represent edits to the document. <h4 id="the-ins"> <span class="secno"> <ins>2.10.1. </ins> <del>2.8.1. </del> </span> The <dfn
   id="ins0"> <code> ins </code> </dfn> element </h4> <p> <span title="block-level elements"> <a href="#block-level1"> Block-level element </a> </span> , and <span> <a href="#strictly"> strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> is expected. <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> When the element is a child of an element with only one content model (i.e. an element that only allows <span> <a href="#strictly"> strictly inline-level content </a> </span> , or only allows <span> <a
    href="#inline-level1"> inline-level content </a> </span> , or only allows <span> <a href="#block-level1"> block-level elements </a> </span> ): same content model as the parent element. <dd> Otherwise, when the element is a child of an element that only contains <span> <a href="#inter-element"> inter-element whitespace </a> </span> , <code> <a href="#ins0"> ins </a> </code> elements, and <code> <a href="#del0"> del </a> </code> elements: same content model as the parent element, with the additional restriction that if the parent element allows a choice in content models (e.g. block or inline) then if all the children of all the sibling <code> <a href="#ins0"> ins </a> </code> elements were placed directly in the parent element, the document would still be conforming. <dd> Otherwise, when the element is a child of an element that is <span
    title="Determining if a particular element contains block-level elements
    or inline-level content"> <a href="#determining2"> being used as an inline-level content container </a> </span> : <span> <a
    href="#inline-level1"> inline-level content </a> </span> . <dd> Otherwise, when the element is a child of an element that is <span
    title="Determining if a particular element contains block-level elements
    or inline-level content"> <a href="#determining2"> being used as a block-level element container </a> </span> : <span> <a
    href="#block-level1"> block-level elements </a> </span> . <dd> Otherwise: zero or more <span> <a href="#block-level1"> block-level elements </a> </span> , or <span> <a href="#inline-level1"> inline-level content </a> </span> (but not both). <dt> Element-specific attributes: <dd> <code title="attr-mod-cite"> <a href="#cite4"> cite </a> </code> (optional) <dd> <code title="attr-mod-datetime"> <a
    href="#datetime"> datetime </a> </code> (optional) <dt> DOM interface: <dd> Uses the <code> <a href="#htmlmodelement"> HTMLModElement </a> </code> interface. </dl> <p> The <code> <a href="#ins0"> ins </a> </code> element represents an addition to the document. <p> The <code> <a href="#ins0"> ins </a> </code> element must be used only where <span> <a href="#block-level1"> block-level elements </a> </span> or <span> <a
   href="#strictly"> strictly inline-level content </a> </span> can be used. <p> An <code> <a href="#ins0"> ins </a> </code> element must only contain content that would still be conformant if all <code> <a
   href="#ins0"> ins </a> </code> elements were replaced by their contents. <div class="example"> <p> The following would be syntactically legal: </p> <pre> &lt;aside> &lt;ins> &lt;p>...&lt;/p> &lt;/ins> &lt;/aside> </pre> <p> As would this: </p> <pre> &lt;aside> &lt;ins> &lt;em>...&lt;/em> &lt;/ins> &lt;/aside> </pre> <p> However, this last example would be illegal, as <code> <a
    href="#em0"> em </a> </code> and <code> <a href="#p0"> p </a> </code> cannot both be used inside an <code> <a href="#aside0"> aside </a> </code> element at the same time: </p> <pre> &lt;aside> &lt;ins> &lt;p>...&lt;/p> &lt;/ins> &lt;ins> &lt;em>...&lt;/em> &lt;/ins> &lt;/aside> </pre> </div> <h4 id="the-del"> <span class="secno"> <ins>2.10.2. </ins> <del>2.8.2. </del> </span> The <dfn
   id="del0"> <code> del </code> </dfn> element </h4> <p> <span title="block-level elements"> <a href="#block-level1"> Block-level element </a> </span> , and <span> <a href="#strictly"> strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> is expected. <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> When the element has a parent: same content model as the parent element. <dd> Otherwise: zero or more <span> <a href="#block-level1"> block-level elements </a> </span> , or <span> <a href="#inline-level1"> inline-level content </a> </span> (but not both). <dt> Element-specific attributes: <dd> <code title="attr-mod-cite"> <a href="#cite4"> cite </a> </code> (optional) <dd> <code title="attr-mod-datetime"> <a
    href="#datetime"> datetime </a> </code> (optional) <dt> DOM interface: <dd> Uses the <code> <a href="#htmlmodelement"> HTMLModElement </a> </code> interface. </dl> <p> The <code> <a href="#del0"> del </a> </code> element represents a removal from the document. <p> The <code> <a href="#del0"> del </a> </code> element must only contain content that would be allowed inside the parent element (regardless of what the parent element actually contains). <div class="example"> <p> The following would be syntactically legal: </p> <pre> &lt;aside> &lt;del> &lt;p>...&lt;/p> &lt;/del> &lt;ins> &lt;em>...&lt;/em> &lt;/ins> &lt;/aside> </pre> <p> ...even though the <code> <a href="#p0"> p </a> </code> and <code> <a
    href="#em0"> em </a> </code> elements would never be allowed side by side in the <code> <a href="#aside0"> aside </a> </code> element. This is allowed because the <code> <a href="#del0"> del </a> </code> element represents content that was removed, and it is quite possible that an edit could cause an element to go from being an inline-level container to a block-level container, or vice-versa. </p> </div> <h4 id="attributes"> <span class="secno"> <ins>2.10.3. </ins> <del>2.8.3. </del> </span> Attributes common to <code> <a href="#ins0"> ins </a> </code> and <code> <a
   href="#del0"> del </a> </code> elements </h4> <p> The <dfn id="cite4" title="attr-mod-cite"> <code> cite </code> </dfn> attribute may be used to specify a URI that explains the change. When that document is long, for instance the minutes of a meeting, authors are encouraged to include a fragment identifier pointing to the specific part of that document that discusses the change. <p> If the <code title="attr-mod-cite"> <a href="#cite4"> cite </a> </code> attribute is present, it must be a URI (or IRI) that explains the change. User agents should allow users to follow such citation links. <p> The <dfn id="datetime"
   title="attr-mod-datetime"> <code> datetime </code> </dfn> attribute may be used to specify the time and date of the change. </p> <p> If the <code title="attr-mod-datetime"> <a
   href="#datetime"> datetime </a> </code> attribute is present, it must have a value consisting of four digits representing the year, a literal hyphen, two digits representing the month, a literal hyphen, two digits representing the day, a literal T, two digits for the hour, a colon, two digits for the minutes, another colon, two digits for the seconds, optionally a decimal point followed by one or more digits for the fraction of a second, and finally either a literal Z, or, a plus sign or a minus sign followed by two digits for the hour offset, a colon, and two digits for the minute offset. <p> In other words: <code> <var title=""> YYYY </var> - <var
   title=""> MM </var> - <var title=""> DD </var> T <var title=""> hh </var> : <var
   title=""> mm </var> : <var title=""> ss </var> . <var title=""> s </var> <var
   title=""> TZ </var> </code> <p> Digits must be in the range 0-9 (U+0030 to U+0039), interpreted in base ten. The hyphen must be U+002D, the T must be U+0054, the colon must be U+003A, the Z must be U+005A, the plus must be U+002B, and the minus U+002D (same as the hyphen). <p> To interpret this value, user agents must first check to see if the value matches the pattern described here. If it does, then the values must be extracted and interpreted as a date and time with a timezone offset, as per ISO 8601. <a href="#refsISO8601"> [ISO8601] </a> </p> <p> If the attribute value does not match the format, or, if the date or time given is not a valid date and time (e.g. because the month is out of range) then the user agent must ignore the attribute (the modification has no associated timestamp). <p> The <code> <a href="#ins0"> ins </a> </code> and <code> <a
   href="#del0"> del </a> </code> elements must implement the <code> <a
   href="#htmlmodelement"> HTMLModElement </a> </code> interface: <pre
   class="idl"> interface <dfn id="htmlmodelement"> HTMLModElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute DOMString <span title="dom-mod-cite"> <a href="#cite5"> cite </a> </span> ; attribute DOMString <span title="dom-mod-datetime"> <a href="#datetime0"> datetime </a> </span> ; }; </pre> <p> The <dfn id="cite5" title="dom-mod-cite"> <code> cite </code> </dfn> and <dfn id="datetime0" title="dom-mod-datetime"> <code> datetime </code> </dfn> DOM attributes should reflect the elements' content attributes of the same name. <h3 id="embedded"> <span class="secno"> <ins>2.11. </ins> <del>2.9. </del> </span> <dfn
   id="embedded1"> Embedded content </dfn> <span title="TBW"> <a
   href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <h4 id="the-img"> <span class="secno"> <ins>2.11.1. </ins> <del>2.9.1. </del> </span> The <dfn
   id="img0"> <code> img </code> </dfn> element </h4> <p> <span> <a href="#strictly"> Strictly inline-level content </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#strictly"> strictly inline-level content </a> </span> is allowed. <dt> Content model: <dd> Empty. <dt> Element-specific attributes: <dd> <code title="attr-img-src"> src </code> (required) <dd> <code title="attr-img-alt"> alt </code> (required) <dd> <code title="attr-img-height"> height </code> (optional) <dd> <code title="attr-img-width"> width </code> (optional) <dd> <code title="attr-img-usemap"> usemap </code> (optional) <dd> <code title="attr-img-ismap"> ismap </code> (optional) <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmlimageelement"> HTMLImageElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute DOMString <span title="dom-img-src"> src </span> ; attribute DOMString <span title="dom-img-alt"> alt </span> ; attribute long <span title="dom-img-height"> height </span> ; attribute long <span title="dom-img-width"> width </span> ; attribute boolean <span title="dom-img-isMap"> isMap </span> ; attribute DOMString <span title="dom-img-useMap"> useMap </span> ; }; </pre> </dl> <p> The <code> <a href="#img0"> img </a> </code> element represents a piece of text with an alternate graphical representation. The text is given by the <code> alt </code> attribute, and the URI to the graphical representation of that text is given by the <code> src </code> attribute. <p class="big-issue"> This section is (obviously) incomplete. <h3 id="tabular"> <span class="secno"> <ins>2.12. </ins> <del>2.10. </del> </span> Tabular data <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p class="big-issue"> This section will contain definitions of the <code> table </code> element and so forth. <h3 id="forms"> <span class="secno"> <ins>2.13. </ins> <del>2.11. </del> </span> Forms <span title="TBW"> <a
   href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p class="big-issue"> This section will contain definitions of the <code> form </code> element and so forth. <h3 id="scripting"> <span class="secno"> <ins>2.14. </ins> <del>2.12. </del> </span> Scripting </h3> <h4 id="the-script"> <span class="secno"> <ins>2.14.1. </ins> <del>2.12.1. </del> </span> The <dfn
   id="script1"> <code> script </code> </dfn> element </h4> <p> <span title="block-level elements"> <a href="#block-level1"> Block-level element </a> </span> , <span> <a href="#strictly"> strictly inline-level content </a> </span> , and <span title="metadata elements"> <a
   href="#metadata"> metadata element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> In a <code> <a href="#head0"> head </a> </code> element. <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected. <dd> Where <span> <a href="#inline-level1"> inline-level content </a> </span> is expected. <dt> Content model: <dd> If there is no <code title="attr-script-src"> <a
    href="#src"> src </a> </code> attribute, depends on the value of the <code
    title="attr-script-type"> <a href="#type5"> type </a> </code> attribute. <dd> If there <em> is </em> a <code title="attr-script-src"> <a
    href="#src"> src </a> </code> attribute, the element must be empty. <dt> Element-specific attributes: <dd> <code title="attr-script-src"> <a href="#src"> src </a> </code> (optional) <dd> <code title="attr-script-type"> <a href="#type5"> type </a> </code> (optional) <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmlscriptelement"> HTMLScriptElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute DOMString <code title="dom-script-text"> <a href="#text"> text </a> </code> ; attribute DOMString <code title="dom-script-src"> <a href="#src0"> src </a> </code> ; attribute DOMString <code title="dom-script-type"> <a href="#type6"> type </a> </code> ; }; </pre> </dl> <p> The <code> <a href="#script1"> script </a> </code> element allows authors to include dynamic script in their documents. <p> When the <dfn id="src" title="attr-script-src"> <code> src </code> </dfn> attribute is set, the <code> <a href="#script1"> script </a> </code> element refers to an external file, which must (if it uses a supported scripting language) be downloaded and executed. The user agent must delay the execution of other scripts associated with the page that are invoked during the download (e.g. event handlers) until after the external script has been downloaded and executed. <p> The language of the script is given by the <dfn id="type5"
   title="attr-script-type"> <code> type </code> </dfn> attribute. The value must be a valid MIME type, optionally with parameters. <a
   href="#refsRFC2046"> [RFC2046] </a> <p> For <code> <a href="#script1"> script </a> </code> elements that have the <code title="attr-script-src"> <a href="#src"> src </a> </code> attribute set, user agents may use the type given in this attribute to decide whether or not to consider using the resource at all. If the UA does not support the given MIME type as a scripting language, then the UA may opt not to download the script. <p> User agents must not consider the <code title="attr-script-type"> <a
   href="#type5"> type </a> </code> attribute authoritative, however &mdash; upon fetching the script, user agents must only use the Content-Type information associated with it to determine whether or not to execute it; user agents must not use the <code title="attr-script-type"> <a
   href="#type5"> type </a> </code> attribute in the document to determine the actual type of the script. <p> If the <code title="attr-script-type"> <a href="#type5"> type </a> </code> attribute is omitted but the <code title="attr-script-src"> <a
   href="#src"> src </a> </code> attribute is set, then the UA must fetch the resource to determine its type and thus determine if it supports (and can execute) that external script. <p> If the <code title="attr-script-src"> <a href="#src"> src </a> </code> attribute is not set, then the script is given by the contents of the element. The language is given by the <code title="attr-script-type"> <a
   href="#type5"> type </a> </code> attribute. If it is omitted, then the default is the ECMAScript MIME type. </p> <p> When examining types to determine if they support the language, user agents must not ignore unknown MIME parameters &mdash; types with unknown parameters must be assumed to be unsupported. <p> User agents that support scripting must execute scripts (written in languages that they support) immediately upon parsing a <code> <a
   href="#script1"> script </a> </code> element's end tag, and immediately upon having a dynamically created <code> <a href="#script1"> script </a> </code> element inserted into the DOM. Once a <code> <a
   href="#script1"> script </a> </code> element has been executed, it must be flagged as such and never re-executed again. When an element with this flag set is cloned, the new element must not have the flag set. <p> For scripting languages that consist of pure text, user agents must use the value of the DOM <code title="dom-script-text"> <a
   href="#text"> text </a> </code> attribute (defined below) as the script to execute. For XML-based scripting languages, user agents must use all the children nodes of the <code> <a href="#script1"> script </a> </code> element as the script. <p> The DOM attributes <dfn id="src0"
   title="dom-script-src"> <code> src </code> </dfn> and <dfn id="type6"
   title="dom-script-type"> <code> type </code> </dfn> each <span> <a
   href="#reflect"> reflect </a> </span> the respective content attributes of the same name. <p> The DOM attribute <dfn id="text"
   title="dom-script-text"> <code> text </code> </dfn> must return a concatenation of the contents of all the text nodes and CDATA nodes that are direct children of the <code> <a href="#script1"> script </a> </code> element (ignoring any other nodes such as comments or elements), in tree order. On setting, it must act the same way as the <code> <a
   href="#textcontent0"> textContent </a> </code> DOM attribute. <h5 id="script"> <span class="secno"> <ins>2.14.1.1. </ins> <del>2.12.1.1. </del> </span> Script languages </h5> <p> The following lists some MIME types and the languages to which they refer: <dl> <dt> <code> text/javascript </code> <dd> ECMAScript. <a href="#refsECMA262"> [ECMA262] </a> <dt> <code> text/javascript;e4x=1 </code> <dd> ECMAScript with ECMAScript for XML. <a
    href="#refsECMA357"> [ECMA357] </a> </dl> <h4 id="the-noscript"> <span class="secno"> <ins>2.14.2. </ins> <del>2.12.2. </del> </span> The <dfn
   id="noscript0"> <code> noscript </code> </dfn> element <span title="TBW"> <a
   href="#tbw"> <ins>[TBW] </ins> </a> </span> </h4> <p class="big-issue"> The <code> <a href="#noscript0"> noscript </a> </code> element needs to be defined too. <h3 id="other"> <span class="secno"> <ins>2.15. </ins> <del>2.13. </del> </span> Other new elements <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p class="big-issue"> all the new things in WA1: menu, calendar, card, canvas, switch, gauge, progress, datagrid, datatree, switch, etc <h3 id="notes"> <span class="secno"> <ins>2.16. </ins> <del>2.14. </del> </span> Notes (draft sections to be moved elsewhere) <span title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <h4 id="classes"> <span class="secno"> <ins>2.16.1. </ins> <del>2.14.1. </del> </span> Classes </h4> <p class="big-issue"> This section may somehow introduce some predefined classes with actual semantic meanings; possibly by defining a <span> <a
   href="#profile"> profile </a> </span> . </p> <h4 id="link-types"> <span class="secno"> <ins>2.16.2. </ins> <del>2.14.2. </del> </span> Link types </h4> <p class="big-issue"> This section might at some future point list a small set of link <code> rel </code> ationship types and more exactly define their semantics than HTML4. This section (or indeed this specification in general) is unlikely to specify anything related to the <code> <a
   href="#profile"> profile </a> </code> attribute and how to extend the link types in HTML. Work in this area is currently being done by <a
   href="http://gmpg.org/"> GMPG </a> and <a
   href="http://protogenius.com/rel-schemas/draft-scheid-rel-schemas-00.htm"> others </a> . </p> <h4 id="document0"> <span class="secno"> <ins>2.16.3. </ins> <del>2.14.3. </del> </span> Document sections </h4> <p> User agents must support all of the common attributes and event handlers on the <code> <a href="#section3"> section </a> </code> element, as well as the <code> active </code> attribute (for use with <span> <a
   href="#mutually1"> mutually exclusive sections </a> </span> ). <p> In CSS-aware user agents, the default presentation of this element should be achieved by including the following rules, or their equivalent, in the UA's user agent style sheet: <pre> @namespace xh url(http://www.w3.org/1999/xhtml); xh|section { display: block; margin: 1em 0; } </pre> <h4 id="section"> <span class="secno"> <ins>2.16.4. </ins> <del>2.14.4. </del> </span> Section headers </h4> <p> For <code> <a href="#h10"> h1 </a> </code> elements, CSS-aware visual user agents should derive the size of the header from the level of <code> <a
   href="#section3"> section </a> </code> nesting. This effect should be achieved by including the following rules, or their equivalent, in the UA's user agent style sheet: <pre> @namespace xh url(http://www.w3.org/1999/xhtml); xh|section xh|h1 { /* same styles as h2 */ } xh|section xh|section xh|h1 { /* same styles as h4 */ } xh|section xh|section xh|section xh|h1 { /* same styles as h4 */ } xh|section xh|section xh|section xh|section xh|h1 { /* same styles as h5 */ } xh|section xh|section xh|section xh|section xh|section xh|h1 { /* same styles as h6 */ } </pre> <p> Authors should use <code> <a href="#h10"> h1 </a> </code> elements to denote headers in sections. Authors may instead use <code> <a
   href="#h20"> h2 </a> </code> ... <code> <a href="#h60"> h6 </a> </code> elements, for backwards compatibility with user agents that do not support <code> <a
   href="#section3"> section </a> </code> elements. <h4 id="section0"> <span class="secno"> <ins>2.16.5. </ins> <del>2.14.5. </del> </span> <dfn
   id="section4"> Section groups </dfn> (tabs) </h4> <p class="issue"> This section should probably die. <p> A group of related, order-neutral sections may be denoted using the <dfn
   id="tabbox"> <code> tabbox </code> </dfn> element. The default presentation in a visual media (as described below) is to render each section as a separate tab in a tab box, allowing the user to switch between them. Sections can also be represented by links to other documents, instead of them being included literally in the markup. <p> The <code> <a href="#tabbox"> tabbox </a> </code> element is a block-level element that should only contain <code> <a
   href="#section3"> section </a> </code> , <code> fieldset </code> , and <code> <a
   href="#a0"> a </a> </code> elements. <p> Authors should only use <code> <a href="#a0"> a </a> </code> elements that cause the user agent to change the active page to a page with a similar structure. Other behaviours are likely to be highly confusing to users. <p> Each <code> <a href="#section3"> section </a> </code> , <code> fieldset </code> , and <code> <a href="#a0"> a </a> </code> child can have a title. If the element is a <code> <a href="#section3"> section </a> </code> element, then the title is taken from the <code title="attr-title"> <a
   href="#title0"> title </a> </code> attribute of the element, if specified, or, if absent, from the <code> <a
   href="#textcontent0"> textContent </a> </code> DOM attribute of the first element child of the <code> <a href="#section3"> section </a> </code> element, if that is an <code> <a href="#h10"> h1 </a> </code> ... <code> <a
   href="#h60"> h6 </a> </code> element. (If it is taken from a header child, then that child is hidden from the rendering.) If the element is a <code> fieldset </code> element, then the title is taken from the the <code> <a href="#textcontent0"> textContent </a> </code> DOM attribute of the first element child of the <code> fieldset </code> element, if that is an <code> legend </code> element. If the element is an <code> <a
   href="#a0"> a </a> </code> element, then the title is taken from the <code> <a
   href="#textcontent0"> textContent </a> </code> DOM attribute of the element. (Titles may be the empty string.) <p> The titles obtained in this way, and the <code> <a
   href="#section3"> section </a> </code> , <code> fieldset </code> , and <code> <a
   href="#a0"> a </a> </code> elements from which they were derived, represent the list of sections in the <code> <a href="#tabbox"> tabbox </a> </code> . This list is <em> live </em> , in that dynamic changes to the DOM immediately affect the representation of the <code> <a href="#tabbox"> tabbox </a> </code> element. <p> All the other child nodes of the <code> <a
   href="#tabbox"> tabbox </a> </code> shall be ignored for the purposes of rendering the <code> <a href="#tabbox"> tabbox </a> </code> . Authors may use this in order to obtain acceptable renderings even in UAs that do not support <code> <a href="#tabbox"> tabbox </a> </code> . <p> In CSS-aware user agents, the default presentation of the <code> <a
   href="#tabbox"> tabbox </a> </code> element should, in part, be achieved by including the following rules, or their equivalent, in the UA's user agent style sheet: <pre> @namespace xh url(http://www.w3.org/1999/xhtml); xh|tabbox { display: block; } xh|tabbox > xh|section:not([title]) > xh|h1:first-child, xh|tabbox > xh|section:not([title]) > xh|h2:first-child, xh|tabbox > xh|section:not([title]) > xh|h3:first-child, xh|tabbox > xh|section:not([title]) > xh|h4:first-child, xh|tabbox > xh|section:not([title]) > xh|h5:first-child, xh|tabbox > xh|section:not([title]) > xh|h6:first-child, xh|tabbox > xh|fieldset > xh|legend:first-child { display: none; } </pre> <p> These rules do not come even close to fully describing the full behaviour of a <code> <a href="#tabbox"> tabbox </a> </code> element, however. <p> The behaviour of the <code> <a href="#tabbox"> tabbox </a> </code> should be to provide quick access to any of the children of the <code> <a
   href="#tabbox"> tabbox </a> </code> that have a title (as described above). UAs may keep track of which section is the selected section, and report this information to the user. <p> When the user specifies a section to access, the relevant element must have <span title="fire a click event"> <a href="#firing"> <ins>a </ins> <code
   title=""> <del>a </del>  click </code> event dispatched to <ins>it </ins> </a> </span> <ins>, </ins> <del>it, </del> whose default action is to further dispatch a <code> DOMActivate </code> event to the element. </p> <p> For <code> <a href="#section3"> section </a> </code> and <code> fieldset </code> elements, the default action of <code> DOMActivate </code> events is to display, or jump to, the relevant section. For <code> <a href="#a0"> a </a> </code> elements, the default action is the normal default action for <code> <a href="#a0"> a </a> </code> elements (activating the link, command, or whatever). In addition to these default actions, when a child of a <code> <a href="#tabbox"> tabbox </a> </code> is accessed, it becomes the selected section. <p> If the <code> DOMActivate </code> event is canceled (or if the <code
   title="event-click">  click </code> event is canceled, causing the <code> DOMActivate </code> event to never be fired in the first place), then the selected section does not change. <p> If an <code> <a href="#a0"> a </a> </code> element has a <code
   title="command-attribute">  command  </code> attribute, it can be disabled. In such cases, the UA should not allow the user to select that section. <p> The initially selected section shall be the first element from the <code> <a href="#tabbox"> tabbox </a> </code> element's child list that is: <ol> <li> an <code> <a href="#a0"> a </a> </code> element whose <code> href </code> attribute matches the URI of the current document, if there is one, <li> otherwise, the first <code> <a href="#a0"> a </a> </code> element whose <code> href </code> attribute matches the URI given by the <code> href </code> attribute of the first <code> <a
    href="#link0"> link </a> </code> element in the document that has a <code> rel </code> attribute whose value contains the keyword <code> up </code> (treating that attribute as a space-separated list), if there is one, <li> otherwise, the first <code> <a href="#section3"> section </a> </code> or <code> fieldset </code> element that has a title, if there is one. </ol> <p> If no elements match, then initially no section shall be selected. <p> In the above algorithm, URI comparisons should be done after canonicalisation, and should ignore fragment identifiers unless the <code> <a href="#a0"> a </a> </code> element in question has one. <p> In non-interactive or non-spatial media (such as in print, on braille systems, or with speech synthesis) the UA may automatically switch the selected section to the next section once the selected section has been rendered. <p> Which section is selected if the element representing the currently selected section is dynamically removed from the document is up to the UA. <p> In interactive visual media, the <code> <a
   href="#tabbox"> tabbox </a> </code> element should be rendered as a tab box, with the section titles listed as the tabs, and the selected section (if it is a <code> <a href="#section3"> section </a> </code> or <code> fieldset </code> element) displayed in the tab panel area. When the selected section is an <code> <a href="#a0"> a </a> </code> element, the tab panel area should be empty. <p> This specification does not describe how CSS properties apply to <code> <a href="#tabbox"> tabbox </a> </code> elements when the UA uses this rendering, but the children rendered in the tab panel area must be styled using CSS, as if the tab panel area defined a new containing block and new block formatting context. <p> User agents must support all of the common attributes and event handlers on the <code> <a href="#tabbox"> tabbox </a> </code> element. <div class="example"> <p> Here is an example of a <code> <a href="#tabbox"> tabbox </a> </code> used to allow the user to read three different parts of the document: </p> <pre> &lt;tabbox&gt; &lt;section&gt; &lt;h2&gt;About&lt;/h2&gt; &lt;p&gt;&lt;img src="logo" alt=""&gt;&lt;/p&gt; &lt;p&gt;The Application.&lt;/p&gt; &lt;p&gt;&copy; copyright 2004 by The First Team.&lt;/p&gt; &lt;/section&gt; &lt;section&gt; &lt;h2&gt;Credits&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Jack O'Neill&lt;/li&gt; &lt;li&gt;Samantha Carter&lt;/li&gt; &lt;li&gt;Daniel Jackson&lt;/li&gt; &lt;li&gt;Teal'c&lt;/li&gt; &lt;li&gt;Jonas Quinn&lt;/li&gt; &lt;/ul&gt; &lt;/section&gt; &lt;/tabbox&gt; </pre> <p> Next, an example of a form that has been split into little groups of controls: </p> <pre> &lt;tabbox&gt; &lt;fieldset&gt; &lt;legend&gt;Identity&lt;/legend&gt; &lt;p&gt;&lt;label&gt;First name: &lt;input name="fn"&gt;&lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt;Last name: &lt;input name="ln"&gt;&lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt;Date of Birth: &lt;input name="dob" type="date"&gt;&lt;/label&gt;&lt;/p&gt; &lt;/fieldset&gt; &lt;fieldset&gt; &lt;legend&gt;Food&lt;/legend&gt; &lt;p&gt;&lt;label&gt;Favourite appetizer: &lt;input name="fa"&gt;&lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt;Favourite meal: &lt;input name="fm"&gt;&lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt;Favourite desert: &lt;input name="fd"&gt;&lt;/label&gt;&lt;/p&gt; &lt;/fieldset&gt; &lt;/tabbox&gt; </pre> <p> Finally, an example of a page using a <code> <a
    href="#tabbox"> tabbox </a> </code> to point to sections outside the document. Note the use of fallback content (elements and text in the <code> <a href="#tabbox"> tabbox </a> </code> element that are not <code> fieldset </code> , <code> <a href="#section3"> section </a> </code> , or <code> <a href="#a0"> a </a> </code> elements) for backwards compatibility. </p> <pre> &lt;div&gt; &lt;tabbox&gt; &lt;strong&gt;Navigation:&lt;/strong&gt; &lt;a href="/"&gt;&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;, &lt;a href="/news/"&gt;&lt;span&gt;News&lt;/span&gt;&lt;/a&gt;, &lt;a href="/games/"&gt;&lt;span&gt;Games&lt;/span&gt;&lt;/a&gt;, &lt;a href="/help/"&gt;&lt;span&gt;Help&lt;/span&gt;&lt;/a&gt;, &lt;a href="/contact/"&gt;&lt;span&gt;Contact&lt;/span&gt;&lt;/a&gt;. &lt;/tabbox&gt; &lt;/div&gt; </pre> <p> This would be semantically equivalent to the following: </p> <pre> &lt;tabbox&gt; &lt;section&gt;&lt;h2&gt;Home&lt;/h2&gt; <em> ...content... </em> &lt;/section&gt; &lt;section&gt;&lt;h2&gt;News&lt;/h2&gt; <em> ...content... </em> &lt;/section&gt; &lt;section&gt;&lt;h2&gt;Games&lt;/h2&gt; <em> ...content... </em> &lt;/section&gt; &lt;section&gt;&lt;h2&gt;Help&lt;/h2&gt; <em> ...content... </em> &lt;/section&gt; &lt;section&gt;&lt;h2&gt;Contact&lt;/h2&gt; <em> ...content... </em> &lt;/section&gt; &lt;/tabbox&gt; </pre> </div> <h4 id="mutually"> <span class="secno"> <ins>2.16.6. </ins> <del>2.14.6. </del> </span> <dfn
   id="mutually1"> Mutually exclusive sections </dfn> </h4> <p> The <dfn id="switch"> <code> switch </code> </dfn> element represents a block of mutually exclusive sections. <p class="example"> For example, in an application for an online mutiplayer game, there could be four mutually exclusive sections: one for the login page, one for the network status page displayed while the user is logging in, one for a "lobby" where players get together to organise a game, and one for the actual game. The different sections are the various states that the application can reach. <p> The <code> <a href="#switch"> switch </a> </code> element must contain only <span> <a href="#block-level1"> block-level elements </a> </span> . User agents must support all of the common attributes and event handlers on the <code> <a href="#switch"> switch </a> </code> element. <p> All child elements of a <code> <a href="#switch"> switch </a> </code> element shall be hidden except those that have <code> active </code> attributes (or, for non-XHTML elements, <code> active </code> attributes in the XHTML namespace). <p> In CSS-aware user agents, the default presentation of this element should be achieved by including the following rules, or their equivalent, in the UA's user agent style sheet: <pre> @namespace xh url(http://www.w3.org/1999/xhtml); xh|switch { display: block; } xh|switch xh|*:not([active]) { display: none; } xh|switch *:not([xh|active]) { display: none; } </pre> <h4 id="using"> <span class="secno"> <ins>2.16.7. </ins> <del>2.14.7. </del> </span> Using <code> <a
   href="#switch"> switch </a> </code> and <code> <a
   href="#section3"> section </a> </code> </h4> <pre
   class="idl"> interface <dfn id="htmlswitchelement"> HTMLSwitchElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { readonly attribute Element activeElement; void setActive(in Element element); }; interface <dfn id="htmlsectionelement"> HTMLSectionElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { readonly attribute boolean active; void setActive(); }; </pre> <p> ... <p> When an element is added to a <code> <a href="#switch"> switch </a> </code> element as a child (whether during parsing, or later), the element is examined. If the element has an <code> active </code> attribute (or, if it is a non-XHTML element, if it has an <code> active </code> attribute in the XHTML namespace), or, if the <code> <a href="#switch"> switch </a> </code> element's <code> activeElement </code> DOM attribute is null, then the <code> <a href="#switch"> switch </a> </code> element's <code> setActive </code> method is called with that element as the argument. This causes the element to be made the active element for the switch, and causes any other elements to be deactivated if needed. <p> A side-effect of this definition is that the first element in a <code> <a
   href="#switch"> switch </a> </code> element is the default element if none have been explicitly marked as active. <h3 id="scs-calendars">  <span class="secno"> <ins>2.17. </ins> </span> <span
   title="SCS"> <a href="#scs"> <ins>[SCS] </ins> </a> <del>2.15. </del> </span> Calendars: event data <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p> The <dfn id="calendar"> <code> calendar </code> </dfn> element may be used for indicating hCalendar fragments that should be processed and rendered, e.g. as inline calendars. <p> The <code> <a href="#calendar"> calendar </a> </code> element is a block-level element whose content model is any <span> <a
   href="#block-level1"> block-level elements </a> </span> . User agents must support all the common attributes and event handlers on <code> <a
   href="#calendar"> calendar </a> </code> elements. <p> Web browsers should render the <code> <a
   href="#calendar"> calendar </a> </code> element by replacing the element by a representation of the calendar data contained within it. <h4 id="intepreting"> <span class="secno"> <ins>2.17.1. </ins> <del>2.15.1. </del> </span> Intepreting calendar data </h4> <p> UAs must process the contents of <code> <a
   href="#calendar"> calendar </a> </code> data as described in the hCalendar specification. <a href="#refsHCALENDAR"> [HCALENDAR] </a> </p> <h4 id="rendering"> <span class="secno"> <ins>2.17.2. </ins> <del>2.15.2. </del> </span> Rendering examples </h4> <div class="example"> <p class="issue"> These examples will need updating to track hCalendar as it evolves. </p> <p> The following fragment: </p> <pre> &lt;calendar&gt; &lt;div class="vcalendar"&gt; &lt;span class="prodid"&gt;-//hCalendar//EN&lt;/span&gt; &lt;span class="version"&gt;2.0&lt;/span&gt; &lt;p class="vevent"&gt; &lt;a href="http://www.web2con.com/"&gt; &lt;span class="dtstart"&gt;20041005&lt;/span&gt;- &lt;span class="dtend"&gt;20041007&lt;/span&gt; &lt;span class="summary"&gt;Web 2.0 Conference&lt;/span&gt; &lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/calendar&gt; </pre> <p> ...might render as the following: </p> <p> <img alt="A calendar control with the 5th of October being a link."
    src="sample-calendar.png"> </p> </div> <h3 id="scs-business">  <span class="secno"> <ins>2.18. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> <del>2.16. </del> </span> Business cards: personal data <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p> The <dfn id="card"> <code> card </code> </dfn> element may be used for indicating hCard fragments that should be processed and rendered, e.g. as inline business cards. <p> The <code> <a href="#card"> card </a> </code> element is a block-level element whose content model is any <span> <a
   href="#block-level1"> block-level elements </a> </span> . User agents must support all the common attributes and event handlers on <code> <a
   href="#card"> card </a> </code> elements. <p> Web browsers should render the <code> <a href="#card"> card </a> </code> element by replacing the element by a representation of the personal data contained within it. <h4 id="intepreting0"> <span class="secno"> <ins>2.18.1. </ins> <del>2.16.1. </del> </span> Intepreting card data </h4> <p> UAs must process the contents of <code> <a href="#card"> card </a> </code> data as described in the hCard specification. <a
   href="#refsHCARD"> [HCARD] </a> </p> <h4 id="rendering0"> <span class="secno"> <ins>2.18.2. </ins> <del>2.16.2. </del> </span> Rendering examples </h4> <div class="example"> <p class="issue"> These examples will need updating to track hCard as it evolves. </p> <p> The following fragment: </p> <pre> &lt;card&gt; &lt;p class="vcard"&gt; &lt;a class="fn n" href="http://tantek.com/"&gt; &lt;span class="Given-Name"&gt;Tantek&lt;/span&gt; &lt;span class="Family-Name"&gt;&Ccedil;elik&lt;/span&gt; &lt;/a&gt; &lt;/p&gt; &lt;/card&gt; </pre> <p> ...might render as the following: </p> <p> <img alt="A business card with contact information for Tantek
    &Ccedil;elik." src="sample-card.png"> </p> </div> <h3 id="inline"> <span class="secno"> <ins>2.19. </ins> <del>2.17. </del> </span> Inline data <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p class="big-issue"> This section is a place-holder for where elements such as <ins>&lt; </ins> <dfn id="date"> <code> <ins>date </ins> </code> </dfn> <ins>&gt; </ins> <del>&lt;date&gt; </del> or &lt;time&gt; might be defined. But it will probably be moved up to the earlier section. This might also just be merged with the "Semantics and structure of HTML elements" section above, or dropped, based on demand. <h3 id="disclosure"> <span class="secno"> <ins>2.20. </ins> </span> <ins>Disclosure widget </ins> <span title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p class="big-issue"> <ins>The "more details" widget. </ins> <h3 id="gauges"> <span class="secno"> <ins>2.21. </ins> <del>2.18. </del> </span> Gauges <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p> The <code> gauge </code> element is an inline element that represents a fractional value, such as the relative relevance of a search result, the fraction of a user's quota that is used, or the fraction of a voting population to have selected a particular candidate. <p> User agents must support all of the common attributes and event handlers on the <code> gauge </code> element, plus the following attributes: <dl> <dt> ... </dl> <p class="big-issue"> The value should come from parsing the .textContent attribute and taking the first string of digits (possibly with a single dot) as the numerator and the second string of digits (possibly with another single dot) as the denominator, defaulting the denominator to 100 if it is absent, treating zero denominators as 100, and using the resulting fraction as the value, in the range 0 to 1, for the gauge. If the numerator is absent, default to 0. <p class="big-issue"> Do we want something to say that "above 0.75 is bad"? "below 0.2 is bad"? </p> <h3 id="progress"> <span class="secno"> <ins>2.22. </ins> <del>2.19. </del> </span> Progress meters <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p class="big-issue"> Similar to gauge, but renders as a progress bar. If the numerator is absent, default to an indeterminate progress bar (barber pole, bouncing blue box, etc). <h3 id="interactive1">  <span class="secno"> <ins>2.23. </ins> </span> <ins>Interactive elements </ins> <del>2.20.  Data grids and data trees </del> </h3> <h4 id="scs-the">  <span class="secno"> <ins>2.23.1. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> <del>2.20.1. </del> </span> The <dfn
   id="datagrid0"> <code> datagrid </code> </dfn> element </h4> <p class="big-issue"> It has been suggested that instead of this flattened-row API, we should have all the "row" arguments in the API below be arrays of integers, and instead of getParentRow(), we would have getRowCount() get the number of children that a row had. A future version of this specification will make this change, along with adding a way to detect when a row/selection has been deleted, activated, etc. <p class="big-issue"> This element is defined as interactive, which means it can't contain other interactive elements, despite the fact that we expect it to work with other interactive elements e.g. checkboxes and input fields. It should be called something like a Leaf Interactive Element or something, which counts for ancestors looking in and not descendants looking out. <p> <span title="interactive elements"> <a
   href="#interactive3">  Interactive </a> </span> , <span title="block-level
   elements"> <a href="#block-level1"> block-level element </a> </span> . <dl class="element"> <dt> Contexts in which this element may be used: <dd> Where <span> <a href="#block-level1"> block-level elements </a> </span> are expected, if there are no ancestor <span> <a
    href="#interactive3">  interactive elements </a> </span> . <dt> Content model: <dd> Zero or more <span> <a href="#block-level1"> block-level elements </a> </span> . <dt> Element-specific attributes: <dd> <code title="attr-datagrid-multiple"> <a
    href="#multiple0"> multiple </a> </code> (optional) <dd> <code title="attr-datagrid-disabled"> <a
    href="#disabled2"> disabled </a> </code> (optional) <dt> DOM interface: <dd> <pre
     class="idl"> interface <dfn id="htmldatagridelement"> HTMLDataGridElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { attribute <span> <a href="#datagriddataprovider"> DataGridDataProvider </a> </span> <span title="dom-datagrid-data"> <a href="#data"> data </a> </span> ; attribute <span> <a href="#selectedrowranges"> <ins>SelectedRowRanges </ins>  <del>SelectionRanges </del> </a> </span> <span title="dom-datagrid-selection"> <a href="#selection0">  selection </a> </span> ; attribute boolean <span title="dom-datagrid-multiple"> <a href="#multiple"> multiple </a> </span> ; attribute boolean <span title="dom-datagrid-disabled"> <a href="#disabled1"> disabled </a> </span> ; void <span title="dom-datagrid-updateEverything"> <a href="#updateeverything"> updateEverything </a> </span> (); void <span title="dom-datagrid-updateRowsChanged"> <a href="#updaterowschanged"> updateRowsChanged </a> </span> (in long row, in long count); void <span title="dom-datagrid-updateRowsInserted"> <a href="#updaterowsinserted"> updateRowsInserted </a> </span> (in long row, in long count); void <span title="dom-datagrid-updateRowsRemoved"> <a href="#updaterowsremoved"> updateRowsRemoved </a> </span> (in long row, in long count); void <span title="dom-datagrid-updateRowChanged"> <a href="#updaterowchanged"> updateRowChanged </a> </span> (in long row); void <span title="dom-datagrid-updateColumnChanged"> <a href="#updatecolumnchanged"> updateColumnChanged </a> </span> (in long column); void <span title="dom-datagrid-updateCellChanged"> <a href="#updatecellchanged"> updateCellChanged </a> </span> (in long row, in long column); }; </pre> </dl> <p> The <code> <a href="#datagrid0"> datagrid </a> </code> element represents an interactive representation of tree, list, or tabular data. <p> The data being presented can come either from the content, as elements given as children of the <code> <a href="#datagrid0"> datagrid </a> </code> element, or from a scripted data provider given by the <code
   title="dom-datagrid-data"> <a href="#data"> data </a> </code> DOM attribute. <p> The <code title="attr-datagrid-multiple"> <a
   href="#multiple0"> multiple </a> </code> attribute, if present, must be either empty or have the literal value <code title=""> multiple </code> . Similarly, the <code title="attr-datagrid-disabled"> <a
   href="#disabled2"> disabled </a> </code> attribute, if present, must be either empty or have the literal value <code title=""> disabled </code> . (The actual values do not have any effect on how these attributes are processed, only the presence or absence of the attributes is important.) <p> The <dfn id="multiple"
   title="dom-datagrid-multiple"> <code> multiple </code> </dfn> and <dfn
   id="disabled1" title="dom-datagrid-disabled"> <code> disabled </code> </dfn> DOM attributes <span> <a href="#reflect"> reflect </a> </span> the <code
   title="attr-datagrid-multiple"> <a href="#multiple0"> multiple </a> </code> and <code title="attr-datagrid-disabled"> <a
   href="#disabled2"> disabled </a> </code> content attributes respectively. <h5 id="the-datagrid">  <span class="secno"> <ins>2.23.1.1. </ins> <del>2.20.1.1. </del> </span> The <code> <a
   href="#datagrid0"> datagrid </a> </code> data model </h5> <p> <em> This section is non-normative. </em> <p> In the <code> <a href="#datagrid0"> datagrid </a> </code> data model, data is structured as a set of rows representing a tree, each row being split into a number of columns. The columns are always present in the data model, although individual columns may be hidden in the presentation. <p> Each row can have a parent row. If a row <var title=""> r </var> has a parent row <var title=""> p </var> , then all the rows between it and its parent will also have a parent row, and for each row <var title=""> i </var> between <var title=""> p </var> and <var title=""> r </var> the parent row of <var title=""> i </var> will be either <var title=""> p </var> or another row between <var title=""> p </var> and <var title=""> i </var> . <p> Rows that have other rows claiming them as their parent row are open. Rows can be closed, hiding all the data that would form child rows, but when a row is closed its child data does not appear in the data model. <p> The columns can have captions. Those captions are not considered a row in their own right, they are obtained separately. <p> Selection of data in a <code> <a href="#datagrid0"> datagrid </a> </code> operates at the row level. If the <code title="attr-datagrid-multiple"> <a
   href="#multiple0"> multiple </a> </code> attribute is present, multiple rows can be selected at once, otherwise the user can only select one row at a time. <p> The <code> <a href="#datagrid0"> datagrid </a> </code> element can be disabled entirely by setting the <code title="attr-datagrid-disabled"> <a
   href="#disabled2"> disabled </a> </code> attribute. </p> <p> Columns, rows, and cells can each have specific flags, known as classes, applied to them by the data provider. These classes <a
   href="#datagridClassSummary"> affect the functionality </a> of the <code> <a
   href="#datagrid0"> datagrid </a> </code> element, and are also <a
   href="#datagridPseudos"> passed to the style system </a> . They are similar in concept to the <code title="attr-class"> class </code> attribute, except that they are not specified on elements but are given by scripted data providers. </p> <h5 id="the-data"> <span class="secno"> <ins>2.23.1.2. </ins> <del>2.20.1.2. </del> </span> The data provider interface </h5> <p> <em> The conformance criteria in this section apply to any implementation of the <code> <a
   href="#datagriddataprovider"> DataGridDataProvider </a> </code> , including (and most commonly) the content author's implementation(s). </em>  <pre class="idl"> // To be implemented by Web authors as a JS object interface <dfn id="datagriddataprovider"> DataGridDataProvider </dfn> { void <span title="dom-provider-initialize"> <a href="#initialize"> initialize </a> </span> (in HTMLDataGridElement datagrid); long <span title="dom-provider-getRowCount"> <a href="#getrowcount"> getRowCount </a> </span> (); long <span title="dom-provider-getColumnCount"> <a href="#getcolumncount"> getColumnCount </a> </span> (); DOMString <span title="dom-provider-getCaptionText"> <a href="#getcaptiontext"> getCaptionText </a> </span> (in long column); void <span title="dom-provider-getCaptionClasses"> <a href="#getcaptionclasses"> getCaptionClasses </a> </span> (in long column, in DOMTokenString classes); long <span title="dom-provider-getRowParent"> <a href="#getrowparent"> getRowParent </a> </span> (in long row); DOMString <span title="dom-provider-getRowImage"> <a href="#getrowimage"> getRowImage </a> </span> (in long row); HTMLMenuElement <span title="dom-provider-getRowMenu"> <a href="#getrowmenu"> getRowMenu </a> </span> (in long row); void <span title="dom-provider-getRowClasses"> <a href="#getrowclasses"> getRowClasses </a> </span> (in long row, in DOMTokenString classes); DOMString <span title="dom-provider-getCellData"> <a href="#getcelldata"> getCellData </a> </span> (in long row, in long column); void <span title="dom-provider-getCellClasses"> <a href="#getcellclasses"> getCellClasses </a> </span> (in long row, in long column, in DOMTokenString classes); void <span title="dom-provider-toggleRowOpenState"> <a href="#togglerowopenstate"> toggleRowOpenState </a> </span> (in long row); void <span title="dom-provider-toggleColumnSortState"> <a href="#togglecolumnsortstate"> toggleColumnSortState </a> </span> (in long column); void <span title="dom-provider-setCellCheckedState"> <a href="#setcellcheckedstate"> setCellCheckedState </a> </span> (in long row, in long column, in int state); void <span title="dom-provider-cycleCell"> <a href="#cyclecell"> cycleCell </a> </span> (in long row, in long column); void <span title="dom-provider-editCell"> <a href="#editcell"> editCell </a> </span> (in long row, in long column, in DOMString data); <ins>}; </ins> <del>} </del> </pre> <p> The <code> <a
   href="#datagriddataprovider"> DataGridDataProvider </a> </code> interface represents the interface that objects must implement to be used as custom data views for <code> <a href="#datagrid0"> datagrid </a> </code> elements. <p> Not all the methods are required. The minimum number of methods that must be implemented in a useful view is two: the <code
   title="dom-provider-getRowCount"> <a
   href="#getrowcount"> getRowCount() </a> </code> and <code
   title="dom-provider-getCellData"> <a
   href="#getcelldata"> getCellData() </a> </code> methods. <p> Once the object is written, it must be hooked up to the <code> <a
   href="#datagrid0"> datagrid </a> </code> using the <dfn id="data"
   title="dom-datagrid-data"> <code> data </code> </dfn> DOM attribute. <p> The following methods may be usefully implemented: <dl> <dt> <dfn id="initialize"
    title="dom-provider-initialize"> <code> initialize( <var
    title=""> datagrid </var> ) </code> </dfn> <dd> Called by the <code> <a href="#datagrid0"> datagrid </a> </code> element (the one given by the <var title=""> datagrid </var> argument) after it has first populated itself. This would typically be used to set the initial selection of the <code> <a href="#datagrid0"> datagrid </a> </code> element when it is first loaded. The data provider could also use this method call to register a <code title="event-select"> <a
    href="#select"> select </a> </code> event handler on the <code> <a
    href="#datagrid0"> datagrid </a> </code> in order to monitor selection changes. <dt> <dfn id="getrowcount"
    title="dom-provider-getRowCount"> <code> getRowCount() </code> </dfn> <dd> Must return the number of rows currently in the data model, including rows that are off-screen. If the value that this method would return changes, the relevant update methods on the <code> <a
    href="#datagrid0"> datagrid </a> </code> must be called first. Otherwise, this method must always return the same number. <dt> <dfn id="getcolumncount"
    title="dom-provider-getColumnCount"> <code> getColumnCount() </code> </dfn> <dd> Must return the number of columns currently in the data model (including columns that might be hidden). May be omitted if there is only one column. If the value that this method would return changes, the <code> <a href="#datagrid0"> datagrid </a> </code> 's <code
    title="dom-datagrid-updateEverything"> <a
    href="#updateeverything"> updateEverything() </a> </code> method must be called. <dt> <dfn id="getcaptiontext"
    title="dom-provider-getCaptionText"> <code> getCaptionText( <var
    title=""> column </var> ) </code> </dfn> <dd> Must return the caption, or label, for column <var
    title=""> column </var> . May be omitted if the columns have no captions. If the value that this method would return changes, the <code> <a
    href="#datagrid0"> datagrid </a> </code> 's <code
    title="dom-datagrid-updateColumnChanged"> <a
    href="#updatecolumnchanged"> updateColumnChanged() </a> </code> method must be called with the appropriate column index. <dt> <dfn id="getcaptionclasses"
    title="dom-provider-getCaptionClasses"> <code> getCaptionClasses( <var
    title=""> column </var> , <var title=""> classes </var> ) </code> </dfn> <dd> Must add the classes that apply to column <var title=""> column </var> to the <var title=""> classes </var> object. May be omitted if the columns have no special classes. If the classes that this method would add changes, the <code> <a href="#datagrid0"> datagrid </a> </code> 's <code
    title="dom-datagrid-updateColumnChanged"> <a
    href="#updatecolumnchanged"> updateColumnChanged() </a> </code> method must be called with the appropriate column index. Some classes have <a
    href="#datagridClassSummary"> predefined meanings </a> . <dt> <dfn id="getrowparent"
    title="dom-provider-getRowParent"> <code> getRowParent( <var
    title=""> row </var> ) </code> </dfn> <dd> Must return the index to the row that is the parent of row <var
    title=""> row </var> , or a negative number if this is a top-level row. If, for a row <var title=""> r </var> , this method returns the index of parent row <var title=""> p </var> , then for each row <var title=""> i </var> between <var title=""> p </var> and <var title=""> r </var> the method must return either <var title=""> p </var> or another row between <var
    title=""> p </var> and <var title=""> i </var> . May be omitted if the <code> <a href="#datagrid0"> datagrid </a> </code> is a list and not a tree. If the value that this method would return changes, the <code> <a
    href="#datagrid0"> datagrid </a> </code> 's update methods must be called to update all the rows in the range that covers the old parent, the new parent, and the row in question. <dt> <dfn id="getrowimage"
    title="dom-provider-getRowImage"> <code> getRowImage( <var
    title=""> row </var> ) </code> </dfn> <dd> Must return a URI to an image that represents row <var
    title=""> row </var> , or the empty string if there is no applicable image. May be omitted if no rows have associated images. If the value that this method would return changes, the <code> <a
    href="#datagrid0"> datagrid </a> </code> 's update methods must be called to update the row in question. <dt> <dfn id="getrowmenu"
    title="dom-provider-getRowMenu"> <code> getRowMenu( <var
    title=""> row </var> ) </code> </dfn> <dd> Must return an <code> HTMLMenuElement </code> object that is to be used as a context menu for row <var title=""> row </var> , or null if there is no particular context menu. May be omitted if none of the rows have a special context menu. As this method is called immediately before showing the menu in question, no precautions need to be taken if the return value of this method changes. <dt> <dfn id="getrowclasses"
    title="dom-provider-getRowClasses"> <code> getRowClasses( <var
    title=""> row </var> , <var title=""> classes </var> ) </code> </dfn> <dd> Must add the classes that apply to row <var title=""> row </var> to the <var title=""> classes </var> object. May be omitted if the rows have no special classes. If the classes that this method would add changes, the <code> <a href="#datagrid0"> datagrid </a> </code> 's update methods must be called to update the row in question. Some classes have <a
    href="#datagridClassSummary"> predefined meanings </a> . <dt> <dfn id="getcelldata"
    title="dom-provider-getCellData"> <code> getCellData( <var
    title=""> row </var> , <var title=""> column </var> ) </code> </dfn> <dd> Must return the value of the cell on row <var title=""> row </var> in column <var title=""> column </var> . For text cells, this must be the text to show for that cell. For <span title="datagrid-cell-class-progress"> <a
    href="#progress0"> progress bar cells </a> </span> , this must be either a floating point number in the range 0.0 to 1.0 (converted to a string representation), indicating the fraction of the progress bar to show as full (1.0 meaning complete), or the empty string, indicating an indeterminate progress bar. If the value that this method would return changes, the <code> <a
    href="#datagrid0"> datagrid </a> </code> 's update methods must be called to update the rows that changed. If only one cell changed, the <code
    title="dom-datagrid-updateCellChanged"> <a
    href="#updatecellchanged"> updateCellChanged() </a> </code> method may be used. <dt> <dfn id="getcellclasses"
    title="dom-provider-getCellClasses"> <code> getCellClasses( <var
    title=""> row </var> , <var title=""> column </var> , <var
    title=""> classes </var> ) </code> </dfn> <dd> Must add the classes that apply to cell on row <var title=""> row </var> in column <var title=""> column </var> to the <var title=""> classes </var> object. May be omitted if the cells have no special classes. If the classes that this method would add changes, the <code> <a
    href="#datagrid0"> datagrid </a> </code> 's update methods must be called to update the rows or cells in question. Some classes have <a
    href="#datagridClassSummary"> predefined meanings </a> . <dt> <dfn id="togglerowopenstate"
    title="dom-provider-toggleRowOpenState"> <code> toggleRowOpenState( <var
    title=""> row </var> ) </code> </dfn> <dd> Called by the <code> <a href="#datagrid0"> datagrid </a> </code> when the user tries to open or close a row. When it is called on a closed row, the data provider must update its state so that the rows now include the child rows, and must call the <code
    title="dom-datagrid-updateRowsInserted"> <a
    href="#updaterowsinserted"> updateRowsInserted() </a> </code> method appropriately. Similarly, when it is called on an open row, the data provider must update its state so that the rows that were shown under the row in question are now removed from the data model, and must then call the <code title="dom-datagrid-updateRowsRemoved"> <a
    href="#updaterowsremoved"> updateRowsRemoved() </a> </code> method appropriately. There is no need to tell the <code> <a
    href="#datagrid0"> datagrid </a> </code> that the row itself has changed (as it should; in particular its classes should change to reflect the new open/closed state), as the <code> <a href="#datagrid0"> datagrid </a> </code> automatically assumes that the row will need updating. <dt> <dfn id="togglecolumnsortstate"
    title="dom-provider-toggleColumnSortState"> <code> toggleColumnSortState( <var
    title=""> column </var> ) </code> </dfn> <dd> <p> Called by the <code> <a href="#datagrid0"> datagrid </a> </code> when the user tries to sort the data using a particular column <var
     title=""> column </var> . The data provider must update its state so that the rows are in the new order, and update the classes of the columns to represent the new sort status. There is no need to tell the <code> <a
     href="#datagrid0"> datagrid </a> </code> that it the data has changed, as the <code> <a href="#datagrid0"> datagrid </a> </code> automatically assumes that the entire data model will need updating. </p> <p> It is the data provider's responsibility to ensure that the user's selection persists through a sort. Typically this will involve taking a note of which rows were selected before the sort (using the <code
     title="dom-SelectedRowRanges-getRangeStart">  <a
     href="#getrangestart"> getRangeStart() </a> </code> and <code
     title="dom-SelectedRowRanges-getRangeLength">  <a
     href="#getrangelength"> getRangeLength() </a> </code> methods of the <code
     title="dom-datagrid-selection"> <a
     href="#selection0">  selection </a> </code> DOM attribute, for instance), and then <span title="dom-SelectedRowRanges-clear"> <a
     href="#clear">   clearing </a> </span> the selection and reselecting all the rows in their new positions (e.g. using the <code
     title="dom-SelectedRowRanges-addRange">  <a
     href="#addrange"> addRange() </a> </code> method). </p> <dt> <dfn id="setcellcheckedstate"
    title="dom-provider-setCellCheckedState"> <code> setCellCheckedState( <var
    title=""> row </var> , <var title=""> column </var> , <var
    title=""> state </var> ) </code> </dfn> <dd> Called by the <code> <a href="#datagrid0"> datagrid </a> </code> when the user changes the state of a checkbox cell on row <var title=""> row </var> , column <var title=""> column </var> . The checkbox should be toggled to the state given by <var title=""> state </var> , which is a positive integer (1) if the checkbox is to be checked, zero (0) if it is to be unchecked, and a negative number (-1) if it is to be set to the indeterminate state. There is no need to tell the <code> <a
    href="#datagrid0"> datagrid </a> </code> that the cell has changed, as the <code> <a href="#datagrid0"> datagrid </a> </code> automatically assumes that the given cell will need updating. <dt> <dfn id="cyclecell"
    title="dom-provider-cycleCell"> <code> cycleCell( <var title=""> row </var> , <var title=""> column </var> ) </code> </dfn> <dd> Called by the <code> <a href="#datagrid0"> datagrid </a> </code> when the user changes the state of a cyclable cell on row <var title=""> row </var> , column <var title=""> column </var> . The data provider should change the state of the cell to the new state, as appropriate. There is no need to tell the <code> <a href="#datagrid0"> datagrid </a> </code> that the cell has changed, as the <code> <a href="#datagrid0"> datagrid </a> </code> automatically assumes that the given cell will need updating. <dt> <dfn id="editcell" title="dom-provider-editCell"> <code> editCell( <var
    title=""> row </var> , <var title=""> column </var> , <var
    title=""> data </var> ) </code> </dfn> <dd> Called by the <code> <a href="#datagrid0"> datagrid </a> </code> when the user edits the cell on row <var title=""> row </var> , column <var
    title=""> column </var> . The new value of the cell is given by <var
    title=""> data </var> . The data provider should update the cell accordingly. There is no need to tell the <code> <a
    href="#datagrid0"> datagrid </a> </code> that the cell has changed, as the <code> <a href="#datagrid0"> datagrid </a> </code> automatically assumes that the given cell will need updating. </dd> </dl> <p> The following classes (for rows, columns, and cells) may be usefully used in conjunction with this interface: <table id="datagridClassSummary"> <tbody> <tr> <th> Class name <th> Applies to <th> Description <tr> <td> <dfn id="checked"
      title="datagrid-cell-class-checked"> <code> checked </code> </dfn> <td> Cells <td> The cell has a checkbox and it is checked. (The <code
      title="datagrid-cell-class-cyclable"> <a
      href="#cyclable"> cyclable </a> </code> and <code
      title="datagrid-cell-class-progress"> <a
      href="#progress0"> progress </a> </code> classes override this, though.) <tr> <td> <dfn id="closed"
      title="datagrid-row-class-closed"> <code> closed </code> </dfn> <td> Rows <td> The row can be opened and closed, and, unless the <code
      title="datagrid-row-class-open"> <a href="#open"> open </a> </code> class is also present, the row is currently closed. <tr> <td> <dfn id="cyclable"
      title="datagrid-cell-class-cyclable"> <code> cyclable </code> </dfn> <td> Cells <td> The cell can be cycled through multiple values. (The <code
      title="datagrid-cell-class-progress"> <a
      href="#progress0"> progress </a> </code> class overrides this, though.) <tr> <td> <dfn id="editable"
      title="datagrid-cell-class-editable"> <code> editable </code> </dfn> <td> Cells <td> The cell can be edited. (The <code
      title="datagrid-cell-class-cyclable"> <a
      href="#cyclable"> cyclable </a> </code> , <code
      title="datagrid-cell-class-progress"> <a
      href="#progress0"> progress </a> </code> , <code
      title="datagrid-cell-class-checked"> <a
      href="#checked"> checked </a> </code> , <code
      title="datagrid-cell-class-checked"> <a
      href="#checked"> unchecked </a> </code> and <code
      title="datagrid-cell-class-checked"> <a
      href="#checked"> indeterminate </a> </code> classes override this, though.) <tr> <td> <dfn id="header1"
      title="datagrid-row-class-header"> <code> header </code> </dfn> <td> Rows <td> The row is a heading, not a data row. <tr> <td> <dfn id="indeterminate"
      title="datagrid-cell-class-indeterminate"> <code> indeterminate </code> </dfn> <td> Cells <td> The cell has a checkbox, and it can be set to an indeterminate state. If neither the <code title="datagrid-cell-class-checked"> <a
      href="#checked"> checked </a> </code> nor <code
      title="datagrid-cell-class-checked"> <a
      href="#checked"> unchecked </a> </code> classes are present, then the checkbox is in that state, too. (The <code
      title="datagrid-cell-class-cyclable"> <a
      href="#cyclable"> cyclable </a> </code> and <code
      title="datagrid-cell-class-progress"> <a
      href="#progress0"> progress </a> </code> classes override this, though.) <tr> <td> <dfn id="initially-hidden"
      title="datagrid-column-class-initially-hidden"> <code> initially-hidden </code> </dfn> <td> Columns <td> The column will not be shown when the <code> <a
      href="#datagrid0"> datagrid </a> </code> is initially rendered. <tr> <td> <dfn id="open"
      title="datagrid-row-class-open"> <code> open </code> </dfn> <td> Rows <td> The row can be opened and closed, and is currently open. <tr> <td> <dfn id="progress0"
      title="datagrid-cell-class-progress"> <code> progress </code> </dfn> <td> Cells <td> The cell is a progress bar. <tr> <td> <dfn id="reversed"
      title="datagrid-column-class-reversed"> <code> reversed </code> </dfn> <td> Columns <td> If the cell is sorted, the sort direction is descending, instead of ascending. <tr> <td> <dfn id="selectable-separator"
      title="datagrid-row-class-selectable-separator"> <code> selectable-separator </code> </dfn> <td> Rows <td> The row is a normal, selectable, data row, except that instead of having data, it only has a separator. (The <code
      title="datagrid-row-class-header"> <a href="#header1"> header </a> </code> and <code title="datagrid-row-class-separator"> <a
      href="#separator"> separator </a> </code> classes override this, though.) <tr> <td> <dfn id="separator"
      title="datagrid-row-class-separator"> <code> separator </code> </dfn> <td> Rows <td> The row is a separator row, not a data row. (The <code
      title="datagrid-row-class-header"> <a href="#header1"> header </a> </code> class overrides this, though.) <tr> <td> <dfn id="sortable"
      title="datagrid-column-class-sortable"> <code> sortable </code> </dfn> <td> Columns <td> The data can be sorted by this column. <tr> <td> <dfn id="sorted"
      title="datagrid-column-class-sorted"> <code> sorted </code> </dfn> <td> Columns <td> The data is sorted by this column. Unless the <code
      title="datagrid-column-class-reversed"> <a
      href="#reversed"> reversed </a> </code> class is also present, the sort direction is ascending. <tr> <td> <dfn id="unchecked"
      title="datagrid-cell-class-unchecked"> <code> unchecked </code> </dfn> <td> Cells <td> The cell has a checkbox and, unless the <code
      title="datagrid-cell-class-checked"> <a
      href="#checked"> checked </a> </code> class is present as well, it is unchecked. (The <code title="datagrid-cell-class-cyclable"> <a
      href="#cyclable"> cyclable </a> </code> and <code
      title="datagrid-cell-class-progress"> <a
      href="#progress0"> progress </a> </code> classes override this, though.) </tr> </table> <h5 id="the-default"> <span class="secno"> <ins>2.23.1.3. </ins> <del>2.20.1.3. </del> </span> The default data provider </h5> <p> The user agent must supply a default data provider for the case where the <code> <a href="#datagrid0"> datagrid </a> </code> 's <code
   title="dom-datagrid-data"> <a href="#data"> data </a> </code> attribute is null. It must act as described in this section. <p> The behaviour of the default data provider depends on the nature of the first element child of the <code> <a href="#datagrid0"> datagrid </a> </code> . <dl class="switch">  <dt> While the first element child is a <code> table </code> <dd> <p> <strong> <code title="dom-provider-getRowCount"> <a
     href="#getrowcount"> getRowCount() </a> </code> </strong> : The number of rows returned by the default data provider must be the number of <code> tr </code> elements that are children of <code> tbody </code> elements that are children of the <code> table </code> , if there are any such child <code> tbody </code> elements. If there are no such <code> tbody </code> elements then the number of rows returned must be the number of <code> tr </code> elements that are children of the <code> table </code> . </p> <p class="note"> Rows in <code> thead </code> elements do not contribute to the number of rows returned, although they do affect the columns and column captions. Rows in <code> tfoot </code> elements are ignored completely by this algorithm. </p> <p> <strong> <code title="dom-provider-getColumnCount"> <a
     href="#getcolumncount"> getColumnCount() </a> </code> </strong> : The number of columns returned must be the number of <code> td </code> element children in the first <code> tr </code> element child of the first <code> tbody </code> element child of the <code> table </code> , if there are any such <code> tbody </code> elements. If there are no such <code> tbody </code> elements, then it must be the number of <code> td </code> element children in the first <code> tr </code> element child of the <code> table </code> , if any, or otherwise 1. If the number that would be returned by these rules is 0, then 1 must be returned instead. </p> <p> <strong> <code title="dom-provider-getCaptionText"> <a
     href="#getcaptiontext"> getCaptionText( <var
     title=""> i </var> ) </a> </code> </strong> : If the <code> table </code> has no <code> thead </code> element child, or if its first <code> thead </code> element child has no <code> tr </code> element child, the default data provider must return the empty string for all captions. Otherwise, the value of the <code> <a href="#textcontent0"> textContent </a> </code> attribute of the <var title=""> i </var> th <code> th </code> element child of the first <code> tr </code> element child of the first <code> thead </code> element child of the <code> table </code> element must be returned. If there is no such <code> th </code> element, the empty string must be returned. </p> <p> <strong> <code title="dom-provider-getCaptionClasses"> <a
     href="#getcaptionclasses"> getCaptionClasses( <var title=""> i </var> , <var
     title=""> classes </var> ) </a> </code> </strong> : If the <code> table </code> has no <code> thead </code> element child, or if its first <code> thead </code> element child has no <code> tr </code> element child, the default data provider must not add any classes for any of the captions. Otherwise, each class in the <code
     title="attr-class"> class </code> attribute of the <var title=""> i </var> th <code> th </code> element child of the first <code> tr </code> element child of the first <code> thead </code> element child of the <code> table </code> element must be added to the <var title=""> classes </var> . If there is no such <code> th </code> element, no classes must be added. The user agent must then: </p> <ol> <li> Remove the <code title="datagrid-column-class-sorted"> <a
      href="#sorted"> sorted </a> </code> and <code
      title="datagrid-column-class-reversed"> <a
      href="#reversed"> reversed </a> </code> classes. <li> If the <code> table </code> element has a <code
      title="attr-class"> class </code> attribute that includes the <code
      title=""> sortable </code> class, add the <code
      title="datagrid-column-class-sortable"> <a
      href="#sortable"> sortable </a> </code> class. <li> If the column is the one currently being used to sort the data, add the <code title="datagrid-column-class-sorted"> <a
      href="#sorted"> sorted </a> </code> class. <li> If the column is the one currently being used to sort the data, and it is sorted in descending order, add the <code
      title="datagrid-column-class-reversed"> <a
      href="#reversed"> reversed </a> </code> class as well. </ol> <p> The various row- and cell- related methods operate relative to a particular element, the element of the row or cell specified by their arguments. </p> <p> <strong> For rows </strong> : Since the view of the data can be sorted, the positions of the rows in the data model might not be the same as the positions of the real rows in the DOM. When the data is sorted, the row given by the method's argument has to be mapped to the real row. Initially, the mapping is the identity transform, but <a
     href="#defaultDataProviderTableSort"> the mapping can be changed </a> if the user sorts the rows. </p> <p> Once the method's argument has been translated into an index for the real row, the row's element is found as follows. If the <code> table </code> has <code> tbody </code> element children, the element for the <var title=""> i </var> th real row is the <var title=""> i </var> th <code> tr </code> element that is a child of a <code> tbody </code> element that is a child of the <code> table </code> element. If the <code> table </code> does not have <code> tbody </code> element children, then the element for the <var title=""> i </var> th real row is the <var
     title=""> i </var> th <code> tr </code> element that is a child of the <code> table </code> element. </p> <p> <strong> For cells </strong> : Given a row and its element, the row's <var title=""> i </var> th cell's element is the <var title=""> i </var> th <code> td </code> element child of the row element. </p> <p class="note"> The <code> colspan </code> and <code> rowspan </code> attributes are ignored by this algorithm. </p> <p> <strong> <code title="dom-provider-getRowParent"> <a
     href="#getrowparent"> getRowParent( <var
     title=""> i </var> ) </a> </code> </strong> : The default data provider must always return -1 as the parent row of any row. </p> <p class="note"> The <code> table </code> -based default data provider cannot represent a tree. </p> <p> <strong> <code title="dom-provider-getRowImage"> <a
     href="#getrowimage"> getRowImage( <var
     title=""> i </var> ) </a> </code> </strong> : If the row's first cell's element has an <code> <a href="#img0"> img </a> </code> element child, then the URI of the row's image is the URI of the first <code> <a
     href="#img0"> img </a> </code> element child of the row's first cell's element. Otherwise, the URI of the row's image is the empty string. </p> <p> <strong> <code title="dom-provider-getRowMenu"> <a
     href="#getrowmenu"> getRowMenu( <var
     title=""> i </var> ) </a> </code> </strong> : If the row's first cell's element has a <code> <a href="#menu0"> menu </a> </code> element child, then the row's menu is the first <code> <a href="#menu0"> menu </a> </code> element child of the row's first cell's element. Otherwise, the row has no menu. </p> <p> <strong> <code title="dom-provider-getRowClasses"> <a
     href="#getrowclasses"> getRowClasses( <var title=""> i </var> , <var
     title=""> classes </var> ) </a> </code> </strong> : The default data provider must never add a class to the row's classes. </p> <p id="defaultDataProviderTableSort"> <strong> <code
     title="dom-provider-toggleColumnSortState"> <a
     href="#togglecolumnsortstate"> toggleColumnSortState( <var
     title=""> i </var> ) </a> </code> </strong> : If the data is already being sorted on the given column, then the user agent must change the current sort mapping to be the inverse of the current sort mapping; if the sort order was ascending before, it is now descending, otherwise it is now ascending. Otherwise, if the current sort column is another column, or the data model is currently not sorted, the user agent must create a new mapping, which maps rows in the data model to rows in the DOM so that the rows in the data model are sorted by the specified column, in ascending order. (Which sort comparison operator to use is left up to the UA to decide.) </p> <p> <strong> <code title="dom-provider-getCellData"> <a
     href="#getcelldata"> getCellData( <var title=""> i </var> , <var
     title=""> j </var> ) </a> </code> , <code
     title="dom-provider-getCellClasses"> <a
     href="#getcellclasses"> getCellClasses( <var title=""> i </var> , <var
     title=""> j </var> , <var title=""> classes </var> ) </a> </code> , <code
     title="dom-provider-setCellCheckedState"> <a
     href="#setcellcheckedstate"> getCellCheckedState( <var title=""> i </var> , <var title=""> j </var> , <var title=""> state </var> ) </a> </code> , <code
     title="dom-provider-cycleCell"> <a href="#cyclecell"> cycleCell( <var
     title=""> i </var> , <var title=""> j </var> ) </a> </code> , and <code
     title="dom-provider-editCell"> <a href="#editcell"> editCell( <var
     title=""> i </var> , <var title=""> j </var> , <var
     title=""> data </var> ) </a> </code> </strong> : See <a
     href="#commonDefaultDataGridMethodDefinitions"> the common definitions below </a> . </p> <p> The data provider must call the <code> <a
     href="#datagrid0"> datagrid </a> </code> 's update methods appropriately whenever the descendants of the <code> <a
     href="#datagrid0"> datagrid </a> </code> mutate. For example, if a <code> tr </code> is removed, then the <code
     title="dom-datagrid-updateRowsRemoved"> <a
     href="#updaterowsremoved"> updateRowsRemoved() </a> </code> methods would probably need to be invoked, and any change to a cell or its descendants must cause the cell to be updated. If the <code> table </code> element stops being the first child of the <code> <a
     href="#datagrid0"> datagrid </a> </code> , then the data provider must call the <code title="dom-datagrid-updateEverything"> <a
     href="#updateeverything"> updateEverything() </a> </code> method on the <code> <a href="#datagrid0"> datagrid </a> </code> . Any change to a cell that is in the column that the data provider is currently using as its sort column must also cause the sort to be reperformed, with a call to <code title="dom-datagrid-updateEverything"> <a
     href="#updateeverything"> updateEverything() </a> </code> if the change did affect the sort order. </p> <dt> While the first element child is a <code> select </code> <dd> <p> The default data provider must return 1 for the column count, the empty string for the column's caption, and must not add any classes to the column's classes. </p> <p> For the rows, assume the existence of a linear node iterator view of the children of the first <code> select </code> element child of the <code> <a href="#datagrid0"> datagrid </a> </code> element, that skips all nodes other than <code> optgroup </code> and <code> option </code> elements, as well as any descendents of any <code> option </code> elements, and descendants of <code> optgroup </code> elements with the <code
     title=""> closed </code> token in their <code
     title="attr-class"> class </code> attribute. </p> <p> Given this view, each element in the view represents a row in the data model: the <var title=""> i </var> th element in the view is the <var
     title=""> i </var> th row's element. The row of a particular method call is the row given by its arguments. </p> <p> <code title="dom-provider-getRowCount"> <a
     href="#getrowcount"> getRowCount() </a> </code> must return the number of elements in this view. </p> <p> <code title="dom-provider-getRowParent"> <a
     href="#getrowparent"> getRowParent( <var title=""> i </var> ) </a> </code> must return the index in the view of the nearest ancestor <code> optgroup </code> element of the row's element, -1 if there is no such ancestor. </p> <p> <code title="dom-provider-getRowImage"> <a
     href="#getrowimage"> getRowImage( <var title=""> i </var> ) </a> </code> must return the empty string, <code title="dom-provider-getRowMenu"> <a
     href="#getrowmenu"> getRowMenu( <var title=""> i </var> ) </a> </code> must return null. </p> <p> <code title="dom-provider-getRowClasses"> <a
     href="#getrowclasses"> getRowClasses( <var title=""> i </var> , <var
     title=""> classes </var> ) </a> </code> must add the classes from the following list to <var title=""> classes </var> when their condition is met: </p> <ul> <li> If the row's element contains other elements that are also in the view, and the element's <code title="attr-class"> class </code> attribute contains the <code title=""> closed </code> class: <code
      title="datagrid-row-class-closed"> <a href="#closed"> closed </a> </code> <li> If the row's element contains other elements that are also in the view, and the element's <code title="attr-class"> class </code> attribute doesn't contain the <code title=""> closed </code> class: <code
      title="datagrid-row-class-open"> <a href="#open"> open </a> </code> </ul> <p> The <code title="dom-provider-toggleRowOpenState"> <a
     href="#togglerowopenstate"> toggleRowOpenState( <var
     title=""> i </var> ) </a> </code> method must add a <code
     title=""> closed </code> class to that row's element's <code
     title="attr-class"> class </code> attribute and remove any <code
     title=""> open </code> class, unless it already has a <code
     title=""> closed </code> class and has no <code title=""> open </code> class, in which case it must instead remove the <code
     title=""> closed </code> class and add an <code title=""> open </code> class. It must then invoke the appropriate update methods to inform the <code> <a href="#datagrid0"> datagrid </a> </code> of the newly added or removed rows. </p> <p> The <code title="dom-provider-getCellData"> <a
     href="#getcelldata"> getCellData( <var title=""> i </var> , <var
     title=""> j </var> ) </a> </code> method must return the value of the <code
     title="attr-optgroup-label"> label </code> attribute if the row's element is an <code> optgroup </code> element, otherwise, if the row's element is an <code> option </code> element, its <code
     title="attr-option-label"> label </code> attribute if it has one, otherwise the value of its <code> <a
     href="#textcontent0"> textContent </a> </code> DOM attribute. </p> <p> The <code title="dom-provider-getCellClasses"> <a
     href="#getcellclasses"> getCellClasses( <var title=""> i </var> , <var
     title=""> j </var> , <var title=""> classes </var> ) </a> </code> method must add no classes. </p> <p> The data provider must call the <code> <a
     href="#datagrid0"> datagrid </a> </code> 's update methods appropriately whenever the descendants of the <code> <a
     href="#datagrid0"> datagrid </a> </code> mutate. </p> <dt> While the first element child is another element <dd> <p> The default data provider must return 1 for the column count, the empty string for the column's caption, and must not add any classes to the column's classes. </p> <p> For the rows, assume the existence of a linear node iterator view of the children of the <code> <a href="#datagrid0"> datagrid </a> </code> that skips all nodes other than <code> <a href="#li0"> li </a> </code> , <code> <a
     href="#h10"> h1 </a> </code> - <code> <a href="#h60"> h6 </a> </code> , and <code> <a href="#hr0"> hr </a> </code> elements, and skips all elements that are descendants of elements with the <code title=""> closed </code> token in their <code title="attr-class"> class </code> attribute, and any descendants of <code> <a href="#menu0"> menu </a> </code> elements. </p> <p> Given this view, each element in the view represents a row in the data model: the <var title=""> i </var> th element in the view is the <var
     title=""> i </var> th row's element. The row of a particular method call is the row given by its arguments. </p> <p> <code title="dom-provider-getRowCount"> <a
     href="#getrowcount"> getRowCount() </a> </code> must return the number of elements in this view. </p> <p> <code title="dom-provider-getRowParent"> <a
     href="#getrowparent"> getRowParent( <var title=""> i </var> ) </a> </code> must return the index in the view of the nearest ancestor (in the real DOM) of the row's element that is also in the view, -1 if there is no such ancestor. </p> <div class="example"> <p> In the following example, the row numbered 2 returns 1 as its parent, and the other rows return -1: </p> <pre> &lt;datagrid> &lt;ol> &lt;li> row 0 &lt;/li> &lt;li> row 1 &lt;ol> &lt;li> row 2 &lt;/li> &lt;/ol> &lt;/li> &lt;li> row 3 &lt;/li> &lt;/ol> &lt;/datagrid> </pre> </div> <p> <code title="dom-provider-getRowImage"> <a
     href="#getrowimage"> getRowImage( <var title=""> i </var> ) </a> </code> must return the URI of the image given by the first <code> <a
     href="#img0"> img </a> </code> element descendant (in the real DOM) of the row's element, that is not also a descendant of another element that has a later position in the view. </p> <div class="example"> <p> In the following example, the row numbered 2 returns "http://example.com/a" as its image URI, and the other rows (including row 1) return the empty string: </p> <pre> &lt;datagrid> &lt;ol> &lt;li> row 0 &lt;/li> &lt;li> row 1 &lt;ol> &lt;li> row 2 &lt;img src="http://example.com/a" alt=""> &lt;/li> &lt;/ol> &lt;/li> &lt;li> row 3 &lt;/li> &lt;/ol> &lt;/datagrid> </pre> </div> <p> <code title="dom-provider-getRowMenu"> <a
     href="#getrowmenu"> getRowMenu( <var title=""> i </var> ) </a> </code> must return the first <code> <a href="#menu0"> menu </a> </code> element descendant (in the real DOM) of the row's element, that is not also a descendant of another element that has a later position in the view. (This is analogous to the image case above.) </p> <p> <code title="dom-provider-getRowClasses"> <a
     href="#getrowclasses"> getRowClasses( <var title=""> i </var> , <var
     title=""> classes </var> ) </a> </code> must add the classes from the following list to <var title=""> classes </var> when their condition is met: </p> <ul> <li> If the row's element contains other elements that are also in the view, and the element's <code title="attr-class"> class </code> attribute contains the <code title=""> closed </code> class: <code
      title="datagrid-row-class-closed"> <a href="#closed"> closed </a> </code> <li> If the row's element contains other elements that are also in the view, and the element's <code title="attr-class"> class </code> attribute doesn't contain the <code title=""> closed </code> class: <code
      title="datagrid-row-class-open"> <a href="#open"> open </a> </code> <li> If the row's element is an <code> <a
      href="#h10"> h1 </a> </code> - <code> <a href="#h60"> h6 </a> </code> element: <code title="datagrid-row-class-header"> <a
      href="#header1"> header </a> </code> <li> If the row's element is an <code> <a href="#hr0"> hr </a> </code> element: <code title="datagrid-row-class-separator"> <a
      href="#separator"> separator </a> </code> </li> </ul> <p> The <code title="dom-provider-toggleRowOpenState"> <a
     href="#togglerowopenstate"> toggleRowOpenState( <var
     title=""> i </var> ) </a> </code> method must add a <code
     title=""> closed </code> class to that row's element's <code
     title="attr-class"> class </code> attribute and remove any <code
     title=""> open </code> class, unless it already has a <code
     title=""> closed </code> class and has no <code title=""> open </code> class, in which case it must instead remove the <code
     title=""> closed </code> class and add an <code title=""> open </code> class. It must then invoke the appropriate update methods to inform the <code> <a href="#datagrid0"> datagrid </a> </code> of the newly added or removed rows. </p> <p> The <code title="dom-provider-getCellData"> <a
     href="#getcelldata"> getCellData( <var title=""> i </var> , <var
     title=""> j </var> ) </a> </code> , <code
     title="dom-provider-getCellClasses"> <a
     href="#getcellclasses"> getCellClasses( <var title=""> i </var> , <var
     title=""> j </var> , <var title=""> classes </var> ) </a> </code> , <code
     title="dom-provider-setCellCheckedState"> <a
     href="#setcellcheckedstate"> getCellCheckedState( <var title=""> i </var> , <var title=""> j </var> , <var title=""> state </var> ) </a> </code> , <code
     title="dom-provider-cycleCell"> <a href="#cyclecell"> cycleCell( <var
     title=""> i </var> , <var title=""> j </var> ) </a> </code> , and <code
     title="dom-provider-editCell"> <a href="#editcell"> editCell( <var
     title=""> i </var> , <var title=""> j </var> , <var
     title=""> data </var> ) </a> </code> methods must act as described in <a
     href="#commonDefaultDataGridMethodDefinitions"> the common definitions below </a> , treating the row's element as being the cell's element. </p> <p> The data provider must call the <code> <a
     href="#datagrid0"> datagrid </a> </code> 's update methods appropriately whenever the descendants of the <code> <a
     href="#datagrid0"> datagrid </a> </code> mutate. </p> <dt> Otherwise, while there is no element child <dd> <p> The data provider must return 0 for the number of rows, 1 for the number of columns, the empty string for the first column's caption, and must add no classes when asked for that column's classes. If the <code> <a href="#datagrid0"> datagrid </a> </code> 's child list changes such that the first element child is one of the above, then the data provider must call the <code title="dom-datagrid-updateEverything"> <a
     href="#updateeverything"> updateEverything() </a> </code> method on the <code> <a href="#datagrid0"> datagrid </a> </code> . </p> </dl> <h6 id="commonDefaultDataGridMethodDefinitions"> <span
   class="secno"> <ins>2.23.1.3.1. </ins> <del>2.20.1.3.1. </del> </span> Common default data provider method definitions for cells </h6> <p> These definitions are used for the cell-specific methods of the default data providers (other than in the <code> select </code> case). How they behave is based on the contents of an element that represents the cell given by their first two arguments (which are the row and column indices respectively). Which element that is is defined in the previous section. <dl> <dt> Cyclable cells <dd> <p> If the first element child of a cell's element is a <code> select </code> element that has a no <code
     title="attr-select-multiple"> multiple </code> attribute and has at least one <code> option </code> element descendent, then the cell acts as a cyclable cell. </p> <p> The "current" <code> option </code> element is the selected <code> option </code> element, or the first <code> option </code> element if none is selected. </p> <p> The <code title="dom-provider-getCellData"> <a
     href="#getcelldata"> getCellData() </a> </code> method must return the <code> <a href="#textcontent0"> textContent </a> </code> of the current <code> option </code> element (the <code
     title="attr-option-label"> label </code> attribute is ignored in this context as the <code> optgroup </code> s are not displayed). </p> <p> The <code title="dom-provider-getCellClasses"> <a
     href="#getcellclasses"> getCellClasses() </a> </code> method must add the <code title="datagrid-cell-class-cyclable"> <a
     href="#cyclable"> cyclable </a> </code> class and then all the classes of the current <code> option </code> element. </p> <p> The <code title="dom-provider-cycleCell"> <a
     href="#cyclecell"> cycleCell() </a> </code> method must change the selection of the <code> select </code> element such that the next <code> option </code> element after the current <code> option </code> element is the only one that is selected (in tree order). If the current <code> option </code> element is the last <code> option </code> element descendent of the <code> select </code> , then the first <code> option </code> element descendent must be selected instead. </p> <p> The <code title="dom-provider-setCellCheckedState"> <a
     href="#setcellcheckedstate"> setCellCheckedState() </a> </code> and <code
     title="dom-provider-editCell"> <a href="#editcell"> editCell() </a> </code> methods must do nothing. </p> <dt> Progress bar cells <dd> <p> If the first element child of a cell's element is a <code> progress </code> element, then the cell acts as a progress bar cell. </p> <p> The <code title="dom-provider-getCellData"> <a
     href="#getcelldata"> getCellData() </a> </code> method must return the value returned by the <code> progress </code> element's <code
     title="dom-progress-position"> position </code> DOM attribute. </p> <p> The <code title="dom-provider-getCellClasses"> <a
     href="#getcellclasses"> getCellClasses() </a> </code> method must add the <code title="datagrid-cell-class-cyclable"> <a
     href="#cyclable"> progress </a> </code> class. </p> <p> The <code title="dom-provider-setCellCheckedState"> <a
     href="#setcellcheckedstate"> setCellCheckedState() </a> </code> , <code
     title="dom-provider-cycleCell"> <a
     href="#cyclecell"> cycleCell() </a> </code> , and <code
     title="dom-provider-editCell"> <a href="#editcell"> editCell() </a> </code> methods must do nothing. </p> <dt> Checkbox cells <dd> <p> If the first element child of a cell's element is an <code> input </code> element that has a <code
     title="attr-input-type"> type </code> attribute with the value <code
     title=""> checkbox </code> , then the cell acts as a check box cell. </p> <p> The <code title="dom-provider-getCellData"> <a
     href="#getcelldata"> getCellData() </a> </code> method must return the <code> <a href="#textcontent0"> textContent </a> </code> of the cell element. </p> <p> The <code title="dom-provider-getCellClasses"> <a
     href="#getcellclasses"> getCellClasses() </a> </code> method must add the <code title="datagrid-cell-class-checked"> <a
     href="#checked"> checked </a> </code> class if the <code> input </code> element is <span title="dom-input-checked"> checked </span> , and the <code
     title="datagrid-cell-class-unchecked"> <a
     href="#unchecked"> unchecked </a> </code> class otherwise. </p> <p> The <code title="dom-provider-setCellCheckedState"> <a
     href="#setcellcheckedstate"> setCellCheckedState() </a> </code> method must set the <code> input </code> element's checkbox <span
     title="dom-input-checked"> state </span> to checked if the method's third argument is 1, and to unchecked otherwise. </p> <p> The <code title="dom-provider-cycleCell"> <a
     href="#cyclecell"> cycleCell() </a> </code> and <code
     title="dom-provider-editCell"> <a href="#editcell"> editCell() </a> </code> methods must do nothing. </p> <dt> Editable cells <dd> <p> If the first element child of a cell's element is an <code> input </code> element that has a <code
     title="attr-input-type"> type </code> attribute with the value <code
     title=""> text </code> or that has no <code
     title="attr-input-type"> type </code> attribute at all, then the cell acts as an editable cell. </p> <p> The <code title="dom-provider-getCellData"> <a
     href="#getcelldata"> getCellData() </a> </code> method must return the <code title="dom-input-value"> value </code> of the <code> input </code> element. </p> <p> The <code title="dom-provider-getCellClasses"> <a
     href="#getcellclasses"> getCellClasses() </a> </code> method must add the <code title="datagrid-cell-class-editable"> <a
     href="#editable"> editable </a> </code> class. </p> <p> The <code title="dom-provider-editCell"> <a
     href="#editcell"> editCell() </a> </code> method must set the <code> input </code> element's <code title="dom-input-value"> value </code> DOM attribute to the value of the third argument to the method. </p> <p> The <code title="dom-provider-setCellCheckedState"> <a
     href="#setcellcheckedstate"> setCellCheckedState() </a> </code> and <code
     title="dom-provider-cycleCell"> <a
     href="#cyclecell"> cycleCell() </a> </code> methods must do nothing. </p> </dl> <h5 id="populating"> <span class="secno"> <ins>2.23.1.4. </ins> <del>2.20.1.4. </del> </span> Populating the <code> <a href="#datagrid0"> datagrid </a> </code> element </h5> <p> A <code> <a href="#datagrid0"> datagrid </a> </code> must be disabled until its end tag has been parsed (in the case of a <code> <a
   href="#datagrid0"> datagrid </a> </code> element in the original document markup) or until it has been inserted into the document (in the case of a dynamically created element). After that point, the element must fire a single <code title="event-load"> load </code> event at itself, which doesn't bubble and cannot be canceled. <p> The <code> <a href="#datagrid0"> datagrid </a> </code> must then populate itself using the data provided by the data provider assigned to the <code
   title="dom-datagrid-data"> <a href="#data"> data </a> </code> DOM attribute. After the view is populated (using the methods described below), the <code> <a href="#datagrid0"> datagrid </a> </code> must invoke the <code
   title="dom-provider-initialize"> <a
   href="#initialize"> initialize() </a> </code> method on the data provider specified by the <code title="dom-datagrid-data"> <a
   href="#data"> data </a> </code> attribute, passing itself (the <code> <a
   href="#htmldatagridelement"> HTMLDataGridElement </a> </code> object) as the only argument. <p> When the <code title="dom-datagrid-data"> <a href="#data"> data </a> </code> attribute is null, the <code> <a href="#datagrid0"> datagrid </a> </code> must use the default data provider described in the previous section. <p> To obtain data from the data provider, the element must invoke methods on the data provider object in the following ways: <dl> <dt> To determine the total number of rows <dd> Invoke the <code title="dom-provider-getRowCount"> <a
    href="#getrowcount"> getRowCount() </a> </code> method with no arguments. The return value is the number of rows. If the return value is negative, not an integer, or simply not a numeric type, or if the method is not defined, then zero must be used instead. <dt> To determine the total number of columns <dd> Invoke the <code title="dom-provider-getColumnCount"> <a
    href="#getcolumncount"> getColumnCount() </a> </code> method with no arguments. The return value is the number of columns. If the return value is zero or negative, not an integer, or simply not a numeric type, or if the method is not defined, then 1 must be used instead. <dt> To get the captions to use for the columns <dd> Invoke the <code title="dom-provider-getCaptionText"> <a
    href="#getcaptiontext"> getCaptionText() </a> </code> method with the index of the column in question. The index <var title=""> i </var> must be in the range 0 &le; <var title=""> i </var> &lt; <var title=""> N </var> , where <var
    title=""> N </var> is the total number of columns. The return value is the string to use when referring to that column. If the method returns null or the empty string, the column has no caption. If the method is not defined, then none of the columns have any captions. <dt> To establish what classes apply to a column <dd> Invoke the <code title="dom-provider-getCaptionClasses"> <a
    href="#getcaptionclasses"> getCaptionClasses() </a> </code> method with the index of the column in question, and an object implementing the <code> <a
    href="#domtokenstring"> DOMTokenString </a> </code> interface, initialised to empty. The index <var title=""> i </var> must be in the range 0 &le; <var title=""> i </var> &lt; <var title=""> N </var> , where <var
    title=""> N </var> is the total number of columns. The values contained in the <code> <a href="#domtokenstring"> DOMTokenString </a> </code> object when the method returns represent the classes that apply to the given column. If the method is not defined, no classes apply to the column. <dt> To establish whether a column should be initially included in the visible columns <dd> Check whether the <code
    title="datagrid-column-class-initially-hidden"> <a
    href="#initially-hidden"> initially-hidden </a> </code> class applies to the column. If it does, then the column should not be initially included; if it does not, then the column should be initially included. <dt id="columnType2"> To establish whether the data can be sorted relative to a particular column <dd> Check whether the <code title="datagrid-column-class-sortable"> <a
    href="#sortable"> sortable </a> </code> class applies to the column. If it does, then the user should be able to ask the UA to display the data sorted by that column; if it does not, then the user agent must not allow the user to ask for the data to be sorted by that column. <dt> To establish if a column is a sorted column <dd> If the user agent can handle multiple columns being marked as sorted simultaneously: Check whether the <code
    title="datagrid-column-class-sorted"> <a href="#sorted"> sorted </a> </code> class applies to the column. If it does, then that column is the sorted column, otherwise it is not. <dd> If the user agent can only handle one column being marked as sorted at a time: Check each column in turn, starting with the first one, to see whether the <code title="datagrid-column-class-sorted"> <a
    href="#sorted"> sorted </a> </code> class applies to that column. The first column that has that class, if any, is the sorted column. If none of the columns have that class, there is no sorted column. <dt> To establish the sort direction of a sorted column <dd> Check whether the <code title="datagrid-column-class-reversed"> <a
    href="#reversed"> reversed </a> </code> class applies to the column. If it does, then the sort direction is descending (down; first rows have the highest values), otherwise it is ascending (up; first rows have the lowest values). <dt> To establish a row's parent row <dd> <p> Invoke the <code title="dom-provider-getRowParent"> <a
     href="#getrowparent"> getRowParent() </a> </code> method with the index of the row in question. The index <var title=""> i </var> must be in the range 0 &le; <var title=""> i </var> &lt; <var title=""> N </var> , where <var title=""> N </var> is the total number of rows. The return value <var
     title=""> p </var> is the index of the parent row. If the method returns a number outside the range 0 &le; <var title=""> p </var> &lt; <var
     title=""> i </var> , or if the returned value is non-numeric, or if the method is not defined, then the row has no parent row (it is an unparented top-level row). </p> <p> If a row <var title=""> r </var> has a parent row <var title=""> p </var> , but not all the rows between it and its parent also have a parent row, or if there is a row <var title=""> i </var> between <var title=""> p </var> and <var title=""> r </var> the parent of which is neither <var
     title=""> p </var> nor another row between <var title=""> p </var> and <var
     title=""> i </var> , then the user agent may present the tree structure in an inconsistent way instead of attempting to render the actual described tree structure. </p> <dt> To obtain a URI to an image representing a row <dd> Invoke the <code title="dom-provider-getRowImage"> <a
    href="#getrowimage"> getRowImage() </a> </code> method with the index of the row in question. The index <var title=""> i </var> must be in the range 0 &le; <var title=""> i </var> &lt; <var title=""> N </var> , where <var
    title=""> N </var> is the total number of rows. The return value is a string representing a URI or IRI to an image. Relative URIs must be interpreted relative to the <code> <a
    href="#datagrid0"> datagrid </a> </code> 's base URI. If the method returns the empty string, null, or if the method is not defined, then the row has no associated image. <dt> To obtain a context menu appropriate for a particular row <dd> Invoke the <code title="dom-provider-getRowMenu"> <a
    href="#getrowmenu"> getRowMenu() </a> </code> method with the index of the row in question. The index <var title=""> i </var> must be in the range 0 &le; <var title=""> i </var> &lt; <var title=""> N </var> , where <var
    title=""> N </var> is the total number of rows. The return value is a reference to an object implementing the <code> HTMLMenuElement </code> interface, i.e. a <code> <a href="#menu0"> menu </a> </code> element DOM node. (This element must then be interpreted as described in the section on context menus to obtain the actual context menu to use.) If the method returns something that is not an <code> HTMLMenuElement </code> , or if the method is not defined, then the row has no associated context menu. User agents may provide their own default context menu, and may add items to the author-provided context menu. For example, such a menu could allow the user to change the presentation of the <code> <a
    href="#datagrid0"> datagrid </a> </code> element. <dt> To establish what classes apply to a row <dd> Invoke the <code title="dom-provider-getRowClasses"> <a
    href="#getrowclasses"> getRowClasses() </a> </code> method with the index of the row in question, and an object implementing the <code> <a
    href="#domtokenstring"> DOMTokenString </a> </code> interface, initialised to empty. The index <var title=""> i </var> must be in the range 0 &le; <var title=""> i </var> &lt; <var title=""> N </var> , where <var
    title=""> N </var> is the total number of rows. The values contained in the <code> <a href="#domtokenstring"> DOMTokenString </a> </code> object when the method returns represent the classes that apply to the row in question. If the method is not defined, no classes apply to the row. <dt> To establish whether a row is a data row or a special row <dd> Examine the classes that apply to the row. If the <code
    title="datagrid-row-class-header"> <a href="#header1"> header </a> </code> class applies to the row, then it is not a data row, it is a subheading. The data from the first cell of the row is the text of the subheading, the rest of the cells must be ignored. Otherwise, if the <code
    title="datagrid-row-class-separator"> <a
    href="#separator"> separator </a> </code> class applies to the row, then in the place of the row, a separator should be shown. Otherwise, if the <code title="datagrid-row-class-selectable-separator"> <a
    href="#selectable-separator"> selectable-separator </a> </code> class applies to the row, then the row should be a data row, but represented as a separator. (The difference between a <code
    title="datagrid-row-class-separator"> <a
    href="#separator"> separator </a> </code> and a <code
    title="datagrid-row-class-selectable-separator"> <a
    href="#selectable-separator"> selectable-separator </a> </code> is that the former is not an item that can be actually selected, whereas the second can be selected and thus has a context menu that applies to it, and so forth.) For both kinds of separator rows, the data of the rows' cells must all be ignored. If none of those three classes apply then the row is a simple data row. <dt id="rowType1"> To establish whether a row is openable <dd> Check whether one of the <code title="datagrid-row-class-open"> <a
    href="#open"> open </a> </code> or <code
    title="datagrid-row-class-closed"> <a href="#closed"> closed </a> </code> classes applies to the row. If one (or both) of these are present, then the row can be opened and closed, otherwise neither are present and the row cannot be opened or closed. (It might still have rows that consider this row a parent, however.) <dt> To establish whether an openable row is open or closed <dd> Check whether the <code title="datagrid-row-class-open"> <a
    href="#open"> open </a> </code> class applies to the row. If it does, the row is open. Otherwise, the row is closed. The <code
    title="datagrid-row-class-closed"> <a href="#closed"> closed </a> </code> class is not examined to make this determination (although either it or the <code title="datagrid-row-class-open"> <a href="#open"> open </a> </code> class must be present to make the row openable in the first place). If a closed row has rows that consider it a parent, those rows must still be included in the rendering. </dd> <dt> To establish the value of a particular cell <dd> Invoke the <code title="dom-provider-getCellData"> <a
    href="#getcelldata"> getCellData() </a> </code> method with the first argument being the index of the cell's row and the second argument being the index of its column. The two arguments must be zero or positive integers less than the total number of rows and columns respectively. The return value is the value of the cell. If the return value is null or the empty string, or if the method is not defined, then the cell has no data. (For progress bar cells, the cell's value must be further interpreted, as described below.) <dt> To establish what classes apply to a cell <dd> Invoke the <code title="dom-provider-getCellClasses"> <a
    href="#getcellclasses"> getCellClasses() </a> </code> method with the first argument being the index of the cell's row, the second argument being the index of its column, and the third being an object implementing the <code> <a href="#domtokenstring"> DOMTokenString </a> </code> interface, initialised to empty. The first two arguments must be zero or positive integers less than the total number of rows and columns respectively. The values contained in the <code> <a
    href="#domtokenstring"> DOMTokenString </a> </code> object when the method returns represent the classes that apply to that cell. If the method is not defined, no classes apply to the cell. <dt id="cellType1"> To establish how the type of a cell <dd> Examine the classes that apply to the cell. If the <code
    title="datagrid-cell-class-progress"> <a
    href="#progress0"> progress </a> </code> class applies to the cell, it is a progress bar. Otherwise, if the <code
    title="datagrid-cell-class-cyclable"> <a
    href="#cyclable"> cyclable </a> </code> class applies to the cell, it is a cycling cell whose value can be cycled between multiple states. Otherwise, none of these classes apply, and the cell is a simple text cell. <dt> To establish the value of a progress bar cell <dd> If the value <var title=""> x </var> of the cell is a string that can be <a href="#toNumber"> converted to a floating point number </a> in the range 0.0 &le; <var title=""> x </var> &le; 1.0, then the progress bar has that value (0.0 means no progress, 1.0 means complete). Otherwise, the progress bar is an indeterminate progress bar. <dt id="cellType2"> To establish how a simple text cell should be presented <dd> Check whether one of the <code title="datagrid-cell-class-checked"> <a
    href="#checked"> checked </a> </code> , <code
    title="datagrid-cell-class-unchecked"> <a
    href="#unchecked"> unchecked </a> </code> , or <code
    title="datagrid-cell-class-indeterminate"> <a
    href="#indeterminate"> indeterminate </a> </code> classes applies to the cell. If any of these are present, then the cell has a checkbox, otherwise none are present and the cell does not have a checkbox. If the cell has no checkbox, check whether the <code
    title="datagrid-cell-class-editable"> <a
    href="#editable"> editable </a> </code> class applies to the cell. If it does, then the cell value is editable, otherwise the cell value is static. <dt> To establish the state of a cell's checkbox, if it has one <dd> Check whether the <code title="datagrid-cell-class-checked"> <a
    href="#checked"> checked </a> </code> class applies to the cell. If it does, the cell is checked. Otherwise, check whether the <code
    title="datagrid-cell-class-unchecked"> <a
    href="#unchecked"> unchecked </a> </code> class applies to the cell. If it does, the cell is unchecked. Otherwise, the <code
    title="datagrid-cell-class-indeterminate"> <a
    href="#indeterminate"> indeterminate </a> </code> class appplies to the cell and the cell's checkbox is in an indeterminate state. When the <code
    title="datagrid-cell-class-indeterminate"> <a
    href="#indeterminate"> indeterminate </a> </code> class appplies to the cell, the checkbox is a tristate checkbox, and the user can set it to the indeterminate state. Otherwise, only the <code
    title="datagrid-cell-class-checked"> <a href="#checked"> checked </a> </code> and/or <code title="datagrid-cell-class-unchecked"> <a
    href="#unchecked"> unchecked </a> </code> classes apply to the cell, and the cell can only be toggled betwen those two states. </dl> <p> If the data provider ever raises an exception while the <code> <a
   href="#datagrid0"> datagrid </a> </code> is invoking one of its methods, the <code> <a href="#datagrid0"> datagrid </a> </code> must act, for the purposes of that particular method call, as if the relevant method had not been defined. <p> The data model is considered stable: user agents may assume that subsequent calls to the data provider methods will return the same data, until one of the update methods is called on the <code> <a
   href="#datagrid0"> datagrid </a> </code> element. If a user agent is returned inconsistent data, for example if the number of rows returned by <code
   title="dom-provider-getRowCount"> <a
   href="#getrowcount"> getRowCount() </a> </code> varies in ways that do not match the calls made to the update methods, the user agent may disable the <code> <a href="#datagrid0"> datagrid </a> </code> . User agents that do not disable the <code> <a href="#datagrid0"> datagrid </a> </code> in inconsistent cases must honour the most recently returned values. <p> User agents may cache returned values so that the data provider is never asked for data that could contradict earlier data. User agents must not cache the return value of the <code title="dom-provider-getRowMenu"> <a
   href="#getrowmenu"> getRowMenu </a> </code> method. <p> The exact algorithm used to populate the data grid is not defined here, since it will differ based on the presentation used. However, the behaviour of user agents must be consistent with the descriptions above. For example, it would be non-conformant for a user agent to make cells have both a checkbox and be editable, as the descriptions above state that cells that have a checkbox cannot be edited. </p> <h5 id="updating"> <span class="secno"> <ins>2.23.1.5. </ins> <del>2.20.1.5. </del> </span> Updating the <code> <a href="#datagrid0"> datagrid </a> </code> </h5> <p> Whenever the <code title="dom-datagrid-data"> <a
   href="#data"> data </a> </code> attribute is set to a new value, the <code> <a
   href="#datagrid0"> datagrid </a> </code> must clear the current selection, remove all the displayed rows, and plan to repopulate itself using the information from the new data provider at the earliest opportunity. <p> There are a number of update methods that can be invoked on the <code> <a
   href="#datagrid0"> datagrid </a> </code> element to cause it to refresh itself in slightly less drastic ways: <p> When the <dfn id="updateeverything"
   title="dom-datagrid-updateEverything"> <code> updateEverything() </code> </dfn> method is called, the user agent must repopulate the entire <code> <a
   href="#datagrid0"> datagrid </a> </code> . If the number of rows decreased, the selection must be updated appropriately. If the number of rows increased, the new rows should be left unselected. <p> When the <dfn id="updaterowschanged"
   title="dom-datagrid-updateRowsChanged"> <code> updateRowsChanged( <var
   title=""> row </var> , <var title=""> count </var> ) </code> </dfn> method is called, the user agent must refresh the rendering of the rows in the range from row <var title=""> row </var> to row <var title=""> row </var> + <var
   title=""> count </var> -1. <p> When the <dfn id="updaterowsinserted"
   title="dom-datagrid-updateRowsInserted"> <code> updateRowsInserted( <var
   title=""> row </var> , <var title=""> count </var> ) </code> </dfn> method is called, the user agent must assume that <var title=""> count </var> new rows have been inserted between what used to be row <var title=""> row </var> -1 and row <var title=""> row </var> . The user agent must update its rendering and the selection accordingly. The new rows should not be selected. <p> When the <dfn id="updaterowsremoved"
   title="dom-datagrid-updateRowsRemoved"> <code> updateRowsRemoved( <var
   title=""> row </var> , <var title=""> count </var> ) </code> </dfn> method is called, the user agent must assume that <var title=""> count </var> rows have been removed starting from row <var title=""> row </var> . The user agent must update its rendering and the selection accordingly. <p> The <dfn id="updaterowchanged"
   title="dom-datagrid-updateRowChanged"> <code> updateRowChanged( <var
   title=""> row </var> ) </code> </dfn> method must be exactly equivalent to calling <code title="dom-datagrid-updateRowsChanged"> <a
   href="#updaterowschanged"> updateRowsChanged( <var title=""> row </var> , 1) </a> </code> . <p> When the <dfn id="updatecolumnchanged"
   title="dom-datagrid-updateColumnChanged"> <code> updateColumnChanged( <var
   title=""> column </var> ) </code> </dfn> method is called, the user agent must refresh the rendering of the specified column <var title=""> column </var> , for all rows. <p> When the <dfn id="updatecellchanged"
   title="dom-datagrid-updateCellChanged"> <code> updateCellChanged( <var
   title=""> row </var> , <var title=""> column </var> ) </code> </dfn> method is called, the user agent must refresh the rendering of the cell on row <var
   title=""> row </var> , in column <var title=""> column </var> . <p> Any effects the update methods have on the <code> <a
   href="#datagrid0"> datagrid </a> </code> 's selection is not considered a change to the selection, and must therefore not fire the <code
   title="event-select"> <a href="#select"> select </a> </code> event. <p> These update methods should only be called by the data provider, or code acting on behalf of the data provider. In particular, calling the <code
   title="dom-datagrid-updateRowsInserted"> <a
   href="#updaterowsinserted"> updateRowsInserted() </a> </code> and <code
   title="dom-datagrid-updateRowsRemoved"> <a
   href="#updaterowsremoved"> updateRowsRemoved() </a> </code> methods without actually inserting or removing rows from the data provider is likely to result in inconsistent renderings. <h5 id="requirements0"> <span class="secno"> <ins>2.23.1.6. </ins> <del>2.20.1.6. </del> </span> Requirements for interactive user agents </h5> <p> <em> This section only applies to interactive user agents. </em> <p> If the <code> <a href="#datagrid0"> datagrid </a> </code> element has a <dfn
   id="disabled2" title="attr-datagrid-disabled"> <code> disabled </code> </dfn> attribute, then the user agent must disable the <code> <a
   href="#datagrid0"> datagrid </a> </code> , preventing the user from interacting with it. The <code> <a href="#datagrid0"> datagrid </a> </code> element should still continue to update itself when the data provider signals changes to the data, though. Obviously, conformance requirements stating that <code> <a href="#datagrid0"> datagrid </a> </code> elements must react to users in particular ways do not apply when one is disabled. <p> If <a href="#rowType1"> a row is openable </a> , then the user must be able to toggle its open/closed state. When the user does so, then the <code> <a
   href="#datagrid0"> datagrid </a> </code> must invoke the data provider's <code title="dom-provider-toggleRowOpenState"> <a
   href="#togglerowopenstate"> toggleRowOpenState() </a> </code> method, with the row's index as the only argument. The <code> <a
   href="#datagrid0"> datagrid </a> </code> must <em> then </em> act as if the <code> <a href="#datagrid0"> datagrid </a> </code> 's <code
   title="dom-datagrid-updateRowChanged"> <a
   href="#updaterowchanged"> updateRowChanged() </a> </code> method had been invoked with that row's index immediately before the provider's method was invoked. <p> If a cell is a cell whose value <a href="#cellType1"> can be cycled between multiple states </a> , then the user must be able to activate the cell to cycle its value. When the user activates this "cycling" behaviour of a cell, then the <code> <a href="#datagrid0"> datagrid </a> </code> must invoke the data provider's <code title="dom-provider-cycleCell"> <a
   href="#cyclecell"> cycleCell() </a> </code> method, with the cell's row index as the first argument and its column index as the second. The <code> <a
   href="#datagrid0"> datagrid </a> </code> must then act as if the <code> <a
   href="#datagrid0"> datagrid </a> </code> 's <code
   title="dom-datagrid-updateCellChanged"> <a
   href="#updatecellchanged"> updateCellChanged() </a> </code> method had been invoked with those same arguments immediately before the provider's method was invoked. <p> When a cell <a href="#cellType2"> has a checkbox </a> , the user must be able to set the checkbox's state. When the user changes the state of a checkbox in such a cell, the <code> <a
   href="#datagrid0"> datagrid </a> </code> must invoke the data provider's <code title="dom-provider-setCellCheckedState"> <a
   href="#setcellcheckedstate"> setCellCheckedState() </a> </code> method, with the cell's row index as the first argument, its column index as the second, and the checkbox's new state as the third. The state should be represented by the number 1 if the new state is checked, 0 if the new state is unchecked, and -1 if the new state is indeterminate (which must only be possible if the cell has the <code
   title="datagrid-cell-class-indeterminate"> <a
   href="#indeterminate"> indeterminate </a> </code> class set). The <code> <a
   href="#datagrid0"> datagrid </a> </code> must then act as if the <code> <a
   href="#datagrid0"> datagrid </a> </code> 's <code
   title="dom-datagrid-updateCellChanged"> <a
   href="#updatecellchanged"> updateCellChanged() </a> </code> method had been invoked, specifying the same cell, immediately before the provider's method was invoked. <p> If a cell <a href="#cellType2"> is editable </a> , the user must be able to edit the data for that cell, and doing so must cause the user agent to invoke the <code title="dom-provider-editCell"> <a
   href="#editcell"> editCell() </a> </code> method of the data provider with three arguments: the row number and column number of the cell, and the new text entered by the user. The user agent must then act as if the <code
   title="dom-datagrid-updateCellChanged"> <a
   href="#updatecellchanged"> updateCellChanged() </a> </code> method had been invoked, with the same row and column specified. </p> <h5 id="the-selection"> <span class="secno"> <ins>2.23.1.7. </ins> <del>2.20.1.7. </del> </span> The selection </h5> <p> <em> This section only applies to interactive user agents. For other user agents, the <code title="dom-datagrid-selection"> <a
   href="#selection0">  selection </a> </code> attribute must return null. </em> <pre
   class="idl"> interface <dfn id="selectedrowranges"> <ins>SelectedRowRanges </ins>  <del>SelectionRanges </del> </dfn> { readonly attribute long <span title="dom-SelectedRowRanges-count">  <a href="#count"> count </a> </span> ; long <span title="dom-SelectedRowRanges-getRangeStart">  <a href="#getrangestart"> getRangeStart </a> </span> (in long index); long <span title="dom-SelectedRowRanges-getRangeLength">  <a href="#getrangelength"> getRangeLength </a> </span> (in long index); void <span title="dom-SelectedRowRanges-addRange">  <a href="#addrange"> addRange </a> </span> (in long start, in long count); void <span title="dom-SelectedRowRanges-removeRange">  <a href="#removerange"> removeRange </a> </span> (in long index); void <span title="dom-SelectedRowRanges-setSelected">  <a href="#setselected"> setSelected </a> </span> (in long row, in bool selected); bool <span title="dom-SelectedRowRanges-isSelected">  <a href="#isselected"> isSelected </a> </span> (in long row); void <span title="dom-SelectedRowRanges-selectAll"> <a href="#selectall">   selectAll </a> </span> (); void <span title="dom-SelectedRowRanges-invert"> <a href="#invert">   invert </a> </span> (); void <span title="dom-SelectedRowRanges-clear">  <a href="#clear"> clear </a> </span> (); }; </pre> <p> Each <code> <a href="#datagrid0"> datagrid </a> </code> element must keep track of which rows are currently selected. Initially no rows are selected, but this can be changed via the methods described in this section. <p> The selection of a <code> <a href="#datagrid0"> datagrid </a> </code> is represented by its <dfn id="selection0"
   title="dom-datagrid-selection">  <code> selection </code> </dfn> DOM attribute, which must be a <code> <a
   href="#selectedrowranges"> <ins>SelectedRowRanges </ins>  <del>SelectionRanges </del> </a> </code> object. <p> The <code> <a href="#selectedrowranges"> <ins>SelectedRowRanges </ins>  <del>SelectionRanges </del> </a> </code> object represents the selection using ranges. Each range has a starting index and a length. The starting index is relative to the first row (index 0) of the <code> <a href="#datagrid0"> datagrid </a> </code> . The length states how many of the rows are selected, starting from the starting index. A range of length one implies that only the row indicated by its starting index is selected. <p> The ranges in a selection must not overlap. Ranges may be adjacent (e.g. one range starting at index zero with length two, and a second range starting at index two) but user agents should coalesce adjacent ranges. <p> The start index of a range must not be negative, and must not be greater than the index of the last row. The length of a range must not be such that the range's start index plus its length yields a value greater than the number of rows. <p> The <dfn id="count"
   title="dom-SelectedRowRanges-count">  <code> count </code> </dfn> attribute must return the number of ranges currently present in the selection. The <dfn id="getrangestart"
   title="dom-SelectedRowRanges-getRangeStart">  <code> getRangeStart() </code> </dfn> and <dfn id="getrangelength"
   title="dom-SelectedRowRanges-getRangeLength">  <code> getRangeLength() </code> </dfn> methods must return the starting index and length (respectively) of the range specified by their argument. If the argument is out of range (less than zero or greater than the number of ranges minus one), then they must raise an <code> INDEX_SIZE_ERR </code> exception. <a
   href="#refsDOM3CORE"> [DOM3CORE] </a> <p> The ranges must be returned in ascending numerical order. That is, the value returned by the <code title="dom-SelectedRowRanges-getRangeStart">  <a
   href="#getrangestart"> getRangeStart() </a> </code> method for an index <var
   title=""> x </var> must always be greater than the value it returns for any index less than <var title=""> x </var> . <p> The <dfn id="addrange"
   title="dom-SelectedRowRanges-addRange">  <code> addRange() </code> </dfn> method takes two arguments, an index and a length, specifying a range of rows to select. If the specified range is invalid or would contain rows outside the <code> <a href="#datagrid0"> datagrid </a> </code> (e.g. the starting index is negative, or the length would take the selection beyond the end of the <code> <a href="#datagrid0"> datagrid </a> </code> ), then the method must raise an <code> INDEX_SIZE_ERR </code> exception. Otherwise, the specified range must be added to the selection. If the range overlaps, grows, or joins existing selections, the user agent must adjust the ranges so that no two ranges overlap, and should adjust them so that no two ranges are adjacent. Thus, calling <code
   title="dom-SelectedRowRanges-addRange">  <a
   href="#addrange"> addRange() </a> </code> may actually reduce the total number of ranges in the selection. <p> The <dfn id="removerange"
   title="dom-SelectedRowRanges-removeRange">  <code> removeRange() </code> </dfn> method takes two arguments, an index and a length, specifying a range of rows to unselect. If the specified range is invalid or would contain rows outside the <code> <a href="#datagrid0"> datagrid </a> </code> (e.g. the starting index is negative, or the length would take the selection beyond the end of the <code> <a href="#datagrid0"> datagrid </a> </code> ), then the method must raise an <code> INDEX_SIZE_ERR </code> exception. Otherwise, the specified rows must be removed from the selection. Calling <code
   title="dom-SelectedRowRanges-removeRange">  <a
   href="#removerange"> removeRange() </a> </code> may actually increase the total number of ranges in the selection, e.g. if a range had to be split in order to unselect a row in the middle. <p> The <dfn id="setselected"
   title="dom-SelectedRowRanges-setSelected">  <code> setSelected() </code> </dfn> method takes two arguments, <var title=""> row </var> and <var
   title=""> selected </var> . When invoked, it must set the selection state of row <var title=""> row </var> to selected if <var title=""> selected </var> is true, and unselected if it is false, by adjusting the selection's ranges accordingly. If <var title=""> row </var> is less than zero or greater than the index of the last row then the method must raise an <code> INDEX_SIZE_ERR </code> exception. <p> The <dfn id="isselected"
   title="dom-SelectedRowRanges-isSelected">  <code> isSelected() </code> </dfn> method must return the selected state of the row specified by its argument. If the specified row exists and is in one of the ranges of the selection, it must return true, otherwise it must return false. <p> The <dfn id="selectall"
   title="dom-SelectedRowRanges-selectAll">  <code> selectAll() </code> </dfn> method must replace all the current ranges in the selection with a single selection range having index zero and a length equal to the number of rows in the <code> <a href="#datagrid0"> datagrid </a> </code> . If there are no rows in the <code> <a href="#datagrid0"> datagrid </a> </code> then this method must instead only remove all the current ranges. (In a compliant UA, there would not be any ranges to remove.) <p> The <dfn id="invert"
   title="dom-SelectedRowRanges-invert">  <code> invert() </code> </dfn> method must adjust the selections such that the selection is inverted. That is, the ranges must be adjusted such that only the rows that were previously not a part of the selection must be made a part of the new selection. <p> The <dfn id="clear"
   title="dom-SelectedRowRanges-clear">  <code> clear() </code> </dfn> method must remove all the ranges in the selection. <p> If the <code> <a href="#datagrid0"> datagrid </a> </code> element has a <dfn
   id="multiple0" title="attr-datagrid-multiple"> <code> multiple </code> </dfn> attribute, then the user must be able to select any number of rows (zero or more). If the attribute is not present, then the user must only be able to select a single row at a time, and selecting another one must unselect all the other rows. <p class="note"> This only applies to the user. Scripts can select multiple rows even when the <code title="attr-datagrid-multiple"> <a
   href="#multiple0"> multiple </a> </code> attribute is absent. <p> Whenever the selection of a <code> <a
   href="#datagrid0"> datagrid </a> </code> changes, whether due to the user interacting with the element, or as a result of calls to methods of the <code title="dom-datagrid-selection"> <a
   href="#selection0">  selection </a> </code> object, a <dfn id="select"
   title="event-select"> <code> select </code> </dfn> event that bubbles but is not cancelable must be fired on the <code> <a
   href="#datagrid0"> datagrid </a> </code> element. If multiple changes are made to the selection via calls to the object's methods during a single execution of a script, then the <code title="event-select"> <a href="#select"> select </a> </code> events should be coalesced into one (which later fires once the script execution has completed). <p class="note"> <ins>The </ins> <code> <a
   href="#selectedrowranges"> <ins>SelectedRowRanges </ins> </a> </code> <ins>interface has no relation to the </ins> <code> <a href="#selection1"> <ins>Selection </ins> </a> </code> <ins>and </ins> <code> <ins>Range </ins> </code> <ins>interfaces. </ins> <h5 id="columns"> <span class="secno"> <ins>2.23.1.8. </ins> <del>2.20.1.8. </del> </span> Columns and captions </h5> <p> <em> This section only applies to interactive user agents. </em> <p> Each <code> <a href="#datagrid0"> datagrid </a> </code> element must keep track of which columns are currently being rendered. User agents should initially show all the columns except those with the <code
   title="datagrid-column-class-initially-hidden"> <a
   href="#initially-hidden"> initially-hidden </a> </code> class, but may allow users to hide or show columns. User agents should initially display the columns in the order given by the data provider, but may allow this order to be changed by the user. <p> If columns are not being used, as might be the case if the data grid is being presented in an icon view, or if an overview of data is being read in an aural context, then the text of the first column of each row should be used to represent the row. <p> If none of the columns have any captions (i.e. if the data provider does not provide a <code title="dom-provider-getCaptionText"> <a
   href="#getcaptiontext"> getCaptionText() </a> </code> method), then user agents may avoid showing the column headers at all. This may prevent the user from performing actions on the columns (such as reordering them, changing the sort column, and so on). <p class="note"> Whatever the order used for rendering, and irrespective of what columns are being shown or hidden, the "first column" as referred to in this specification is always the column with index zero, and the "last column" is always the column with the index one less than the value returned by the <code title="dom-provider-getcolumnCount"> <a
   href="#getcolumncount"> getColumnCount() </a> </code> method of the data provider. <p> If <a href="#columnType2"> a column is sortable </a> , then the user must be able to invoke it to sort the data. When the user does so, then the <code> <a href="#datagrid0"> datagrid </a> </code> must invoke the data provider's <code title="dom-provider-toggleColumnSortState"> <a
   href="#togglecolumnsortstate"> toggleColumnSortState() </a> </code> method, with the column's index as the only argument. The <code> <a
   href="#datagrid0"> datagrid </a> </code> must <em> then </em> act as if the <code> <a href="#datagrid0"> datagrid </a> </code> 's <code
   title="dom-datagrid-updateEverything"> <a
   href="#updateeverything"> updateEverything() </a> </code> method had been invoked. </p> <h4 id="the-command"> <span class="secno"> <ins>2.23.2. </ins> </span> <ins>The </ins> <dfn
   id="command1"> <code> <ins>command </ins> </code> </dfn> <ins>element </ins> </h4> <p> <span title="metadata elements"> <a href="#metadata"> <ins>Metadata element </ins> </a> </span> <ins>, and </ins> <span> <a href="#strictly"> <ins>strictly inline-level content </ins> </a> </span> <ins>. </ins> </p> <dl class="element"> <dt> <ins>Contexts in which this element may be used: </ins> <dd> <ins>In a </ins> <code> <a href="#head0"> <ins>head </ins> </a> </code> <ins>element. </ins> <dd> <ins>Where </ins> <span> <a href="#strictly"> <ins>strictly inline-level content </ins> </a> </span> <ins>is allowed. </ins> <dt> <ins>Content model: </ins> <dd> <ins>Empty. </ins> <dt> <ins>Element-specific attributes: </ins> <dd> <code title="attr-command-type"> <a href="#type7"> <ins>type </ins> </a> </code> <ins>(optional) </ins> <dd> <code title="attr-command-label"> <a href="#label"> <ins>label </ins> </a> </code> <ins>(optional) </ins> <dd> <code title="attr-command-title"> <a href="#title7"> <ins>title </ins> </a> </code> <ins>(optional) </ins> <dd> <code title="attr-command-icon"> <a href="#icon"> <ins>icon </ins> </a> </code> <ins>(optional) </ins> <dd> <code title="attr-command-hidden"> <a href="#hidden"> <ins>hidden </ins> </a> </code> <ins>(optional) </ins> <dd> <code title="attr-command-disabled"> <a
    href="#disabled3"> <ins>disabled </ins> </a> </code> <ins>(optional) </ins> <dd> <code title="attr-command-checked"> <a
    href="#checked0"> <ins>checked </ins> </a> </code> <ins>(optional) </ins> <dd> <code title="attr-command-radiogroup"> <a
    href="#radiogroup"> <ins>radiogroup </ins> </a> </code> <ins>(optional) </ins> <dd> <code title="attr-command-default"> <a
    href="#default"> <ins>default </ins> </a> </code> <ins>(optional) </ins> <dt> <ins>DOM interface: </ins> <dd> <pre
     class="idl"> <ins>interface </ins> <dfn id="htmlcommandelement"> <ins>HTMLCommandElement </ins> </dfn> <ins>: </ins> <span> <a href="#htmlelement"> <ins>HTMLElement </ins> </a> </span> <ins>{ attribute DOMString </ins> <span title="dom-command-type"> <a href="#type8"> <ins>type </ins> </a> </span> <ins>; attribute DOMString </ins> <span title="dom-command-label"> <a href="#label0"> <ins>label </ins> </a> </span> <ins>; attribute DOMString </ins> <span title="dom-command-icon"> <a href="#icon0"> <ins>icon </ins> </a> </span> <ins>; attribute boolean </ins> <span title="dom-command-hidden"> <a href="#hidden0"> <ins>hidden </ins> </a> </span> <ins>; attribute boolean </ins> <span title="dom-command-disabled"> <a href="#disabled4"> <ins>disabled </ins> </a> </span> <ins>; attribute boolean </ins> <span title="dom-command-checked"> <a href="#checked1"> <ins>checked </ins> </a> </span> <ins>; attribute DOMString </ins> <span title="dom-command-radiogroup"> <a href="#radiogroup0"> <ins>radiogroup </ins> </a> </span> <ins>; attribute boolean </ins> <span title="dom-command-default"> <a href="#default0"> <ins>default </ins> </a> </span> <ins>; void </ins> <span title="dom-command-click"> <a href="#click"> <ins>click </ins> </a> </span> <ins>(); }; </ins> </pre> <p> <ins>The </ins> <code title="command-ro"> <a href="#command3"> <ins>Command </ins> </a> </code> <ins>interface must also be implemented by this element. </ins> </p> </dl> <p> <ins>The </ins> <code> <a href="#command1"> <ins>command </ins> </a> </code> <ins>element represents a command that the user can invoke. </ins> <p> <ins>The </ins> <dfn id="type7" title="attr-command-type"> <code> <ins>type </ins> </code> </dfn> <ins>attribute indicates the kind of command: either a normal command with an associated action, or a state or option that can be toggled, or a selection of one item from a list of items. </ins> <p> <ins>The attribute's value must be either " </ins> <code title=""> <ins>command </ins> </code> <ins>", " </ins> <code title=""> <ins>checkbox </ins> </code> <ins>", or " </ins> <code title=""> <ins>radio </ins> </code> <ins>", denoting each of these three types of commands respectively. The attribute may also be omitted if the element is to represent the first of these types, a simple command. </ins> <p> <ins>The </ins> <dfn id="label" title="attr-command-label"> <code> <ins>label </ins> </code> </dfn> <ins>attribute gives the name of the command, as shown to the user. </ins> <p> <ins>The </ins> <dfn id="title7" title="attr-command-title"> <code> <ins>title </ins> </code> </dfn> <ins>attribute gives a hint describing the command, which might be shown to the user to help him. </ins> <p> <ins>The </ins> <dfn id="icon" title="attr-command-icon"> <code> <ins>icon </ins> </code> </dfn> <ins>attribute gives a picture that represents the command. If the attribute is specified, the attribute's value must contain a URI. </ins> <p> <ins>The </ins> <dfn id="hidden"
   title="attr-command-hidden"> <code> <ins>hidden </ins> </code> </dfn> <ins>attribute indicates, if present, that the command is not relevant and is to be hidden. If present, the attribute must have the exact value </ins> <code
   title=""> <ins>hidden </ins> </code> <ins>. </ins> <p> <ins>The </ins> <dfn id="disabled3"
   title="attr-command-disabled"> <code> <ins>disabled </ins> </code> </dfn> <ins>attribute indicates, if present, that the command is not available in the current state. If present, the attribute must have the exact value </ins> <code
   title=""> <ins>disabled </ins> </code> <ins>. </ins> <p class="note"> <ins>The distinction between </ins> <span
   title="command-facet-DisabledState"> <a href="#disabled5"> <ins>Disabled State </ins> </a> </span> <ins>and </ins> <span title="command-facet-HiddenState"> <a
   href="#hidden1"> <ins>Hidden State </ins> </a> </span> <ins>is subtle. A command should be Disabled if, in the same context, it could be enabled if only certain aspects of the situation were changed. A command should be marked as Hidden if, in that situation, the command will never be enabled. For example, in the context menu for a water faucet, the command "open" might be Disabled if the faucet is already open, but the command "eat" would be marked Hidden since the faucet could never be eaten. </ins> <p> <ins>The </ins> <dfn id="checked0"
   title="attr-command-checked"> <code> <ins>checked </ins> </code> </dfn> <ins>attribute indicates, if present, that the command is selected. If present, the attribute must have the exact value </ins> <code title=""> <ins>checked </ins> </code> <ins>. </ins> <p> <ins>The </ins> <dfn id="radiogroup"
   title="attr-command-radiogroup"> <code> <ins>radiogroup </ins> </code> </dfn> <ins>attribute gives the name of the group of commands that will be toggled when the command itself is toggled, for commands whose </ins> <code
   title="attr-command-type"> <a href="#type7"> <ins>type </ins> </a> </code> <ins>attribute has the value " </ins> <code title=""> <ins>radio </ins> </code> <ins>". The scope of the name is the child list of the parent element. </ins> <p> <ins>If the </ins> <code> <a href="#command1"> <ins>command </ins> </a> </code> <ins>element is used when </ins> <span title="menu generation"> <ins>generating </ins> </span> <ins>a </ins> <span> <ins>context menu </ins> </span> <ins>, then the </ins> <dfn id="default"
   title="attr-command-default"> <code> <ins>default </ins> </code> </dfn> <ins>attribute indicates, if present, that the command is the one that would have been invoked if the user had directly activated the menu's subject instead of using its context menu. </ins> <div class="example"> <p class="big-issue"> <ins>Need an example that shows an element that, if double-clicked, invokes an action, but that also has a context menu, showing the various </ins> <code> <a href="#command1"> <ins>command </ins> </a> </code> <ins>attributes off, and that has a default command. </ins> </p> </div> <p> <ins>The </ins> <dfn id="type8" title="dom-command-type"> <code> <ins>type </ins> </code> </dfn> <ins>, </ins> <dfn id="label0" title="dom-command-label"> <code> <ins>label </ins> </code> </dfn> <ins>, </ins> <dfn
   id="icon0" title="dom-command-icon"> <code> <ins>icon </ins> </code> </dfn> <ins>, </ins> <dfn
   id="hidden0" title="dom-command-hidden"> <code> <ins>hidden </ins> </code> </dfn> <ins>, </ins> <dfn
   id="disabled4" title="dom-command-disabled"> <code> <ins>disabled </ins> </code> </dfn> <ins>, </ins> <dfn id="checked1" title="dom-command-checked"> <code> <ins>checked </ins> </code> </dfn> <ins>, </ins> <dfn id="radiogroup0"
   title="dom-command-radiogroup"> <code> <ins>radiogroup </ins> </code> </dfn> <ins>, and </ins> <dfn
   id="default0" title="dom-command-default"> <code> <ins>default </ins> </code> </dfn> <ins>DOM attributes must </ins> <span> <a href="#reflect"> <ins>reflect </ins> </a> </span> <ins>their respective namesake content attributes. </ins> <p> <ins>The </ins> <dfn id="click" title="dom-command-click"> <code> <ins>click() </ins> </code> </dfn> <ins>method's behaviour depends on the value of the </ins> <code
   title="attr-command-type"> <a href="#type7"> <ins>type </ins> </a> </code> <ins>attribute of the element, as follows: </ins> <dl class="switch"> <dt> <ins>If the </ins> <code title="attr-command-type"> <a
    href="#type7"> <ins>type </ins> </a> </code> <ins>attribute has the value </ins> <code
    title=""> <ins>checkbox </ins> </code> <dd> <p> <ins>If the element has a </ins> <code title="attr-command-checked"> <a
     href="#checked0"> <ins>checked </ins> </a> </code> <ins>attribute, the UA must remove that attribute. Otherwise, the UA must add a </ins> <code
     title="attr-command-checked"> <a href="#checked0"> <ins>checked </ins> </a> </code> <ins>attribute, with the literal value </ins> <code title=""> <ins>checked </ins> </code> <ins>. The UA must then </ins> <span> <a href="#firing"> <ins>fire a </ins> <code title=""> <ins>click </ins> </code> <ins>event </ins> </a> </span> <ins>at the element. </ins> <dt> <ins>If the </ins> <code title="attr-command-type"> <a
    href="#type7"> <ins>type </ins> </a> </code> <ins>attribute has the value </ins> <code
    title=""> <ins>radio </ins> </code> <dd> <p> <ins>If the element has a parent, then the UA must walk the list of child nodes of that parent element, and for each node that is a </ins> <code> <a
     href="#command1"> <ins>command </ins> </a> </code> <ins>element, if that element has a </ins> <code
     title="attr-command-radiogroup"> <a
     href="#radiogroup"> <ins>radiogroup </ins> </a> </code> <ins>attribute whose value exactly matches the current element's (treating missing </ins> <code
     title="attr-command-radiogroup"> <a
     href="#radiogroup"> <ins>radiogroup </ins> </a> </code> <ins>attributes as if they were the empty string), and has a </ins> <code title="attr-command-checked"> <a
     href="#checked0"> <ins>checked </ins> </a> </code> <ins>attribute, must remove that attribute and </ins> <span> <a href="#firing"> <ins>fire a </ins> <code title=""> <ins>click </ins> </code> <ins>event </ins> </a> </span> <ins>at the element. </ins> </p> <p> <ins>Then, the element's </ins> <code title="attr-command-checked"> <a
     href="#checked0"> <ins>checked </ins> </a> </code> <ins>attribute attribute must be set to the literal value </ins> <code title=""> <ins>checked </ins> </code> <ins>and a </ins> <span title="file
     a click event"> <code title=""> <ins>click </ins> </code> <ins>event must be fired </ins> </span> <ins>at the element. </ins> <dt> <ins>Otherwise </ins> <dd> <p> <ins>The UA must </ins> <span> <a href="#firing"> <ins>fire a </ins> <code title=""> <ins>click </ins> </code> <ins>event </ins> </a> </span> <ins>at the element. </ins> </dl> <p class="note"> <ins>Firing a synthetic </ins> <code title="event-click"> <ins>click </ins> </code> <ins>event at the element does not cause any of the actions described above to happen. </ins> <p class="big-issue"> <ins>Need to define the command="" attribute </ins> <p class="note"> <code> <a href="#command1"> <ins>command </ins> </a> </code> <ins>elements are not rendered unless they </ins> <a href="#menus"> <ins>form part of a menu </ins> </a> <ins>. </ins> <h4 id="the-menu"> <span class="secno"> <ins>2.23.3. </ins> </span> <ins>The </ins> <dfn
   id="menu0"> <code> <ins>menu </ins> </code> </dfn> <ins>element </ins> </h4> <p> <span title="block-level elements"> <a href="#block-level1"> <ins>Block-level element </ins> </a> </span> <ins>, and </ins> <span title="structured inline-level elements"> <a
   href="#structured"> <ins>structured inline-level element </ins> </a> </span> <ins>. </ins> <dl class="element"> <dt> <ins>Contexts in which this element may be used: </ins> <dd> <ins>Where </ins> <span> <a href="#block-level1"> <ins>block-level elements </ins> </a> </span> <ins>are expected. </ins> <dd> <ins>Where </ins> <span> <a href="#structured"> <ins>structured inline-level elements </ins> </a> </span> <ins>are allowed. </ins> <dt> <ins>Content model: </ins> <dd> <ins>Zero or more </ins> <code> <a href="#li0"> <ins>li </ins> </a> </code> <ins>elements, or </ins> <span> <a
    href="#inline-level1"> <ins>inline-level content </ins> </a> </span> <ins>(but not both). </ins> <dt> <ins>Element-specific attributes: </ins> <dd> <code title="attr-menu-type"> <a href="#type9"> <ins>type </ins> </a> </code> <ins>(optional) </ins> <dd> <code title="attr-menu-label"> <a href="#label1"> <ins>label </ins> </a> </code> <ins>(optional) </ins> <dd> <code title="attr-menu-autosubmit"> <a
    href="#autosubmit"> <ins>autosubmit </ins> </a> </code> <ins>(optional) </ins> <dt> <ins>DOM interface: </ins> <dd> <pre
     class="idl"> <ins>interface </ins> <dfn id="htmlcommandelement0"> <ins>HTMLCommandElement </ins> </dfn> <ins>: </ins> <span> <a href="#htmlelement"> <ins>HTMLElement </ins> </a> </span> <ins>{ attribute DOMString </ins> <span title="dom-menu-type"> <ins>type </ins> </span> <ins>; attribute DOMString </ins> <span title="dom-menu-label"> <ins>label </ins> </span> <ins>; attribute boolean </ins> <span title="dom-menu-autosubmit"> <ins>autosubmit </ins> </span> <ins>; }; </ins> </pre> </dl> <p> <ins>The </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element represents a list of commands. </ins> <p> <ins>The </ins> <dfn id="type9" title="attr-menu-type"> <code> <ins>type </ins> </code> </dfn> <ins>attribute indicates the kind of menu. It must have either the value </ins> <code
   title=""> <ins>popup </ins> </code> <ins>(to declare a context menu) or the value </ins> <code
   title=""> <ins>toolbar </ins> </code> <ins>(to define a tool bar). The attribute may also be omitted, to indicate that the element is merely a list of commands that is neither declaring a context menu nor defining a tool bar. </ins> <p> <ins>If a </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element has a </ins> <code
   title="attr-menu-type"> <a href="#type9"> <ins>type </ins> </a> </code> <ins>attribute with the value </ins> <code title=""> <ins>popup </ins> </code> <ins>, then it represents the commands of a context menu, and the user can only interact with the commands if that context menu is activated. </ins> <p> <ins>If a </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element has a </ins> <code
   title="attr-menu-type"> <a href="#type9"> <ins>type </ins> </a> </code> <ins>attribute with the value </ins> <code title=""> <ins>toolbar </ins> </code> <ins>, then it represents a list of active commands that the user can immediately interact with. </ins> <p> <ins>Otherwise, if a </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element has no </ins> <code title="attr-menu-type"> <a href="#type9"> <ins>type </ins> </a> </code> <ins>attribute, or if has a </ins> <code title="attr-menu-type"> <a href="#type9"> <ins>type </ins> </a> </code> <ins>attribute with a value other than </ins> <code title=""> <ins>popup </ins> </code> <ins>or </ins> <code
   title=""> <ins>toolbar </ins> </code> <ins>, then it either represents an unordered list of items (each represented by an </ins> <code> <a href="#li0"> <ins>li </ins> </a> </code> <ins>element), each of which represents a command that the user may perform or activate, or, if the element has no </ins> <code> <a href="#li0"> <ins>li </ins> </a> </code> <ins>element children, a </ins> <span> <a href="#paragraph"> <ins>paragraph </ins> </a> </span> <ins>describing available commands. </ins> <p> <ins>The </ins> <dfn id="label1" title="attr-menu-label"> <code> <ins>label </ins> </code> </dfn> <ins>attribute gives the label of the menu. It is used by user agents to display nested menus in the UI. For example, a context menu containing another menu would use the nested menu's </ins> <code title="attr-menu-label"> <a
   href="#label1"> <ins>label </ins> </a> </code> <ins>attribute for the submenu's menu label. </ins> <p> <ins>The </ins> <dfn id="autosubmit"
   title="attr-menu-autosubmit"> <code> <ins>autosubmit </ins> </code> </dfn> <ins>attribute indicates whether selections made to form controls in this menu should result in the control's form being immediately submitted. If the attribute is present, its value must be </ins> <code title=""> <ins>autosubmit </ins> </code> <ins>. </ins> <p> <ins>If a </ins> <code title="event-change"> <ins>change </ins> </code> <ins>event bubbles through a </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element, then, in addition to any other default action that that event might have, the UA must act as if the following was an additional default action for that event: if (when it comes time to execute the default action) the </ins> <code> <a
   href="#menu0"> <ins>menu </ins> </a> </code> <ins>element has an </ins> <code
   title="attr-menu-autosubmit"> <a href="#autosubmit"> <ins>autosubmit </ins> </a> </code> <ins>attribute, and the target of the event is an </ins> <code> <ins>input </ins> </code> <ins>element, and that element has a </ins> <code title="attr-input-type"> <ins>type </ins> </code> <ins>attribute whose value is either </ins> <code title=""> <ins>radio </ins> </code> <ins>or </ins> <code
   title=""> <ins>checkbox </ins> </code> <ins>, and the </ins> <code> <ins>input </ins> </code> <ins>element in question has a non-null </ins> <code title="dom-input-form"> <ins>form </ins> </code> <ins>DOM attribute, then the UA must invoke the </ins> <code title="dom-form-submit"> <ins>submit() </ins> </code> <ins>method of the </ins> <code> <ins>form </ins> </code> <ins>element indicated by that DOM attribute. </ins> <p> <ins>The </ins> <a href="#menus"> <ins>processing model </ins> </a> <ins>for menus is described in the next section. </ins> <h2 id="processing"> <span class="secno"> <ins>3. </ins> </span> <ins>Processing models </ins> </h2> <h3 id="commands"> <span class="secno"> <ins>3.1. </ins> </span> <ins>Commands </ins> </h3> <p> <ins>A </ins> <dfn id="command2" title="concept-command"> <ins>command </ins> </dfn> <ins>is the abstraction behind menu items, buttons, and links. Once a command is defined, other parts of the interface can refer to the same command, allowing many access points to a single feature to share aspects such as the disabled state. </ins> <p id="facets"> <ins>Commands are defined to have the following </ins> <em> <ins>facets </ins> </em> <ins>: </ins> <dl> <dt> <dfn id="type10" title="command-facet-Type"> <ins>Type </ins> </dfn> <dd> <ins>The kind of command: "command", meaning it is a normal command; "radio", meaning that triggering the command will, amongst other things, set the </ins> <span title="command-facet-CheckedState"> <a
    href="#checked2"> <ins>Checked State </ins> </a> </span> <ins>to true (and probably uncheck some other commands); or "checkbox", meaning that triggering the command will, amongst other things, toggle the value of the </ins> <span
    title="command-facet-CheckedState"> <a href="#checked2"> <ins>Checked State </ins> </a> </span> <ins>. </ins> <dt> <dfn id="id1" title="command-facet-ID"> <ins>ID </ins> </dfn> <dd> <ins>The name of the command, for referring to the command from the markup or from script. If a command has no ID, it is an </ins> <dfn
    id="anonymous"> <ins>anonymous command </ins> </dfn> <ins>. </ins> <dt> <dfn id="label2" title="command-facet-Label"> <ins>Label </ins> </dfn> <dd> <ins>The name of the command as seen by the user. </ins> <dt> <dfn id="hint" title="command-facet-Hint"> <ins>Hint </ins> </dfn> <dd> <ins>A helpful or descriptive string that can be shown to the user. </ins> <dt> <dfn id="icon1" title="command-facet-Icon"> <ins>Icon </ins> </dfn> <dd> <ins>A graphical image that represents the action. </ins> <dt> <dfn id="hidden1" title="command-facet-HiddenState"> <ins>Hidden State </ins> </dfn> <dd> <ins>Whether the command is hidden or not (basically, whether it should be shown in menus). </ins> <dt> <dfn id="disabled5" title="command-facet-DisabledState"> <ins>Disabled State </ins> </dfn> <dd> <ins>Whether the command can be triggered or not. If the </ins> <span
    title="command-facet-HiddenState"> <a href="#hidden1"> <ins>Hidden State </ins> </a> </span> <ins>is true (hidden) then the </ins> <span
    title="command-facet-DisabledState"> <a href="#disabled5"> <ins>Disabled State </ins> </a> </span> <ins>will be true (disabled) regardless. </ins> <span
    class="issue"> <ins>We could make this into a string value that acts as a Hint for why the command is disabled. </ins> </span> <dt> <dfn id="checked2" title="command-facet-CheckedState"> <ins>Checked State </ins> </dfn> <dd> <ins>Whether the command is checked or not. </ins> <dt> <dfn id="action" title="command-facet-Action"> <ins>Action </ins> </dfn> <dd> <ins>The actual effect that triggering the command will have. This could be a scripted event handler, a URI to which to navigate, or a form submission. </ins> <dt> <dfn id="triggers" title="command-facet-Triggers"> <ins>Triggers </ins> </dfn> <dd> <ins>The list of elements that can trigger the command. The element defining a command is always in the list of elements that can trigger the command. For anonymous commands, only the element defining the command is on the list, since other elements have no way to refer to it. </ins> </dl> <p> <ins>Commands are represented by elements in the DOM. Any element that can define a command also implements the </ins> <code title="command-ro"> <a
   href="#command3"> <ins>Command </ins> </a> </code> <ins>interface: </ins> <pre
   class="idl"> <ins>interface </ins> <dfn id="command3" title="command-ro"> <ins>Command </ins> </dfn> <ins>{ readonly attribute DOMString </ins> <span title="dom-command-ro-commandType"> <a href="#commandtype"> <ins>commandType </ins> </a> </span> <ins>; readonly attribute DOMString </ins> <span title="dom-command-ro-id"> <a href="#id2"> <ins>id </ins> </a> </span> <ins>; readonly attribute DOMString </ins> <span title="dom-command-ro-label"> <a href="#label3"> <ins>label </ins> </a> </span> <ins>; readonly attribute DOMString </ins> <span title="dom-command-ro-title"> <a href="#title8"> <ins>title </ins> </a> </span> <ins>; readonly attribute DOMString </ins> <span title="dom-command-ro-icon"> <a href="#icon2"> <ins>icon </ins> </a> </span> <ins>; readonly attribute boolean </ins> <span title="dom-command-ro-hidden"> <a href="#hidden2"> <ins>hidden </ins> </a> </span> <ins>; readonly attribute boolean </ins> <span title="dom-command-ro-disabled"> <a href="#disabled6"> <ins>disabled </ins> </a> </span> <ins>; readonly attribute boolean </ins> <span title="dom-command-ro-checked"> <a href="#checked3"> <ins>checked </ins> </a> </span> <ins>; void </ins> <span title="dom-command-ro-click"> <a href="#click0"> <ins>click </ins> </a> </span> <ins>(); readonly attribute HTMLCollection </ins> <span title="dom-command-ro-triggers"> <a href="#triggers0"> <ins>triggers </ins> </a> </span> <ins>; readonly attribute </ins> <span> <a href="#command1"> <ins>Command </ins> </a> </span> <span title="dom-command-ro-command"> <ins>command </ins> </span> <ins>; }; </ins> </pre> <p> <ins>The </ins> <code title="command-ro"> <a href="#command3"> <ins>Command </ins> </a> </code> <ins>interface is implemented by any element capable of defining a command. (If an element can define a command, its definition will list this interface explicitly.) All the attributes of the </ins> <code title="command-ro"> <a
   href="#command3"> <ins>Command </ins> </a> </code> <ins>interface are read-only. Elements implementing this interface may implement other interfaces that have attributes with identical names but that are mutable; in bindings that simply flatten all supported interfaces on the object, the mutable attributes must shadow the readonly attributes defined in the </ins> <code
   title="command-ro"> <a href="#command3"> <ins>Command </ins> </a> </code> <ins>interface. </ins> <p> <ins>The </ins> <dfn id="commandtype"
   title="dom-command-ro-commandType"> <code> <ins>commandType </ins> </code> </dfn> <ins>attribute must return a string whose value is either " </ins> <code
   title=""> <ins>command </ins> </code> <ins>", " </ins> <code title=""> <ins>radio </ins> </code> <ins>", or " </ins> <code
   title=""> <ins>checked </ins> </code> <ins>", depending on whether the </ins> <span
   title="command-facet-Type"> <a href="#type10"> <ins>Type </ins> </a> </span> <ins>of the command defined by the element is "command", "radio", or "checked" respectively. If the element does not define a command, it must return null. </ins> <p> <ins>The </ins> <dfn id="id2" title="dom-command-ro-id"> <code> <ins>id </ins> </code> </dfn> <ins>attribute must return the command's </ins> <span title="command-facet-ID"> <a
   href="#id1"> <ins>ID </ins> </a> </span> <ins>, or null if the element does not define a command or defines an </ins> <span> <a href="#anonymous"> <ins>anonymous command </ins> </a> </span> <ins>. This attribute will be shadowed by the </ins> <code
   title="dom-id"> <a href="#id0"> <ins>id </ins> </a> </code> <ins>DOM attribute on the </ins> <code> <a
   href="#htmlelement"> <ins>HTMLElement </ins> </a> </code> <ins>interface. </ins> <p> <ins>The </ins> <dfn id="label3"
   title="dom-command-ro-label"> <code> <ins>label </ins> </code> </dfn> <ins>attribute must return the command's </ins> <span title="command-facet-Label"> <a
   href="#label2"> <ins>Label </ins> </a> </span> <ins>, or null if the element does not define a command or does not specify a </ins> <span title="command-facet-Label"> <a
   href="#label2"> <ins>Label </ins> </a> </span> <ins>. This attribute will be shadowed by the </ins> <code title=""> <ins>label </ins> </code> <ins>DOM attribute on </ins> <code> <ins>option </ins> </code> <ins>and </ins> <code> <a href="#command1"> <ins>command </ins> </a> </code> <ins>elements. </ins> <p> <ins>The </ins> <dfn id="title8"
   title="dom-command-ro-title"> <code> <ins>title </ins> </code> </dfn> <ins>attribute must return the command's </ins> <span title="command-facet-Hint"> <a
   href="#hint"> <ins>Hint </ins> </a> </span> <ins>, or null if the element does not define a command or does not specify a </ins> <span title="command-facet-Hint"> <a
   href="#hint"> <ins>Hint </ins> </a> </span> <ins>. This attribute will be shadowed by the </ins> <code
   title="dom-title"> <a href="#title1"> <ins>title </ins> </a> </code> <ins>DOM attribute on the </ins> <code> <a href="#htmlelement"> <ins>HTMLElement </ins> </a> </code> <ins>interface. </ins> <p> <ins>The </ins> <dfn id="icon2" title="dom-command-ro-icon"> <code> <ins>icon </ins> </code> </dfn> <ins>attribute must return an absolute URI to the command's </ins> <span
   title="command-facet-Icon"> <a href="#icon1"> <ins>Icon </ins> </a> </span> <ins>. If the element does not specify an icon, or if the element does not define a command, then the attribute must return null. This attribute will be shadowed by the </ins> <code title="dom-command-icon"> <a
   href="#icon0"> <ins>icon </ins> </a> </code> <ins>DOM attribute on </ins> <code> <a
   href="#command1"> <ins>command </ins> </a> </code> <ins>elements. </ins> <p> <ins>The </ins> <dfn id="hidden2"
   title="dom-command-ro-hidden"> <code> <ins>hidden </ins> </code> </dfn> <ins>attribute must return true if the command's </ins> <span title="command-facet-HiddenState"> <a
   href="#hidden1"> <ins>Hidden State </ins> </a> </span> <ins>is that the command is hidden, and false if it is that the command is not hidden. If the element does not define a command, the attribute must return false. This attribute will be shadowed by the </ins> <code title="dom-command-hidden"> <a
   href="#hidden0"> <ins>hidden </ins> </a> </code> <ins>DOM attribute on </ins> <code> <a
   href="#command1"> <ins>command </ins> </a> </code> <ins>elements. </ins> <p> <ins>The </ins> <dfn id="disabled6"
   title="dom-command-ro-disabled"> <code> <ins>disabled </ins> </code> </dfn> <ins>attribute must return true if the command's </ins> <span title="command-facet-DisabledState"> <a
   href="#disabled5"> <ins>Disabled State </ins> </a> </span> <ins>is that the command is disabled, and false if the command is not disabled. This attribute is not affected by the command's </ins> <span title="command-facet-HiddenState"> <a
   href="#hidden1"> <ins>Hidden State </ins> </a> </span> <ins>. If the element does not define a command, the attribute must return false. This attribute will be shadowed by the </ins> <code title=""> <ins>disabled </ins> </code> <ins>attribute on </ins> <code> <ins>button </ins> </code> <ins>, </ins> <code> <ins>input </ins> </code> <ins>, </ins> <code> <ins>option </ins> </code> <ins>, and </ins> <code> <a
   href="#command1"> <ins>command </ins> </a> </code> <ins>elements. </ins> <p> <ins>The </ins> <dfn id="checked3"
   title="dom-command-ro-checked"> <code> <ins>checked </ins> </code> </dfn> <ins>attribute must return true if the command's </ins> <span title="command-facet-CheckedState"> <a
   href="#checked2"> <ins>Checked State </ins> </a> </span> <ins>is that the command is checked, and false if it is that the command is not checked. If the element does not define a command, the attribute must return false. This attribute will be shadowed by the </ins> <code title=""> <ins>checked </ins> </code> <ins>attribute on </ins> <code> <ins>input </ins> </code> <ins>and </ins> <code> <a href="#command1"> <ins>command </ins> </a> </code> <ins>elements. </ins> <p> <ins>The </ins> <dfn id="click0"
   title="dom-command-ro-click"> <code> <ins>click() </ins> </code> </dfn> <ins>method must trigger the </ins> <span title="command-facet-Action"> <a
   href="#action"> <ins>Action </ins> </a> </span> <ins>for the command. If the element does not define a command, this method must do nothing. This method will be shadowed by the </ins> <code title=""> <ins>click() </ins> </code> <ins>method on </ins> <code> <ins>button </ins> </code> <ins>, </ins> <code> <ins>input </ins> </code> <ins>, and </ins> <code> <a
   href="#command1"> <ins>command </ins> </a> </code> <ins>elements. </ins> <p> <ins>The </ins> <dfn id="triggers0"
   title="dom-command-ro-triggers"> <code> <ins>triggers </ins> </code> </dfn> <ins>attribute must return a list containing the elements that can trigger the command (the command's </ins> <span title="command-facet-Triggers"> <a
   href="#triggers"> <ins>Triggers </ins> </a> </span> <ins>). The list must be live. While the element does not define a command, the list must be empty. </ins> <p> <ins>All the commands that have IDs must be in the list returned by the </ins> <dfn
   id="commands0" title="dom-document-commands"> <code> <ins>commands </ins> </code> </dfn> <ins>attribute of the document's </ins> <code> <a
   href="#documentwindow"> <ins>DocumentWindow </ins> </a> </code> <ins>interface. The collection represented by this attribute is live; as commands are defined in or removed from the document, the attribute is updated. </ins> <p> <ins>The following elements may define commands: </ins> <code title="a-command"> <a
   href="#using9"> <ins>a </ins> </a> </code> <ins>, </ins> <code title="button-command"> <a
   href="#using10"> <ins>button </ins> </a> </code> <ins>, </ins> <code title="input-command"> <a
   href="#using11"> <ins>input </ins> </a> </code> <ins>, </ins> <code title="option-command"> <a
   href="#using12"> <ins>option </ins> </a> </code> <ins>, </ins> <code title="command-element"> <a
   href="#command4"> <ins>command </ins> </a> </code> <ins>. </ins> <h4 id="using0"> <span class="secno"> <ins>3.1.1. </ins> </span> <dfn id="using9"
   title="a-command"> <ins>Using the </ins> <code> <ins>a </ins> </code> <ins>element to define a command </ins> </dfn> </h4> <p> <ins>An </ins> <code> <a href="#a0"> <ins>a </ins> </a> </code> <ins>element with an </ins> <code
   title="attr-a-href"> <a href="#href3"> <ins>href </ins> </a> </code> <ins>attribute </ins> <span
   title="concept-command"> <a href="#command2"> <ins>defines a command </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <span title="command-facet-Type"> <a href="#type10"> <ins>Type </ins> </a> </span> <ins>of the command is "command". </ins> <p> <ins>The </ins> <span title="command-facet-ID"> <a href="#id1"> <ins>ID </ins> </a> </span> <ins>of the command is the value of the </ins> <code title="attr-id"> <a
   href="#id"> <ins>id </ins> </a> </code> <ins>attribute of the element, if the attribute is present and not empty. Otherwise the command is an </ins> <span> <a
   href="#anonymous"> <ins>anonymous command </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <span title="command-facet-Label"> <a href="#label2"> <ins>Label </ins> </a> </span> <ins>of the command is the string given by the element's </ins> <code> <a
   href="#textcontent0"> <ins>textContent </ins> </a> </code> <ins>DOM attribute. </ins> <p> <ins>The </ins> <span title="command-facet-Hint"> <a href="#hint"> <ins>Hint </ins> </a> </span> <ins>of the command is the value of the </ins> <code title="attr-title"> <a
   href="#title0"> <ins>title </ins> </a> </code> <ins>attribute of the </ins> <code> <a
   href="#a0"> <ins>a </ins> </a> </code> <ins>element. If the attribute is not present, the </ins> <span title="command-facet-Hint"> <a href="#hint"> <ins>Hint </ins> </a> </span> <ins>is the empty string. </ins> <p> <ins>The </ins> <span title="command-facet-Icon"> <a href="#icon1"> <ins>Icon </ins> </a> </span> <ins>of the command is the absolute URI of the first image in the element. Specifically, in a depth-first search of the children of the element, the first element that is </ins> <code> <a
   href="#img0"> <ins>img </ins> </a> </code> <ins>element with a </ins> <code> <ins>src </ins> </code> <ins>attribute is the one that is used as the image. The URI must be taken from the element's </ins> <code> <ins>src </ins> </code> <ins>attribute. Relative URIs must be resolved relative to the base URI of the image element. If no image is found, then the Icon facet is left blank. </ins> <p> <ins>The </ins> <span title="command-facet-HiddenState"> <a href="#hidden1"> <ins>Hidden State </ins> </a> </span> <ins>and </ins> <span title="command-facet-DisabledState"> <a
   href="#disabled5"> <ins>Disabled State </ins> </a> </span> <ins>facets of the command are always false. (The command is always enabled.) </ins> <p> <ins>The </ins> <span title="command-facet-CheckedState"> <a href="#checked2"> <ins>Checked State </ins> </a> </span> <ins>of the command is always false. (The command is never checked.) </ins> <p> <ins>The </ins> <span title="command-facet-Action"> <a
   href="#action"> <ins>Action </ins> </a> </span> <ins>of the command is to </ins> <span title="fire a
   click event"> <a href="#firing"> <ins>fire a </ins> <code title=""> <ins>click </ins> </code> <ins>event </ins> </a> </span> <ins>at the element. </ins> <h4 id="using1"> <span class="secno"> <ins>3.1.2. </ins> </span> <dfn id="using10"
   title="button-command"> <ins>Using the </ins> <code> <ins>button </ins> </code> <ins>element to define a command </ins> </dfn> </h4> <p> <ins>A </ins> <code> <ins>button </ins> </code> <ins>element always </ins> <span title="concept-command"> <a
   href="#command2"> <ins>defines a command </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <span title="command-facet-Type"> <a href="#type10"> <ins>Type </ins> </a> </span> <ins>, </ins> <span title="command-facet-ID"> <a href="#id1"> <ins>ID </ins> </a> </span> <ins>, </ins> <span
   title="command-facet-Label"> <a href="#label2"> <ins>Label </ins> </a> </span> <ins>, </ins> <span
   title="command-facet-Hint"> <a href="#hint"> <ins>Hint </ins> </a> </span> <ins>, </ins> <span
   title="command-facet-Icon"> <a href="#icon1"> <ins>Icon </ins> </a> </span> <ins>, </ins> <span
   title="command-facet-HiddenState"> <a href="#hidden1"> <ins>Hidden State </ins> </a> </span> <ins>, </ins> <span title="command-facet-CheckedState"> <a
   href="#checked2"> <ins>Checked State </ins> </a> </span> <ins>, and </ins> <span
   title="command-facet-Action"> <a href="#action"> <ins>Action </ins> </a> </span> <ins>facets of the command are determined </ins> <span title="a-command"> <a href="#using9"> <ins>as for </ins> <code> <ins>a </ins> </code> <ins>elements </ins> </a> </span> <ins>(see the previous section). </ins> <p> <ins>The </ins> <span title="command-facet-DisabledState"> <a
   href="#disabled5"> <ins>Disabled State </ins> </a> </span> <ins>of the command mirrors the disabled state of the button. Typically this is given by the element's </ins> <code title="attr-button-disabled"> <ins>disabled </ins> </code> <ins>attribute, but certain button types become disabled at other times too (for example, the </ins> <code> <ins>move-up </ins> </code> <ins>button type is disabled when it would have no effect). </ins> <h4 id="using2"> <span class="secno"> <ins>3.1.3. </ins> </span> <dfn id="using11"
   title="input-command"> <ins>Using the </ins> <code> <ins>input </ins> </code> <ins>element to define a command </ins> </dfn> </h4> <p> <ins>An </ins> <code> <ins>input </ins> </code> <ins>element whose </ins> <code
   title="attr-input-type"> <ins>type </ins> </code> <ins>attribute is one of </ins> <code> <ins>submit </ins> </code> <ins>, </ins> <code> <ins>reset </ins> </code> <ins>, </ins> <code> <ins>button </ins> </code> <ins>, </ins> <code> <ins>radio </ins> </code> <ins>, </ins> <code> <ins>checkbox </ins> </code> <ins>, </ins> <code> <ins>move-up </ins> </code> <ins>, </ins> <code> <ins>move-down </ins> </code> <ins>, </ins> <code> <ins>add </ins> </code> <ins>, and </ins> <code> <ins>remove </ins> </code> <span
   title="concept-command"> <a href="#command2"> <ins>defines a command </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <span title="command-facet-Type"> <a href="#type10"> <ins>Type </ins> </a> </span> <ins>of the command is "radio" if the </ins> <code title="attr-input-type"> <ins>type </ins> </code> <ins>attribute has the value </ins> <code> <ins>radio </ins> </code> <ins>, "checkbox" if the </ins> <code> <ins>type </ins> </code> <ins>attribute has the value </ins> <code> <ins>checkbox </ins> </code> <ins>, and "command" otherwise. </ins> <p> <ins>The </ins> <span title="command-facet-ID"> <a href="#id1"> <ins>ID </ins> </a> </span> <ins>of the command is the value of the </ins> <code title="attr-id"> <a
   href="#id"> <ins>id </ins> </a> </code> <ins>attribute of the element, if the attribute is present and not empty. Otherwise the command is an </ins> <span> <a
   href="#anonymous"> <ins>anonymous command </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <span title="command-facet-Label"> <a href="#label2"> <ins>Label </ins> </a> </span> <ins>of the command depends on the Type of the command: </ins> <p> <ins>If the </ins> <span title="command-facet-Type"> <a
   href="#type10"> <ins>Type </ins> </a> </span> <ins>is "command", then it is the string given by the </ins> <code title="attr-input-value"> <ins>value </ins> </code> <ins>attribute, if any, and a </ins> <span> <ins>UA-dependent value </ins> </span> <ins>that the UA uses to label the button itself if the attribute is absent. </ins> <p> <ins>Otherwise, the </ins> <span title="command-facet-Type"> <a
   href="#type10"> <ins>Type </ins> </a> </span> <ins>is "radio" or "checkbox". If the element has a </ins> <code> <ins>label </ins> </code> <ins>element associated with it, the </ins> <code> <a
   href="#textcontent0"> <ins>textContent </ins> </a> </code> <ins>of the first such element is the </ins> <span title="command-facet-Label"> <a href="#label2"> <ins>Label </ins> </a> </span> <ins>(in DOM terms, this the string given by </ins> <code> <var> <ins>element </ins> </var> <ins>.labels[0].textContent </ins> </code> <ins>). Otherwise, the value of the </ins> <code> <a href="#value"> <ins>value </ins> </a> </code> <ins>attribute, if present, is the </ins> <span title="command-facet-Label"> <a
   href="#label2"> <ins>Label </ins> </a> </span> <ins>. Otherwise, the </ins> <span
   title="command-facet-Label"> <a href="#label2"> <ins>Label </ins> </a> </span> <ins>is the empty string. </ins> <p> <ins>The </ins> <span title="command-facet-Hint"> <a href="#hint"> <ins>Hint </ins> </a> </span> <ins>of the command is the value of the </ins> <code title="attr-title"> <a
   href="#title0"> <ins>title </ins> </a> </code> <ins>attribute of the </ins> <code> <ins>input </ins> </code> <ins>element. If the attribute is not present, the </ins> <span
   title="command-facet-Hint"> <a href="#hint"> <ins>Hint </ins> </a> </span> <ins>is the empty string. </ins> <p> <ins>There is no </ins> <span title="command-facet-Icon"> <a
   href="#icon1"> <ins>Icon </ins> </a> </span> <ins>for the command. </ins> <p> <ins>The </ins> <span title="command-facet-HiddenState"> <a href="#hidden1"> <ins>Hidden State </ins> </a> </span> <ins>of the command is always false. (The command is never hidden.) </ins> <p> <ins>The </ins> <span title="command-facet-DisabledState"> <a
   href="#disabled5"> <ins>Disabled State </ins> </a> </span> <ins>of the command mirrors the disabled state of the control. Typically this is given by the element's </ins> <code title="attr-input-disabled"> <ins>disabled </ins> </code> <ins>attribute, but certain input types become disabled at other times too (for example, the </ins> <code> <ins>move-up </ins> </code> <ins>input type is disabled when it would have no effect). </ins> <p> <ins>The </ins> <span title="command-facet-CheckedState"> <a href="#checked2"> <ins>Checked State </ins> </a> </span> <ins>of the command is true if the command is of </ins> <span
   title="command-facet-Type"> <a href="#type10"> <ins>Type </ins> </a> </span> <ins>"radio" or "checkbox" and the element has a </ins> <code
   title="attr-input-checked"> <ins>checked </ins> </code> <ins>attribute, and false otherwise. </ins> <p> <ins>The </ins> <span title="command-facet-Action"> <a
   href="#action"> <ins>Action </ins> </a> </span> <ins>of the command is to </ins> <span title="fire a
   click event"> <a href="#firing"> <ins>fire a </ins> <code title=""> <ins>click </ins> </code> <ins>event </ins> </a> </span> <ins>at the element. </ins> </p> <h4 id="using3"> <span class="secno"> <ins>3.1.4. </ins> </span> <dfn id="using12"
   title="option-command"> <ins>Using the </ins> <code> <ins>option </ins> </code> <ins>element to define a command </ins> </dfn> </h4> <p> <ins>An </ins> <code> <ins>option </ins> </code> <ins>element with an ancestor </ins> <code> <ins>select </ins> </code> <ins>element and either no </ins> <code> <a href="#value"> <ins>value </ins> </a> </code> <ins>attribute or a </ins> <code> <a href="#value"> <ins>value </ins> </a> </code> <ins>attribute that is not the empty string </ins> <span title="concept-command"> <a href="#command2"> <ins>defines a command </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <span title="command-facet-Type"> <a href="#type10"> <ins>Type </ins> </a> </span> <ins>of the command is "radio" if the </ins> <code> <ins>option </ins> </code> <ins>'s nearest ancestor </ins> <code> <ins>select </ins> </code> <ins>element has no </ins> <code
   title="attr-select-multiple"> <ins>multiple </ins> </code> <ins>attribute, and "checkbox" if it does. </ins> <p> <ins>The </ins> <span title="command-facet-ID"> <a href="#id1"> <ins>ID </ins> </a> </span> <ins>of the command is the value of the </ins> <code title="attr-id"> <a
   href="#id"> <ins>id </ins> </a> </code> <ins>attribute of the element, if the attribute is present and not empty. Otherwise the command is an </ins> <span> <a
   href="#anonymous"> <ins>anonymous command </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <span title="command-facet-Label"> <a href="#label2"> <ins>Label </ins> </a> </span> <ins>of the command is the value of the </ins> <code> <ins>option </ins> </code> <ins>element's </ins> <code
   title="attr-option-label"> <ins>label </ins> </code> <ins>attribute, if there is one, or the value of the </ins> <code> <ins>option </ins> </code> <ins>element's </ins> <code> <a
   href="#textcontent0"> <ins>textContent </ins> </a> </code> <ins>DOM attribute if it doesn't. </ins> <p> <ins>The </ins> <span title="command-facet-Hint"> <a href="#hint"> <ins>Hint </ins> </a> </span> <ins>of the command is the string given by the element's </ins> <code
   title="attr-title"> <a href="#title0"> <ins>title </ins> </a> </code> <ins>attribute, if any, and the empty string if the attribute is absent. </ins> <p> <ins>There is no </ins> <span title="command-facet-Icon"> <a
   href="#icon1"> <ins>Icon </ins> </a> </span> <ins>for the command. </ins> <p> <ins>The </ins> <span title="command-facet-HiddenState"> <a href="#hidden1"> <ins>Hidden State </ins> </a> </span> <ins>of the command is always false. (The command is never hidden.) </ins> <p> <ins>The </ins> <span title="command-facet-DisabledState"> <a
   href="#disabled5"> <ins>Disabled State </ins> </a> </span> <ins>of the command is true (disabled) if the element has a </ins> <code
   title="attr-option-disabled"> <ins>disabled </ins> </code> <ins>attribute, and false otherwise. </ins> <p> <ins>The </ins> <span title="command-facet-CheckedState"> <a href="#checked2"> <ins>Checked State </ins> </a> </span> <ins>of the command is true (checked) if the element's </ins> <code
   title="dom-option-selected"> <ins>selected </ins> </code> <ins>DOM attribute is true, and false otherwise. </ins> <p> <ins>The </ins> <span title="command-facet-Action"> <a
   href="#action"> <ins>Action </ins> </a> </span> <ins>of the command depends on its </ins> <span
   title="command-facet-Type"> <a href="#type10"> <ins>Type </ins> </a> </span> <ins>. If the command is of </ins> <span title="command-facet-Type"> <a
   href="#type10"> <ins>Type </ins> </a> </span> <ins>"radio" then this must set the </ins> <code
   title="dom-option-selected"> <ins>selected </ins> </code> <ins>DOM attribute of the </ins> <code> <ins>option </ins> </code> <ins>element to true, otherwise it must toggle the state of the </ins> <code title="dom-option-selected"> <ins>selected </ins> </code> <ins>DOM attribute (set it to true if it is false and vice versa). Then </ins> <span title="fire a change
   event"> <a href="#firing0"> <ins>a </ins> <code title=""> <ins>change </ins> </code> <ins>event must be fired </ins> </a> </span> <ins>on the </ins> <code> <ins>option </ins> </code> <ins>element's nearest ancestor </ins> <code> <ins>select </ins> </code> <ins>element (if there is one), as if the selection had been changed directly. </ins> <h4 id="using4"> <span class="secno"> <ins>3.1.5. </ins> </span> <ins>Using the </ins> <dfn
   id="command4" title="command-element"> <code> <ins>command </ins> </code> </dfn> <ins>element to define a command </ins> </h4> <p> <ins>A </ins> <code> <a href="#command1"> <ins>command </ins> </a> </code> <ins>element </ins> <span
   title="concept-command"> <a href="#command2"> <ins>defines a command </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <span title="command-facet-Type"> <a href="#type10"> <ins>Type </ins> </a> </span> <ins>of the command is "radio" if the </ins> <code> <a
   href="#command1"> <ins>command </ins> </a> </code> <ins>'s </ins> <code title="attr-command-type"> <a
   href="#type7"> <ins>type </ins> </a> </code> <ins>attribute is " </ins> <code> <ins>radio </ins> </code> <ins>", "checkbox" if the attribute's value is " </ins> <code> <ins>checkbox </ins> </code> <ins>", and "command" otherwise. </ins> <p> <ins>The </ins> <span title="command-facet-ID"> <a href="#id1"> <ins>ID </ins> </a> </span> <ins>of the command is the value of the </ins> <code title="attr-id"> <a
   href="#id"> <ins>id </ins> </a> </code> <ins>attribute of the element, if the attribute is present and not empty. Otherwise the command is an </ins> <span> <a
   href="#anonymous"> <ins>anonymous command </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <span title="command-facet-Label"> <a href="#label2"> <ins>Label </ins> </a> </span> <ins>of the command is the value of the element's </ins> <code
   title="attr-command-label"> <a href="#label"> <ins>label </ins> </a> </code> <ins>attribute, if there is one, or the empty string if it doesn't. </ins> <p> <ins>The </ins> <span title="command-facet-Hint"> <a href="#hint"> <ins>Hint </ins> </a> </span> <ins>of the command is the string given by the element's </ins> <code
   title="attr-command-title"> <a href="#title7"> <ins>title </ins> </a> </code> <ins>attribute, if any, and the empty string if the attribute is absent. </ins> <p> <ins>The </ins> <span title="command-facet-Icon"> <a href="#icon1"> <ins>Icon </ins> </a> </span> <ins>for the command is the absolute URI resulting from resolving the value of the element's </ins> <code title="attr-command-icon"> <a
   href="#icon"> <ins>icon </ins> </a> </code> <ins>attribute as a URI relative to the element's base URI. If the element has no </ins> <code title="attr-command-icon"> <a
   href="#icon"> <ins>icon </ins> </a> </code> <ins>attribute then the command has no </ins> <span
   title="command-facet-Icon"> <a href="#icon1"> <ins>Icon </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <span title="command-facet-HiddenState"> <a href="#hidden1"> <ins>Hidden State </ins> </a> </span> <ins>of the command is true (hidden) if the element has a </ins> <code title="attr-command-hidden"> <a href="#hidden"> <ins>hidden </ins> </a> </code> <ins>attribute, and false otherwise. </ins> <p> <ins>The </ins> <span title="command-facet-DisabledState"> <a
   href="#disabled5"> <ins>Disabled State </ins> </a> </span> <ins>of the command is true (disabled) if the element has either a </ins> <code
   title="attr-command-disabled"> <a href="#disabled3"> <ins>disabled </ins> </a> </code> <ins>attribute or a </ins> <code title="attr-command-hidden"> <a
   href="#hidden"> <ins>hidden </ins> </a> </code> <ins>attribute (or both), and false otherwise. </ins> <p> <ins>The </ins> <span title="command-facet-CheckedState"> <a href="#checked2"> <ins>Checked State </ins> </a> </span> <ins>of the command is true (checked) if the element has a </ins> <code title="attr-command-checked"> <a href="#checked0"> <ins>checked </ins> </a> </code> <ins>attribute, and false otherwise. </ins> <p> <ins>The </ins> <span title="command-facet-Action"> <a
   href="#action"> <ins>Action </ins> </a> </span> <ins>of the command is to invoke the behaviour described in the definition of the </ins> <code title="dom-command-click"> <a
   href="#click"> <ins>click() </ins> </a> </code> <ins>method of the </ins> <code> <a
   href="#htmlcommandelement0"> <ins>HTMLCommandElement </ins> </a> </code> <ins>interface. </ins> <h3 id="forms0"> <span class="secno"> <ins>3.2. </ins> </span> <ins>Forms </ins> <span title="TBW"> <a
   href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p class="big-issue"> <ins>See </ins> <a
   href="http://whatwg.org/specs/web-forms/current-work/#extend-form-controls"> <ins>WF2 </ins> </a> <ins>for now </ins> <h4 id="form-submission"> <span class="secno"> <ins>3.2.1. </ins> </span> <ins>Form submission </ins> <span title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h4> <p class="big-issue"> <ins>See </ins> <a
   href="http://whatwg.org/specs/web-forms/current-work/#form-submission"> <ins>WF2 </ins> </a> <ins>for now </ins> <h3 id="menus"> <span class="secno"> <ins>3.3. </ins> </span> <ins>Menus </ins> </h3> <h4 id="introduction1"> <span class="secno"> <ins>3.3.1. </ins> </span> <ins>Introduction </ins> <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h4> <p class="big-issue"> <ins>... </ins> </p> <h4 id="building"> <span class="secno"> <ins>3.3.2. </ins> </span> <dfn
   id="building1"> <ins>Building menus </ins> </dfn> </h4> <p> <ins>A menu consists of a list of zero or more of the following components: </ins> <ul> <li> <span title="concept-command"> <a href="#command2"> <ins>Commands </ins> </a> </span> <ins>, which can be marked as default commands </ins> <li> <ins>Separators </ins> <li> <ins>Other menus (which allows the list to be nested) </ins> </ul> <p> <ins>The list corresponding to a particular element is built by iterating over its child nodes. </ins> <p> <ins>For each child node in document order, the required behaviour depends on what the node is, as follows: </ins> <dl class="switch"> <dt> <ins>An element that </ins> <span title="concept-command"> <a
    href="#command2"> <ins>defines a command </ins> </a> </span> <dd> <ins>Append the command to the menu. If the element is a </ins> <code> <a
    href="#command1"> <ins>command </ins> </a> </code> <ins>element with a </ins> <code
    title="attr-command-default"> <a href="#default"> <ins>default </ins> </a> </code> <ins>attribute, mark the command as being a default command. </ins> <dt> <ins>An </ins> <code> <a href="#hr0"> <ins>hr </ins> </a> </code> <ins>element </ins> <dt> <ins>An </ins> <code> <ins>option </ins> </code> <ins>element that has a </ins> <code
    title="attr-option-value"> <ins>value </ins> </code> <ins>attribute set to the empty string, and has a </ins> <code title="attr-option-disabled"> <ins>disabled </ins> </code> <ins>attribute, and whose </ins> <code> <a href="#textcontent0"> <ins>textContent </ins> </a> </code> <ins>consists of a string of one or more hyphens (U+002D HYPHEN-MINUS) </ins> <dd> <ins>Append a separator to the menu. </ins> <dt> <ins>An </ins> <code> <a href="#li0"> <ins>li </ins> </a> </code> <ins>element </ins> <dd> <ins>Iterate over the children of the </ins> <code> <a href="#li0"> <ins>li </ins> </a> </code> <ins>element. </ins> <dt> <ins>A </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element with no </ins> <code
    title="attr-menu-label"> <a href="#label1"> <ins>label </ins> </a> </code> <ins>attribute </ins> <dt> <ins>A </ins> <code> <ins>select </ins> </code> <ins>element </ins> <dd> <ins>Append a separator to the menu, then iterate over the children of the </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>or </ins> <code> <ins>select </ins> </code> <ins>element, then append another separator. </ins> <dt> <ins>A </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element with a </ins> <code
    title="attr-menu-label"> <a href="#label1"> <ins>label </ins> </a> </code> <ins>attribute </ins> <dt> <ins>An </ins> <code> <ins>optgroup </ins> </code> <ins>element </ins> <dd> <ins>Append a submenu to the menu, using the value of the element's </ins> <code
    title=""> <ins>label </ins> </code> <ins>attribute as the label of the menu. The submenu must be constructed by taking the element and creating a new menu for it using the complete process described in this section. </ins> <dt> <ins>Any other node </ins> <dd> <ins>Ignore the node. </ins> </dl> <p> <ins>Once all the nodes have been processed as described above, the user agent must the post-process the menu as follows: </ins> <ol> <li> <ins>Any menu item with no label, or whose label is the empty string, must be removed. </ins> <li> <ins>Any sequence of two or more separators in a row must be collapsed to a single separator. </ins> <li> <ins>Any separator at the start or end of the menu must be removed. </ins> </ol> <h4 id="context"> <span class="secno"> <ins>3.3.3. </ins> </span> <dfn
   id="context1"> <ins>Context menus </ins> </dfn> </h4> <p> <ins>The </ins> <code title="attr-contextmenu"> <a
   href="#contextmenu"> <ins>contextmenu </ins> </a> </code> <ins>attribute associates an element with a </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element. </ins> <p> <ins>When an element's context menu is requested (e.g. by the user right-clicking the element, or pressing a context menu key), the UA must </ins> <span> <a href="#firing1"> <ins>fire a </ins> <code title=""> <ins>contextmenu </ins> </code> <ins>event </ins> </a> </span> <ins>on the element for which the menu was requested. </ins> <p class="note"> <ins>Typically, therefore, the firing of the </ins> <code
   title="event-contextmenu"> <ins>contextmenu </ins> </code> <ins>event will be the default action of a </ins> <code title="mouseup"> <ins>mouseup </ins> </code> <ins>or </ins> <code
   title="event-keyup"> <ins>keyup </ins> </code> <ins>event. The exact sequence of events is UA-dependent, as it will vary based on platform conventions. </ins> <p> <ins>The default action of the </ins> <code
   title="event-contextmenu"> <ins>contextmenu </ins> </code> <ins>event depends on whether the element has a context menu assigned (using the </ins> <code
   title="attr-contextmenu"> <a href="#contextmenu"> <ins>contextmenu </ins> </a> </code> <ins>attribute) or not. If it does not, the default action must be for the user agent to show its default context menu, if it has one. </ins> <p> <ins>If the element </ins> <em> <ins>does </ins> </em> <ins>have a context menu assigned, then the user agent must </ins> <span> <a href="#firing2"> <ins>fire a </ins> <code title=""> <ins>show </ins> </code> <ins>event </ins> </a> </span> <ins>on the relevant </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element. </ins> <p> <ins>The default action of </ins> <em> <ins>this </ins> </em> <ins>event is that the user agent must show a context menu </ins> <span title="building menus"> <a
   href="#building1"> <ins>built </ins> </a> </span> <ins>from the </ins> <code> <a
   href="#menu0"> <ins>menu </ins> </a> </code> <ins>element. </ins> <p> <ins>The user agent may also provide access to its default context menu, if any, with the context menu shown. For example, it could merge the menu items from the two menus together, or provide the page's context menu as a submenu of the default menu. </ins> <p> <ins>If the user dismisses the menu without making a selection, nothing in particular happens. </ins> <p> <ins>If the user selects a menu item that represents a </ins> <span
   title="concept-commands"> <ins>command </ins> </span> <ins>, then the UA must invoke that command's </ins> <span title="command-facet-Action"> <a
   href="#action"> <ins>Action </ins> </a> </span> <ins>, as defined above. </ins> <p> <ins>Context menus must not, while being shown, reflect changes in the DOM; they are constructed as the default action of the </ins> <code
   title="event-show"> <ins>show </ins> </code> <ins>event and must remain like that until dismissed. </ins> <p> <ins>User agents may provide means for bypassing the context menu processing model, ensuring that the user can always access the UA's default context menus. For example, the user agent could handle right-clicks that have the Shift key depressed in such a way that it does not fire the </ins> <code
   title="event-contextmenu"> <ins>contextmenu </ins> </code> <ins>event and instead always shows the default context menu. </ins> <h4 id="toolbars"> <span class="secno"> <ins>3.3.4. </ins> </span> <dfn
   id="toolbars1"> <ins>Toolbars </ins> </dfn> </h4> <p> <ins>Toolbars are a kind of menu that is always visible. </ins> <p> <ins>When a </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element has a </ins> <code
   title="attr-menu-type"> <a href="#type9"> <ins>type </ins> </a> </code> <ins>attribute with the value </ins> <code title=""> <ins>toolbar </ins> </code> <ins>, then the user agent must </ins> <span
   title="building menus"> <a href="#building1"> <ins>build </ins> </a> </span> <ins>the menu for that </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element and </ins> <span
   title="render-toolbar"> <ins>render </ins> </span> <ins>it in the document in a position appropriate for that </ins> <code> <a href="#menu0"> <ins>menu </ins> </a> </code> <ins>element. </ins> <p> <ins>The user agent must reflect changes made to the </ins> <code> <ins>menu </ins> <code> <ins>'s DOM immediately in the UI. </ins> </code> </code> <h3 id="repetition"> <span class="secno"> <ins>3.4. </ins> </span> <ins>Repetition templates </ins> <span title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p class="big-issue"> <ins>See </ins> <a
   href="http://whatwg.org/specs/web-forms/current-work/#repeatingFormControls"> <ins>WF2 </ins> </a> <ins>for now </ins> <h2 id="browsing"> <span class="secno"> <ins>4. </ins> <del>3. </del> </span> Browsing contexts </h2> <p> Web browsers and other user agents that display HTML documents to the user in the context of a browsing environment may display one or more views of the document to the user. <p> Each set of one or more views is considered a <dfn
   id="browsing0"> browsing context </dfn> . <p> A <span> <a href="#browsing0"> browsing context </a> </span> may have further browsing contexts nested within it; the <code> iframe </code> element, for instance, instantiates a <span> <a href="#browsing0"> browsing context </a> </span> within the context of a parent document. The lifetime of a <span> nested browsing context </span> is bounded by the lifetime of the document in which it lives, or by the UA if the <span> <a
   href="#browsing0"> browsing context </a> </span> does not have a parent document. <p> A <span> <a href="#browsing0"> browsing context </a> </span> that does not have a parent document or browsing context is the <dfn
   id="top-level"> top-level browsing context </dfn> for any browsing contexts nested within it (and their documents). <p> Each <span> <a href="#browsing0"> browsing context </a> </span> must have a single unique <span> <a href="#session0">  session history </a> </span> , consisting of one or more documents, each represented by an object implementing the <code> <a href="#documentwindow"> DocumentWindow </a> </code> interface. </p> <p class="note"> A document can have more than one entry in the <span> <a
   href="#session0">  session history </a> </span> of a particular browsing context. All the entries related to a particular <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object are contiguous. <p> Each view of each document in a <span> <a href="#browsing0"> browsing context </a> </span> must be represented by an object implementing the <code> <a href="#window0"> Window </a> </code> interface. In each set of such objects there is a <dfn id="default1">  default view </dfn> , represented by one of the <code> <a href="#window0"> Window </a> </code> objects, which is the primary output mode of the document (and, for interactive user agents, nominally the user's primary way of interacting with the document). <p> When a UI event is fired, the <code title=""> view </code> attribute of the <code> UIEvent </code> object must point to the <code> <a
   href="#window0"> Window </a> </code> object representing the view in which the user triggered the event. <p class="note"> Typically Web browsers only have one view per document, but a Web browser that rendered document to a screen while simultaneously providing a speech synthesis version would be one example where two views were present. <p class="issue">  It would be good to have a summary or diagram for the above relationships. </p> <h3 id="the-documentwindow"> <span class="secno"> <ins>4.1. </ins> <del>3.1. </del> </span> The <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> interface </h3> <p> The <code> <a href="#documentwindow"> DocumentWindow </a> </code> interface extends the <code> DocumentView </code> interface defined in DOM2 Views. <a
   href="#refsDOM2VIEWS"> [DOM2VIEWS] </a> <p> <ins>Every </ins> <code> <ins>Document </ins> </code> <ins>object that is being rendered in a </ins> <span> <a
   href="#browsing0"> <ins>browsing context </ins> </a> </span> <ins>must implement the </ins> <code> <a
   href="#documentwindow"> <ins>DocumentWindow </ins> </a> </code> <ins>interface. </ins> <pre
   class="idl"> interface <dfn id="documentwindow"> DocumentWindow </dfn> : <span> DocumentView </span> { readonly attribute <span> <a href="#window0"> Window </a> </span> <span title="dom-document-window"> <a href="#window"> window </a> </span> ; <ins>// helper objects </ins> attribute <span> <a href="#location1"> Location </a> </span> <span title="dom-document-location"> <a href="#location0">  location </a> </span> ; /* <a href="#settingLocation"> performs magic on setting </a> */ <span> <a href="#selection1"> <ins>Selection </ins> </a> </span> <span title="dom-document-getSelection"> <a href="#getselection0"> <ins>getSelection </ins> </a> </span> <ins>(); readonly attribute HTMLCollection </ins> <span title="dom-document-commands"> <a href="#commands0"> <ins>commands </ins> </a> </span> <ins>; // </ins> <span title="contenteditable"> <a href="#contenteditable"> <ins>editing </ins> </a> </span> <ins>attribute boolean </ins> <span title="dom-document-designMode"> <ins>designMode </ins> </span> <ins>; boolean </ins> <span title="dom-document-execCommand"> <a href="#execcommand"> <ins>execCommand </ins> </a> </span> <ins>(in DOMString commandID); boolean </ins> <span title="dom-document-execCommand"> <a href="#execcommand"> <ins>execCommand </ins> </a> </span> <ins>(in DOMString commandID, in boolean doShowUI); boolean </ins> <span title="dom-document-execCommand"> <a href="#execcommand"> <ins>execCommand </ins> </a> </span> <ins>(in DOMString commandID, in boolean doShowUI, in DOMString value); </ins> }; </pre> <p> The <dfn id="window"
   title="dom-document-window"> <code> window </code> </dfn> attribute of the <code> <a href="#documentwindow"> DocumentWindow </a> </code> interface must return the document's <span> <a href="#default1">  default view </a> </span> . It must return the same object as the <code> defaultView </code> attribute inherited from the <code> DocumentView </code> interface. <a
   href="#DOM2VIEWS"> [DOM2VIEWS] </a> </p> <p> <ins>The </ins> <dfn id="domain" title="document's domain"> <ins>domain of a </ins> <code> <ins>DocumentWindow </ins> </code> <ins>object </ins> </dfn> <ins>is the domain given by the </ins> <code> <ins>hostname </ins> </code> <ins>attribute of the </ins> <code> <a
   href="#location1"> <ins>Location </ins> </a> </code> <ins>object returned by the </ins> <code> <a
   href="#documentwindow"> <ins>DocumentWindow </ins> </a> </code> <ins>object's </ins> <code
   title="dom-document-location"> <a href="#location0"> <ins>location </ins> </a> </code> <ins>attribute, </ins> <em> <ins>if </ins> </em> <ins>that </ins> <code> <ins>hostname </ins> </code> <ins>attribute is not the empty string. </ins> <span class="big-issue"> <ins>If it is, the domain of the document is UA-defined. For now. </ins> </span> </p> <p> <ins>The </ins> <dfn id="domain0" title="script's domain"> <ins>domain of a script </ins> </dfn> <ins>is the </ins> <span title="document's domain"> <a href="#domain"> <ins>domain of the </ins> <code> <ins>DocumentWindow </ins> </code> <ins>object </ins> </a> </span> <ins>that is returned by the </ins> <code title="dom-document"> <ins>document </ins> </code> <ins>attribute of the script's primary </ins> <code> <a href="#window0"> <ins>Window </ins> </a> </code> <ins>object (in UAs that implement ECMAScript, </ins> <a href="#globalScopeObject"> <ins>that is the global scope object </ins> </a> <ins>). </ins> <p> <ins>The </ins> <dfn id="the-string"> <ins>the string representing the script's domain in IDNA format </ins> </dfn> <ins>is obtained as follows: take the </ins> <span> <a
   href="#domain0"> <ins>script's domain </ins> </a> </span> <ins>and apply the IDNA ToASCII algorithm and then the IDNA ToUnicode algorithm to each component of the domain name (with both the AllowUnassigned and UseSTD3ASCIIRules flags set both times). </ins> <a href="#refsRFC3490"> <ins>[RFC3490] </ins> </a> <ins>If ToASCII fails to convert one of the components of the string, e.g. because it is too long or because it contains invalid characters, then the string representing the script's domain in IDNA format cannot be obtained. (ToUnicode is defined to never fail.) </ins> <h3 id="the-window"> <span class="secno"> <ins>4.2. </ins> <del>3.2. </del> </span> The <code> <a
   href="#window0"> Window </a> </code> interface </h3> <p> The <code> <a href="#window0"> Window </a> </code> interface extends the <code> AbstractView </code> interface defined in DOM2 Views. <a
   href="#refsDOM2VIEWS"> [DOM2VIEWS] </a> <pre
   class="idl"> interface <dfn id="window0"> Window </dfn> : <span> AbstractView </span> { // self-reference readonly attribute <span> <a href="#window0"> Window </a> </span> <span title="dom-window"> <a href="#window1"> window </a> </span> ; // <del>helper objects readonly attribute   History     history   ; attribute   Location     location   ; /*  performs magic on setting  */ attribute   Storage     sessionStorage   ; readonly attribute   StorageList    globalStorage  ; // </del> timers long <span> <a href="#settimeout"> setTimeout </a> </span> (in <span> <a href="#timeouthandler"> TimeoutHandler </a> </span> handler, in long timeout); long <span> <a href="#settimeout"> setTimeout </a> </span> (in <span> <a href="#timeouthandler"> TimeoutHandler </a> </span> handler, in long timeout, <var title="">  arguments... </var> ); long <span> <a href="#settimeout"> setTimeout </a> </span> (in DOMString code, in long timeout); long <span> <a href="#settimeout"> setTimeout </a> </span> (in DOMString code, in long timeout, in DOMString language); void <span> <a href="#cleartimeout"> clearTimeout </a> </span> (in long handle); long <span> <a href="#setinterval..."> setInterval </a> </span> (in <span> <a href="#timeouthandler"> TimeoutHandler </a> </span> handler, in long timeout); long <span> <a href="#setinterval..."> setInterval </a> </span> (in <span> <a href="#timeouthandler"> TimeoutHandler </a> </span> handler, in long timeout, <var title="">  arguments... </var> ); long <span> <a href="#setinterval..."> setInterval </a> </span> (in DOMString code, in long timeout); long <span> <a href="#setinterval..."> setInterval </a> </span> (in DOMString code, in long timeout, in DOMString language); void <span> <a href="#clearinterval"> clearInterval </a> </span> (in long handle); // convenient event handlers attribute <span> <a href="#errorhandler0"> ErrorHandler </a> </span> onerror; <ins>// helper objects readonly attribute </ins> <span> <a href="#history0"> <ins>History </ins> </a> </span> <span title="dom-history"> <a href="#history"> <ins>history </ins> </a> </span> <ins>; attribute </ins> <span> <a href="#location1"> <ins>Location </ins> </a> </span> <span title="dom-location"> <a href="#location"> <ins>location </ins> </a> </span> <ins>; /* </ins> <a href="#settingLocation"> <ins>performs magic on setting </ins> </a> <ins>*/ attribute </ins> <span> <a href="#storage"> <ins>Storage </ins> </a> </span> <span title="dom-sessionStorage"> <a href="#sessionstorage"> <ins>sessionStorage </ins> </a> </span> <ins>; readonly attribute </ins> <span> <a href="#storagelist"> <ins>StorageList </ins> </a> </span> <span title="dom-globalStorage"> <a href="#globalstorage"> <ins>globalStorage </ins> </a> </span> <ins>; readonly attribute </ins> <span> <a href="#clientinformation"> <ins>ClientInformation </ins> </a> </span> <span title="dom-navigator"> <a href="#navigator"> <ins>navigator </ins> </a> </span> <ins>; readonly attribute </ins> <span> <a href="#undomanager"> <ins>UndoManager </ins> </a> </span> <span title="dom-undoManager"> <ins>undoManager </ins> </span> <ins>; </ins> <span> <a href="#selection1"> <ins>Selection </ins> </a> </span> <span title="dom-getSelection"> <a href="#getselection"> <ins>getSelection </ins> </a> </span> <ins>(); </ins> }; interface <dfn id="timeouthandler"> TimeoutHandler </dfn> { void handleEvent( <var title="">  arguments... </var> ); }; interface <dfn id="errorhandler"> ErrorHandler </dfn> { void handleEvent(in DOMString errorMessage, in DOMString fileName, in DOMString lineNumber); }; </pre> <p> Objects implementing the <code> <a href="#window0"> Window </a> </code> interface must also implement the <code> EventTarget </code> interface. <p id="globalScopeObject">  In UAs that expose the DOM to ECMAScript <a
   href="#refsECMA262"> [ECMA262] </a> scripts, the global scope object must implement the <code> <a href="#window0"> Window </a> </code> interface described above. <p> The <dfn id="window1" title="dom-window"> <code> window </code> </dfn> attribute of an object implementing the <code> <a
   href="#window0"> Window </a> </code> interface must always point to the object itself. In other words, the following equality must also always hold: <pre> <var title="">  x </var> .window == <var title="">  x </var> </pre> <p> ...where <var title="">  x </var> is an object implementing the <code> <a
   href="#window0"> Window </a> </code> interface. <p> Thus, in ECMAScript, the ECMAScript global object must have a property <code title="dom-window"> <a href="#window1"> window </a> </code> pointing at the global object itself. <p> The <code title=""> document </code> attribute inherited from the <code> AbstractView </code> interface must return the document associated with this view. <h3 id="events">  <span class="secno"> <ins>4.3. </ins> </span> <ins>Events </ins> </h3> <p class="big-issue"> <ins>We need a section to define how events all work, default actions, etc. For example, how does clicking on a span in a link that is in another link actually cause a link to be followed? which one? (where should this section be?) </ins> <h3 id="focus"> <span class="secno"> <ins>4.4. </ins> </span> <ins>Focus </ins> <span title="WIP"> <a
   href="#wip"> <ins>[WIP] </ins> </a> </span> </h3> <p class="big-issue"> <ins>This entire section will be merged with earlier sections in due course. </ins> <p> <ins>When an element is focused, key events are targetted at that element instead of at the document's root element. </ins> <h4 id="the-tabindex"> <span class="secno"> <ins>4.4.1. </ins> </span> <ins>The </ins> <dfn
   id="tabindex0"> <code> <ins>tabindex </ins> </code> </dfn> <ins>Attribute </ins> </h4> <p class="issue"> <ins>This section on the </ins> <code> <a
   href="#tabindex0"> <ins>tabindex </ins> </a> </code> <ins>attribute needs to be checked for backwards-compatibility. </ins> <p> <ins>The </ins> <code> <a href="#tabindex0"> <ins>tabindex </ins> </a> </code> <ins>attribute defined in HTML4 is extended to apply to all HTML elements by defining it as a common attribute. </ins> <p> <ins>The </ins> <code> <a href="#tabindex0"> <ins>tabindex </ins> </a> </code> <ins>attribute specifies the relative order of elements for the purposes of sequential focus navigation. The name "tab index" comes from the common use of the "tab" key to navigate through the focusable elements. The term "tabbing" refers to moving forward through the focusable elements. </ins> <p> <ins>The </ins> <code> <a href="#tabindex0"> <ins>tabindex </ins> </a> </code> <ins>attribute can take any integer (an optional U+002D HYPHEN-MINUS representing negativity followed by one or more digits in the range 0-9, U+0030 to U+0039, interpreted as base ten). </ins> <p> <ins>A positive integer (including zero) specifies the index of the element in the current scope's tab order. Elements with the same index are sorted in document order for the purposes of tabbing. </ins> <p id="negative-tabindex"> <ins>A negative integer specifies that the element should be removed from the tab order. If the element does normally take focus, it may still be focused using other means (e.g. it could be focussed by a click). </ins> <p> <ins>Other values are ignored, as if the attribute was absent. Certain elements may default absent </ins> <code> <a href="#tabindex0"> <ins>tabindex </ins> </a> </code> <ins>attributes to zero, at the user agent's discretion. (In other words, some elements are focusable by default, and they are assumed to have tab index 0. Text fields will typically be in the tab order by default, for instance.) </ins> <p> <ins>When an element that does not normally take focus has the </ins> <code> <a
   href="#tabindex0"> <ins>tabindex </ins> </a> </code> <ins>attribute specified with a positive value, then it is added to the tab order and is made focusable. When focused, the element matches the CSS </ins> <code> <a
   href="#focus0"> <ins>:focus </ins> </a> </code> <ins>pseudo-class and key events are dispatched on that element when appropriate, just like focusing a link. </ins> <p> <ins>Since all HTML elements can thus be focused and unfocusd, the </ins> <code> <ins>onfocus </ins> </code> <ins>and </ins> <code> <ins>onblur </ins> </code> <ins>attributes shall also apply to all HTML elements. </ins> <h4 id="the-elementfocus"> <span class="secno"> <ins>4.4.2. </ins> </span> <ins>The </ins> <dfn
   id="elementfocus0"> <code> <ins>ElementFocus </ins> </code> </dfn> <ins>interface </ins> </h4> <p> <ins>The </ins> <code> <a href="#elementfocus1"> <ins>ElementFocus </ins> </a> </code> <ins>interface contains methods for moving focus to and from an element. It can be obtained from objects that implement the </ins> <code> <ins>Element </ins> </code> <ins>interface using binding-specific casting methods. </ins> <pre class="idl"> <ins>interface </ins> <dfn id="elementfocus1"> <ins>ElementFocus </ins> </dfn> <ins>{ attribute long tabIndex; void focus(); void blur(); }; </ins> </pre> <p> <ins>The </ins> <code> <a href="#tabindex0"> <ins>tabIndex </ins> </a> </code> <ins>DOM attribute reflects the value of the related content attribute. If the attribute is not present (or has an invalid value) then the DOM attribute should return the UA's default value for that element, typically either 0 (for elements in the tab order) or -1 (for elements not in the tab order). </ins> <p> <ins>The </ins> <dfn id="focus0"> <code> <ins>focus() </ins> </code> </dfn> <ins>and </ins> <dfn
   id="blur"> <code> <ins>blur() </ins> </code> </dfn> <ins>methods focus and unfocus the element respectively, if the element is focusable. </ins> <h4 id="the-documentfocus"> <span class="secno"> <ins>4.4.3. </ins> </span> <ins>The </ins> <dfn
   id="documentfocus0"> <code> <ins>DocumentFocus </ins> </code> </dfn> <ins>interface </ins> </h4> <p> <ins>The </ins> <code> <a href="#documentfocus1"> <ins>DocumentFocus </ins> </a> </code> <ins>interface contains methods for moving focus around the document. It can be obtained from objects that implement the </ins> <code> <ins>Document </ins> </code> <ins>interface using binding-specific casting methods. </ins> <pre class="idl"> <ins>interface </ins> <dfn id="documentfocus1"> <ins>DocumentFocus </ins> </dfn> <ins>{ readonly attribute Element currentFocus; void moveFocusForward(); void moveFocusBackward(); void moveFocusUp(); void moveFocusRight(); void moveFocusDown(); void moveFocusLeft(); }; </ins> </pre> <p> <ins>The </ins> <dfn id="currentfocus"> <code> <ins>currentFocus </ins> </code> </dfn> <ins>attribute returns the element to which key events will be sent when the document receives key events. </ins> <p> <ins>The </ins> <dfn id="movefocusforward"> <code> <ins>moveFocusForward </ins> </code> </dfn> <ins>method uses the </ins> <code> <ins>'nav-index' </ins> </code> <ins>property and the </ins> <code> <a
   href="#tabindex0"> <ins>tabindex </ins> </a> </code> <ins>attribute to find the next focusable element and focuses it. </ins> <p> <ins>The </ins> <dfn id="movefocusbackward"> <code> <ins>moveFocusBackward </ins> </code> </dfn> <ins>method uses the </ins> <code> <ins>'nav-index' </ins> </code> <ins>property and the </ins> <code> <a
   href="#tabindex0"> <ins>tabindex </ins> </a> </code> <ins>attribute to find the previous focusable element and focuses it. </ins> <p> <ins>The </ins> <dfn id="movefocusup"> <code> <ins>moveFocusUp </ins> </code> </dfn> <ins>method uses the </ins> <code> <ins>'nav-up' </ins> </code> <ins>property and the </ins> <code> <a
   href="#tabindex0"> <ins>tabindex </ins> </a> </code> <ins>attribute to find an appropriate focusable element and focuses it. </ins> <p> <ins>In a similar manner, the </ins> <dfn
   id="movefocusright"> <code> <ins>moveFocusRight </ins> </code> </dfn> <ins>, </ins> <dfn
   id="movefocusdown"> <code> <ins>moveFocusDown </ins> </code> </dfn> <ins>, and </ins> <dfn
   id="movefocusleft"> <code> <ins>moveFocusLeft </ins> </code> </dfn> <ins>methods use the </ins> <code> <ins>'nav-right' </ins> </code> <ins>, </ins> <code> <ins>'nav-down' </ins> </code> <ins>, and </ins> <code> <ins>'nav-left' </ins> </code> <ins>properties (respectively), and the </ins> <code> <a
   href="#tabindex0"> <ins>tabindex </ins> </a> </code> <ins>attribute, to find an appropriate focusable element and focus it. </ins> <p> <ins>The </ins> <code> <ins>'nav-index' </ins> </code> <ins>, </ins> <code> <ins>'nav-up' </ins> </code> <ins>, </ins> <code> <ins>'nav-right' </ins> </code> <ins>, </ins> <code> <ins>'nav-down' </ins> </code> <ins>, and </ins> <code> <ins>'nav-left' </ins> </code> <ins>properties are defined in </ins> <a
   href="#refsCSS3UI"> <ins>[CSS3UI] </ins> </a> <ins>. </ins> <h3 id="scs-runtime"> <span class="secno"> <ins>4.5. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> <del>3.2.1. </del> </span> Runtime script errors </h3>  <p> The <dfn id="onerror"> <code> onerror </code> </dfn> attribute takes a reference to an object implementing the <dfn
   id="errorhandler0"> <code> ErrorHandler </code> </dfn> interface. In ECMAScript, such an interface is implemented by any function that takes three arguments and returns a boolean value, as well as by the <code> null </code> value and the <code> undefined </code> value. <p> The function to which the <code> <a href="#onerror"> onerror </a> </code> attributes points must be invoked whenever a runtime script error occurs in the context of the <code title="dom-window"> <a
   href="#window1"> window </a> </code> object, before the error is reported to the user. If the function is <code> null </code> or if the function returns true then the error should not reported to the user. If the function is <code> undefined </code> or if the function doesn't returns true, then the message must be reported as normal. <p> The three arguments passed to the function are all <code> DOMString </code> s; the first gives the message that the UA is considering reporting, the second gives the URI to the resource in which the error occured, and the third gives the line number in tha resource on which the error occured. <p> The initial value of <code> <a href="#onerror"> onerror </a> </code> must be <code> undefined </code> . <h3 id="scs-timers">  <span class="secno"> <ins>4.6. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> <del>3.2.2. </del> </span> Timers </h3>  <p> The <code> <a href="#settimeout"> setTimeout </a> </code> and <code> <a
   href="#setinterval..."> setInterval </a> </code> methods allow authors to schedule timer-based events. <p> The <dfn id="settimeout" title="setTimeout"> <code> setTimeout( <var
   title=""> handler </var> , <var title=""> timeout </var> [, <var
   title=""> arguments... </var> ]) </code> </dfn> method takes a reference to a <code> <a href="#timeouthandler"> TimeoutHandler </a> </code> object and a length of time in milliseconds. It must return a handle to the timeout created, and then asynchronously wait <var title=""> timeout </var> milliseconds and then invoke <code> handleEvent() </code> on the <var
   title=""> handler </var> object. If any <var title=""> arguments... </var> were provided, they must be passed to the <var title=""> handler </var> as arguments to the <code> handleEvent() </code> function. <p> In the ECMAScript DOM binding, the ECMAScript native <code> Function </code> type must implement the <code> <a
   href="#timeouthandler"> TimeoutHandler </a> </code> interface such that invoking the <code> handleEvent() </code> method of that interface on the object <ins>from another language binding </ins> invokes the function itself, with the arguments passed to <code> handleEvent() </code> as the arguments passed to the function. <ins>In the ECMAScript binding itself, however, the </ins> <code> <ins>handleEvent() </ins> </code> <ins>method of the interface is not directly accessible on </ins> <code> <ins>Function </ins> </code> <ins>objects. </ins> Such functions must be called in the global scope. <p> Alternatively, <dfn id="settimeout0" title=""> <code> setTimeout( <var
   title=""> code </var> , <var title=""> timeout </var> [, <var
   title=""> language </var> ]) </code> </dfn> may be used. This variant takes a string instead of a <code> <a
   href="#timeouthandler"> TimeoutHandler </a> </code> object. That string must be parsed using the specified <var title="">  language </var> (defaulting to ECMAScript if the third argument is omitted) and executed in the global scope. <p class="big-issue"> Need to define <var title="">  language </var> values. <p> The <dfn id="setinterval..."> <code> setInterval(...) </code> </dfn> variants must work in the same way as the <code> <a
   href="#settimeout"> setTimeout </a> </code> variants except that the <var
   title=""> handler </var> or <code> <a href="#code0"> code </a> </code> must be invoked again every <var title=""> timeout </var> milliseconds, not just the once. <p> The <dfn id="cleartimeout"> <code> clearTimeout() </code> </dfn> and <dfn
   id="clearinterval"> <code> clearInterval() </code> </dfn> methods take one integer (the value returned by <code> <a
   href="#settimeout"> setTimeout </a> </code> and <code> <a
   href="#setinterval..."> setInterval </a> </code> respectively) and must cancel the specified timeout. When called with a value that does not correspond to an active timeout or interval, the methods must return without doing anything. <p> Timeouts must never fire while another script is executing. (Thus the HTML scripting model is strictly single-threaded and not reentrant.) <h3 id="scs-session">  <span class="secno"> <ins>4.7. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> <del>3.3. </del> </span> Session history and navigation </h3> <h4 id="the-session"> <span class="secno"> <ins>4.7.1. </ins> </span> <ins>The </ins> <dfn
   id="session0"> <del>3.3.1.  The </del>  session history </dfn> of browsing contexts </h4> <p> <code> <a href="#history0"> History </a> </code> objects provide a representation of the pages in the session history of their <code> <a
   href="#window0"> Window </a> </code> object's <span> <a
   href="#browsing0"> browsing context </a> </span> . Each browsing context ( <code> frame </code> , <code> iframe </code> , etc) has a distinct session history. </p> <p> Each <code> <a href="#documentwindow"> DocumentWindow </a> </code> object in a browsing context's session history is associated with a unique instance of the <code> <a href="#history0"> History </a> </code> object, although they all must model the same underlying session history. <p> The <dfn id="history" title="dom-history"> <code> history </code> </dfn> attribute of the <code> <a href="#window0"> Window </a> </code> interface must return the object implementing the <code> <a
   href="#history0"> History </a> </code> interface for that <code> <a
   href="#window0"> Window </a> </code> object's associated <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object.  <del>For historical reasons, the   History   object for a document is only accessible from the   Window   objects of a   DocumentWindow   object, not directly from the   DocumentWindow   object itself. </del> <p> <code> <a href="#history0"> History </a> </code> objects represent their <span> <a href="#browsing0"> browsing context </a> </span> 's session history as a flat list of URIs and <span title="state object"> <a
   href="#state"> state objects </a> </span> . (This does not imply that the UI need be linear. See the <a href="#history-notes"> notes below </a> .) <p> Typically, the history list will consist of only URIs. However, a page can <span title="dom-history-pushState"> <a
   href="#pushstate"> add </a> </span> <dfn id="state" title="state
   object"> state objects </dfn> between its entry in the session history and the next ("forward") entry. These are then <span title="event-popstate"> <a
   href="#popstate"> returned to the script </a> </span> when the user (or script) goes back in the history, thus enabling authors to use the "navigation" metaphor even in one-page applications. <p> Entries that consist of <span title="state object"> <a
   href="#state"> state objects </a> </span> share the same <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> as the entry for the URI itself. Contiguous entries that differ just by fragment identifier must also share the same <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> . <p class="note"> All entries that share the same <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> (and that are therefore merely different states of one particular document) are contiguous by definition. <p> At any point, one of the entries in the session history is the <dfn
   id="current"> current entry </dfn> . This is the entry representing the page in this <span> <a href="#browsing0"> browsing context </a> </span> that is considered the "current" page by the UA. The <span> <a
   href="#current"> current entry </a> </span> is usually an entry for the <span
   title="dom-location-href"> <a href="#href5"> location </a> </span> of the <code> <a href="#documentwindow"> DocumentWindow </a> </code> . However, it can also be one of the entries for <span title="state object"> <a
   href="#state"> state objects </a> </span> added to the history by that document. <p> When the browser's navigation model differs significantly from the sequential model represented by the <code> <a
   href="#history0"> History </a> </code> interface, for example if separate <code> <a href="#documentwindow"> DocumentWindow </a> </code> objects in the session history are all simulatenously displayed and active, then the <span> <a href="#current"> current entry </a> </span> could even be an entry unrelated to the <code> <a href="#history0"> History </a> </code> object's own <code> <a href="#documentwindow"> DocumentWindow </a> </code> object. If, when a method is invoked on a <code> <a href="#history0"> History </a> </code> object, the <span> <a href="#current"> current entry </a> </span> for that <span> <a href="#browsing0"> browsing context </a> </span> 's session history has a different <code> <a href="#documentwindow"> DocumentWindow </a> </code> object than the <code> <a href="#history0"> History </a> </code> object's own <code> <a href="#documentwindow"> DocumentWindow </a> </code> object, then the user agent must raise a <code> NO_MODIFICATION_ALLOWED_ERR </code> DOM exception. (This can only happen if scripts are allowed to run in documents that are not the current document. Typically, however, user agents only allow scripts from the <span> <a href="#current"> current entry </a> </span> to execute.) <p> User agents may <dfn id="discard"> discard </dfn> the DOMs of entries other than the <span> <a href="#current"> current entry </a> </span> , reloading the pages afresh when the user or script navigates back to such pages. This specification does not specify when user agents should discard pages' DOMs and when they should cache them. See the section on the <code
   title="event-load"> load </code> and <code
   title="event-unload"> unload </code> events for more details. </p> <p> Entries that have had their DOM discarded must, for the purposes of the algorithms given below, act as if they had not. When the user or script navigates back or forwards to a page which has no in-memory DOM objects, any other entries that shared the same <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object with it must share the new object as well. <p> When a user agent discards the DOM from an entry in the session history, it must also discard all the entries from the first state object entry for that <code> <a href="#documentwindow"> DocumentWindow </a> </code> object up to and including the last entry for that <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object (including any non-state-object entries in that range, such as entries where the user navigated using fragment identifiers). These entries are not recreated if the user or script navigates back to the page. If there are no state object entries for that <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object then no entries are removed. <h4 id="the-history"> <span class="secno"> <ins>4.7.2. </ins> <del>3.3.2. </del> </span> The <code> <a
   href="#history0"> History </a> </code> interface </h4> <pre class="idl"> interface <dfn id="history0"> History </dfn> { readonly attribute long <span title="dom-history-length"> <a href="#length"> length </a> </span> ; void <span title="dom-history-go"> <a href="#godelta"> go </a> </span> (in long delta); void <span title="dom-history-go-0"> <a href="#go"> go </a> </span> (); void <span title="dom-history-back"> <a href="#back"> back </a> </span> (); void <span title="dom-history-forward"> <a href="#forward"> forward </a> </span> (); void <span title="dom-history-pushState"> <a href="#pushstate"> pushState </a> </span> (in DOMObject data); void <span title="dom-history-clearState"> <a href="#clearstate"> clearState </a> </span> (); <ins>}; </ins> <del>} </del> </pre> <p> The <dfn id="length"
   title="dom-history-length"> <code> length </code> </dfn> attribute of the <code> <a href="#history0"> History </a> </code> interface must return the number of entries in this session history. <p> The actual entries are not accessible from script. </p> <p> The <dfn id="godelta" title="dom-history-go">  <code> go( <var
   title="">  delta </var> ) </code> </dfn> method causes the UA to move the number of steps specified by <var title="">  delta </var> in the session history. <p> If the index of the <span> <a href="#current"> current entry </a> </span> plus <var title="">  delta </var> is less than zero or greater than or equal to the <span title="dom-history-length"> <a href="#length"> number of items in the session history </a> </span> , then the user agent must do nothing. <p> If the <var title="">  delta </var> is zero, then the user agent must act as if the <code title="dom-location-reload"> location.reload() </code> method was called instead. <p> Otherwise, the user agent must cause the current <span> <a
   href="#browsing0"> browsing context </a> </span> to navigate to the specified entry, as described below. The specified entry is the one whose index equals the index of the <span> <a href="#current"> current entry </a> </span> plus <var title="">  delta </var> . <p> If there are any entries with state objects between the current entry and the specified entry (not inclusive), then the user agent must iterate through every entry between the current entry and the specified entry, starting with the entry closest to the current entry, and ending with the one closest to the specified entry. For each entry, if the entry is a state object, the user agent must <span> <a href="#activating1"> activate the state object </a> </span> . <p> If the specified entry has a different <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object than the <span> <a
   href="#current"> current entry </a> </span> then the user agent must make that <code> <a href="#documentwindow"> DocumentWindow </a> </code> object the user's "current" one for that <span> <a href="#browsing0"> browsing context </a> </span> . <p> If the specified entry is a state object, the user agent must <span
   title="activate the state object"> <a href="#activating1"> activate that state object </a> </span> . Otherwise, the user agent must update the current <span title="dom-location"> <a href="#location">  location </a> </span> object to the new location. <p> User agents may also update other aspects of the document view when the location changes in this way, for instance the scroll position, values of form fields, etc. <p> When the user navigates through a <span> <a href="#browsing0"> browsing context </a> </span> , e.g. using a browser's back and forward buttons, the user agent must translate this action into the equivalent invocations of the <code title="dom-history-go"> <a href="#godelta">  history.go( <var
   title="">  delta </var> ) </a> </code> method on the various affected <code
   title="dom-window"> <a href="#window1">   window </a> </code> objects. <p> Some of the other members of the <code> <a
   href="#history0"> History </a> </code> interface are defined in terms of the <code title="dom-history-go"> <a
   href="#godelta"> go() </a> </code> method, as follows: <table> <tbody> <tr> <th> Member <th> Definition </tr> <tr> <td> <dfn id="go" title="dom-history-go-0"> <code> go() </code> </dfn> <td> Must do the same as <code title="dom-history-go"> <a
      href="#godelta"> go(0) </a> </code> <tr> <td> <dfn id="back" title="dom-history-back"> <code> back() </code> </dfn> <td> Must do the same as <code title="dom-history-go"> <a
      href="#godelta"> go(-1) </a> </code> <tr> <td> <dfn id="forward"
      title="dom-history-forward"> <code> forward() </code> </dfn> <td> Must do the same as <code title="dom-history-go"> <a
      href="#godelta"> go(1) </a> </code> </table> <p> The <dfn id="pushstate"
   title="dom-history-pushState"> <code> pushState( <var
   title="">  data </var> ) </code> </dfn> method adds a state object to the history. <p> When this method is invoked, the user agent must first remove from the session history any entries for that <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> from the entry after the <span> <a href="#current"> current entry </a> </span> up to the last entry in the session history that references the same <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object, if any. If the <span> <a href="#current"> current entry </a> </span> is the last entry in the session history, or if there are no entries after the <span> <a
   href="#current"> current entry </a> </span> that reference the same <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object, then no entries are removed. <p> Then, the user agent must add a state object entry to the session history, after the <span> <a href="#current"> current entry </a> </span> , with the specified <var title="">  data </var> as the state object. <p> Finally, the user agent must update the <span> <a href="#current"> current entry </a> </span> to be the this newly added entry. <p class="big-issue"> <ins>There has been a suggestion that pushState() should take a URI and a string; the URI to allow for the page to be bookmarked, and the string to allow the UA to give the page a meaningful title in the history state, if it shows history state. </ins> </p> <p> User agents may limit the number of state objects added to the session history per page. If a page hits the UA-defined limit, user agents must remove the entry immediately after the first entry for that <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object in the session history after having added the new entry. (Thus the state history acts as a FIFO buffer for eviction, but as a LIFO buffer for navigation.) <p> The <dfn id="clearstate"
   title="dom-history-clearState"> <code> clearState() </code> </dfn> method removes all the state objects for the <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object from the session history. <p> When this method is invoked, the user agent must remove from the session history all the entries from the first state object entry for that <code> <a href="#documentwindow"> DocumentWindow </a> </code> object up to the last entry that references that same <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object, if any. <p> Then, if the <span> <a href="#current"> current entry </a> </span> was removed in the previous step, the <span> <a href="#current"> current entry </a> </span> must be set to the last entry for that <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object in the session history. <h4 id="activating"> <span class="secno"> <ins>4.7.3. </ins> <del>3.3.3. </del> </span> <dfn id="activating1"
   title="activate the state object"> Activating state objects </dfn> </h4> <p> When a state object in the session history is activated (which happens in the cases described above), the user agent must fire a <dfn
   id="popstate" title="event-popstate"> <code> popstate </code> </dfn> event in the <code> http://www.w3.org/2001/xml-events </code> namespace on the <span> <a href="#the-body0"> <ins>the </ins> <code> <del>the </del>   body  </code> element </a> </span> using the <code> <a href="#popstateevent"> PopStateEvent </a> </code> interface, with the state object in the <code title="dom-PopStateEvent-state"> <a
   href="#state0"> state </a> </code> attribute. This event bubbles but is not cancelable and has no default action. <p> If there is no " <span> <a href="#the-body0"> <ins>the </ins> <code>  <del>the </del>   body  </code> element </a> </span> " then the event must be fired on the document's <code> Document </code> object instead. </p> <pre
   class="idl"> interface <dfn id="popstateevent"> PopStateEvent </dfn> : Event { readonly attribute DOMObject <span title="dom-PopStateEvent-state"> <a href="#state0"> state </a> </span> ; void <span> <a href="#initpopstateevent"> initPopStateEvent </a> </span> (in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMObject statetArg); void <span> <a href="#initpopstateeventns"> initPopStateEventNS </a> </span> (in DOMString namespaceURIArg, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMObject stateArg); }; </pre> <p> The <dfn id="initpopstateevent"> <code> initPopStateEvent() </code> </dfn> and <dfn id="initpopstateeventns"> <code> initPopStateEventNS() </code> </dfn> methods must initialise the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces. <a
   href="#DOM3Events"> [DOM3EVENTS] </a> <p> The <dfn id="state0"
   title="dom-PopStateEvent-state"> <code> state </code> </dfn> attribute represents the context information for the event. <h4 id="the-location"> <span class="secno"> <ins>4.7.4. </ins> <del>3.3.4. </del> </span> The <code> <a
   href="#location1"> Location </a> </code> interface </h4> <p> The <dfn id="location" title="dom-location">  <code> location </code> </dfn> attribute of the <code> <a href="#window0"> <ins>Window </ins>  <del>DocumentWindow </del> </a> </code> interface must return an object implementing the <code> <a
   href="#location1"> Location </a> </code> interface. <p> <ins>For historical reasons, the </ins> <dfn id="location0"
   title="dom-document-location"> <del>The </del>  <code> location </code> </dfn> attribute of the <code> <a href="#documentwindow"> <ins>DocumentWindow </ins>  <del>Window </del> </a> </code> interface must return the same object as the <code title="dom-location">  <a
   href="#location"> location </a> </code> attribute on its associated <code> <a
   href="#window0"> <ins>Window </ins>  <del>DocumentWindow </del> </a> </code> object. <p> <code> <a href="#location1"> Location </a> </code> objects provide a representation of the URI of their document, and allow the <span> <a
   href="#current"> current entry </a> </span> of the <span> <a
   href="#browsing0"> browsing context </a> </span> 's session history to be changed, by adding or replacing entries in the <code
   title="dom-history"> <a href="#history"> history </a> </code> object. <pre class="idl"> interface <dfn id="location1"> Location </dfn> { readonly attribute DOMString <span title="dom-location-hash"> hash </span> ; readonly attribute DOMString <span title="dom-location-host"> host </span> ; readonly attribute DOMString <span title="dom-location-hostname"> hostname </span> ; readonly attribute DOMString <span title="dom-location-href"> <a href="#href5"> href </a> </span> ; readonly attribute DOMString <span title="dom-location-pathname"> pathname </span> ; readonly attribute DOMString <span title="dom-location-port"> port </span> ; readonly attribute DOMString <span title="dom-location-protocol"> protocol </span> ; readonly attribute DOMString <span title="dom-location-search"> search </span> ; void <span title="dom-location-assign"> <a href="#assign"> assign </a> </span> (in DOMString url); void <span title="dom-location-replace"> <a href="#replace"> replace </a> </span> (in DOMString url); void <span title="dom-location-reload"> reload </span> (); <ins>}; </ins> <del>} </del> </pre> <p> In the ECMAScript DOM binding, objects implementing this interface must stringify to the same value as the <code title="dom-location-href"> <a
   href="#href5"> href </a> </code> attribute. <p id="settingLocation"> In the ECMAScript DOM binding, the <code
   title=""> location </code> members of the <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> and <code> <a
   href="#window0"> Window </a> </code> interfaces behave as if they had a setter: user agents must treats attempts to set these <code
   title=""> location </code> attribute as attempts at setting the <code
   title="dom-location-href"> <a href="#href5"> href </a> </code> attribute of the relevant <code> <a href="#location1"> Location </a> </code> object instead. <p> The <dfn id="href5" title="dom-location-href"> <code> href </code> </dfn> attribute returns the address of the page represented by the associated <code> <a href="#documentwindow"> DocumentWindow </a> </code> object, as an absolute IRI reference. <p> On setting, the user agent must act as if the <code title="dom-location-assign"> <a
   href="#assign"> assign() </a> </code> method had been called with the new value as its argument. <p> When the <dfn id="assign" title="dom-location-assign">  <code> assign( <var
   title="">  url </var> ) </code> </dfn> method is invoked, the UA must remove all the entries after the <span> <a href="#current">  current entry </a> </span> in its <code> <a href="#documentwindow">  DocumentWindow </a> </code> 's <code> <a
   href="#history0"> History </a> </code> object, add a new entry, with the given <var title="">  url </var> , at the end of the list (asynchronously loading the new page if necessary), and then advance to that page as if the <code title="dom-history-forward">  <a
   href="#forward"> history.forward() </a> </code> method had been invoked. <p> When the <dfn id="replace"
   title="dom-location-replace"> <code> replace( <var
   title="">  url </var> ) </code> </dfn> method is invoked, the UA must act as if the <code title="dom-location-assign"> <a
   href="#assign">   assign() </a> </code> method had been invoked, but with the additional step of removing the entry that was the <span> <a
   href="#current">  current entry </a> </span> before the method call after the above steps (thus simply causing the current page to be replaced by the new one). <p> In both cases, if the location before the method call would differ from the location after the method only in terms of the fragment identifier, then the user agent must use the same <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object, updating only the scroll position in the document's view(s) appropriately. <p> Relative <var title="">  url </var> arguments for <code
   title="dom-location-assign"> <a href="#assign"> assign() </a> </code> and <code title="dom-location-replace"> <a href="#replace"> replace() </a> </code> must be resolved relative to the base URI of the script that made the method call. </p> <p class="big-issue"> The component parts and .reload() are yet to be defined. If anyone can come up with a decent definition, let me know. </p> <h4 id="history-notes"> <span class="secno"> <ins>4.7.5. </ins> <del>3.3.5. </del> </span> Implementation notes for session history </h4> <p> <em> This section is non-normative. </em> <p> The <code> <a href="#history0"> History </a> </code> interface is not meant to place restrictions on how implementations represent the session history to the user. <p> For example, session history could be implemented in a tree-like manner, with each page having multiple "forward" pages. This specification doesn't define how the linear list of pages in the <code title="dom-history"> <a
   href="#history"> history </a> </code> object are derived from the actual session history as seen from the user's perspective. <p> Similarly, a page containing two <code> iframe </code> s has a <code
   title="dom-history"> <a href="#history"> history </a> </code> object distinct from the <code> iframe </code> s' <code title="dom-history"> <a
   href="#history"> history </a> </code> objects, despite the fact that typical Web browsers present the user with just one "Back" button, with a session history that interleaves the navigation of the two inner frames and the outer page. <p> <strong> Security: </strong> It is suggested that to avoid letting a page "hijack" the history navigation facilities of a UA by abusing <code
   title="dom-history-pushState"> <a href="#pushstate"> pushState() </a> </code> , the UA provide the user with a way to jump back to the previous page (rather than just going back to the previous state). For example, the back button could have a drop down showing just the pages in the session history, and not showing any of the states. Similarly, an aural browser could have two "back" commands, one that goes back to the previous state, and one that jumps straight back to the previous page. <p> <ins>In addition, a user agent could ignore calls to </ins> <code
   title="dom-history-pushState"> <a href="#pushstate"> <ins>pushState() </ins> </a> </code> <ins>that are invoked on a timer, or from event handlers that do not represent a clear user action, or that are invoked in rapid succession. </ins> <h3 id="scs-client-side">  <span class="secno"> <ins>4.8. </ins> </span> <span
   title="SCS"> <a href="#scs"> <ins>[SCS] </ins> </a> <del>3.4. </del> </span> Client-side session and persistent storage </h3> <h4 id="introduction2">  <span class="secno"> <ins>4.8.1. </ins> <del>3.4.1. </del> </span> Introduction </h4> <p> <em> This section is non-normative. </em> <p> This specification introduces two related mechanisms, similar to HTTP session cookies <a href="#refsRFC2965"> [RFC2965] </a> , for storing structured data on the client side. <p> The first is designed for scenarios where the user is carrying out a single transaction, but could be carrying out multiple transactions in different windows at the same time. <p> Cookies don't really handle this case well. For example, a user could be buying plane tickets in two different windows, using the same site. If the site used cookies to keep track of which ticket the user was buying, then as the user clicked from page to page in both windows, the ticket currently being purchased would "leak" from one window to the other, potentially causing the user to buy two tickets for the same flight without really noticing. <p> To address this, this specification introduces the <code
   title="dom-sessionStorage"> <a
   href="#sessionstorage"> sessionStorage </a> </code> DOM attribute. Sites can add data to the session storage, and it will be accessible to any page from that domain opened in that window. <div class="example"> <p> For example, a page could have a checkbox that the user ticks to indicate that he wants insurance: </p> <pre> &lt;label> &lt;input type="checkbox" onchange="sessionStorage.insurance = checked"> I want insurance on this trip. &lt;/label> </pre> <p> A later page could then check, from script, whether the user had checked the checkbox or not: </p> <pre> if (sessionStorage.insurance) { ... } </pre> <p> If the user had multiple windows opened on the site, each one would have its own individual copy of the session storage object. </p> </div> <p> The second storage mechanism is designed for storage that spans multiple windows, and lasts beyond the current session. <p> The <code title="dom-globalStorage"> <a
   href="#globalstorage"> globalStorage </a> </code> DOM attribute is used to access the global storage areas. <div class="example"> <p> The site at example.com can display a count of how many times the user has loaded its page by putting the following at the bottom of its page: </p> <pre> &lt;p> You have viewed this page &lt;span id="count">an untold number of&lt;/span> time(s). &lt;/p> &lt;script> var storage = globalStorage['example.com']; if (!storage.pageLoadCount) storage.pageLoadCount = 0; storage.pageLoadCount += 1; document.getElementById('count').textContent = storage.pageLoadCount; &lt;/script> </pre> </div> <p> Each domain and each subdomain has its own separate storage area. Subdomains can access the storage areas of parent domains, and domains can access the storage areas of subdomains. <ul> <li> <code> globalStorage[''] </code> is accessible to all domains. <li> <code> globalStorage['com'] </code> is accessible to all .com domains <li> <code> globalStorage['example.com'] </code> is accessible to example.com and any of its subdomains <li> <code> globalStorage['www.example.com'] </code> is accessible to www.example.com and example.com, but not www2.example.com. </ul> <p> Storage areas (both session storage and global storage) can store most simple data types (numbers, strings, booleans, etc), as well as simple JS objects, and DOM nodes. Functions and objects with methods can't be stored, however. <h4 id="the-storage"> <span class="secno"> <ins>4.8.2. </ins> <del>3.4.2. </del> </span> The <code> <a
   href="#storage"> Storage </a> </code> interface </h4> <pre
   class="idl"> // DOMUserData is defined in DOM3 Core <a href="#refsDOM3CORE"> [DOM3CORE] </a> interface <dfn id="storage"> Storage </dfn> { readonly attribute unsigned long <span title="dom-storage-length"> <a href="#length0"> length </a> </span> ; DOMString <span title="dom-storage-key"> <a href="#keyn"> key </a> </span> (in unsigned long index); <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMUserData"> DOMUserData </a> <span title="dom-storage-getItem"> <a href="#getitem"> getItem </a> </span> (in DOMString key); void <span title="dom-storage-setItem"> <a href="#setitem"> setItem </a> </span> (in DOMString key, in <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMUserData"> DOMUserData </a> data); void <span title="dom-storage-removeItem"> <a href="#removeitem"> removeItem </a> </span> (in DOMString key); }; </pre> <p> Each <code> <a href="#storage"> Storage </a> </code> object provides access to a list of key/value pairs, which are sometimes called items. Keys are strings, and any string (including the empty string) is a valid key. Values can be of any type. <p> In the ECMAScript binding, enumerating the object must enumerate through the currently stored keys (not the values, and not the actual members of the interface). In the ECMAScript binding, <code> <a
   href="#storage"> Storage </a> </code> objects must support dereferencing such that getting a property that is not a member of the object (i.e. is neither a member of the <code> <a href="#storage"> Storage </a> </code> interface nor of <code> Object </code> ) must invoke the <code
   title="dom-storage-getItem"> <a href="#getitem"> getItem() </a> </code> method with the property's name as the argument, and setting such a property must invoke the <code title="dom-storage-setItem"> <a
   href="#setitem"> setItem() </a> </code> method with the property's name as the first argument and the given value as the second argument. <p> Each <code> <a href="#storage"> Storage </a> </code> object is associated with a list of key/value pairs when it is created, as defined in the sections on the <code title="dom-sessionStorage"> <a
   href="#sessionstorage"> sessionStorage </a> </code> and <code
   title="dom-globalStorage"> <a
   href="#globalstorage"> globalStorage </a> </code> attributes. Multiple separate objects implementing the <code> <a
   href="#storage"> Storage </a> </code> interface can all be associated with the same list of key/value pairs simultaneously. <p> The <dfn id="length0"
   title="dom-storage-length"> <code> length </code> </dfn> attribute must return the number of key/value pairs currently present in the list associated with the object. <p> The <dfn id="keyn" title="dom-storage-key">  <code> key( <var
   title="">  n </var> ) </code> </dfn> method must return the name of the <var
   title="">  n </var> th key in the list. The order of keys is user-agent defined, but must be consistent within an object between changes to the number of keys. (Thus, <span title="dom-storage-setItem"> <a
   href="#setitem"> adding </a> </span> or <span
   title="dom-storage-removeItem"> <a href="#removeitem"> removing </a> </span> a key may change the order of the keys, but merely changing the value of an existing key must not.) If <var title="">  n </var> is less than zero or greater than or equal to the number of key/value pairs in the object, then this method must raise an <code> INDEX_SIZE_ERR </code> exception. <p> The <dfn id="getitem" title="dom-storage-getItem">  <code> getItem( <var
   title="">  key </var> ) </code> </dfn> method must return the <span> <a
   href="#restored">  restored value </a> </span> for the key/value pair with the given <var title="">  key </var> . If the given <var title="">  key </var> does not exist in the list associated with the object, then this method must return null. <p> The <dfn id="setitem" title="dom-storage-setItem">  <code> setItem( <var
   title="">  key </var> , <var title="">  value </var> ) </code> </dfn> method must first check if a key/value pair with the given <var title="">  key </var> already exists in the list associated with the object. If it does not, then a new key/value pair must be added to the list, with the given <var
   title="">  key </var> . Then, the key/value pair with the given <var
   title="">  key </var> must have its value updated so that if it is retrieved it will return <span> the restored value </span> for for the given <dfn
   id="original">  original value </dfn> , the value given in the <var
   title=""> value </var> argument. <p> When the <code title="dom-storage-setItem"> <a
   href="#setitem"> setItem() </a> </code> method is invoked, events are fired on other <code> <a href="#documentwindow"> DocumentWindow </a> </code> objects that can access the newly stored data, as defined in the sections on the <code title="dom-sessionStorage"> <a
   href="#sessionstorage"> sessionStorage </a> </code> and <code
   title="dom-globalStorage"> <a
   href="#globalstorage"> globalStorage </a> </code> attributes. <p> The <dfn id="removeitem"
   title="dom-storage-removeItem"> <code> removeItem( <var
   title="">  key </var> ) </code> </dfn> method must cause the key/value pair with the given <var title="">  key </var> to be removed from the list associated with the object, if it exists. If no item with that key exists, the method must do nothing. <p> The <code title="dom-storage-setItem"> <a
   href="#setitem"> <ins>setItem() </ins> </a> </code> <ins>and </ins> <code
   title="dom-storage-removeItem"> <a
   href="#removeitem"> <ins>removeItem() </ins> </a> </code> <ins>methods must be atomic with respect to failure. That is, changes to the data storage area must either be successful, or the data storage area must not be changed at all. </ins> <p> <ins>The </ins> <dfn id="restored"> restored value </dfn> (returned by <code
   title="dom-storage-getItem"> <a href="#getitem"> getItem() </a> </code> ) of a given <span> <a href="#original"> original value </a> </span> (as passed to <code title="dom-storage-setItem"> <a href="#setitem"> setItem() </a> </code> ) is defined as follows, depending on the type of the <span> <a
   href="#original"> original value </a> </span> : <dl class="switch">  <dt> <code> Number </code> s, <code> Boolean </code> s, <code> DOMTimeStamp </code> s, <code> DOMString </code> s, <code> undefined </code> , <code> null </code> , and other "plain old data" types <dd> The restored value must be the same as the original value. <dt> DOM <code> Node </code> objects <dd> <p> The restored value must be a new DOM <code> Node </code> , which has the same <code> nodeType </code> , <code> nodeName </code> , <code> nodeValue </code> , <code> namespaceURI </code> , and <code> baseURI </code> as the original. In addition, for each entry in the original node's <code> attributes </code> and <code> childNodes </code> lists, the new object must have a corresponding entry that has been restored in the same way, in the same order. (In other words, the restoring recurses.) The <code> ownerDocument </code> attributes of the restored <code> Node </code> objects must be set to the value of the <code
     title="dom-document">  document </code> attribute of the <code> <a
     href="#window0">  Window </a> </code> object that the <code> <a
     href="#storage">  Storage </a> </code> object is associated with.  User <ins>agents must not restore any other state. In particular, </ins> <a
     href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-setUserData"> <ins>user </ins> data </a> , event handlers, and other <ins>DOM </ins> attributes on the original <code> Node </code> s (e.g. <code> isId </code> or <code> specified </code> on attributes, or <code> domConfig </code> on documents) are not restored on the new <code> Node </code> s. <a href="#refsDOM3CORE"> [DOM3CORE] </a> </p> <p class="note"> <ins>The contents of the bitmaps of </ins> <code> <a
     href="#canvas"> <ins>canvas </ins> </a> </code> <ins>elements and the value and state of </ins> <span> <ins>form controls </ins> </span> <ins>are therefore </ins> <em> <ins>not </ins> </em> <ins>stored when a node is placed in a </ins> <code> <a href="#storage"> <ins>Storage </ins> </a> </code> <ins>object, as those aspects are not represented in the core DOM </ins> <code> <ins>Node </ins> </code> <ins>interface. </ins> </p> <dt> E4X XML objects <dd class="big-issue"> <ins>... </ins> <dt> <ins>Arrays </ins> <dd class="big-issue"> ... <dt> Other objects <dd> The restored value must be a new object, where for each enumerable property without a custom getter in the original object, the new object has a property with the same name and a value restored as if the property on the original object was itself treated as an original value to restore (i.e. the restoring recurses through all the properties of the object). If, while recursing through objects in this way, a reference to an object occurs more than once, only the occurance that is found first in a depth-first search of the original value must be restored; all other occurances must be restored as <code> null </code> . <span class="issue"> <ins>This section is either too vague or too specific. We should probably just give language-binding-specific text for this, in a way that it defines how to take a JS Object and turn it into a Perl %hash, etc. </ins> </span> </dl> <p> Subsequent calls to <code title="dom-storage-getItem"> <a
   href="#getitem"> getItem() </a> </code> for the same item must return new objects each time. <h4 id="the-sessionstorage"> <span class="secno"> <ins>4.8.3. </ins> <del>3.4.3. </del> </span> The <code
   title="dom-sessionStorage"> <a
   href="#sessionstorage"> sessionStorage </a> </code> attribute </h4> <p> The <dfn id="sessionstorage"
   title="dom-sessionStorage"> <code> sessionStorage </code> </dfn> attribute represents the storage area specific to the current <span> <a
   href="#top-level"> top-level browsing context </a> </span> . <p> Each <span> <a href="#top-level"> top-level browsing context </a> </span> has a unique set of session storage areas, one for each domain. <p> <ins>User agents should not expire data from a browsing context's session storage areas, but may do so when the user requests that such data be deleted, or when the UA detects that it has limited storage space, or for security reasons. User agents should always avoid deleting data while a script that could access that data is running. When a top-level browsing context is destroyed (and therefore permanently inaccessible to the user) the data stored in its session storage areas can be discarded with it, as the API described in this specification provides no way for that data to ever be subsequently retrieved. </ins> <p class="note"> <ins>The lifetime of a browsing context can be unrelated to the lifetime of the actual user agent process itself, as the user agent may support resuming sessions after a restart. </ins> <p> When a new <code> <a href="#documentwindow"> DocumentWindow </a> </code> is created, the user agent must check to see if the document's <span> <a
   href="#top-level"> top-level browsing context </a> </span> has allocated a session storage area for that <span> <a href="#domain"> document's <ins>domain </ins> </a> </span> <ins>. </ins> <del>domain. </del> If it <ins>has </ins> <del>does </del> not, a new storage area for that document's domain must be created. <p> The <code> <a href="#storage"> Storage </a> </code> object for the document's associated <code> <a href="#window0"> Window </a> </code> object's <code title="dom-sessionStorage"> <a
   href="#sessionstorage"> sessionStorage </a> </code> attribute must then be associated with the domain's session storage area. <p> When a new <span> <a href="#top-level"> top-level browsing context </a> </span> is created by cloning an existing <span> <a
   href="#browsing0"> browsing context </a> </span> , the new browsing context must start with the same session storage areas as the original, but the two sets must from that point on be considered separate, not affecting each other in any way. <p> When a new <span> <a href="#top-level"> top-level browsing context </a> </span> is created by a script in an existing <span> <a
   href="#browsing0"> browsing context </a> </span> , or by the user following a link in an existing browsing context, or in some other way related to a specific <code> <a href="#documentwindow"> DocumentWindow </a> </code> , then, if the new context's first <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> has the same <span
   title="document's domain"> <a href="#domain"> domain </a> </span> as the <code> <a href="#documentwindow"> DocumentWindow </a> </code> from which the new context was created, the new browsing context must start with a single session storage area. That storage area must be a copy of that domain's session storage area in the original browsing <ins>context, which from that point on must be considered separate, with the two storage areas </ins> <del>context.  This specification does </del> not <ins>affecting each </ins> <del>yet define exactly how the user agent determines the domain for a document. For documents with URIs that contain domain components, the obvious answer is to use that domain component as the domain; for </del> other <ins>in any way. </ins> <del>schemes, e.g. for  data:  or  javascript:  pages, it is suggested that user agents use the domain of the site where the link was found, or a globally unique domain if the user went to the page directly. </del> </p> <p id="sessionStorageEvent"> When the <code title="dom-storage-setItem"> <a
   href="#setitem"> setItem() </a> </code> method is called on a <code> <a
   href="#storage"> Storage </a> </code> object <var title="">  x </var> that is associated with a session storage area, then in every <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object whose <code> <a
   href="#window0"> Window </a> </code> object's <code
   title="dom-sessionStorage"> <a
   href="#sessionstorage"> sessionStorage </a> </code> attribute's <code> <a
   href="#storage"> Storage </a> </code> object is associated with the same storage area, other than <var title="">  x </var> , a <code
   title="event-storage"> <a href="#storage0">   storage </a> </code> event must be fired, as <span title="event-storage">  <a href="#storage0"> described below </a> </span> . <h4 id="the-globalstorage"> <span class="secno"> <ins>4.8.4. </ins> <del>3.4.4. </del> </span> The <code
   title="dom-globalStorage"> <a
   href="#globalstorage"> globalStorage </a> </code> attribute </h4> <pre class="idl"> interface <dfn id="storagelist"> StorageList </dfn> { <span> <a href="#storage"> Storage </a> </span> <span title="dom-storagelist-domain"> <a href="#getdomain"> getDomain </a> </span> (in DOMString domain); }; </pre> <p> The <dfn id="globalstorage"
   title="dom-globalStorage">  <code> globalStorage </code> </dfn> object provides a <code> <a href="#storage"> Storage </a> </code> object for each domain. <p> In the ECMAScript binding, <code> <a
   href="#storagelist"> StorageList </a> </code> objects must support dereferencing such that getting a property that is not a member of the object (i.e. is neither a member of the <code> <a
   href="#storagelist"> StorageList </a> </code> interface nor of <code> Object </code> ) must invoke the <code
   title="dom-storagelist-domain"> <a href="#getdomain"> getDomain() </a> </code> method with the property's name as the argument. <p> User agents must have a set of global storage areas, one for each domain. <p> <ins>User agents should only expire data from the global storage areas for security reasons or when requested to do so by the user. User agents should always avoid deleting data while a script that could access that data is running. Data stored in global storage areas should be considered potentially user-critical. It is expected that Web applications will use the global storage areas for storing user-written documents. </ins> <p> The <dfn id="getdomain"
   title="dom-storagelist-domain"> <code> getDomain( <var
   title=""> domain </var> ) </code> </dfn> method tries to returns a <code> <a
   href="#storage"> Storage </a> </code> object associated with the given domain, according to the rules that follow. <div id="splitDomain"> <p> The <var title=""> domain </var> must first be split into an array of strings, by splitting the string at "." characters (U+002E FULL STOP). If the <var title=""> domain </var> argument is the empty string, then the array is empty as well. If the <var title=""> domain </var> argument is not empty but has no dots, then the array has one item, which is equal to the <var title=""> domain </var> argument. If the <var title=""> domain </var> argument contains consecutive dots, there will be empty strings in the array (e.g. the string "hello..world" becomes split into the three strings "hello", "", and "world", with the middle one being the empty string). </p> <p> Each component of the array must then have the IDNA ToASCII algorithm applied to it, with both the AllowUnassigned and UseSTD3ASCIIRules flags set. <a href="#refsRFC3490"> [RFC3490] </a> If ToASCII fails to convert one of the components of the string, e.g. because it is too long or because it contains invalid characters, then the user agent must raise a <code> SYNTAX_ERR </code> exception. <a href="#refsDOM3CORE"> [DOM3CORE] </a> The components after this step consist of only US-ASCII characters. </p> <p> The components of the array must then be converted to lowercase. Since only US-ASCII is involved at this step, this only requires converting characters in the range A-Z to the corresponding characters in the range a-z. </p> </div> <p> The resulting array is used in a comparison with another array, as described below. In addition, its components are concatenated together, each part separated by a dot (U+002E), to form the <dfn
   id="normalised"> normalised requested domain </dfn> . <p class="example"> If the original <var title=""> domain </var> was "&Aring;sg&aring;rd.Example.Com", then the resulting array would have the three items "xn--sgrd-poac", "example", and "com", and the normalised requested domain would be "xn--sgrd-poac.example.com". <p> Next, the <span title="script's domain"> <a href="#domain0"> <ins>script's </ins> <del>page's </del> own domain </a> </span> is processed to find if it is allowed to access the requested domain.  <del>This specification does not yet define exactly how the user agent determines the domain for a document. For documents with URIs that contain domain components, the obvious answer is to use that domain component as the domain; for other schemes, e.g. for  data:  or  javascript:  pages, it is suggested that user agents use the domain of the site where the link was found, or a globally unique domain if the user went to the page directly. </del>  <p> If the <ins>script's </ins> <del>page's </del> domain name in not known, e.g. if only the server's IP address is known, and the <span> <a href="#normalised"> normalised requested domain </a> </span> is not the empty string, then the user agent must raise a <span> security exception </span> . <p class="note"> If the <span> <a href="#normalised"> normalised requested domain </a> </span> is the empty string, then the rest of this algorithm can be skipped. This is because in that situation, the comparison of the two arrays below will always find them to be the same &mdash; the first array in such a situation is also empty and so permission to access that storage area will always be given. <p> If the <ins>script's </ins> <del>page's </del> domain contains no dots (U+002E) then the string " <code> .localdomain </code> " must be appended to the <ins>script's </ins> <del>page's </del> domain. <p> Then, the <ins>script's </ins> <del>page's </del> domain must be turned into an array, being split, converted to ASCII, and lowercased as described for the <var
   title=""> domain </var> argument <a href="#splitDomain"> above </a> . <p> Of the two arrays, the longest one must then be shortened to the length of the shorter one, by dropping items from the start of the array. <div class="example"> <p> If the <var title=""> domain </var> argument is "www.example.com" and the <ins>script's </ins> <del>page's </del> domain is "example.com" then the first array will be a three item array ("www", "example", "com"), and the second will be a two item array ("example", "com"). The first array is therefore shortened, dropping the leading parts, making both into the same array ("example", "com"). </p> </div> <p> If the two arrays are not component-for-component identical in literal string comparisons, then the user agent must then raise a <span> security exception </span> . <p> Otherwise, the user agent must check to see if it has allocated global storage area for the <span> <a href="#normalised"> normalised requested domain </a> </span> . If it <ins>has </ins> <del>does </del> not, a new storage area for that domain must be created. <p> The user agent must then create a <code> <a
   href="#storage"> Storage </a> </code> object associated with that domain's global storage area, and return it. <p> When the requested <var title=""> domain </var> is a top level domain, or the empty string, or a country-specific sub-domain like "co.uk" or "ca.us", the associated global storage area is known as <dfn
   id="public"> public storage area </dfn> <div id="globalStorageEvent"> <p> The <code title="dom-storage-setItem"> <a
    href="#setitem"> setItem() </a> </code> method might be called on a <code> <a
    href="#storage"> Storage </a> </code> object that is associated with a global storage area for a domain <var title="">  d </var> , created by a <code> <a href="#storagelist">  StorageList </a> </code> object associated with a <code> <a href="#window0"> Window </a> </code> object <var
    title="">  x </var> . Whenever this occurs, a <code title="event-storage"> <a
    href="#storage0"> storage </a> </code> event must be fired, as described below, in every <code> <a href="#documentwindow"> DocumentWindow </a> </code> object that matches the following conditions: </p> <ul> <li> Its <code> <a href="#window0"> Window </a> </code> object is not <var
     title="">  x </var> , and <li> Its <code> <a href="#window0"> Window </a> </code> object's <code
     title="dom-sessionStorage"> <a
     href="#sessionstorage"> globalStorage </a> </code> attribute's <code> <a
     href="#storagelist"> StorageList </a> </code> object's <code
     title="dom-storagelist-domain"> <a
     href="#getdomain"> getDomain() </a> </code> method would not raise a security exception according to the rules above if it was invoked with the domain <var title="">  d </var> . </ul> <p> In other words, every other document that has access to that domain's global storage area is notified of the change. </p> </div> <h4 id="the-storage0"> <span class="secno"> <ins>4.8.5. </ins> <del>3.4.5. </del> </span> The <code
   title="event-storage"> <a href="#storage0"> storage </a> </code> event </h4> <p> The <dfn id="storage0" title="event-storage"> <code> storage </code> </dfn> event is fired in a <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> when a storage area changes, as described in the previous two sections ( <a
   href="#sessionStorageEvent"> for session storage </a> , <a
   href="#globalStorageEvent"> for global storage </a> ). <p> When this happens, a <code> <a href="#storage"> storage </a> </code> event in the <code> http://www.w3.org/2001/xml-events </code> namespace, which bubbles, is not cancelable, has no default action, and which uses the <code> <a href="#storageevent"> StorageEvent </a> </code> interface described below, must be fired on <span> <a href="#the-body0"> <ins>the </ins> <code> <del>the </del>   body </code> <ins>element </ins> </a> </span> <ins>, </ins>   <del>element, </del> or, if there isn't one, on the <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object itself.  <p> However, it is possible (indeed, for session storage areas, likely) that the target <code> <a href="#documentwindow"> DocumentWindow </a> </code> object is not active at that time. For example, it might not be the <span> <a href="#current"> current entry </a> </span> in the session history; user agents typically stop scripts from running in pages that are in the history. In such cases, the user agent must instead delay the firing of the event until such time as the <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object in question becomes active again. <p> When there are multiple delayed <code> <a
   href="#storage"> storage </a> </code> events for the same <code> <a
   href="#documentwindow"> DocumentWindow </a> </code> object, user agents should coalesce events with the same <code
   title="dom-storageevent-domain"> <a href="#domain1">  domain </a> </code> value (dropping duplicates). <p> If the DOM of a page that has delayed <code> <a
   href="#storage"> storage </a> </code> events queued up is <span
   title="discard"> <a href="#discard"> discarded </a> </span> , then the delayed events are dropped as well. <pre
   class="idl"> interface <dfn id="storageevent"> StorageEvent </dfn> : Event { readonly attribute DOMString <span title="dom-storageEvent-domain"> <a href="#domain1">  domain </a> </span> ; void <span> <a href="#initstorageevent"> initStorageEvent </a> </span> (in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString domainArg); void <span> <a href="#initstorageeventns"> initStorageEventNS </a> </span> (in DOMString namespaceURIArg, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString domainArg); }; </pre> <p> The <dfn id="initstorageevent"> <code> initStorageEvent() </code> </dfn> and <dfn id="initstorageeventns"> <code> initStorageEventNS() </code> </dfn> methods must initialise the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces. <a
   href="#DOM3Events"> [DOM3EVENTS] </a> <p> The <dfn id="domain1"
   title="dom-storageEvent-domain">  <code> domain </code> </dfn> attribute of the <code> <a href="#storageevent"> StorageEvent </a> </code> event object must be set to the name of the domain associated with the storage area that changed if that storage area is a global storage area, or the string " <code> #session </code> " if it was a session storage area. </p> <h4 id="miscellaneous0"> <span class="secno"> <ins>4.8.6. </ins> <del>3.4.6. </del> </span> Miscellaneous implementation requirements for storage areas </h4> <h5 id="disk-space"> <span class="secno"> <ins>4.8.6.1. </ins> <del>3.4.6.1. </del> </span> Disk space </h5> <p> User agents should limit the total amount of space allowed for a domain based on the domain of the page setting the value. <p> User agents should not limit the total amount of space allowed on a per-storage-area basis, otherwise a site could just store data in any number of subdomains, e.g. storing up to the limit in a1.example.com, a2.example.com, a3.example.com, etc, circumventing per-domain limits. <p> <ins>User agents should consider additional quota mechanisms (for example limiting the amount of space provided to a domain's subdomains as a group) so that hostile authors can't run scripts from multiple subdomains all adding data to the global storage area in an attempted denial-of-service attack. </ins> <p> User agents may prompt the user when per-domain space quotas are reached, allowing the user to grant a site more space. This enables sites to store many user-created documents on the user's computer, for instance. <p> User agents should allow users to see how much space each domain is using. <p> If the storage area space limit is reached during a <code
   title="dom-storage-setItem"> <a href="#setitem"> setItem() </a> </code> call, the user agent should raise an exception. </p> <p> A mostly arbitrary limit of five megabytes per domain is recommended. Implementation feedback is welcome and will be used to update this suggestion in future. <h5 id="threads"> <span class="secno"> <ins>4.8.6.2. </ins> <del>3.4.6.2. </del> </span> Threads </h5> <p> Multiple browsing contexts must be able to access the global storage areas simultaneously in a predictable manner. <ins>Scripts must not be able to detect any concurrent script execution. </ins> <p> <ins>This is required to guarentee that the </ins> <code
   title="dom-storage-length"> <a href="#length0"> <ins>length </ins> </a> </code> <ins>attribute of a </ins> <code> <a href="#storage"> <ins>Storage </ins> </a> </code> <ins>object never changes while a script is executing, other than in a way that is predictable by the script itself. </ins> <p> <ins>There are various ways of implementing this requirement. One is that </ins> <del>Specifically, </del> if a script running in one browsing context accesses a global storage area, <ins>the UA blocks </ins> scripts in other browsing contexts <del>must block </del> when <ins>they try </ins> <del>trying </del> to access <em> any </em> global storage area until the first script has executed to completion. <ins>(Similarly, </ins> <del>Similarly, </del> when a script in one browsing context accesses its session storage area, any scripts that have the same top level browsing context and the same domain <ins>would </ins> <del>must </del> block when accessing their session storage area until the first script has executed to <ins>completion.) Another (potentially more efficient but probably more complex) implementation strategy is to use optimistic transactional script execution. This specification does not require any particular implementation strategy, so long as the requirement </ins> <del>completion.  The </del> above <ins>is met. </ins> <del>requirements are required to guarentee that the   length   attribute of a   Storage   object never changes while a script is executing, other than in a way that is predictable by the script itself.  If someone can come up with another way of preventing such changes without requiring as much blocking, and without running the risk of deadlocks, let me know. </del> <h4 id="security"> <span class="secno"> <ins>4.8.7. </ins> <del>3.4.7. </del> </span> Security and privacy </h4> <h5 id="user-tracking"> <span class="secno"> <ins>4.8.7.1. </ins> <del>3.4.7.1. </del> </span> User tracking </h5> <p> A third-party advertiser (or any entity capable of getting content distributed to multiple sites) could use a unique identifier stored in its domain's global storage area to track a user across multiple sessions, building a profile of the user's interests to allow for highly targetted advertising. In conjunction with a site that is aware of the user's real identity (for example an e-commerce site that requires authenticated credentials), this could allow oppressive groups to target individuals with greater accuracy than in a world with purely anonymous Web usage. <p> The <code title="dom-globalStorage"> <a
   href="#globalstorage"> globalStorage </a> </code> object also introduces a way for sites to cooperate to track users over multiple domains, by storing identifying data in " <span title="public storage area"> <a
   href="#public">   public </a> </span> " top-level domain storage area, accessible by any domain. <p> There are a number of techniques that can be used to mitigate the risk of user tracking: <ul> <li> <p> Blocking third-party storage: user agents may restrict access to the <code title="dom-globalStorage"> <a
     href="#globalstorage"> globalStorage </a> </code> object to scripts originating at the domain of the top-level document of the <span> <a
     href="#browsing0"> browsing context </a> </span> . </p> <p> This blocks a third-party site from using its private storage area for tracking a user, but top-level sites could still cooperate with third parties to perferm user tracking by using the " <span title="public
     storage area"> <a href="#public"> public </a> </span> " storage area. </p> <li> <p> Expiring stored data: user agents may automatically delete stored data after a period of time. </p> <p> For example, a user agent could treat the global storage area as session-only storage, deleting the data once the user had closed all the <span> browsing contexts </span> that could access it. </p> <p> This can restrict the ability of a site to track a user, as the site would then only be able to track the user across multiple sessions when he authenticates with the site itself (e.g. by making a purchase or logging in to a service). </p> <li> <p> Blocking access to the top-level domain (" <span title="public storage
     area"> <a href="#public"> public </a> </span> ") storage areas: user agents may prevent domains from storing data in and reading data from the top-level domain entries in the <code title="dom-globalStorage"> <a
     href="#globalstorage">  globalStorage </a> </code> object. </p> <p> In practice this requires a detailed list of all the "public" second-level (and third-level) domains. For example, content at the domain <code> www.example.com </code> would be allowed to access <code> example.com </code> data but not <code> com </code> data; content at the domain <code> example.co.uk </code> would be allowed access to <code> example.co.uk </code> but not <code> co.uk </code> or <code> uk </code> ; and content at <code> <ins>example.chiyoda.tokyo.jp </ins> <del>example.chiyoda.tokyo.com </del> </code> would be allowed access to <code> <ins>example.chiyoda.tokyo.jp </ins> <del>example.chiyoda.tokyo.com </del> </code> but not <code> chiyoda.tokyo.jp </code> , <code> tokyo.jp </code> , or <code> jp </code> , while content at <code> example.metro.tokyo.jp </code> would be allowed access to both <code> example.metro.tokyo.jp </code> and <code> metro.tokyo.jp </code> but not <code> tokyo.jp </code> or <code> jp </code> . The problem is even more convoluted when one considers private domains with third-party subdomains such as <code> dyndns.org </code> or <code> uk.com </code> . </p> <p> Blocking access to the " <span title="public storage area"> <a
     href="#public"> public </a> </span> " storage areas can also prevent innocent sites from cooperating to provide services beneficial to the user. </p> <li> <p> Treating persistent storage as cookies: user agents may present the persistent storage feature to the user in a way that does not distinguish it from HTTP session cookies. <a
     href="#refsRFC2965"> [RFC2965] </a> </p> <p> This might encourage users to view persistent storage with healthy suspicion. </p> <li> <p> Site-specific white-listing of access to " <span title="public storage
     area"> <a href="#public"> public </a> </span> " storage area: user agents may allow sites to access persistent storage for their own domain and subdomains in an unrestricted manner, but require the user to authorise access to the storage area of higher-level domains. </p> <p> For example, code at <code> example.com </code> would be always allowed to read and write data for <code> www.example.com </code> and <code> example.com </code> , but if it tried to access <code> com </code> , the user agent could display a non-modal message informing the user that the page requested access to <code> com </code> and offering to allow it. </p> <li> <p> Origin-tracking of persistent storage data: user agents may record the domain of the script that caused data to be stored. </p> <p> If this information is then used to present the view of data currently in persistent storage, it would allow the user to make informed decisions about which parts of the persistent storage to prune. Combined with a blacklist ("delete this data and prevent this domain from ever storing data again"), the user can restrict the use of persistent storage to sites that he trusts. </p> <li> <p> Shared blacklists: user agents may allow users to share their persistent storage domain blacklists. </p> <p> This would allow communities to act together to protect their privacy. </p> </ul> <p> While these suggestions prevent trivial use of this API for user tracking, they do not block it altogether. Within a single domain, a site can continue to track the user across multiple sessions, and can then pass all this information to the third party along with any identifying information (names, credit card numbers, addresses) obtained by the site. If a third party cooperates with multiple sites to obtain such information, a profile can still be created. <p> However, user tracking is to some extent possible even with no cooperation from the user agent whatsoever, for instance by using session identifiers in URIs, a technique already commonly used for innocuous purposes but easily repurposed for user tracking (even retroactively). This information can then be shared with other sites, using using visitors' IP addresses and other user-specific data (e.g. user-agent headers and configuration settings) to combine separate sessions into coherent user profiles. <h5 id="cookie"> <span class="secno"> <ins>4.8.7.2. </ins> <del>3.4.7.2. </del> </span> Cookie resurrection </h5> <p> If the user interface for persistent storage presents data in the persistent storage feature separately from data in HTTP session cookies, then users are likely to delete data in one and not the other. This would allow sites to use the two features as redundant backup for each other, defeating a user's attempts to protect his privacy. <h5 id="integrity"> <span class="secno"> <ins>4.8.7.3. </ins> <del>3.4.7.3. </del> </span> Integrity of "public" storage areas </h5> <p> Since the " <span title="public storage area"> <a
   href="#public"> public </a> </span> " global storage areas are accessible by content from many different parties, it is possible for third-party sites to delete or change information stored in those areas in ways that the originating sites may not expect. <p> Authors must not use the " <span title="public storage area"> <a
   href="#public"> public </a> </span> " global storage areas for storing sensitive data. Authors must not trust information stored in " <span
   title="public storage area"> <a href="#public"> public </a> </span> " global storage areas. <h5 id="cross-protocol"> <span class="secno"> <ins>4.8.7.4. </ins> <del>3.4.7.4. </del> </span> Cross-protocol attacks </h5> <p> This API makes no distinction between content served over HTTP, HTTPS, FTP, or other host-based protocols, and does not distinguish between content served from different ports at the same host. <p> Thus, for example, data stored in the global persistent storage for domain "secure.example.com" by a page served over SSL from <code> https://secure.example.com/ </code> will be accessible from a page served in plain text from <code> http://example.com/ </code> . <p> Since the data is not sent over the wire by the user agent, this is not a security risk in its own right. However, authors must take proper steps to ensure that all hosts that have fully qualified host names that are subsets of hosts dealing with sensitive information are as secure as the secure hosts themselves. <p> Similarly, authors must ensure that all Web servers on a host, regardless of the port, are equally trusted if any of them are to use persistent storage. For instance, if a Web server runs a production service that makes use of the persistent storage feature, then other users that have access to that machine and that can run a Web server on another port will be able to access the persistent storage added by the production service (assuming they can trick a user into visiting their page). <p> However, if one is able to trick users into visiting a Web server with the same <ins>host name </ins> <del>hostname </del> but on a different port as a production service used by these users, then one could just as easily fake the look of the site and thus trick users into authenticating with the fake site directly, forwarding the request to the real site and stealing the credentials in the process. Thus, the persistent storage feature is considered to only minimally increase the risk involved. <h5 id="cross-directory"> <span class="secno"> <ins>4.8.7.5. </ins> <del>3.4.7.5. </del> </span> Cross-directory attacks </h5> <p> Different authors sharing one host name, for example users hosting content on <code> geocities.com </code> , all share one persistent storage object. There is no feature to restrict the access by pathname. Authors on shared hosts are therefore recommended to avoid using the persistent storage feature, as it would be trivial for other authors to read from and write to the same storage area. <h5 id="implementation"> <span class="secno"> <ins>4.8.7.6. </ins> <del>3.4.7.6. </del> </span> Implementation risks </h5> <p> The two primary risks when implementing this persistent storage feature are letting hostile sites read information from other domains, and letting hostile sites write information that is then read from other domains. <p> Letting third-party sites read data that is not supposed to be read from their domain causes <em> information leakage </em> , For example, a user's shopping wishlist on one domain could be used by another domain for targetted advertising; or a user's work-in-progress confidential documents stored by a word-processing site could be examined by the site of a competing company. <p> Letting third-party sites write data to the storage areas of other domains can result in <em> information spoofing </em> , which is equally dangerous. For example, a hostile site could add items to a user's wishlist; or a hostile site could set a user's session identifier to a known ID that the hostile site can then use to track the user's actions on the victim site. <p> A risk is also presented by servers on local domains having <ins>host names </ins> <del>hostnames </del> matching top-level domain names, for instance having a host called "com" or "net". Such hosts might, if implementations fail to correctly implement the <code> .localdomain </code> suffixing, have full access to all the data stored in a UA's persistent storage for that top level domain. <p> Thus, strictly following the model described in this specification is important for user security. <h3 id="scs-browser">  <span class="secno"> <ins>4.9. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> </span> <ins>Browser state </ins> <del>3.5.  Selecting elements </del> </h3> <p> <ins>The </ins> <dfn id="navigator"
   title="dom-navigator"> <code> <ins>navigator </ins> </code> </dfn> <ins>attribute of the </ins> <code> <a href="#window0"> <ins>Window </ins> </a> </code> <ins>interface </ins> <del>Both  Document  s and  Element  s </del> must <ins>return an instance of the </ins> <code> <a
   href="#clientinformation"> <ins>ClientInformation </ins> </a> </code> <ins>interface, which represents the identity and state of the user agent (the client): </ins> <del>also implement the   GetElementsByClassName   interface: </del> <pre
   class="idl"> interface <dfn id="clientinformation"> <ins>ClientInformation </ins>  <del>GetElementsByClassName  { NodeList getElementsByClassName(in DOMString className1 [, in DOMString className2, ...] ); }   This interface defines one method,   getElementsByClassName()   , which takes one or more strings representing classes and must return all the elements in that document or below that element that are of all those classes. HTML, XHTML, SVG and MathML elements define which classes they are in by having an attribute in the per-element partition with the name   class   containing a space-separated list of classes to which the element belongs. Other specifications may also allow elements in their namespaces to be labelled as being in specific classes. UAs must not assume that all attributes of the name   class   for elements in any namespace work in this way, however, and must not assume that such attributes, when used as global attributes, label other elements as being in specific classes.   Given the following XHTML fragment:   &lt;div id="example"&gt; &lt;p id="p1" class="aaa bbb"/&gt; &lt;p id="p2" class="aaa ccc"/&gt; &lt;p id="p3" class="bbb ccc"/&gt; &lt;/div&gt;   A call to  document.getElementById('example').getElementsByClassName('aaa')  would return a  NodeList  with the two paragraphs  p1  and  p2  in it. A call to  getElementsByClassName('ccc', 'bbb')  would only return one node, however, namely  p3  .    We could also have a getElementBySelector() method, but it seems that it would be best to let the CSSWG define that.    3.6.  Navigating DOM trees   The DOM IG  expressed concerns  about this interface, suggesting that DOM Traversal would be a better way of doing this.   All objects that implement the  Node  interface shall also implement the   ElementTraversal   interface:  // Originally defined in SVG 1.2 Appendix A interface  ElementTraversal </del> </dfn> { readonly attribute <ins>boolean </ins> <span title="dom-navigator-onLine"> <a href="#navigator.online"> <ins>onLine </ins> </a> </span> <ins>; </ins> <del>Element firstElementChild; readonly attribute Element lastElementChild; readonly attribute Element nextElementSibling; readonly attribute Element previousElementSibling; </del> }; </pre> <p> The <dfn id="navigator.online"
   title="dom-navigator-onLine"> <code> <ins>navigator.onLine </ins>   <del>firstElementChild </del> </code> </dfn> <ins>attribute </ins> <del>and   lastElementChild   attributes </del> must return <ins>false if the user agent will not contact the network when the user follows links or when a script requests a remote page (or knows that </ins> <del>the first element child and last element child (respectively) of their node. If there is no </del> such <ins>an attempt would fail), and </ins> <del>child, they </del> must return <ins>true otherwise. </ins> <p> <ins>The </ins> <dfn id="offline" title="event-offline"> <code> <ins>offline </ins> <del>null.  The   nextElementSibling </del> </code> </dfn> <del>and   previousElementSibling   attributes must return the first element to follow the current node and the first element to precede the current node (respectively). If there is no such element, they must return null.   3.7.  Serialization and parsed fragment replacement   This section will try to explain how  document.write()  actually works (HTML only), and will define the  innerHTML  attribute, for both HTML and XML contexts. Wish us luck.   3.8.  Events   We need a section to define how events all work, default actions, etc. For example, how does clicking on a span in a link that is in another link actually cause a link to be followed? which one?   3.8.1.  Event listeners   In the ECMAScript DOM binding, the ECMAScript native  Function  type must implement the  EventListener  interface such that invoking the  handleEvent()  method of that interface on the object invokes the function itself, with the </del>  event  <del>argument as its only argument. Such functions </del> must be <ins>fired when the value of the </ins> <code
   title="dom-navigator-onLine"> <a
   href="#navigator.online"> <ins>navigator.onLine </ins> </a> </code> <ins>attribute of the </ins> <code> <a href="#window0"> <ins>Window </ins> </a> </code> <ins>changes from true to false. </ins> <p> <ins>The </ins> <dfn id="online" title="event-online"> <code> <ins>online </ins> </code> </dfn> <ins>event </ins> <del>called in the global scope. If the function returns false, the event's  preventDefault()  method must then invoked. Exception: for historical reasons, for the HTML  mouseover  event, the  preventDefault()  method </del> must be <ins>fired </ins> <del>called </del> when the <ins>value of the </ins> <code
   title="dom-navigator-onLine"> <a
   href="#navigator.online"> <ins>navigator.onLine </ins> </a> </code> <ins>attribute of the </ins> <code> <a href="#window0"> <ins>Window </ins> </a> </code> <ins>changes from false to true. </ins> <p> <ins>These events </ins> <del>function returns true instead.  In HTML, event handler attributes (such as  onclick  ) </del> are <ins>in the </ins> <code> <ins>http://www.w3.org/2001/xml-events </ins> </code> <ins>namespace, do bubble, </ins> <del>invoked as if they were functions implementing  EventListener  , with the argument called  event  . Such attributes </del> are <del>added as non-capture event listeners of the type given by their name (without the leading  on  prefix). Only attributes actually defined to exist by specifications implemented by the UA (e.g. HTML, Web Forms 2, Web Apps) are actually registered, however; for example if an author created an  onfoo  attribute, it would </del> not <ins>cancelable, have no default action, and use the normal </ins> <code> <ins>Event </ins> </code> <ins>interface. They must </ins> be fired <ins>on </ins> <span> <a
   href="#the-body0"> <ins>the </ins> <code> <ins>body </ins> <del>for  foo  events.  The scope chain for ECMAScript executed in HTML event handler attributes must link from the activation object for the handler, to its  this  parameter (the event target), to the element's  form </del> </code> element </a> </span> <ins>, or, </ins> if <ins>there isn't a " </ins> <span> <a href="#the-body0"> <ins>the </ins> <code> <ins>body </ins> </code> <ins>element </ins> </a> </span> <ins>", </ins> <del>it is a form control, to the document, to the default view (the   window   ).  This definition is intentionally backwards compatible with DOM Level 0. See also ECMA262 Edition 3, sections 10.1.6 and 10.2.3, for more details </del> on <ins>the </ins> <code> <a
   href="#documentwindow"> <ins>DocumentWindow </ins> </a> </code> <ins>object. (As the events bubble, they will reach the </ins> <code> <a href="#window0"> <ins>Window </ins> </a> </code> <ins>object.) </ins> </p> <h3 id="scs-alternate"> <del>activation objects.  [ECMA262] </del>   <span class="secno"> <ins>4.10. </ins> </span> <span
   title="SCS"> <a href="#scs"> <ins>[SCS] </ins> </a> <del>3.9. </del> </span> Alternate style <ins>sheets: the </ins> <code> <a href="#documentstyle"> <ins>DocumentStyle </ins> </a> </code> <ins>interface </ins> <del>sheets </del> </h3> <p> This specification extends the <code> <a
   href="#documentstyle"> DocumentStyle </a> </code> interface introduced in DOM2 Style. <a href="#refsDOM2STYLE"> [DOM2STYLE] </a> </p> <pre
   class="idl"> // Introduced in DOM Level 2: <a href="#refsDOM2STYLE"> [DOM2STYLE] </a> interface <dfn id="documentstyle"> DocumentStyle </dfn> { readonly attribute StyleSheetList <span> styleSheets </span> ; // New in this specification: attribute DOMString <span> <a href="#selectedstylesheetset"> selectedStylesheetSet </a> </span> ; readonly attribute DOMString <span> <a href="#laststylesheetset"> lastStylesheetSet </a> </span> ; readonly attribute DOMString <span> <a href="#preferredstylesheetset"> preferredStylesheetSet </a> </span> ; readonly attribute DOMStringList <span> <a href="#stylesheetsets"> stylesheetSets </a> </span> ; void <span> <a href="#enablestylesheetsforset"> enableStylesheetsForSet </a> </span> (in DOMString name); }; </pre> <p> For this interface, the <code> DOMString </code> values "null" and "the empty string" are distinct, and must not be considered equivalent. <p> The new members are defined as follows: <dl> <dt> <dfn
    id="selectedstylesheetset"> <code> selectedStylesheetSet </code> </dfn> of type <code> DOMString </code> <dd> <p> This attribute indicates which style sheet set ( <a
     href="#refsHTML4"> [HTML4] </a> ) is in use. This attribute is live; changing the disabled attribute on style sheets directly will change the value of this attribute. </p> <p> If all the sheets that are enabled have the same title (by case insensitive comparisons) then the value of this attribute shall be exactly equal to the title of the first enabled style sheet with a title in the <code> styleSheets </code> list. If style sheets from different sets are enabled, then the return value shall be null (there is no way to determine what the currently selected style sheet set is in those conditions). Otherwise, either all style sheets are disabled, or there are no alternate style sheets, and <code> <a
     href="#selectedstylesheetset"> selectedStylesheetSet </a> </code> must return the empty string. </p> <p> Setting this attribute to the null value shall have no effect. </p> <p> Setting this attribute to a non-null value must call <code> <a
     href="#enablestylesheetsforset"> enableStylesheetsForSet() </a> </code> with that value as the function's argument, then set <code> <a
     href="#laststylesheetset"> lastStylesheetSet </a> </code> to that value. </p> <p> From the DOM's perspective, all views have the same <code> <a
     href="#selectedstylesheetset"> selectedStylesheetSet </a> </code> . If a UA supports multiple views with different selected alternate style sheets, then this attribute (and the <code> StyleSheet </code> interface's <code> disabled </code> attribute) must return and set the value for the default view. </p> <dt> <dfn id="laststylesheetset"> <code> lastStylesheetSet </code> </dfn> of type <code> DOMString </code> , readonly <dd> <p> This property shall return the last value that <code> <a
     href="#selectedstylesheetset"> selectedStylesheetSet </a> </code> was set to, or, if none, null. </p> <dt> <dfn
    id="preferredstylesheetset"> <code> preferredStylesheetSet </code> </dfn> of type <code> DOMString </code> , readonly <dd> <p> This attribute shall indicate the preferred style sheet set as set by the author. It is determined from the order of style sheet declarations and the <code> Default-Style </code> HTTP headers. <a
     href="#refsHTML4"> [HTML4] </a> . If there is no preferred style sheet set, this attribute must return the empty string. The case of this attribute must exactly match the case given by the author where the preferred style sheet is specified or implied. This attribute must never return null. </p> <dt> <dfn id="stylesheetsets"> <code> stylesheetSets </code> </dfn> of type <code> DOMStringList </code> , readonly <dd> <p> This must return the live list of the currently available style sheet sets. This list is constructed by enumerating all the style sheets for this document available to the implementation, in the order they are listed in the <code> styleSheets </code> attribute, adding the title of each style sheet with a title to the list, avoiding duplicates by dropping titles that match (case insensitively) titles that have already been added to the list. </p> <dt> <dfn id="enablestylesheetsforset"
    title="enableStylesheetsForSet()"> <code> enableStylesheetsForSet( <var
    title=""> name </var> ) </code> </dfn> , method <dd> <p> Calling this method must change the <code> disabled </code> attribute on each <code> StyleSheet </code> object with a title attribute with a length greater than 0 in the <code> styleSheets </code> attribute, so that all those whose title matches the <var title=""> name </var> argument are enabled, and all others are disabled. Title matches are case insensitive. Calling this method with the empty string disables all alternate and preferred style sheets (but does not change the state of persistent style sheets, that is those with no title attribute). </p> <p> Calling this method with a null value must have no effect. </p> <p> Style Sheets that have no title are never affected by this method. This method does not change the values of the <code> <a
     href="#laststylesheetset"> lastStylesheetSet </a> </code> or <code> <a
     href="#preferredstylesheetset"> preferredStylesheetSet </a> </code> attributes. </p> </dl> <h4 id="dynamically"> <span class="secno"> <ins>4.10.1. </ins> <del>3.9.1. </del> </span> Dynamically adding new style sheets </h4> <p> If new style sheets with titles are added to the document, the UA must decide whether or not the style sheets should be initially enabled or not. How this happens depends on the exact state of the document at the time the style sheet is added, as follows. <h5 id="adding"> <span class="secno"> <ins>4.10.1.1. </ins> <del>3.9.1.1. </del> </span> Adding style sheets </h5> <p> First, if the style sheet is a preferred style sheet (it has a title, but is not marked as alternate), and there is no current preferred style sheet (the <code> <a
   href="#preferredstylesheetset"> preferredStylesheetSet </a> </code> attribute is equal to the empty string) then the <code> <a
   href="#preferredstylesheetset"> preferredStylesheetSet </a> </code> attribute is set to the exact value of this style sheet's title. (This changes the preferred style sheet set, which causes further changes &mdash; see below.) <p> Then, for all sheets, if any of the following is true, then the style sheet must be enabled: <ul> <li> The style sheet has an empty title. <li> The <code> <a href="#laststylesheetset"> lastStylesheetSet </a> </code> is null, and the style sheet's title matches (by case insensitive match) the value of the <code> <a
    href="#preferredstylesheetset"> preferredStylesheetSet </a> </code> attribute. <li> The style sheet's title matches (by case insensitive match) the value of the <code> <a href="#laststylesheetset"> lastStylesheetSet </a> </code> attribute. </ul> <p> Otherwise, the style sheet must be disabled. <h5 id="changing"> <span class="secno"> <ins>4.10.1.2. </ins> <del>3.9.1.2. </del> </span> Changing the preferred style sheet set </h5> <p> If the UA has the preferred style sheet set changed, for example if it receives a "Default-Style:" HTTP header after it receives HTTP "Link:" headers implying another preferred style sheet, then the <code> <a
   href="#preferredstylesheetset"> preferredStylesheetSet </a> </code> attribute's value must be changed appropriately, and, if the <code> <a
   href="#laststylesheetset"> lastStylesheetSet </a> </code> is null, the <code> <a
   href="#enablestylesheetsforset"> enableStylesheetsForSet() </a> </code> method must be called with the new <code> <a
   href="#preferredstylesheetset"> preferredStylesheetSet </a> </code> value. (The <code> <a href="#laststylesheetset"> lastStylesheetSet </a> </code> attribute is not changed.) <h5 id="examples"> <span class="secno"> <ins>4.10.1.3. </ins> <del>3.9.1.3. </del> </span> Examples </h5> <div class="example"> <p> Thus, in the following HTML snippet: </p> <pre> &lt;link rel="alternate stylesheet" title="foo" href="a"&gt; &lt;link rel="alternate stylesheet" title="bar" href="b"&gt; &lt;script&gt; document.selectedStylesheetSet = 'foo'; document.styleSheets[1].disabled = false; &lt;/script&gt; &lt;link rel="alternate stylesheet" title="foo" href="c"&gt; &lt;link rel="alternate stylesheet" title="bar" href="d"&gt; </pre> <p> ...the style sheets that end up enabled are style sheets "a", "b", and "c", the <code> <a
    href="#selectedstylesheetset"> selectedStylesheetSet </a> </code> attribute would return null, <code> <a
    href="#laststylesheetset"> lastStylesheetSet </a> </code> would return "foo", and <code> <a
    href="#preferredstylesheetset"> preferredStylesheetSet </a> </code> would return "". </p> <p> Similarly, in the following HTML snippet: </p> <pre> &lt;link rel="alternate stylesheet" title="foo" href="a"&gt; &lt;link rel="alternate stylesheet" title="bar" href="b"&gt; &lt;script&gt; var before = document.preferredStylesheetSet; document.styleSheets[1].disabled = false; &lt;/script&gt; &lt;link rel="stylesheet" title="foo" href="c"&gt; &lt;link rel="alternate stylesheet" title="bar" href="d"&gt; &lt;script&gt; var after = document.preferredStylesheetSet; &lt;/script&gt; </pre> <p> ...the "before" variable will be equal to the empty string, the "after" variable will be equal to "foo", and style sheets "a" and "c" will be enabled. This is the case even though the first script block sets style sheet "b" to be enabled, because upon parsing the following <code> &lt;link&gt; </code> element, the <code> <a
    href="#preferredstylesheetset"> preferredStylesheetSet </a> </code> is set and the <code> <a
    href="#enablestylesheetsforset"> enableStylesheetsForSet() </a> </code> method is called (since <code> <a
    href="#selectedstylesheetset"> selectedStylesheetSet </a> </code> was never set explicitly, leaving <code> <a
    href="#laststylesheetset"> lastStylesheetSet </a> </code> at null throughout), which changes which style sheets are enabled and which are not. </p> </div> <h4 id="interaction"> <span class="secno"> <ins>4.10.2. </ins> <del>3.9.2. </del> </span> Interaction with the User Interface </h4> <p> The user interface of Web browsers that support style sheets should list the style sheet titles given in the <code> <a
   href="#stylesheetsets"> stylesheetSets </a> </code> list, showing the <code> <a href="#selectedstylesheetset"> selectedStylesheetSet </a> </code> as the selected style sheet set, leaving none selected if it is null or the empty string, and selecting an extra option "Basic Page Style" (or similar) if it is the empty string and the <code> <a
   href="#preferredstylesheetset"> preferredStylesheetSet </a> </code> is the empty string as well. <p> Selecting a style sheet from this list should set the <code> <a
   href="#selectedstylesheetset"> selectedStylesheetSet </a> </code> attribute. <h5 id="persisting"> <span class="secno"> <ins>4.10.2.1. </ins> <del>3.9.2.1. </del> </span> Persisting the selected style sheet set </h5> <p> If UAs persist the selected style sheet set, they should use the value of the <code> <a
   href="#selectedstylesheetset"> selectedStylesheetSet </a> </code> attribute, or if that is null, the <code> <a
   href="#laststylesheetset"> lastStylesheetSet </a> </code> attribute, when leaving the page (or at some other time) to determine the set name to store. If that is null then the style sheet set should not be persisted. <p> When re-setting the style sheet set to the persisted value (which can happen at any time, typically at the first time the style sheets are needed for styling the document, after the <code> &lt;head&gt; </code> of the document has been parsed, after any scripts that are not dependent on computed style have executed), the style sheet set should be set by setting the <code> <a
   href="#selectedstylesheetset"> selectedStylesheetSet </a> </code> attribute as if the user had selected the set manually. <p class="note"> This specification does not give any suggestions on how UAs should decide to persist the style sheet set or whether or how to persist the selected set across pages. <h4 id="future"> <span class="secno"> <ins>4.10.3. </ins> <del>3.9.3. </del> </span> Future compatibility </h4> <p> Future versions of CSS may introduce ways of having alternate style sheets declared at levels lower than the top level, i.e. embedded within other style sheets. Implementations of this specification that also support this proposed declaration of alternate style sheets are expected to perform depth-first traversals of the <code> styleSheets </code> list, not simply enumerations of the <code> styleSheets </code> list that only contains the top level. <h2 id="browser">  <span class="secno"> <ins>5. </ins> </span> <ins>Browser environment integration </ins> </h2> <h3 id="scs-editing"> <del>3.10.  Focus   This entire section will be merged with earlier sections in due course.  When an element is focused, key events are targetted at that element instead of at the document's root element. </del>  <span class="secno"> <ins>5.1. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> <del>3.10.1.  The   tabindex   Attribute   This section on the   tabindex   attribute needs to be checked for backwards-compatibility.  The   tabindex   attribute defined in HTML4 is extended to apply to all HTML elements by defining it as a common attribute.  The   tabindex   attribute specifies the relative order of elements for the purposes of sequential focus navigation. The name "tab index" comes from the common use of the "tab" key to navigate through the focusable elements. The term "tabbing" refers to moving forward through the focusable elements.  The   tabindex   attribute can take any integer (an optional U+002D HYPHEN-MINUS representing negativity followed by one or more digits in the range 0-9, U+0030 to U+0039, interpreted as base ten).  A positive integer (including zero) specifies the index of the element in the current scope's tab order. Elements with the same index are sorted in document order for the purposes of tabbing.  A negative integer specifies that the element should be removed from the tab order. If the element does normally take focus, it may still be focused using other means (e.g. it could be focussed by a click).  Other values are ignored, as if the attribute was absent. Certain elements may default absent   tabindex   attributes to zero, at the user agent's discretion. (In other words, some elements are focusable by default, and they are assumed to have tab index 0. Text fields will typically be in the tab order by default, for instance.)  When an element that does not normally take focus has the   tabindex   attribute specified with a positive value, then it is added to the tab order and is made focusable. When focused, the element matches the CSS   :focus   pseudo-class and key events are dispatched on that element when appropriate, just like focusing a link.  Since all HTML elements can thus be focused and unfocusd, the  onfocus  and  onblur  attributes shall also apply to all HTML elements.   3.10.2.  The   ElementFocus   interface   The   ElementFocus   interface contains methods for moving focus to and from an element. It can be obtained from objects that implement the  Element  interface using binding-specific casting methods.  interface  ElementFocus  { attribute long tabIndex; void focus(); void blur(); };   The   tabIndex   DOM attribute reflects the value of the related content attribute. If the attribute is not present (or has an invalid value) then the DOM attribute should return the UA's default value for that element, typically either 0 (for elements in the tab order) or -1 (for elements not in the tab order).  The   focus()   and   blur()   methods focus and unfocus the element respectively, if the element is focusable.   3.10.3.  The   DocumentFocus   interface   The   DocumentFocus   interface contains methods for moving focus around the document. It can be obtained from objects that implement the  Document  interface using binding-specific casting methods.  interface  DocumentFocus  { readonly attribute Element currentFocus; void moveFocusForward(); void moveFocusBackward(); void moveFocusUp(); void moveFocusRight(); void moveFocusDown(); void moveFocusLeft(); };   The   currentFocus   attribute returns the element to which key events will be sent when the document receives key events.  The   moveFocusForward   method uses the  'nav-index'  property and the   tabindex   attribute to find the next focusable element and focuses it.  The   moveFocusBackward   method uses the  'nav-index'  property and the   tabindex   attribute to find the previous focusable element and focuses it.  The   moveFocusUp   method uses the  'nav-up'  property and the   tabindex   attribute to find an appropriate focusable element and focuses it.  In a similar manner, the   moveFocusRight   ,   moveFocusDown   , and   moveFocusLeft   methods use the  'nav-right'  ,  'nav-down'  , and  'nav-left'  properties (respectively), and the   tabindex   attribute, to find an appropriate focusable element and focus it.  The  'nav-index'  ,  'nav-up'  ,  'nav-right'  ,  'nav-down'  , and  'nav-left'  properties are defined in  [CSS3UI]  .   4. </del> </span> Editing <ins>and the </ins> <code> <a
   href="#contenteditable"> <ins>contenteditable </ins>    <del>4.1.  The   contentEditable </del> </a> </code> attribute </h3> <p> <ins>The </ins> <dfn id="contenteditable"> <code> <ins>contenteditable </ins>  <del>This section will be based on the   contentEditable   attribute.   The   contentEditable </del> </code> </dfn> attribute is a common attribute. User agents must support this attribute on all HTML elements. </p> <p> If an HTML element has a <code> <a
   href="#contenteditable"> <ins>contenteditable </ins>  <del>contentEditable </del> </a> </code> attribute set to <ins>the empty string or the exact </ins> <del>exactly the </del> literal value <code> true </code> , or if its nearest ancestor with the <code> <a
   href="#contenteditable"> <ins>contenteditable </ins>  <del>contentEditable </del> </a> </code> attribute set has its attribute set to <ins>the empty string or the exact </ins> <del>exactly </del> the literal value <code> true </code> , then the UA must treat the element as <dfn
   id="editable0"> editable </dfn> (as described below). </p> <p> If an HTML element has a <code> <a
   href="#contenteditable"> <ins>contenteditable </ins>  <del>contentEditable </del> </a> </code> attribute set but the value of the attribute is not <ins>the empty string or </ins> <del>exactly </del> the literal value <code> true </code> , or if its nearest ancestor with the <code> <a
   href="#contenteditable"> <ins>contenteditable </ins>  <del>contentEditable </del> </a> </code> attribute set is not <em> <a href="#editable0"> editable </a> </em> , or if it has no ancestor with the <code> <a href="#contenteditable"> <ins>contenteditable </ins>  <del>contentEditable </del> </a> </code> attribute set, then the element is not editable. <p> Authors must only use the values <code> true </code> and <code> false </code> with the <code> <a
   href="#contenteditable"> <ins>contenteditable </ins>  <del>contentEditable </del> </a> </code> attribute. <p> If an element is <span> <a href="#editable0"> editable </a> </span> and its parent element is not, then the element is an <dfn id="editing">  editing host </dfn> . Editable elements can be <ins>nested. </ins> <del>nested, meaning the user can edit through them (see below). </del> User agents must make editing hosts focusable (which typicially means <ins>they enter the </ins> <span
   title="tabindex"> <a href="#tabindex0"> <del>it enters the </del>   tab order </a> </span> ). An editing host can contain non-editable sections, these are handled as described below. An editing host can contain non-editable sections that contain further editing hosts. <p> <ins>When an editing host has focus, it must have a </ins> <dfn id="caret"> <ins>caret position </ins> </dfn> <ins>that specifies where the current editing position is. It may also have a </ins> <span title="the selection"> <a
   href="#a-selection"> <ins>selection </ins> </a> </span> <ins>. </ins> </p> <p class="note"> <ins>How the caret and selection are represented depends entirely on the UA. </ins> </p> <h4 id="user-editing"> <span class="secno"> <ins>5.1.1. </ins> </span> <ins>User editing actions </ins> </h4> <p> <ins>There are several actions that the user agent should allow the user to perform while the user is interacting with an editing host. How exactly each action is triggered is not defined for every action, but when it is not defined, suggested key bindings are provided to guide implementors. </ins> <dl> <dt> <ins>Move the caret </ins> <dd> <p> <ins>User agents must allow users to move the caret to any position within an editing host, even into </ins> <del>These </del> nested <ins>editable elements. This could be triggered as the default action of </ins> <code
     title="event-keydown"> <ins>keydown </ins> </code> <ins>events with various key identifiers and as the default action of </ins> <code
     title="event-mousedown"> <ins>mouseydown </ins> </code> <ins>events. </ins> <dt> <ins>Change the selection </ins> <dd> <p> <ins>User agents must allow users to change </ins> <span> <a
     href="#a-selection"> <ins>the selection </ins> </a> </span> <ins>within an editing host, even into nested editable elements. This could be triggered as the default action of </ins> <code title="event-keydown"> <ins>keydown </ins> </code> <ins>events with various key identifiers and as the default action of </ins> <code
     title="event-mousedown"> <ins>mouseydown </ins> </code> <ins>events. </ins> <dt id="contenteditable-insertText"> <ins>Insert text </ins> <dd> <p> <ins>This action must be triggered as the default action of a </ins> <code
     title="event-textInput"> <ins>textInput </ins> </code> <ins>event, and may be triggered by other commands as well. It must cause the user agent to insert the specified text (given by the event object's </ins> <code title=""> <ins>data </ins> </code> <ins>attribute in the case of the </ins> <code
     title="event-textInput"> <ins>textInput </ins> </code> <ins>event) at the caret. </ins> </p> <p> <ins>If the caret is positioned somewhere where </ins> <span> <a
     href="#inline-level1"> <ins>inline-level content </ins> </a> </span> <ins>is not allowed (e.g. because the element accepts "both block-level and inline-level content but not both", and the element already contains block-level content), then the user agent must not insert the text directly at the caret position. In such cases the behaviour is UA-dependent, but user agents must not, in response to a request to insert text, generate a DOM that is less conformant than the DOM prior to the request. </ins> </p> <p> <ins>User agents should allow users to insert new paragraphs into elements that only contain block-level content. </ins> </p> <div class="example"> <p> <ins>For example, given the markup: </ins> </p> <pre> <ins>&lt;section&gt; &lt;dl&gt; &lt;dt&gt; Ben &lt;/dt&gt; &lt;dd&gt; Goat &lt;/dd&gt; &lt;/dl&gt; &lt;/section&gt; </ins> </pre> <p> <ins>...the user agent should allow the user to insert </ins> <code> <a
      href="#p0"> <ins>p </ins> </a> </code> <ins>elements before and after the </ins> <code> <a
      href="#dl0"> <ins>dl </ins> </a> </code> <ins>element, as children of the </ins> <code> <a
      href="#section3"> <ins>section </ins> </a> </code> <ins>element. </ins> </p> </div> <dt id="contenteditable-breakBlock"> <ins>Break block </ins> <dd> <p> <ins>UAs should offer a way for the user to request that the current block be broken at the caret, e.g. as the default action of a </ins> <code
     title="event-keydown"> <ins>keydown </ins> </code> <ins>event whose identifier is the "Enter" key and that has no modifiers set. </ins> </p> <p> <ins>The exact behaviour is UA-dependent, but user agents must not, in response to a request to break a block, generate a DOM that is less conformant than the DOM prior to the request. </ins> <dt id="contenteditable-br"> <ins>Insert a line separator </ins> <dd> <p> <ins>UAs should offer a way for the user to request an explicit line break at the caret position without breaking the block, for example as in a poem verse or an address. To insert a line break, the user agent must insert a </ins> <code> <a href="#br0"> <ins>br </ins> </a> </code> <ins>element. </ins> </p> <p> <ins>If the caret is positioned somewhere where </ins> <span> <a
     href="#inline-level1"> <ins>inline-level content </ins> </a> </span> <ins>is not allowed (e.g. because the element accepts "both block-level and inline-level content but not both", and the element already contains block-level content), then the user agent must not insert the </ins> <code> <a
     href="#br0"> <ins>br </ins> </a> </code> <ins>element directly at the caret position. In such cases the behaviour is UA-dependent, but user agents must not, in response to a request to insert a line separator, generate a DOM that is less conformant than the DOM prior to the request. </ins> <dt id="contenteditable-delete"> <ins>Delete </ins> <dd> <p> <ins>UAs should offer a way for the user to delete text and elements, e.g. as the default action of </ins> <code title="event-keydown"> <ins>keydown </ins> </code> <ins>events whose identifiers are "U+0008" or "U+007F". </ins> </p> <p> <ins>Five edge cases in particular need to be considered carefully when implementing this feature: backspacing at the start of an element, backspacing when the caret is immediately after an element, forward-deleting at the end of an element, forward-deleting when the caret is immediately before an element, and deleting a </ins> <span title="the
     selection"> <a href="#a-selection"> <ins>selection </ins> </a> </span> <ins>whose start and end points do not share a common parent node. </ins> </p> <p> <ins>In any case, the exact behaviour is UA-dependent, but user agents must not, in response to a request to delete text or an element, generate a DOM that is less conformant than the DOM prior to the request. </ins> <dt id="contenteditable-wrapSemantic"> <ins>Insert, and wrap text in, semantic elements </ins> <dd> <p> <ins>UAs should offer a way for the user to mark text as having </ins> <span
     title="em"> <a href="#em0"> <ins>stress emphasis </ins> </a> </span> <ins>and as being </ins> <span
     title="strong"> <a href="#strong0"> <ins>important </ins> </a> </span> <ins>, and may offer the user the ability to mark text and blocks with other semantics. </ins> </p> <p> <ins>UAs should similarly offer a way for the user to insert empty semantic elements (such as, again, </ins> <code> <a href="#em0"> <ins>em </ins> </a> </code> <ins>, </ins> <code> <a
     href="#strong0"> <ins>strong </ins> </a> </code> <ins>, and others) to subsequently fill by entering text manually. </ins> </p> <p> <ins>UAs should also offer a way to remove those semantics from marked up text, and to remove empty semantic element that have been inserted. </ins> </p> <p> <ins>The exact behaviour is UA-dependent, but user agents must not, in response to a request to wrap semantics around some text or to insert or remove a semantic element, generate a DOM that is less conformant than the DOM prior to the request. </ins> <dt> <ins>Select and move non-editable elements nested inside </ins> editing hosts <dd> <p> <ins>UAs should offer a way for the user to move images and other non-editable parts around the content within an editing host. This may be done using the </ins> <span> <a href="#drag-and0"> <ins>drag and drop </ins> </a> </span> <ins>mechanism. User agents must not, in response to a request to move non-editable elements nested inside editing hosts, generate a DOM that is less conformant than the DOM prior to the request. </ins> <dt> <ins>Edit form controls nested inside </ins> <del>are not handled any differently to top-level </del> editing hosts <dd> <ins>When an </ins> <span> <a href="#editable0"> <del>&mdash; they ...   How </del> editable </a> </span> <ins>form control is edited, the changes must be reflected in both its current value </ins> <em> <ins>and </ins> </em> <ins>its default value. For </ins> <code> <ins>input </ins> </code> elements <ins>this means updating the </ins> <code
    title="dom-input-defaultValue"> <ins>defaultValue </ins> </code> <ins>DOM attribute as well as the </ins> <code title="dom-input-value"> <ins>value </ins> </code> <ins>DOM attribute; for </ins> <code> <ins>select </ins> </code> <ins>elements it means updating the </ins> <code> <ins>option </ins> </code> <ins>elements' </ins> <code title="dom-option-defaultSelected"> <ins>defaultSelected </ins> </code> <ins>DOM attribute as well as the </ins> <code
    title="dom-option-selected"> <ins>selected </ins> </code> <ins>DOM attribute; for </ins> <code> <ins>textarea </ins> </code> <ins>elements this means updating the </ins> <code
    title="dom-textarea-defaultValue"> <ins>defaultValue </ins> </code> <ins>DOM attribute as well as the </ins> <code title="dom-textarea-value"> <ins>value </ins> </code> <ins>DOM attribute. (Updating the </ins> <code title=""> <ins>default* </ins> </code> <ins>DOM attributes causes content attributs to be updated as well.) </ins> </dl> <p> <ins>User agents may perform several commands per </ins> <del>act depends on their CSS '  display  ' type. (For non-CSS </del> user <ins>request; for example if the user selects a block of text and hits </ins> <kbd> <kbd> <ins>Enter </ins> </kbd> </kbd> <ins>, the UA might interpret that as a request to delete the content of </ins> <span> <a
   href="#a-selection"> <ins>the selection </ins> </a> </span> <ins>followed by a request to break the block at that position. </ins> <h3 id="scs-drag"> <del>agents, analogous rules should be followed.)  If an editable element is an inline box ('  display  ' has the value '  inline  ' or '  run-in  ' and the result is an inline box), ... </del>   <span class="secno"> <ins>5.2. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> </span> <dfn id="drag-and0"> <del>4.2.  Undo history   ...   4.3. </del>   Drag and drop </dfn> </h3> <p> This section defines an event-based drag-and-drop mechanism. <p> This specification does not define exactly what a <em> drag and drop operation </em> actually is. <p> On a visual medium with a pointing device, a drag operation could be the default action of a <code title="event-mousedown"> mousedown </code> event that is followed by a series of <code
   title="event-mousemove"> mousemove </code> events, and the drop could be triggered by the mouse being released. <p> On media without a pointing device, the user would probably have to explicitly indicate his intention to perform a drag-and-drop operation, stating what he wishes to drag and what he wishes to drop, respectively. <p> However it is implemented, drag and drop operations must have a starting point (e.g. where the mouse was clicked, or the start of <span> <a
   href="#a-selection"> the selection </a> </span> or element that was selected for the drag), may have any number of intermediate steps (elements that the mouse moves over during a drag, or elements that the user picks as possible drop points as he cycles through possibilities), and must either have an end point (the element above which the mouse button was released, or the element that was finally selected), or be canceled. The end point must be the last element selected as a possible drop point before the drop occurs (so if the operation is not canceled, there must be at least one element in the middle step). <h4 id="drag-and-drop"> <span class="secno"> <ins>5.2.1. </ins> <del>4.3.1. </del> </span> Drag-and-drop processing model </h4> <p> There are two processing models for drag-and-drop: one for when a drag is initiated within the document, and one for when a drag is initiated in another (DOM-based) document or another application altogether, but the user has selected a node in the document as a drop target. <h5 id="for-drags"> <span class="secno"> <ins>5.2.1.1. </ins> <del>4.3.1.1. </del> </span> For drags initiated within the document </h5> <p> When the user attempts to begin a drag operation, the user agent must first determine what is being dragged. If the drag operation was invoked on a selection, then it is the selection that is being dragged. Otherwise, it is the first element, going up the ancestor chain, starting at the node that the user tried to drag, that has the DOM attribute <code
   title="dom-draggable"> <a href="#draggable1"> draggable </a> </code> set to true. If there is no such element, then nothing is being dragged, the drag-and-drop operation is never started, and the user agent must not continue with this algorithm. </p> <p> If the user agent determines that something can be dragged, a <code
   title="event-dragstart"> <a href="#dragstart"> dragstart </a> </code> event must then be fired. <p> If it is a selection that is being dragged, then this event must be fired on the node that the user started the drag on (typically the text node that the user originally clicked). If the user did not specify a particular node, for example if the user just told the user agent to begin a drag of "the selection", then the event must be fired on the deepest node that is a common ancestor of all parts of the selection. <p> If it is not a selection that is being dragged, then the event must be fired on the element that is being dragged. <p> The node on which the event is fired is the <dfn id="source"> source node </dfn> . Multiple events are fired on this node during the course of the drag-and-drop operation. <p> The <code title="dom-dataTransfer"> <a
   href="#datatransfer0"> dataTransfer </a> </code> member of the event must initially <span title="dom-dataTransfer-addElement"> contain </span> no nodes if a selection is being dragged, and just the <span> <a
   href="#source"> source node </a> </span> otherwise. <p> If the event is canceled, then the drag and drop operation must not occur; the user agent must not continue with this algorithm. <p> If it is not canceled, then the drag and drop operation must be initiated. <p class="note"> Since events with no event handlers registered are, almost by definition, never canceled, drag and drop is always available to the user if the author does not specifically prevent it. <p> The drag-and-drop feedback must be generated from the selection if the user is dragging a selection, or from <span
   title="dom-dataTransfer-addElement"> the nodes that were in the <code> <a
   href="#datatransfer1"> dataTransfer </a> </code> object's list after the event has been handled </span> otherwise. In visual media, <span
   title="dom-dataTransfer-setDragImage"> if an image was specified </span> , then that image must be used instead. </p> <p> The user agent must take a note of <span
   title="dom-dataTransfer-setData"> the data that was placed </span> in the <code title="dom-dataTransfer"> <a
   href="#datatransfer0"> dataTransfer </a> </code> object. <p> From this point until the end of the drag-and-drop operation, mouse and key events must be suppressed. In addition, the user agent must track all DOM changes made during the drag-and-drop operation, and add them to its <a href="#undo"> undo history </a> as one atomic operation once the drag-and-drop operation has ended. <p> During the drag operation, the element directly indicated by the user as the drop target is called the <dfn id="immediate"> immediate user selection </dfn> . (Only elements can be selected by the user; other nodes must not be made available as drop targets.) <p> However, the <span> <a href="#immediate"> immediate user selection </a> </span> is not necessarily the element the <dfn
   id="current0"> current target element </dfn> , the element currently selected for the drop part of the drag-and-drop operation. <p> The <span> <a href="#immediate"> immediate user selection </a> </span> changes as the user selects different elements (either by pointing at them with a pointing device, or by selecting them in some other way). The <span> <a href="#current0"> current target element </a> </span> changes when the <span> <a href="#immediate"> immediate user selection </a> </span> changes, based on the results of event handlers in the document, as described below. <p> Both the <span> <a href="#current0"> current target element </a> </span> and the <span> <a href="#immediate"> immediate user selection </a> </span> can be null, which means no target element is selected. They can also both be elements in other (DOM-based) documents, or other (non-Web) programs altogether. (For example, a user could drag text to a word-processor.) The <span> <a href="#current0"> current target element </a> </span> is initially null. <p> In addition, there is also a <dfn id="current1"> current drag operation </dfn> , which can take on the values "none", "copy", "link", and "move". Initially it has the value "none". It is updated by the user agent as described in the steps below. <p> User agents must, every 350ms (&#xB1;200ms), perform the following steps in sequence. (If the user agent is still performing the previous iteration of the sequence when the next iteration becomes due, the user agent must not execute the overdue iteration, effectively "skipping missed frames" of the drag and drop operation.) <ol> <li> <p> First, the user agent must fire a <code title="event-drag"> <a
     href="#drag"> drag </a> </code> event at the <span> <a href="#source"> source node </a> </span> . </p> <li> <p> Next, if the <code title="event-drag"> <a href="#drag"> drag </a> </code> event was not canceled and the user has not ended the drag-and-drop operation, the user agent must check the state of the drag-and-drop operation, as follows: </p> <ol> <li> <p> First, if the user is indicating a different <span> <a
       href="#immediate"> immediate user selection </a> </span> than during the last iteration (or if this is the first iteration), and if this <span> <a href="#immediate"> immediate user selection </a> </span> is not the same as the <span> <a href="#current0"> current target element </a> </span> , then the <span> <a href="#current0"> current target element </a> </span> must be updated, as follows: </p> <ol> <li> <p> If the new <span> <a href="#immediate"> immediate user selection </a> </span> is null, or is in a non-DOM document or application, then set the <span> <a href="#current0"> current target element </a> </span> to the same value. </p> <li> <p> Otherwise, the user agent must fire a <code
         title="event-dragenter"> <a href="#dragenter"> dragenter </a> </code> event at the <span> <a href="#immediate"> immediate user selection </a> </span> . </p> <li> <p> If the event is canceled, then the <span> <a
         href="#current0"> current target element </a> </span> must be set to the <span> <a href="#immediate"> immediate user selection </a> </span> . </p> <li> <p> Otherwise, if the <span> <a href="#current0"> current target element </a> </span> is not <span> <a href="#the-body0"> <ins>the </ins> <code> <del>the </del>   body  </code> element </a> </span> , the user agent must fire a <code title="event-dragenter"> <a
         href="#dragenter"> dragenter </a> </code> event at <span> <a
         href="#the-body0"> <ins>the </ins> <code> <del>the </del>   body  </code> element </a> </span> , and the <span> <a href="#current0">  current target element </a> </span> must be set to <span> <a href="#the-body0"> <ins>the </ins> <code> <del>the </del>   body  </code> element </a> </span> , regardless of whether the event was canceled or not. </p> </ol> <li> <p> If the previous step caused the <span> <a href="#current0"> current target element </a> </span> to change, and if the previous target element was not null or a part of a non-DOM document, the user agent must fire a <code title="event-dragleave"> <a
       href="#dragleave"> dragleave </a> </code> event at the previous target element. </p> <li> <p> If the <span> <a href="#current0"> current target element </a> </span> is a DOM element, the user agent must fire a <code
       title="event-dragover"> <a href="#dragover"> dragover </a> </code> event at this <span> <a href="#current0"> current target element </a> </span> . </p> <p> If the <code title="event-dragover"> <a
       href="#dragover"> dragover </a> </code> event is not canceled, the <code> <a href="#datatransfer1"> dataTransfer </a> </code> object's <code> dropEffect </code> attribute must then be reset to the value it was given when the event was fired. </p> <p> Then, regardless of whether the event was canceled or not, the drag feedback (e.g. the mouse cursor) must be updated to match the kind of drag-and-drop operation indicated by the event's <code
       title="dom-dataTransfer"> <a
       href="#datatransfer0"> dataTransfer </a> </code> object's <code
       title="dom-dataTransfer-dropEffect"> dropEffect </code> attribute, as follows: </p> <table> <thead> <tr> <th> <code title="dom-dataTransfer-dropEffect"> dropEffect </code> <th> Drag operation <tbody> <tr> <td> <code title=""> none </code> <td> No operation allowed. <tr> <td> <code title=""> copy </code> <td> Data will be copied. <tr> <td> <code title=""> link </code> <td> Data will be linked. <tr> <td> <code title=""> move </code> <td> Data will be moved. </table> <p> The drag operation in question is the new <em> <a
       href="#current1"> current drag operation </a> </em> . </p> <li> <p> Otherwise, if the <span> <a href="#current0"> current target element </a> </span> is not a DOM element, the user agent must use platform-specific mechanisms to determine what drag operation is being performed (none, copy, link, or move). This sets the <em> <a
       href="#current1"> current drag operation </a> </em> . </p> </ol> <li> <p> Otherwise, if the user ended the drag and drop operation (e.g. by releasing the mouse button in a mouse-driven drag-and-drop interface), then this will be the last iteration. The user agent should follow the following steps, then stop looping. </p> <ol> <li> <p> If the <span> <a href="#current1"> current drag operation </a> </span> is none (no drag operation), or, if the user ended the drag-and-drop operation by canceling it (e.g. by hitting the <kbd> Escape </kbd> key), or if the <span> <a href="#current0"> current target element </a> </span> is null, then the drag operation failed. If the <span> <a
       href="#current0"> current target element </a> </span> is a DOM element, the user agent must fire a <code title="event-dragleave"> <a
       href="#dragleave"> dragleave </a> </code> event at it; otherwise, if it is not null, it must use platform-specific conventions for drag cancellation. </p> <li> <p> Otherwise, the drag operation was as success. If the <span> <a
       href="#current0"> current target element </a> </span> is a DOM element, the user agent must fire a <code title="event-drop"> <a
       href="#drop"> drop </a> </code> event at it; otherwise, it must use platform-specific conventions for indicating a drop. </p> <p> When the target is a DOM element, the <code
       title="dom-dataTransfer-dropEffect"> dropEffect </code> attribute of the event's <code title="dom-dataTransfer"> <a
       href="#datatransfer0"> dataTransfer </a> </code> object must be given the value representing the <span> <a href="#current1"> current drag operation </a> </span> ( <code title=""> copy </code> , <code
       title=""> link </code> , or <code title=""> move </code> ), and the object must be set up so that the <code
       title="dom-dataTransfer-getData"> getData() </code> method will return the data that was added during the <code title="event-dragstart"> <a
       href="#dragstart"> dragstart </a> </code> event. </p> <p class="big-issue"> Some elements have a default behaviour for "drop", e.g. textarea receives new text. Cancelable. </p> <li> <p> Finally, the user agent must fire a <code title="event-dragend"> <a
       href="#dragend"> dragend </a> </code> event at the <span> <a
       href="#source"> source node </a> </span> . </p> <p class="big-issue"> Some elements have a default behaviour for "dragend", e.g. textarea deletes source text in a move. NOT cancelable. </p> </ol> </ol> <p> The events must be fired as described above, even if the nodes are in different documents (assuming those are DOM-based). User agents should handle cases where the target is not in a DOM-based document according to the platform conventions. <h5 id="for-drags0"> <span class="secno"> <ins>5.2.1.2. </ins> <del>4.3.1.2. </del> </span> For drags initiated in other documents or applications <span title="TBW"> <a
   href="#tbw"> <ins>[TBW] </ins> </a> </span> </h5> <p class="big-issue"> ... </p> <h4 id="the-draggable"> <span class="secno"> <ins>5.2.2. </ins> <del>4.3.2. </del> </span> The <dfn
   id="draggable0" title="attr-draggable"> <code> draggable </code> </dfn> attribute <span title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h4> <p> ... <p> The <dfn id="draggable1"
   title="dom-draggable"> <code> draggable </code> </dfn> DOM attribute reflects the <code title="attr-draggable"> <a
   href="#draggable0"> draggable </a> </code> content attribute. However, the default value varies based on the element type For <code> <a
   href="#img0"> img </a> </code> elements, the default is true. For <code> <a
   href="#a0"> a </a> </code> elements, the default is true if the element has an <code title="attr-a-href"> <a href="#href3"> href </a> </code> content attribute, and false otherwise. For all other elements, the default is false. <h4 id="the-dragevent"> <span class="secno"> <ins>5.2.3. </ins> <del>4.3.3. </del> </span> The <code> DragEvent </code> interface and the <dfn id="datatransfer0"
   title="dom-dataTransfer"> <code> dataTransfer </code> </dfn> object <span
   title="WIP"> <a href="#wip"> <ins>[WIP] </ins> </a> </span> </h4> <p class="big-issue"> Need to define DragEvent interface. <pre class="idl"> interface <dfn id="datatransfer1"> DataTransfer </dfn> { attribute DOMString <span> dropEffect </span> ; attribute DOMString <span> effectAllowed </span> ; void <span> clearData </span> (in DOMString format); void <span> setData </span> (in DOMString format, in DOMString data); DOMString <span> getData </span> (in DOMString format); <span class="big-issue"> // XXX addElement, dragImage, etc </span> }; </pre> <p class="big-issue"> Need to define DataTransfer members <p> When a <code> DragEvent </code> event object is initialised by the user agent for the purposes of the drag-and-drop model described above (as opposed to when a custom <code> DragEvent </code> event object is created by author script), the object must be initialised as follows. <ul> <li> Its <code title="dom-dataTransfer"> <a
    href="#datatransfer0"> dataTransfer </a> </code> member must be initialised to a new instance of a <code> <a
    href="#datatransfer1"> DataTransfer </a> </code> object. <li> That object must initially contain no elements and have no associated image. <li> The <code title="dom-dataTransfer"> <a
    href="#datatransfer0"> dataTransfer </a> </code> object's <code
    title="dom-dataTransfer-effectAllowed"> effectAllowed </code> attribute must be set to " <code title=""> uninitialized </code> " for <code
    title="event-dragstart"> <a href="#dragstart"> dragstart </a> </code> events, and to whatever value the field had after the last drag-and-drop event was fired for all other events (only counting events fired by the user agent for the purposes of the drag-and-drop model described above). <li> The <code title="dom-dataTransfer-dropEffect"> dropEffect </code> attribute must be set to " <code title=""> none </code> " for <code
    title="event-dragstart"> <a href="#dragstart"> dragstart </a> </code> , <code
    title="event-drag"> <a href="#drag"> drag </a> </code> , <code
    title="event-dragleave"> <a href="#dragleave"> dragleave </a> </code> , and <code title="event-dragend"> <a href="#dragend"> dragend </a> </code> events (except when stated otherwise in the algorithms given in the earlier sections), and to a value based on the <code
    title="dom-dataTransfer-effectAllowed"> effectAllowed </code> attribute's value and to the drag-and-drop source, as given by the following table, for other events: <table id="dropEffect-initialisation"> <thead> <tr> <th> <code title="dom-dataTransfer-effectAllowed"> effectAllowed </code> <th> <code title="dom-dataTransfer-dropEffect"> dropEffect </code> <tbody> <tr> <td> <code title=""> none </code> <td> <code title=""> none </code> <tr> <td> <code title=""> copy </code> , <code title=""> copyLink </code> , <code
        title=""> copyMove </code> , <code title=""> all </code> <td> <code title=""> copy </code> <tr> <td> <code title=""> link </code> , <code title=""> linkMove </code> <td> <code title=""> link </code> <tr> <td> <code title=""> move </code> <td> <code title=""> move </code> <tr> <td> <code title=""> uninitialised </code> when what is being dragged is a selection from a text field <td> <code title=""> move </code> <tr> <td> <code title=""> uninitialised </code> when what is being dragged is a selection <td> <code title=""> copy </code> <tr> <td> <code title=""> uninitialised </code> when what is being dragged is an <code> <a href="#a0"> a </a> </code> element with an <code> href </code> attribute <td> <code title=""> link </code> <tr> <td> Any other case <td> <code title=""> copy </code> </table> </ul> <h4 id="events0"> <span class="secno"> <ins>5.2.4. </ins> <del>4.3.4. </del> </span> Events fired during a drag-and-drop action </h4> <p> <em> This section is non-normative. It merely summarises the preceeding sections. </em> <p> The following events are involved in the drag-and-drop model. They all use the <code> DragEvent </code> interface. <table> <thead> <tr> <th> Event Name <th> Target <th> Bubbles? <th> Cancelable? <th> <code title="dom-dataTransfer-addElement"> dataTransfer </code> <th> <code title="dom-dataTransfer-effectAllowed"> effectAllowed </code> <th> <code title="dom-dataTransfer-dropEffect"> dropEffect </code> <th> Default Action <tbody> <tr> <td> <dfn id="dragstart"
      title="event-dragstart"> <code> dragstart </code> </dfn> <td> <span> <a href="#source"> Source node </a> </span> <td> &#x2713; Bubbles <td> &#x2713; Cancelable <td> Contains <span> <a href="#source"> source node </a> </span> unless a selection is being dragged, in which case it is empty <td> <code title=""> uninitialized </code> <td> <code title=""> none </code> <td> Initiate the drag-and-drop operation <tr> <td> <dfn id="drag" title="event-drag"> <code> drag </code> </dfn> <td> <span> <a href="#source"> Source node </a> </span> <td> &#x2713; Bubbles <td> &#x2713; Cancelable <td> &mdash; <td> Same as last event <td> <code title=""> none </code> <td> Continue the drag-and-drop operation <tr> <td> <dfn id="dragenter"
      title="event-dragenter"> <code> dragenter </code> </dfn> <td> <span> <a href="#immediate"> Immediate user selection </a> </span> or <span> <a href="#the-body0"> <ins>the </ins> <code> <del>the </del>   body  </code> element </a> </span> <td> &#x2713; Bubbles <td> &#x2713; Cancelable <td> &mdash; <td> Same as last event <td> <a href="#dropEffect-initialisation"> Based on <code> effectAllowed </code> value </a> <td> Reject <span> <a href="#immediate"> immediate user selection </a> </span> as potential <span title="current target
      element"> <a href="#current0"> target element </a> </span> <tr> <td> <dfn id="dragleave"
      title="event-dragleave"> <code> dragleave </code> </dfn> <td> <span title="current target element"> <a href="#current0"> Previous target element </a> </span> <td> &#x2713; Bubbles <td> &mdash; <td> &mdash; <td> Same as last event <td> <code title=""> none </code> <td> None <tr> <td> <dfn id="dragover"
      title="event-dragover"> <code> dragover </code> </dfn> <td> <span> <a href="#current0"> Current target element </a> </span> <td> &#x2713; Bubbles <td> &#x2713; Cancelable <td> &mdash; <td> Same as last event <td> <a href="#dropEffect-initialisation"> Based on <code> effectAllowed </code> value </a> <td> Reset <code title="dom-dataTransfer-dropEffect"> dropEffect </code> <a
      href="#dropEffect-initialisation"> based on <code> effectAllowed </code> value </a> <tr> <td> <dfn id="drop" title="event-drop"> <code> drop </code> </dfn> <td> <span> <a href="#current0"> Current target element </a> </span> <td> &#x2713; Bubbles <td> &#x2713; Cancelable <td> <code> getData() </code> returns data set in <code
      title="dom-dragstart"> dragstart </code> event <td> Same as last event <td> <span> <a href="#current1"> Current drag operation </a> </span> <td> Varies <tr> <td> <dfn id="dragend" title="event-dragend"> <code> dragend </code> </dfn> <td> <span> <a href="#source"> Source node </a> </span> <td> &#x2713; Bubbles <td> &#x2713; Cancelable <td> &mdash; <td> Same as last event <td> <code title=""> none </code> <td> Varies </table> <h3 id="undo"> <span class="secno"> <ins>5.3. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> </span> <dfn id="undo-history0"> <ins>Undo history </ins> </dfn> </h3> <p class="big-issue"> <ins>There has got to be a better way of doing this, surely. </ins> <p> <ins>The user agent must associate an </ins> <dfn id="undo-transaction"> <ins>undo transaction history </ins> </dfn> <ins>with each </ins> <code> <a
   href="#documentwindow"> <ins>DocumentWindow </ins> </a> </code> <ins>object. </ins> <p> <ins>The </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>is a list of entries. The entries are of two type: </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>and </ins> <span title="undo
   object"> <a href="#undo-object"> <ins>undo objects </ins> </a> </span> <ins>. </ins> <p> <ins>Each </ins> <dfn id="dom-changes"> <ins>DOM changes </ins> </dfn> <ins>entry in the </ins> <span> <a
   href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>consists of batches of one or more of the following: </ins> <ul> <li> <ins>Changes to the </ins> <span> <a href="#content"> <ins>content attributes </ins> </a> </span> <ins>of an </ins> <code> <ins>Element </ins> </code> <ins>node. </ins> <li> <ins>Changes to the </ins> <span> <a href="#dom-attributes"> <ins>DOM attributes </ins> </a> </span> <ins>of a </ins> <code> <ins>Node </ins> </code> <ins>. </ins> </li> <li> <ins>Changes to the DOM hierarchy of nodes that are descendants of the </ins> <code> <a href="#documentwindow"> <ins>DocumentWindow </ins> </a> </code> <ins>object ( </ins> <code> <ins>parentNode </ins> </code> <ins>, </ins> <code> <ins>childNodes </ins> </code> <ins>). </ins> </ul> <p> <dfn id="undo-object"> <ins>Undo object </ins> </dfn> <ins>entries consist of objects representing state that scripts running in the document are managing. For example, a Web mail application could use an </ins> <span> <a
   href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>to keep track of the fact that a user has moved an e-mail to a particular folder, so that the user can undo the action and have the e-mail return to its former location. </ins> <p> <ins>Broadly speaking, </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entries are handled by the UA in response to user edits of form controls and </ins> <span> <ins>editing hosts </ins> </span> <ins>on the page, and </ins> <span> <a
   href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entries are handled by script in response to higher-level user actions (such as interactions with server-side state, or in the implementation of a drawing tool). </ins> <h4 id="the-undomanager"> <span class="secno"> <ins>5.3.1. </ins> </span> <ins>The </ins> <code> <a
   href="#undomanager"> <ins>UndoManager </ins> </a> </code> <ins>interface </ins> </h4> <div class="big-issue"> <p> <ins>This API sucks. Seriously. It's a terrible API. Really bad. I hate it. Here are the requirements: </ins> </p> <ul> <li> <ins>Has to cope with cases where the server has undo state already when the page is loaded, that can be stuffed into the undo buffer onload. </ins> <li> <ins>Has to support undo/redo. </ins> <li> <ins>Has to cope with the "undo" action being "contact the server and tell it to undo", rather than it being the opposite of the "redo" action. </ins> <li> <ins>Has to cope with some undo states expiring from the undo history (e.g. server can only remember one undelete action) but other states not expiring (e.g. client can undo arbitrary amounts of local edits). </ins> </ul> </div> <p> <ins>To manage </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entries in the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>, the </ins> <code> <a href="#undomanager"> <ins>UndoManager </ins> </a> </code> <ins>interface can be used: </ins> <pre class="idl"> <ins>interface </ins> <dfn id="undomanager"> <ins>UndoManager </ins> </dfn> <ins>{ unsigned long </ins> <span title="dom-UndoManager-add"> <a href="#adddata"> <ins>add </ins> </a> </span> <ins>(in DOMObject data, in DOMStrong title); void </ins> <span title="dom-UndoManager-remove"> <a href="#remove"> <ins>remove </ins> </a> </span> <ins>(in unsigned long index); void </ins> <span title="dom-UndoManager-clearUndo"> <a href="#clearundo"> <ins>clearUndo </ins> </a> </span> <ins>(); void </ins> <span title="dom-UndoManager-clearRedo"> <a href="#clearredo"> <ins>clearRedo </ins> </a> </span> <ins>(); DOMObject </ins> <span title="dom-UndoManager-item"> <a href="#itemn"> <ins>item </ins> </a> </span> <ins>(in unsigned long index); readonly attribute unsigned long </ins> <span title="dom-UndoManager-length"> <a href="#length1"> <ins>length </ins> </a> </span> <ins>; readonly attribute unsigned long </ins> <span title="dom-UndoManager-position"> <a href="#position"> <ins>position </ins> </a> </span> <ins>; }; </ins> </pre> <p> <ins>The </ins> <code title="dom-undoManager"> <ins>undoManager </ins> </code> <ins>attribute of the </ins> <code> <a href="#window0"> <ins>Window </ins> </a> </code> <ins>interface must return the object implementing the </ins> <code> <a
   href="#undomanager"> <ins>UndoManager </ins> </a> </code> <ins>interface for that </ins> <code> <a
   href="#window0"> <ins>Window </ins> </a> </code> <ins>object's associated </ins> <code> <a
   href="#documentwindow"> <ins>DocumentWindow </ins> </a> </code> <ins>object. </ins> <p> <ins>In the ECMAScript binding, objects implementing this interface must also support being dereferenced using the square bracket notation, such that dereferencing with an integer index is equivalent to invoking the </ins> <code
   title="dom-UndoManager-item"> <a href="#itemn"> <ins>item() </ins> </a> </code> <ins>method with that index (e.g. </ins> <code title=""> <ins>undoManager[1] </ins> </code> <ins>returns the same as </ins> <code title=""> <ins>undoManager.item(1) </ins> </code> <ins>). </ins> <p> <code> <a href="#undomanager"> <ins>UndoManager </ins> </a> </code> <ins>objects represent their document's </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>. Only </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entries are visible with this API, but this does not mean that </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entries are absent from the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <dfn id="length1"
   title="dom-UndoManager-length"> <code> <ins>length </ins> </code> </dfn> <ins>attribute must return the number of </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entries in the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <dfn id="itemn" title="dom-UndoManager-item"> <code> <ins>item( </ins> <var
   title=""> <ins>n </ins> </var> <ins>) </ins> </code> </dfn> <ins>method must return the </ins> <var
   title=""> <ins>n </ins> </var> <ins>th </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entry in the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>. </ins> <p> <ins>The </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>has a </ins> <dfn id="current2" title="undo position"> <ins>current position </ins> </dfn> <ins>. This is the position between two entries in the </ins> <span> <a
   href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>'s list where the previous entry represents what needs to happen if the user invokes the "undo" command (the "undo" side, lower numbers), and the next entry represents what needs to happen if the user invokes the "redo" command (the "redo" side, higher numbers). </ins> <p> <ins>The </ins> <dfn id="position"
   title="dom-UndoManager-position"> <code> <ins>position </ins> </code> </dfn> <ins>attribute must return the index of the </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entry nearest to the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>, on the "redo" side. If there are no </ins> <span> <a
   href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entries on the "redo" side, then the attribute must return the same as the </ins> <code
   title="dom-UndoManager-length"> <a href="#length1"> <ins>length </ins> </a> </code> <ins>attribute. If there are no </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entries on the "undo" side of the </ins> <span> <a
   href="#current2"> <ins>undo position </ins> </a> </span> <ins>, the </ins> <code
   title="dom-UndoManager-position"> <a href="#position"> <ins>position </ins> </a> </code> <ins>attribute returns zero. </ins> <p class="note"> <ins>Since the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>contains both </ins> <span> <a
   href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entries and </ins> <span> <a
   href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entries, but the </ins> <code
   title="dom-UndoManager-position"> <a href="#position"> <ins>position </ins> </a> </code> <ins>attribute only returns indices relative to </ins> <span> <a
   href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entries, it is possible for several "undo" or "redo" actions to be performed without the value of the </ins> <code title="dom-UndoManager-position"> <a
   href="#position"> <ins>position </ins> </a> </code> <ins>attribute changing. </ins> <p> <ins>The </ins> <dfn id="adddata" title="dom-UndoManager-add"> <code> <ins>add( </ins> <var
   title=""> <ins>data </ins> </var> <ins>, </ins> <var title=""> <ins>title </ins> </var> <ins>) </ins> </code> </dfn> <ins>method's behaviour depends on the current state. Normally, it must insert the </ins> <var
   title=""> <ins>data </ins> </var> <ins>object passed as an argument into the </ins> <span> <a
   href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>immediately before the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>, optionally remembering the given </ins> <var title=""> <ins>title </ins> </var> <ins>to use in the UI. If the method is called </ins> <span title="do-undo"> <a href="#undo-moving1"> <ins>during an undo operation </ins> </a> </span> <ins>, however, the object must instead be added immediately </ins> <em> <ins>after </ins> </em> <ins>the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>. </ins> <p> <ins>If the method is called and there is neither </ins> <span title="do-undo"> <a
   href="#undo-moving1"> <ins>an undo operation in progress </ins> </a> </span> <ins>nor </ins> <span
   title="do-redo"> <a href="#redo-moving1"> <ins>a redo operation in progress </ins> </a> </span> <ins>then any entries in the </ins> <span> <a
   href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>after the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>must be removed (as if </ins> <code title="dom-UndoManager-clearRedo"> <a
   href="#clearredo"> <ins>clearRedo() </ins> </a> </code> <ins>had been called). </ins> <p class="big-issue"> <ins>We could fire events when someone adds something to the undo history -- one event per undo object entry before the position (or after, during redo addition), allowing the script to decide if that entry should remain or not. Or something. Would make it potentially easier to expire server-held state when the server limitations come into play. </ins> </p> <p> <ins>The </ins> <dfn id="remove" title="dom-UndoManager-remove"> <code> <ins>remove( </ins> <var
   title=""> <ins>index </ins> </var> <ins>) </ins> </code> </dfn> <ins>method must remove the </ins> <span> <a
   href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entry with the specified </ins> <var
   title=""> <ins>index </ins> </var> <ins>. If the index is less than zero or greater than or equal to </ins> <code title="dom-UndoManager-length"> <a
   href="#length1"> <ins>length </ins> </a> </code> <ins>then the method must raise an </ins> <code> <ins>INDEX_SIZE_ERR </ins> </code> <ins>exception. </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entries are unaffected by this method. </ins> <p> <ins>The </ins> <dfn id="clearundo"
   title="dom-UndoManager-clearUndo"> <code> <ins>clearUndo() </ins> </code> </dfn> <ins>method must remove all entries in the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>before the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>, be they </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entries or </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entries. </ins> <p> <ins>The </ins> <dfn id="clearredo"
   title="dom-UndoManager-clearRedo"> <code> <ins>clearRedo() </ins> </code> </dfn> <ins>method must remove all entries in the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>after the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>, be they </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entries or </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entries. </ins> <p class="big-issue"> <ins>Another idea is to have a way for scripts to say "startBatchingDOMChangesForUndo()" and after that the changes to the DOM go in as if the user had done them. </ins> <h4 id="undo-moving"> <span class="secno"> <ins>5.3.2. </ins> </span> <dfn
   id="undo-moving1" title="do-undo"> <ins>Undo: moving back in the undo transaction history </ins> </dfn> </h4> <p> <ins>When the user invokes an undo operation, or when the </ins> <code
   title="dom-document-execCommand"> <a
   href="#execcommand"> <ins>execCommand() </ins> </a> </code> <ins>method is called with the </ins> <code title="command-undo"> <a href="#undo1"> <ins>undo </ins> </a> </code> <ins>command, the user agent must perform an undo operation. </ins> <p> <ins>If the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>is at the start of the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>, then the user agent must do nothing. </ins> <p> <ins>If the entry immediately before the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>is a </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entry, then the user agent must remove that </ins> <span> <a
   href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entry, reverse the DOM changes that were listed in that entry, and, if the changes were reversed with no problems, add a new </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entry (consisting of the opposite of those DOM changes) to the </ins> <span> <a
   href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>on the other side of the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>. </ins> <p> <ins>If the DOM changes cannot be undone (e.g. because the DOM state is no longer consistent with the changes represented in the entry), then the user agent must simply remove the </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entry, without doing anything else. </ins> <p> <ins>If the entry immediately before the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>is an </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entry, then the user agent must first remove that </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entry from the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>, and then must fire an </ins> <code title="event-undo"> <a
   href="#undo0"> <ins>undo </ins> </a> </code> <ins>event on the </ins> <code> <ins>Document </ins> </code> <ins>object, using the </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entry's associated undo object as the event's data. </ins> <p> <ins>Any calls to </ins> <code title="dom-undoManager-add"> <a
   href="#adddata"> <ins>add() </ins> </a> </code> <ins>while the event is being handled will be used to populate the redo history, and will then be used if the user invokes the "redo" command to undo his undo. </ins> <h4 id="redo-moving"> <span class="secno"> <ins>5.3.3. </ins> </span> <dfn
   id="redo-moving1" title="do-redo"> <ins>Redo: moving forward in the undo transaction history </ins> </dfn> </h4> <p> <ins>When the user invokes a redo operation, or when the </ins> <code
   title="dom-document-execCommand"> <a
   href="#execcommand"> <ins>execCommand() </ins> </a> </code> <ins>method is called with the </ins> <code title="command-redo"> <a href="#redo0"> <ins>redo </ins> </a> </code> <ins>command, the user agent must perform a redo operation. </ins> <p> <ins>This is mostly the opposite of an </ins> <span title="do-undo"> <a
   href="#undo-moving1"> <ins>undo operation </ins> </a> </span> <ins>, but the full definition is included here for completeness. </ins> <p> <ins>If the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>is at the end of the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>, then the user agent must do nothing. </ins> <p> <ins>If the entry immediately after the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>is a </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entry, then the user agent must remove that </ins> <span> <a
   href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entry, reverse the DOM changes that were listed in that entry, and, if the changes were reversed with no problems, add a new </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entry (consisting of the opposite of those DOM changes) to the </ins> <span> <a
   href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>on the other side of the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>. </ins> <p> <ins>If the DOM changes cannot be redone (e.g. because the DOM state is no longer consistent with the changes represented in the entry), then the user agent must simply remove the </ins> <span> <a href="#dom-changes"> <ins>DOM changes </ins> </a> </span> <ins>entry, without doing anything else. </ins> <p> <ins>If the entry immediately after the </ins> <span> <a href="#current2"> <ins>undo position </ins> </a> </span> <ins>is an </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entry, then the user agent must first remove that </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entry from the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>, and then must fire a </ins> <code title="event-undo"> <a href="#undo0"> <ins>redo </ins> </a> </code> <ins>event on the </ins> <code> <ins>Document </ins> </code> <ins>object, using the </ins> <span> <a
   href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>entry's associated undo object as the event's data. </ins> <h4 id="the-undomanagerevent"> <span class="secno"> <ins>5.3.4. </ins> </span> <ins>The </ins> <code> <a href="#undomanagerevent"> <ins>UndoManagerEvent </ins> </a> </code> <ins>interface and the </ins> <code title="event-undo"> <a href="#undo0"> <ins>undo </ins> </a> </code> <ins>and </ins> <code title="event-redo"> <a href="#redo"> <ins>redo </ins> </a> </code> <ins>events </ins> </h4> <pre
   class="idl"> <ins>interface </ins> <dfn id="undomanagerevent"> <ins>UndoManagerEvent </ins> </dfn> <ins>: Event { readonly attribute DOMObject </ins> <span title="dom-UndoManagerEvent-data"> <a href="#data0"> <ins>data </ins> </a> </span> <ins>; void </ins> <span> <a href="#initundomanagerevent"> <ins>initUndoManagerEvent </ins> </a> </span> <ins>(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMObject dataArg); void </ins> <span> <a href="#initundomanagereventns"> <ins>initUndoManagerEventNS </ins> </a> </span> <ins>(in DOMString namespaceURIArg, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMObject dataArg); }; </ins> </pre> <p> <ins>The </ins> <dfn
   id="initundomanagerevent"> <code> <ins>initUndoManagerEvent() </ins> </code> </dfn> <ins>and </ins> <dfn
   id="initundomanagereventns"> <code> <ins>initUndoManagerEventNS() </ins> </code> </dfn> <ins>methods must initialise the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces. </ins> <a
   href="#DOM3Events"> <ins>[DOM3EVENTS] </ins> </a> <p> <ins>The </ins> <dfn id="data0"
   title="dom-UndoManagerEvent-data"> <code> <ins>data </ins> </code> </dfn> <ins>attribute represents the </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>for the event. </ins> <p> <ins>The </ins> <dfn id="undo0" title="event-undo"> <code> <ins>undo </ins> </code> </dfn> <ins>and </ins> <dfn
   id="redo" title="event-redo"> <code> <ins>redo </ins> </code> </dfn> <ins>events do not bubble, cannot be canceled, and have no default action. When the user agent fires one of these events it must use the </ins> <code> <a
   href="#undomanagerevent"> <ins>UndoManagerEvent </ins> </a> </code> <ins>interface, with the </ins> <code title="dom-UndoManagerEvent-data"> <a href="#data0"> <ins>data </ins> </a> </code> <ins>field containing the relevant </ins> <span> <a href="#undo-object"> <ins>undo object </ins> </a> </span> <ins>. </ins> <h4 id="implementation0"> <span class="secno"> <ins>5.3.5. </ins> </span> <ins>Implementation notes </ins> </h4> <p> <ins>How user agents present the above conceptual model to the user is not defined. The undo interface could be a filtered view of the </ins> <span> <a
   href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>, it could manipulate the </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>in ways not described above, and so forth. For example, it is possible to design a UA that appears to have separate </ins> <span
   title="undo transaction history"> <a href="#undo-transaction"> <ins>undo transaction histories </ins> </a> </span> <ins>for each form control; similarly, it is possible to design systems where the user has access to more undo information than is present in the offical (as described above) </ins> <span> <a
   href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>(such as providing a tree-based approach to document state). Such UI models should be based upon the single </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>described in this section, however, such that to a script there is no detectable difference. </ins> <h3 id="scs-command"> <span class="secno"> <ins>5.4. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> </span> <ins>Command APIs </ins> </h3> <p> <ins>The </ins> <dfn id="execcommand"
   title="dom-document-execCommand"> <code> <ins>execCommand( </ins> <var
   title=""> <ins>commandID </ins> </var> <ins>, </ins> <var title=""> <ins>doShowUI </ins> </var> <ins>, </ins> <var
   title=""> <ins>value </ins> </var> <ins>) </ins> </code> </dfn> <ins>method on the </ins> <code> <a
   href="#documentwindow"> <ins>DocumentWindow </ins> </a> </code> <ins>interface allows scripts to perform actions on the </ins> <span title="the selection"> <a
   href="#a-selection"> <ins>current selection </ins> </a> </span> <ins>or at the current caret position. Generally, these commands would be used to implement editor UI, for example having a "delete" button on a toolbar. </ins> <p> <ins>There are three variants to this method, with one, two, and three arguments respectively. The </ins> <var title=""> <ins>doShowUI </ins> </var> <ins>and </ins> <var
   title=""> <ins>value </ins> </var> <ins>parameters, even if specified, are ignored unless otherwise stated. </ins> <p class="note"> <ins>In this specification, in fact, the </ins> <var
   title=""> <ins>doShowUI </ins> </var> <ins>parameter is always ignored, regardless of its value. It is included for historical reasons only. </ins> <p> <ins>When any of these methods are invoked, user agents must act as described in the list below. </ins> <p> <ins>For actions marked " </ins> <dfn id="editing0"> <ins>editing hosts only </ins> </dfn> <ins>", if the selection is not entirely within an </ins> <span> <a href="#editing"> <ins>editing host </ins> </a> </span> <ins>, of if there is no selection and the caret is not inside an </ins> <span> <a href="#editing"> <ins>editing host </ins> </a> </span> <ins>, then the user agent must do nothing. </ins> <dl> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="undo1"
    title="command-undo"> <code> <ins>undo </ins> </code> </dfn> <dd> <ins>The user agent must </ins> <span title="do-undo"> <a href="#undo-moving1"> <ins>move back one step </ins> </a> </span> <ins>in its </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>, restoring the associated state. If there is no further undo information the user agent must do nothing. See the </ins> <span> <a href="#undo-history0"> <ins>undo history </ins> </a> </span> <ins>. </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="redo0"
    title="command-redo"> <code> <ins>redo </ins> </code> </dfn> <dd> <ins>The user agent must </ins> <span title="do-redo"> <a href="#redo-moving1"> <ins>move forward one step </ins> </a> </span> <ins>in its </ins> <span> <a href="#undo-transaction"> <ins>undo transaction history </ins> </a> </span> <ins>, restoring the associated state. If there is no further undo (well, "redo") information the user agent must do nothing. See the </ins> <span> <a href="#undo-history0"> <ins>undo history </ins> </a> </span> <ins>. </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="selectall0"
    title="command-selectAll"> <code> <ins>selectAll </ins> </code> </dfn> <dd> <ins>The user agent must change the selection so that all the content in the currently focused </ins> <span> <a href="#editing"> <ins>editing host </ins> </a> </span> <ins>is selected. If no </ins> <span> <a href="#editing"> <ins>editing host </ins> </a> </span> <ins>is focused, then the content of the entire document must be selected. </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="unselect"
    title="command-unselect"> <code> <ins>unselect </ins> </code> </dfn> <dd> <p> <ins>The user agent must change the selection so that nothing is selected. </ins> </p> <p class="big-issue"> <ins>We need some sort of way in which the user can make a selection without risk of script clobbering it. </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="superscript"
    title="command-superscript"> <code> <ins>superscript </ins> </code> </dfn> <dd> <em> <a href="#editing0"> <ins>Editing hosts only. </ins> </a> </em> <ins>The user agent must act as if the user had requested that the selection </ins> <a
    href="#contenteditable-wrapSemantic"> <ins>be wrapped in the semantics </ins> </a> <ins>of the </ins> <code> <a href="#sup0"> <ins>sup </ins> </a> </code> <ins>element (or unwrapped, or, if there is no selection, have that semantic inserted or removed &mdash; the exact behaviour is UA-defined). </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="subscript"
    title="command-subscript"> <code> <ins>subscript </ins> </code> </dfn> <dd> <em> <a href="#editing0"> <ins>Editing hosts only. </ins> </a> </em> <ins>The user agent must act as if the user had requested that the selection </ins> <a
    href="#contenteditable-wrapSemantic"> <ins>be wrapped in the semantics </ins> </a> <ins>of the </ins> <em title=""> <code> <a href="#sub0"> <ins>sub </ins> </a> </code> </em> <ins>element (or, again, unwrapped, or have that semantic inserted or removed, as defined by the UA). </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="formatblock"
    title="command-formatBlock"> <code> <ins>formatBlock </ins> </code> </dfn> <dd> <p> <em> <a href="#editing0"> <ins>Editing hosts only. </ins> </a> </em> <ins>This command changes the semantics of the blocks containing the selection. </ins> </p> <p> <ins>If there is no selection, then, where in the description below refers to the selection, the user agent must act as if the selection was an empty range at the caret position. </ins> </p> <p> <ins>If the </ins> <var title=""> <ins>value </ins> </var> <ins>parameter is not specified or has a value other than one of the following literal strings: </ins> </p> <ul class="brief"> <li> <code title=""> <ins>&lt;address&gt; </ins> </code> <li> <code title=""> <ins>&lt;aside&gt; </ins> </code> <li> <code title=""> <ins>&lt;h1&gt; </ins> </code> <li> <code title=""> <ins>&lt;h2&gt; </ins> </code> <li> <code title=""> <ins>&lt;h3&gt; </ins> </code> <li> <code title=""> <ins>&lt;h4&gt; </ins> </code> <li> <code title=""> <ins>&lt;h5&gt; </ins> </code> <li> <code title=""> <ins>&lt;h6&gt; </ins> </code> <li> <code title=""> <ins>&lt;nav&gt; </ins> </code> <li> <code title=""> <ins>&lt;p&gt; </ins> </code> <li> <code title=""> <ins>&lt;pre&gt; </ins> </code> </ul> <p> <ins>...then the user agent must do nothing. </ins> </p> <p> <ins>Otherwise, the user agent must, for every position in the selection, take the furthest </ins> <span title="block-level elements"> <a
     href="#block-level1"> <ins>block-level element </ins> </a> </span> <ins>ancestor of that position that contains only </ins> <span> <a href="#inline-level1"> <ins>inline-level content </ins> </a> </span> <ins>and is not being used as a </ins> <span title="structured
     inline-level elements"> <a href="#structured"> <ins>structured inline-level element </ins> </a> </span> <ins>, and, if that element is a descendant of the editing host, rename it according to the </ins> <var title=""> <ins>value </ins> </var> <ins>, by stripping the leading </ins> <code> <ins>&lt; </ins> </code> <ins>character and the trailing </ins> <code> <ins>&gt; </ins> </code> <ins>character and using the rest as the new tag name. </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="delete"
    title="command-delete"> <code> <ins>delete </ins> </code> </dfn> <dd> <em> <a href="#editing0"> <ins>Editing hosts only. </ins> </a> </em> <ins>The user agent must act as if the user had performed </ins> <a href="#contenteditable-delete"> <ins>a backspace operation </ins> </a> <ins>. </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="forwarddelete"
    title="command-forwardDelete"> <code> <ins>forwardDelete </ins> </code> </dfn> <dd> <em> <a href="#editing0"> <ins>Editing hosts only. </ins> </a> </em> <ins>The user agent must act as if the user had performed </ins> <a href="#contenteditable-delete"> <ins>a forward delete operation </ins> </a> <ins>. </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="insertlinebreak"
    title="command-insertLineBreak"> <code> <ins>insertLineBreak </ins> </code> </dfn> <dd> <em> <a href="#editing0"> <ins>Editing hosts only. </ins> </a> </em> <ins>The user agent must act as if the user had </ins> <a href="#contenteditable-br"> <ins>requested a line separator </ins> </a> <ins>. </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="insertparagraph"
    title="command-insertParagraph"> <code> <ins>insertParagraph </ins> </code> </dfn> <dd> <em> <a href="#editing0"> <ins>Editing hosts only. </ins> </a> </em> <ins>The user agent must act as if the user had performed a </ins> <a
    href="#contenteditable-breakBlock"> <ins>break block </ins> </a> <ins>editing action. </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <dfn id="inserttext"
    title="command-insertText"> <code> <ins>insertText </ins> </code> </dfn> <dd> <em> <a href="#editing0"> <ins>Editing hosts only. </ins> </a> </em> <ins>The user agent must act as if the user had </ins> <a
    href="#contenteditable-insertText"> <ins>inserted text </ins> </a> <ins>corresponding to the </ins> <var title=""> <ins>value </ins> </var> <ins>parameter. </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is </ins> <code> <var
    title=""> <ins>vendorID </ins> </var> <ins>- </ins> <var title=""> <ins>customCommandID </ins> </var> </code> <dd> <ins>User agents may implement vendor-specific extensions to this API. Vendor-specific extensions to the list of commands should use the syntax </ins> <code> <var title=""> <ins>vendorID </ins> </var> <ins>- </ins> <var
    title=""> <ins>customCommandID </ins> </var> </code> <ins>so as to prevent clashes between extensions from different vendors and future additions to this specification. </ins> <dt> <ins>If the </ins> <var title=""> <ins>commandID </ins> </var> <ins>is something else </ins> <dd> <ins>User agents must do nothing. </ins> </dl> <h3 id="selection"> <span class="secno"> <ins>5.5. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> </span> <ins>The text selection APIs </ins> </h3> <p> <ins>Every </ins> <span> <a href="#browsing0"> <ins>browsing context </ins> </a> </span> <ins>has </ins> <dfn
   id="a-selection" title="the selection"> <ins>a selection </ins> </dfn> <ins>. The selection may be empty, and the selection may have more than one range (a disjointed selection). The user should be able to change the selection. User agents are not required to let the user select more than one range, and may collapse multiple ranges in the selection to a single range when the user interacts with the selection. (But, of course, the user agent may let the user create selections with multiple ranges.) </ins> <p> <ins>This one selection must be shared by all the content of the browsing context (though not by nested browsing contexts), including any editing hosts in the document. (Editing hosts that are not inside a document cannot have a selection.) </ins> <p> <ins>If the selection is empty (collapsed, so that it has only one segment and that segment's start and end points are the same) then the selection's position should equal the caret position. When the selection is not empty, this specification does not define the caret position; user agents should follow platform conventions in deciding whether the caret is at the start of the selection, the end of the selection, or somewhere else. </ins> <p> <ins>On some platforms (such as those using Wordstar editing conventions), the caret position is totally independent of the start and end of the selection, even when the selection is empty. On such platforms, user agents may ignore the requirement that the cursor position be linked to the position of the selection altogether. </ins> <p> <ins>Mostly for historical reasons, in addition to the </ins> <span> <a
   href="#browsing0"> <ins>browsing context </ins> </a> </span> <ins>'s </ins> <span title="the
   selection"> <a href="#a-selection"> <ins>selection </ins> </a> </span> <ins>, each </ins> <code> <ins>textarea </ins> </code> <ins>and </ins> <code> <ins>input </ins> </code> <ins>element has an independent selection. These are the </ins> <dfn id="text-field" title="text field
   selection"> <ins>text field selections </ins> </dfn> <ins>. </ins> <p> <ins>The </ins> <code> <a href="#datagrid0"> <ins>datagrid </ins> </a> </code> <ins>and </ins> <code> <ins>select </ins> </code> <ins>elements also have selections, indicating which items have been picked by the user. These are not discussed in this section. </ins> <p class="note"> <ins>This specification does not specify how selections are presented to the user. The Selectors specification, in conjunction with CSS, can be used to style text selections using the </ins> <code> <a
   href="#selection1"> <ins>::selection </ins> </a> </code> <ins>pseudo-element. </ins> <a
   href="#refsSELECTORS"> <ins>[SELECTORS] </ins> </a> <a href="#refsCSS21"> <ins>[CSS21] </ins> </a> <h4 id="apis-for"> <span class="secno"> <ins>5.5.1. </ins> </span> <ins>APIs for the browsing context selection </ins> </h4> <p> <ins>The </ins> <dfn id="getselection"
   title="dom-getSelection"> <code> <ins>getSelection() </ins> </code> </dfn> <ins>method on the </ins> <code> <a href="#window0"> <ins>Window </ins> </a> </code> <ins>interface must return the </ins> <code> <a href="#selection1"> <ins>Selection </ins> </a> </code> <ins>object representing </ins> <span> <a href="#a-selection"> <ins>the selection </ins> </a> </span> <ins>of that </ins> <code> <a
   href="#window0"> <ins>Window </ins> </a> </code> <ins>object's </ins> <span> <a
   href="#browsing0"> <ins>browsing context </ins> </a> </span> <ins>. </ins> <p> <ins>For historical reasons, the </ins> <dfn id="getselection0"
   title="dom-document-getSelection"> <code> <ins>getSelection() </ins> </code> </dfn> <ins>method on the </ins> <code> <a href="#documentwindow"> <ins>DocumentWindow </ins> </a> </code> <ins>interface must return the same </ins> <code> <a href="#selection1"> <ins>Selection </ins> </a> </code> <ins>object. </ins> <pre class="idl"> <ins>interface </ins> <dfn id="selection1"> <ins>Selection </ins> </dfn> <ins>{ readonly attribute Node </ins> <span title="dom-selection-anchorNode"> <a href="#anchornode"> <ins>anchorNode </ins> </a> </span> <ins>; readonly attribute long </ins> <span title="dom-selection-anchorOffset"> <a href="#anchoroffset"> <ins>anchorOffset </ins> </a> </span> <ins>; readonly attribute Node </ins> <span title="dom-selection-focusNode"> <a href="#focusnode"> <ins>focusNode </ins> </a> </span> <ins>; readonly attribute long </ins> <span title="dom-selection-focusOffset"> <a href="#focusoffset"> <ins>focusOffset </ins> </a> </span> <ins>; readonly attribute boolean </ins> <span title="dom-selection-isCollapsed"> <a href="#iscollapsed"> <ins>isCollapsed </ins> </a> </span> <ins>; void </ins> <span title="dom-selection-collapse"> <a href="#collapse"> <ins>collapse </ins> </a> </span> <ins>(in Node parentNode, in long offset); void </ins> <span title="dom-selection-collapseToStart"> <a href="#collapsetostart"> <ins>collapseToStart </ins> </a> </span> <ins>(); void </ins> <span title="dom-selection-collapseToEnd"> <a href="#collapsetoend"> <ins>collapseToEnd </ins> </a> </span> <ins>(); void </ins> <span title="dom-selection-selectAllChildren"> <a href="#selectallchildren"> <ins>selectAllChildren </ins> </a> </span> <ins>(in Node parentNode); void </ins> <span title="dom-selection-deleteFromDocument"> <a href="#deletefromdocument"> <ins>deleteFromDocument </ins> </a> </span> <ins>(); readonly attribute long </ins> <span title="dom-selection-rangeCount"> <a href="#rangecount"> <ins>rangeCount </ins> </a> </span> <ins>; Range </ins> <span title="dom-selection-getRangeAt"> <a href="#getrangeat"> <ins>getRangeAt </ins> </a> </span> <ins>(in long index); void </ins> <span title="dom-selection-addRange"> <a href="#addrange0"> <ins>addRange </ins> </a> </span> <ins>(in Range range); void </ins> <span title="dom-selection-removeRange"> <a href="#removerange0"> <ins>removeRange </ins> </a> </span> <ins>(in Range range); void </ins> <span title="dom-selection-removeAllRanges"> <a href="#removeallranges"> <ins>removeAllRanges </ins> </a> </span> <ins>(); DOMString </ins> <span title="dom-selection-toString"> <a href="#tostring"> <ins>toString </ins> </a> </span> <ins>(); }; </ins> </pre> <p> <ins>The </ins> <code> <a href="#selection1"> <ins>Selection </ins> </a> </code> <ins>interface is represents a list of </ins> <code> <ins>Range </ins> </code> <ins>objects. The first item in the list has index 0, and the last item has index </ins> <var> <ins>count </ins> </var> <ins>-1, where </ins> <var> <ins>count </ins> </var> <ins>is the number of ranges in the list. </ins> <a
   href="#refsDOM2RANGE"> <ins>[DOM2RANGE] </ins> </a> <p> <ins>All of the members of the </ins> <code> <a
   href="#selection1"> <ins>Selection </ins> </a> </code> <ins>interface are defined in terms of operations on the </ins> <code> <ins>Range </ins> </code> <ins>objects represented by this object. These operations can raise exceptions, as defined for the </ins> <code> <ins>Range </ins> </code> <ins>interface; this can therefore result in the members of the </ins> <code> <a href="#selection1"> <ins>Selection </ins> </a> </code> <ins>interface raising exceptions as well, in addition to any explicitly called out below. </ins> </p> <p> <ins>The </ins> <dfn id="anchornode"
   title="dom-selection-anchorNode"> <code> <ins>anchorNode </ins> </code> </dfn> <ins>attribute must return the value returned by the </ins> <code title=""> <ins>startContainer </ins> </code> <ins>attribute of the last </ins> <code> <ins>Range </ins> </code> <ins>object in the list, or null if the list is empty. </ins> <p> <ins>The </ins> <dfn id="anchoroffset"
   title="dom-selection-anchorOffset"> <code> <ins>anchorOffset </ins> </code> </dfn> <ins>attribute must return the value returned by the </ins> <code
   title=""> <ins>startOffset </ins> </code> <ins>attribute of the last </ins> <code> <ins>Range </ins> </code> <ins>object in the list, or 0 if the list is empty. </ins> <p> <ins>The </ins> <dfn id="focusnode"
   title="dom-selection-focusNode"> <code> <ins>focusNode </ins> </code> </dfn> <ins>attribute must return the value returned by the </ins> <code title=""> <ins>endContainer </ins> </code> <ins>attribute of the last </ins> <code> <ins>Range </ins> </code> <ins>object in the list, or null if the list is empty. </ins> <p> <ins>The </ins> <dfn id="focusoffset"
   title="dom-selection-focusOffset"> <code> <ins>focusOffset </ins> </code> </dfn> <ins>attribute must return the value returned by the </ins> <code title=""> <ins>endOffset </ins> </code> <ins>attribute of the last </ins> <code> <ins>Range </ins> </code> <ins>object in the list, or 0 if the list is empty. </ins> <p> <ins>The </ins> <dfn id="iscollapsed"
   title="dom-selection-isCollapsed"> <code> <ins>isCollapsed </ins> </code> </dfn> <ins>attribute must return true if there are zero ranges, or if there is exactly one range and its </ins> <code title=""> <ins>collapsed </ins> </code> <ins>attribute is itself true. Otherwise it must return false. </ins> <p> <ins>The </ins> <dfn id="collapse"
   title="dom-selection-collapse"> <code> <ins>collapse( </ins> <var> <ins>parentNode </ins> </var> <ins>, </ins> <var> <ins>offset </ins> </var> <ins>) </ins> </code> </dfn> <ins>method must raise a </ins> <code> <ins>WRONG_DOCUMENT_ERR </ins> </code> <ins>DOM exception if </ins> <var> <ins>parentNode </ins> </var> <ins>'s </ins> <code title=""> <ins>ownerDocument </ins> </code> <ins>is not the </ins> <code> <a
   href="#documentwindow"> <ins>DocumentWindow </ins> </a> </code> <ins>object with which the </ins> <code> <a href="#selection1"> <ins>Selection </ins> </a> </code> <ins>object is associated. Otherwise it is, and the method must remove all the ranges in the </ins> <code> <a
   href="#selection1"> <ins>Selection </ins> </a> </code> <ins>list, then create a new </ins> <code> <ins>Range </ins> </code> <ins>object, add it to the list, and invoke its </ins> <code
   title=""> <ins>setStart() </ins> </code> <ins>and </ins> <code title=""> <ins>setEnd() </ins> </code> <ins>methods with the </ins> <var> <ins>parentNode </ins> </var> <ins>and </ins> <var> <ins>offset </ins> </var> <ins>values as their arguments. </ins> <p> <ins>The </ins> <dfn id="collapsetostart"
   title="dom-selection-collapseToStart"> <code> <ins>collapseToStart() </ins> </code> </dfn> <ins>method must raise an </ins> <code> <ins>INVALID_STATE_ERR </ins> </code> <ins>DOM exception if there are no ranges in the list. Otherwise, it must invoke the </ins> <code
   title="dom-selection-collapse"> <a href="#collapse"> <ins>collapse() </ins> </a> </code> <ins>method with the </ins> <code title=""> <ins>startContainer </ins> </code> <ins>and </ins> <code
   title=""> <ins>startOffset </ins> </code> <ins>values of the first </ins> <code> <ins>Range </ins> </code> <ins>object in the list as the arguments. </ins> <p> <ins>The </ins> <dfn id="collapsetoend"
   title="dom-selection-collapseToEnd"> <code> <ins>collapseToEnd() </ins> </code> </dfn> <ins>method must raise an </ins> <code> <ins>INVALID_STATE_ERR </ins> </code> <ins>DOM exception if there are no ranges in the list. Otherwise, it must invoke the </ins> <code
   title="dom-selection-collapse"> <a href="#collapse"> <ins>collapse() </ins> </a> </code> <ins>method with the </ins> <code title=""> <ins>endContainer </ins> </code> <ins>and </ins> <code
   title=""> <ins>endOffset </ins> </code> <ins>values of the last </ins> <code> <ins>Range </ins> </code> <ins>object in the list as the arguments. </ins> <p> <ins>The </ins> <dfn id="selectallchildren"
   title="dom-selection-selectAllChildren"> <code> <ins>selectAllChildren( </ins> <var> <ins>parentNode </ins> </var> <ins>) </ins> </code> </dfn> <ins>method must invoke the </ins> <code title="dom-selection-collapse"> <a
   href="#collapse"> <ins>collapse() </ins> </a> </code> <ins>method with the </ins> <var> <ins>parentNode </ins> </var> <ins>value as the first argument and 0 as the second argument, and must then invoke the </ins> <code
   title=""> <ins>selectNodeContents() </ins> </code> <ins>method on the first (and only) range in the list with the </ins> <var> <ins>parentNode </ins> </var> <ins>value as the argument. </ins> <p> <ins>The </ins> <dfn id="deletefromdocument"
   title="dom-selection-deleteFromDocument"> <code> <ins>deleteFromDocument() </ins> </code> </dfn> <ins>method must invoke the </ins> <code title=""> <ins>deleteContents() </ins> </code> <ins>method on each range in the list, if any, from first to last. </ins> <p> <ins>The </ins> <dfn id="rangecount"
   title="dom-selection-rangeCount"> <code> <ins>rangeCount </ins> </code> </dfn> <ins>attribute must return the number of ranges in the list. </ins> <p> <ins>The </ins> <dfn id="getrangeat"
   title="dom-selection-getRangeAt"> <code> <ins>getRangeAt( </ins> <var> <ins>index </ins> </var> <ins>) </ins> </code> </dfn> <ins>method must return the </ins> <var> <ins>index </ins> </var> <ins>th range in the list. If </ins> <var> <ins>index </ins> </var> <ins>is less than zero or greater or equal to the value returned by the </ins> <code title="dom-selection-rangeCount"> <a
   href="#rangecount"> <ins>rangeCount </ins> </a> </code> <ins>attribute, then the method must raise an </ins> <code> <ins>INDEX_SIZE_ERR </ins> </code> <ins>DOM exception. </ins> <p> <ins>The </ins> <dfn id="addrange0"
   title="dom-selection-addRange"> <code> <ins>addRange( </ins> <var> <ins>range </ins> </var> <ins>) </ins> </code> </dfn> <ins>method must add the given </ins> <var> <ins>range </ins> </var> <ins>Range object to the list of selections, at the end (so the newly added range is the new last range). Duplicates are not prevented; a range may be added more than once in which case it appears in the list more than once, which (for example) will cause </ins> <code title="dom-selection-toString"> <a
   href="#tostring"> <ins>toString() </ins> </a> </code> <ins>to return the range's text twice. </ins> </p> <p> <ins>The </ins> <dfn id="removerange0"
   title="dom-selection-removeRange"> <code> <ins>removeRange( </ins> <var> <ins>range </ins> </var> <ins>) </ins> </code> </dfn> <ins>method must remove the first occurrence of </ins> <var> <ins>range </ins> </var> <ins>in the list of ranges, if it appears at all. </ins> <p> <ins>The </ins> <dfn id="removeallranges"
   title="dom-selection-removeAllRanges"> <code> <ins>removeAllRanges() </ins> </code> </dfn> <ins>method must remove all the ranges from the list of ranges, such that the </ins> <code title="dom-selection-rangeCount"> <a
   href="#rangecount"> <ins>rangeCount </ins> </a> </code> <ins>attribute returns 0 after the </ins> <code title="dom-selection-removeAllRanges"> <a
   href="#removeallranges"> <ins>removeAllRanges() </ins> </a> </code> <ins>method is invoked (and until a new range is added to the list, either through this interface or via user interaction). </ins> <p> <ins>The </ins> <dfn id="tostring"
   title="dom-selection-toString"> <code> <ins>toString() </ins> </code> </dfn> <ins>method must return a concatenation of the results of invoking the </ins> <code
   title=""> <ins>toString() </ins> </code> <ins>method of the </ins> <code> <ins>Range </ins> </code> <ins>object on each of the ranges of the selection, in the order they appear in the list (first to last). </ins> <p> <ins>In language bindings where this is supported, objects implementing the </ins> <code> <a href="#selection1"> <ins>Selection </ins> </a> </code> <ins>interface must stringify to the value returned by the object's </ins> <code
   title="dom-selection-toString"> <a href="#tostring"> <ins>toString() </ins> </a> </code> <ins>method. </ins> <div class="example"> <p> <ins>In the following document fragment, the emphasised parts indicate the selection. </ins> </p> <pre> <ins>&lt;p>The cute girl likes </ins> <em> <ins>the </ins> </em> <ins>&lt;cite> </ins> <em> <ins>Oxford English </ins> </em> <ins>Dictionary&lt;/cite>.&lt/p> </ins> </pre> <p> <ins>If a script invoked </ins> <code
    title=""> <ins>window.getSelection().toString() </ins> </code> <ins>, the return value would be " </ins> <code> <ins>the Oxford English </ins> </code> <ins>". </ins> </p> </div> <p class="note"> <ins>The </ins> <code> <a href="#selection1"> <ins>Selection </ins> </a> </code> <ins>interface has no relation to the </ins> <code> <a
   href="#selectedrowranges"> <ins>SelectedRowRanges </ins> </a> </code> <ins>interface. </ins> <h4 id="apis-for0"> <span class="secno"> <ins>5.5.2. </ins> </span> <ins>APIs for the text field selections </ins> </h4> <p class="big-issue"> <ins>This section will refer to the IDLs for HTMLTextAreaElement and HTMLInputElement, most notably their select() method, the selectionStart and selectionEnd attributes, and the setSelectionRange() method. </ins> </p> <h2 id="multimedia"> <span class="secno"> <ins>6. </ins> <del>5. </del> </span> Multimedia </h2> <p class="big-issue"> should we move all the img, object, embed, iframe, etc, elements here? <h3 id="scs-dynamic">  <span class="secno"> <ins>6.1. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> <del>5.1. </del> </span> Dynamic graphics: The bitmap canvas </h3> <p class="big-issue"> <ins>This needs to be reviewed for normative criteria. As it stands there is terrible abuse of the word "should", for example. </ins> <p> The <dfn id="canvas"> <code> canvas </code> </dfn> element represents a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, or other visual images on the fly. <p> When authors use the <code> <a href="#canvas"> canvas </a> </code> element, they should also provide content that, when presented to the user, conveys essentially the same function or purpose as the bitmap canvas. This content may be placed as content of the <code> <a
   href="#canvas"> canvas </a> </code> element. <p> Authors should not use the <code> <a href="#canvas"> canvas </a> </code> element in a document when a more suitable element is available. For example, it is inappropriate to use a <code> <a
   href="#canvas"> canvas </a> </code> element to render a page heading: if the desired presentation of the heading is graphically intense, it should be marked up using appropriate elements (typically <code> <a
   href="#h10"> h1 </a> </code> ) and then styled using CSS and supporting technologies such as XBL. <p> In non-visual media, and in visual media with scripting disabled, the <code> <a href="#canvas"> canvas </a> </code> element should be treated as an ordinary block-level element and the fallback content should therefore be used instead. <p> In non-interactive, static, visual media, if the <code> <a
   href="#canvas"> canvas </a> </code> element has been previously painted on (e.g. if the page was viewed in an interactive visual media and is now being printed, or if some script that ran during the page layout process painted on the element), then the <code> <a
   href="#canvas"> canvas </a> </code> element should be treated as a replaced block-level element with the current image and size. Otherwise, the element should be treated as an ordinary block-level element and the fallback content should therefore be used instead. <p> In interactive visual media with scripting enabled, the canvas element is a block-level replaced element. <p> In CSS-aware user agents, this should be achieved by including the following rules, or their equivalent, in the UA's user agent style sheet: <pre> @namespace xh url(http://www.w3.org/1999/xhtml); xh|canvas { display: block; } </pre> <p> The <code> <a href="#canvas"> canvas </a> </code> element has two attributes to control the size of the coordinate space: <code> height </code> and <code> width </code> . These attributes each take a positive integer value (one digit in the range 1-9 followed by zero or more digits in the range 0-9, interpreted in base ten). If an attribute is missing, or if it has a value that does not match this syntax, then the default values must be used instead. The <code> width </code> attribute defaults to 300, and the <code> height </code> attribute defaults to 150. <p> The intrinsic dimensions of the <code> <a
   href="#canvas"> canvas </a> </code> element equal the size of the coordinate space, with the numbers interpreted in CSS pixels. However, the element can be sized arbitrarily by a style sheet. During rendering, the image is scaled to fit this layout size. <p> The size of the coordinate space does not necessarily represent the size of the actual bitmap that the user agent will use internally or during rendering. On high-definition displays, for instance, the user agent may internally use a bitmap with two device pixels per unit in the coordinate space, so that the rendering remains at high quality throughout. <p> If the <code> width </code> and <code> height </code> attributes are dynamically modified, the bitmap and any associated contexts must be cleared back to their initial state and reinitialised with the newly specified coordinate space dimensions. <p> The canvas is initially fully transparent black. Whenever the <code> width </code> and <code> height </code> attributes are changed, the canvas must be cleared back to this state. </p> <p> As with any replaced element, the CSS background properties do apply to <code> <a href="#canvas"> canvas </a> </code> elements; they are rendered below the canvas image. <pre
   class="idl"> interface <dfn id="htmlcanvaselement"> HTMLCanvasElement </dfn> : <span> <a href="#htmlelement"> HTMLElement </a> </span> { // returns the values of the width and height attributes, or the assumed // defaults if the attributes were not specified or invalid // sets the relevant content attributes on setting attribute long width; attribute long height; // returns a data: URI representing the current image as a PNG DOMString <span> <a href="#todataurl"> toDataURL() </a> </span> ; // returns a data: URI representing the current image in the specified format DOMString <span title="toDataURL-type"> <a href="#todataurl0"> toDataURL </a> </span> (in DOMString type); // returns the context with which to paint, see below DOMObject <span> <a href="#getcontext"> getContext </a> </span> (in DOMString contextID); }; </pre> <p> To draw on the canvas, authors must first obtain a reference to a <dfn
   id="context2">  context </dfn> using the <dfn
   id="getcontext"> <code> getContext </code> </dfn> method of the <code> <a
   href="#canvas"> canvas </a> </code> element. <p> This specification only defines one context, with the name " <code> <a
   href="#d"> 2d </a> </code> ". If <code> <a
   href="#getcontext"> getContext() </a> </code> is called with that exact string, then the UA must return a reference to an object implementing <code> <a
   href="#canvasrenderingcontext2d"> CanvasRenderingContext2D </a> </code> . Other specifications may define their own contexts, which would return different objects. <p> Vendors may also define experimental contexts using the syntax <code> <var title=""> vendorname </var> - <var title=""> context </var> </code> , for example, <code> moz-3d </code> . <p> When the UA is passed an empty string or a string specifying a context that it does not support, then it must return null. String comparisons should be literal and case sensitive. <p class="note"> A future version of this specification will probably define a <code> 3d </code> context (probably based on the OpenGL ES API). <p> The <dfn id="todataurl"> <code> toDataURL() </code> </dfn> method must, when called with no arguments, return a <code> data: </code> URI containing a representation of the image as a PNG file. <a href="#refsPNG"> [PNG] </a> . <p> The <dfn id="todataurl0" title="toDataURL-type">  <code> toDataURL( <var
   title="">  type </var> ) </code> </dfn> method (when called with one <em> or more </em> arguments) must return a <code> data: </code> URI containing a representation of the image in the format given by <var
   title="">  type </var> . The possible values are MIME types with no parameters, for example <code> image/png </code> , <code> image/jpeg </code> , or even maybe <code> image/svg+xml </code> if the implementation actually keeps enough information to reliably render an SVG image from the canvas. <p> Only support for <code> image/png </code> is required. User agents may support other types. If the user agent does not support the requested type, it must return the image using the PNG format. <p> User agents must convert the provided type to lower case before establishing if they support that type and before creating the <code> data: </code> URL. </p> <p class="note"> When trying to use types other than <code> image/png </code> , authors can check if the image was really returned in the requested format by checking to see if the returned string starts with the exact string " <code> data:image/png </code> " or not. If it does, the image is PNG, and thus the requested type was not supported. <p> Arguments other than the <var title="">  type </var> must be ignored, and must not cause the user agent to raise an exception (as would normally occur if a method was called with the wrong number of arguments). A future version of this specification will probably allow extra parameters to be passed to <code> <a href="#todataurl"> toDataURL() </a> </code> to allow authors to more carefully control compression settings, image metadata, etc. <p> <strong> Security: </strong> To prevent <em> information leakage </em> , the <code> <a href="#todataurl"> toDataURL() </a> </code> methods should raise a <span> security exception </span> if the canvas ever had images painted on it that originate from a domain other than the <span> <a
   href="#domain0"> <ins>script's </ins> domain </a> </span> <ins>. </ins> <del>of the script's own domain. </del> <h4 id="the-2d"> <span class="secno"> <ins>6.1.1. </ins> <del>5.1.1. </del> </span> The 2D context </h4> <p> When the <code> <a href="#getcontext"> getContext() </a> </code> method of a <code> <a href="#canvas"> canvas </a> </code> element is invoked with <dfn
   id="d"> <code> 2d </code> </dfn> as the argument, a <code> <a
   href="#canvasrenderingcontext2d"> CanvasRenderingContext2D </a> </code> object is returned. <p> There is only one <code> <a
   href="#canvasrenderingcontext2d"> CanvasRenderingContext2D </a> </code> object per canvas, so calling the <code> <a
   href="#getcontext"> getContext() </a> </code> method with the <code> <a
   href="#d"> 2d </a> </code> argument a second time must return the same object. <pre
   class="idl"> interface <dfn id="canvasrenderingcontext2d"> CanvasRenderingContext2D </dfn> { // back-reference to the canvas readonly attribute HTMLCanvasElement canvas; // state void save(); // push state on state stack void restore(); // pop state stack and restore state // transformations (default transform is the identity matrix) void scale(in float x, in float y); void rotate(in float angle); void translate(in float x, in float y); // compositing attribute float globalAlpha; // (default 1.0) attribute DOMString globalCompositeOperation; // (default over) // colours and styles attribute DOMObject strokeStyle; // (default black) attribute DOMObject fillStyle; // (default black) CanvasGradient createLinearGradient(in float x0, in float y0, in float x1, in float y1); CanvasGradient createRadialGradient(in float x0, in float y0, in float r0, in float x1, in float y1, in float r1); CanvasPattern createPattern(in HTMLImageElement image, DOMString repetition); CanvasPattern createPattern(in HTMLCanvasElement image, DOMString repetition); // line caps/joins attribute float lineWidth; // (default 1) attribute DOMString lineCap; // "butt", "round", "square" (default "butt") attribute DOMString lineJoin; // "round", "bevel", "miter" (default "miter") attribute float miterLimit; // (default 10) // shadows attribute float shadowOffsetX; // (default 0) attribute float shadowOffsetY; // (default 0) attribute float shadowBlur; // (default 0) attribute DOMString shadowColor; // (default black) // rects void clearRect(in float x, in float y, in float w, in float h); void fillRect(in float x, in float y, in float w, in float h); void strokeRect(in float x, in float y, in float w, in float h); // path API void beginPath(); void closePath(); void moveTo(in float x, in float y); void lineTo(in float x, in float y); void quadraticCurveTo(in float cpx, in float cpy, in float x, in float y); void bezierCurveTo(in float cp1x, in float cp1y, in float cp2x, in float cp2y, in float x, in float y); void arcTo(in float x1, in float y1, in float x2, in float y2, in float radius); void rect(in float x, in float y, in float w, in float h); void arc(in float x, in float y, in float radius, in float startAngle, in float endAngle, in boolean anticlockwise); void fill(); void stroke(); void clip(); // drawing images void drawImage(in HTMLImageElement image, in float dx, in float dy); void drawImage(in HTMLImageElement image, in float dx, in float dy, in float dw, in float dh); void drawImage(in HTMLImageElement image, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh); void drawImage(in HTMLCanvasElement image, in float dx, in float dy); void drawImage(in HTMLCanvasElement image, in float dx, in float dy, in float dw, in float dh); void drawImage(in HTMLCanvasElement image, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh); // drawing text is not supported in this version of the API // (there is no way to predict what metrics the fonts will have, // which makes fonts very hard to use for painting) }; interface <dfn id="canvasgradient"> CanvasGradient </dfn> { // opaque object void addColorStop(in float offset, in DOMString color); <ins>}; </ins> <del>} </del> interface <dfn id="canvaspattern"> CanvasPattern </dfn> { // opaque object <ins>}; </ins> <del>} </del> </pre> <p> The <dfn id="canvas0"
   title="2d-context-canvas"> <code> canvas </code> </dfn> attribute returns the <code> <a href="#canvas"> canvas </a> </code> element that the context paints on. <h5 id="the-canvas"> <span class="secno"> <ins>6.1.1.1. </ins> <del>5.1.1.1. </del> </span> The canvas state </h5> <p> Each context maintains a stack of drawing states. <dfn id="drawing0"
   title="drawing state"> Drawing states </dfn> consist of: <ul> <li> The current transformation matrix. <li> The current clip region. <li> The current values of the following attributes: <code> <a
    href="#strokestyle"> strokeStyle </a> </code> , <code> <a
    href="#fillstyle"> fillStyle </a> </code> , <code> <a
    href="#globalalpha"> globalAlpha </a> </code> , <code> <a
    href="#linewidth"> lineWidth </a> </code> , <code> <a
    href="#linecap"> lineCap </a> </code> , <code> <a
    href="#linejoin"> lineJoin </a> </code> , <code> <a
    href="#miterlimit"> miterLimit </a> </code> , <code> <a
    href="#shadowoffsetx"> shadowOffsetX </a> </code> , <code> <a
    href="#shadowoffsety"> shadowOffsetY </a> </code> , <code> <a
    href="#shadowblur"> shadowBlur </a> </code> , <code> <a
    href="#shadowcolor"> shadowColor </a> </code> , <code> <a
    href="#globalcompositeoperation"> globalCompositeOperation </a> </code> . </ul> <p class="note"> The current path and the current bitmap are not part of the drawing state. The current path is persistent, and can only be reset using the <code> <a href="#beginpath"> beginPath() </a> </code> method. The current bitmap is <span title="image"> a property of the canvas </span> , not the context. <p> The <dfn id="save"> <code> save() </code> </dfn> method pushes a copy of the current drawing state onto the drawing state stack. <p> The <dfn id="restore"> <code> restore() </code> </dfn> method pops the top entry in the drawing state stack, and resets the drawing state it describes. If there is no saved state, the method does nothing. <h5 id="transformations"> <span class="secno"> <ins>6.1.1.2. </ins> <del>5.1.1.2. </del> </span> <dfn
   id="transformations1"> Transformations </dfn> </h5> <p> The transformation matrix is applied to all drawing operations prior to their being rendered. It is also applied when creating the clip region. <p> When the context is created, the transformation matrix is initially the identity transform. It may then be adjusted using the three transformation methods. <p> The transformations are performed in reverse order. For instance, if a scale transformation that doubles the width is applied, followed by a rotation transformation that rotates drawing operations by a quarter turn, and a rectangle twice as wide as it is tall is then drawn on the canvas, the actual result will be a square. <p> The <dfn id="scalex" title="scale"> <code> scale(x, y) </code> </dfn> method adds a scaling transformation to the transformation matrix. The <code> x </code> argument represents the scale factor in the horizontal direction and the <code> y </code> argument represents the scale factor in the vertical direction. The factors are multiples. <p> The <dfn id="rotateangle"
   title="rotate"> <code> rotate(angle) </code> </dfn> method adds a rotation transformation to the transformation matrix. The <code> angle </code> argument represents a clockwise rotation angle expressed in radians. <p> The <dfn id="translatex" title="translate"> <code> translate(x, y) </code> </dfn> method adds a translating transformation to the transformation matrix. The <code> x </code> argument represents the translation distance in the horizontal direction and the <code> y </code> argument represents the translation distance in the vertical direction. The arguments are in coordinate space units. <h5 id="compositing"> <span class="secno"> <ins>6.1.1.3. </ins> <del>5.1.1.3. </del> </span> Compositing </h5> <p> All drawing operations are affected by the global compositing attributes, <code> <a href="#globalalpha"> globalAlpha </a> </code> and <code> <a
   href="#globalcompositeoperation"> globalCompositeOperation </a> </code> . <p> The <dfn id="globalalpha"> <code> globalAlpha </code> </dfn> attribute gives an alpha value that is applied to shapes and images before they are composited onto the canvas. The valid range of values is from 0.0 (fully transparent) to 1.0 (no additional transparency). If the attribute is set to values outside this range, they are ignored. When the context is created, the <code> <a href="#globalalpha"> globalAlpha </a> </code> attribute <ins>must </ins> initially <ins>have </ins> <del>has </del> the value 1.0. <p> The <dfn
   id="globalcompositeoperation"> <code> globalCompositeOperation </code> </dfn> attribute sets how shapes and images are drawn onto the existing bitmap, once they have had <code> <a href="#globalalpha"> globalAlpha </a> </code> and the current transformation matrix applied. It may be set to any of the values in the following list. In the descriptions below, the source image is the shape or image being rendered, and the destination image is the current state of the bitmap. <p class="issue"> The source-* descriptions below don't define what should happen with semi-transparent regions. <dl> <dt> <dfn id="source-atop"
    title="gcop-source-atop"> <code> source-atop </code> </dfn> <dd> Display the source image wherever both images are opaque. Display the destination image wherever the destination image is opaque but the source image is transparent. Display transparency elsewhere. <dt> <dfn id="source-in"
    title="gcop-source-in"> <code> source-in </code> </dfn> <dd> Display the source image wherever both the source image and destination image are opaque. Display transparency elsewhere. <dt> <dfn id="source-out"
    title="gcop-source-out"> <code> source-out </code> </dfn> <dd> Display the source image wherever the source image is opaque and the destination image is transparent. Display transparency elsewhere. <dt> <dfn id="source-over"
    title="gcop-source-over"> <code> source-over </code> </dfn> (default) <dd> Display the source image wherever the source image is opaque. Display the destination image elsewhere. <dt> <dfn id="destination-atop"
    title="gcop-destination-atop"> <code> destination-atop </code> </dfn> <dd> Same as <code> source-atop </code> but using the destination image instead of the source image and vice versa. <dt> <dfn id="destination-in"
    title="gcop-destination-in"> <code> destination-in </code> </dfn> <dd> Same as <code> source-in </code> but using the destination image instead of the source image and vice versa. <dt> <dfn id="destination-out"
    title="gcop-destination-out"> <code> destination-out </code> </dfn> <dd> Same as <code> source-out </code> but using the destination image instead of the source image and vice versa. <dt> <dfn id="destination-over"
    title="gcop-destination-over"> <code> destination-over </code> </dfn> <dd> Same as <code> source-over </code> but using the destination image instead of the source image and vice versa. <dt> <dfn id="darker" title="gcop-darker"> <code> darker </code> </dfn> <dd> Display the sum of the source image and destination images, with color values approaching 0 as a limit. <dt> <dfn id="lighter" title="gcop-lighter"> <code> lighter </code> </dfn> <dd> Display the sum of the source image and destination image, with color values approaching 1 as a limit. <dt> <dfn id="copy" title="gcop-copy"> <code> copy </code> </dfn> <dd> Display the source image instead of the destination image. <dt> <dfn id="xor" title="gcop-xor"> <code> xor </code> </dfn> <dd> Exclusive OR of the source and destination images. <dt> <code> <var title=""> vendorName </var> - <var
    title=""> operationName </var> </code> <dd> Vendor-specific extensions to the list of composition operators should use this syntax. </dl> <p> If the user agent does not recognise the specified value, it must be ignored, leaving the value of <code> <a
   href="#globalcompositeoperation"> globalCompositeOperation </a> </code> unaffected. <p> When the context is created, the <code> <a
   href="#globalcompositeoperation"> globalCompositeOperation </a> </code> attribute <ins>must </ins> initially <ins>have </ins> <del>has </del> the value <code> source-over </code> . <h5 id="colours"> <span class="secno"> <ins>6.1.1.4. </ins> <del>5.1.1.4. </del> </span> Colours and styles </h5> <p> The <dfn id="strokestyle"> <code> strokeStyle </code> </dfn> attribute represents the colour or style to use for the lines around shapes, and the <dfn id="fillstyle"> <code> fillStyle </code> </dfn> attribute represents the colour or style to use inside the shapes. <p> Both attributes can be either strings, <code> <a
   href="#canvasgradient0"> CanvasGradient </a> </code> s, or <code> <a
   href="#canvaspattern0"> CanvasPattern </a> </code> s. On setting, strings should be parsed as CSS &lt;color&gt; values. <a
   href="#refsCSS3COLOR"> [CSS3COLOR] </a> If the value is a string but is not a valid colour, or is neither a string, a <code> <a
   href="#canvasgradient0"> CanvasGradient </a> </code> , nor a <code> <a
   href="#canvaspattern0"> CanvasPattern </a> </code> , then it must be ignored, and the attribute must retain its previous value. <p> On getting, if the value is a color, then: if it has alpha equal to 1.0, then the colour must be returned as an uppercase six-digit hex value, prefixed with a "#" character (U+0023 NUMBER SIGN), with the first two digits representing the red component, the next two digits representing the green component, and the last two digits representing the blue component, the digits being in the range 0-9 A-F (U+0030 to U+0039 and U+0041 to U+0046). If the value has alpha less than 1.0, then the value must instead be returned in the CSS <code> rgba() </code> functional-notation format: the literal string <code> rgba </code> (U+0072 U+0067 U+0062 U+0061) followed by a U+0028 LEFT PARENTHESIS, a base-ten integer in the range 0-255 representing the red component (using digits 0-9, U+0030 to U+0039), a literal U+0020 SPACE and U+002C COMMA, an integer for the green component, a space and a comma, an integer for the blue component, another space and comma, a U+0030 DIGIT ZERO, a U+002E FULL STOP (representing the decimal point), one or more digits in the range 0-9 (U+0030 to U+0039) representing the fractional part of the alpha value, and finally a U+0029 RIGHT PARENTHESIS. <p> Otherwise, if it is not a color but a <code> <a
   href="#canvasgradient0"> CanvasGradient </a> </code> or <code> <a
   href="#canvaspattern0"> CanvasPattern </a> </code> , then an object supporting those interfaces must be returned. Such objects are opaque and therefore only useful for assigning to other attributes or for comparison to other gradients or patterns. <p> When the context is created, the <code> <a
   href="#strokestyle"> strokeStyle </a> </code> and <code> <a
   href="#fillstyle"> fillStyle </a> </code> <ins>attribute smust </ins> <del>attributes </del> initially have the string value <code> #000000 </code> . <p> There are two types of gradients, linear gradients and radial gradients, both represented by objects implementing the opaque <dfn
   id="canvasgradient0"> <code> CanvasGradient </code> </dfn> interface. <p> Once a gradient has been created (see below), stops must be placed along it to define how the colours are distributed along the gradient. Between each such stop, the colours and the alpha component are interpolated over the RGBA space to find the colour to use at that offset. Immediately before the 0 offset and immediately after the 1 offset, transparent black stops are assumed. <p> The <dfn id="addcolorstopoffset"
   title="addColorStop"> <code> addColorStop(offset, color) </code> </dfn> method on the <code> <a href="#canvasgradient0"> CanvasGradient </a> </code> interface adds a new stop to a gradient. If the <var title=""> offset </var> is less than 0 or greater than 1 then an <code> INDEX_SIZE_ERR </code> exception is raised. If the <var title=""> color </var> cannot be parsed as a CSS colour, then a <code> SYNTAX_ERR </code> exception is raised. Otherwise, the gradient is updated with the new stop information. <p> The <dfn id="createlineargradientx0"
   title="createLinearGradient"> <code> createLinearGradient(x0, y0, x1, y1) </code> </dfn> method takes four arguments, representing the start point ( <var title=""> x0 </var> , <var title=""> y0 </var> ) and end point ( <var
   title=""> x1 </var> , <var title=""> y1 </var> ) of the gradient, in coordinate space units, and returns a linear <code> <a
   href="#canvasgradient0"> CanvasGradient </a> </code> initialised with that line. <p> Linear gradients are rendered such that at the starting point on the canvas the colour at offset 0 is used, that at the ending point the color at offset 1 is used, that all points on a line perpendicular to the line between the start and end points have the colour at the point where those two lines cross, and that any points beyond the start or end points are a transparent black. (Of course, the colours are only painted where the shape they are being painted on needs them.) <p> The <dfn id="createradialgradientx0"
   title="createRadialGradient"> <code> createRadialGradient(x0, y0, r0, x1, y1, r1) </code> </dfn> method takes six arguments, the first three representing the start circle with origin ( <var title=""> x0 </var> , <var
   title=""> y0 </var> ) and radius <var title=""> r0 </var> , and the last three representing the end circle with origin ( <var title=""> x1 </var> , <var
   title=""> y1 </var> ) and radius <var title=""> r1 </var> . The values are in coordinate space units. The method returns a radial <code> <a
   href="#canvasgradient0"> CanvasGradient </a> </code> initialised with those two circles. <p> Radial gradients are rendered such that a cone is created from the two circles, so that at the circumference of the starting circle the colour at offset 0 is used, that at the circumference around the ending circle the color at offset 1 is used, that the circumference of a circle drawn a certain fraction of the way along the line between the two origins with a radius the same fraction of the way between the two radii has the colour at that offset, that the end circle appear to be above the start circle when the end circle is not completely enclosed by the start circle, and that any points not described by the gradient are a transparent black. <p> If a gradient has no stops defined, then the gradient is treated as a solid transparent black. Gradients are, naturally, only painted where the stroking or filling effect requires that they be drawn. <p> Support for actually painting gradients is optional. Instead of painting the gradients, user agents may instead just paint the first stop's colour. However, <code> <a
   href="#createlineargradientx0"> createLinearGradient() </a> </code> and <code> <a href="#createradialgradientx0"> createRadialGradient() </a> </code> must always return objects when passed valid arguments. <p> Patterns are represented by objects implementing the opaque <dfn
   id="canvaspattern0"> <code> CanvasPattern </code> </dfn> interface. <p> To create objects of this type, the <dfn id="createpatternimage"
   title="createPattern"> <code> createPattern(image, repetition) </code> </dfn> method is used. The first argument gives the image to use as the pattern (either an <code> <a href="#htmlimageelement"> HTMLImageElement </a> </code> or an <code> <a href="#htmlcanvaselement"> HTMLCanvasElement </a> </code> ). Modifying this image after calling the <code> <a
   href="#createpatternimage"> createPattern() </a> </code> method must not affect the pattern. The second argument must be a string with one of the following values: <code> repeat </code> , <code> repeat-x </code> , <code> repeat-y </code> , <code> no-repeat </code> . If the empty string or null is specified, <code> repeat </code> is assumed. If an unrecognised value is given, then the user agent must raise a <code> SYNTAX_ERR </code> exception. The method returns a <code> <a
   href="#canvaspattern0"> CanvasPattern </a> </code> object suitably initialised. <p> Patterns are painted so that the first image is centered in the middle of the coordinate space, and images are then repeated horizontally to the left and right (if the <code> repeat-x </code> string was specified) or vertically up and down (if the <code> repeat-y </code> string was specified) or in all four directions all over the canvas (if the <code> repeat </code> string was specified). The images shall not be scaled by this process; one CSS pixel of the image is painted on one coordinate space unit. Of course, patterns must only actually painted where the stroking or filling effect requires that they be drawn. <p> Support for patterns is optional. If the user agent doesn't support patterns, then <code> <a
   href="#createpatternimage"> createPattern() </a> </code> must return null. <h5 id="line-styles"> <span class="secno"> <ins>6.1.1.5. </ins> <del>5.1.1.5. </del> </span> Line styles </h5> <p> The <dfn id="linewidth"> <code> lineWidth </code> </dfn> attribute gives the default width of lines, in coordinate space units. On setting, zero and negative values are ignored, and leave the value unchanged. <p> When the context is created, the <code> <a
   href="#linewidth"> lineWidth </a> </code> attribute <ins>must </ins> initially <ins>have </ins> <del>has </del> the value <code> 1.0 </code> . <p> The <dfn id="linecap"> <code> lineCap </code> </dfn> attribute defines the type of endings that UAs shall place on the end of lines. The three valid values are <code> butt </code> , <code> round </code> , and <code> square </code> . The <code> butt </code> value means that the end of each line is a flat edge perpendicular to the direction of the line. The <code> round </code> value means that a semi-circle with the diameter equal to the width of the line is then added on to the end of the line. The <code> square </code> value means that at the end of each line is a rectangle with the length of the line width and the width of half the line width, placed flat against the edge perpendicular to the direction of the line. On setting, any other value than the literal strings <code> butt </code> , <code> round </code> , and <code> square </code> are ignored and leave the value unchanged. <p> When the context is created, the <code> <a
   href="#linecap"> lineCap </a> </code> attribute <ins>must </ins> initially <ins>have </ins> <del>has </del> the value <code> butt </code> . <p> The <dfn id="linejoin"> <code> lineJoin </code> </dfn> attribute defines the type of corners that that UAs shall place where two lines meet. The three valid values are <code> round </code> , <code> bevel </code> , and <code> miter </code> . <p> On setting, any other value than the literal strings <code> round </code> , <code> bevel </code> and <code> miter </code> are ignored and leave the value unchanged. <p> When the context is created, the <code> <a
   href="#linejoin"> lineJoin </a> </code> attribute <ins>must </ins> initially <ins>have </ins> <del>has </del> the value <code> miter </code> . <p> The <code> round </code> value means that a filled arc connecting the corners on the outside of the join, with the diameter equal to the line width, and the origin at the point where the inside edges of the lines touch, is rendered at the join. The <code> bevel </code> value means that a filled triangle connecting those two corners with a straight line, the third point of the triangle being the point where the lines touch on the inside of the join, is rendered at the join. The <code> miter </code> value means that a filled four- or five-sided polygon is placed at the join, with two of the lines being the perpendicular edges of the joining lines, and the other two being continuations of the outside edges of the two joining lines, as long as required to intersect without going over the miter limit. <p> The miter length is the distance from the point where the lines touch on the inside of the join to the intersection of the line edges on the outside of the join. The miter limit is the maximum allowed ratio of the miter length to the line width. If the miter limit would be exceeded, then a fifth line is added to the polygon, connecting the two outside lines, such that the distance from the inside point of the join to the point in the middle of this fifth line is the maximum allowed value for the miter length. <p> The miter limit ratio can be explicitly set using the <dfn
   id="miterlimit"> <code> miterLimit </code> </dfn> attribute. On setting, zero and negative values are ignored, and leave the value unchanged. <p> When the context is created, the <code> <a
   href="#miterlimit"> miterLimit </a> </code> attribute <ins>must </ins> initially <ins>have </ins> <del>has </del> the value <code> 10.0 </code> . <h5 id="shadows"> <span class="secno"> <ins>6.1.1.6. </ins> <del>5.1.1.6. </del> </span> <dfn
   id="shadows1"> Shadows </dfn> </h5> <p> All drawing operations are affected by the four global shadow attributes. Shadows form part of the source image during composition. <p> The <dfn id="shadowcolor"> <code> shadowColor </code> </dfn> attribute sets the colour of the shadow. <p> When the context is created, the <code> <a
   href="#shadowcolor"> shadowColor </a> </code> attribute initially is fully-transparent black. <p> The <dfn id="shadowoffsetx"> <code> shadowOffsetX </code> </dfn> and <dfn
   id="shadowoffsety"> <code> shadowOffsetY </code> </dfn> attributes specify the distance that the shadow should be offset in the positive horizontal and positive vertical distance respectively. Their values are in coordinate space units. <p> When the context is created, the shadow offset attributes initially have the value <code> 0 </code> . <p> The <dfn id="shadowblur"> <code> shadowBlur </code> </dfn> attribute specifies the number of coordinate space units that the blurring should cover. On setting, negative numbers are ignored and leave the attribute unmodified. <p> When the context is created, the <code> <a
   href="#shadowblur"> shadowBlur </a> </code> attribute <ins>must </ins> initially <ins>have </ins> <del>has </del> the value <code> 0 </code> . <p> Support for shadows is optional. <h5 id="shapes"> <span class="secno"> <ins>6.1.1.7. </ins> <del>5.1.1.7. </del> </span> Shapes </h5> <p> There are three methods that immediately draw rectangles to the bitmap. They each take four arguments; the first two give the <var
   title=""> x </var> and <var title=""> y </var> coordinates of the top left of the rectangle, and the second two give the width and height of the rectangle, respectively. <p> Shapes are painted without affecting the current path, and are subject to <span> <a href="#transformations1"> transformations </a> </span> , <span
   title="shadows"> <a href="#shadows1"> shadow effects </a> </span> , <span
   title="globalAlpha"> <a href="#globalalpha"> global alpha </a> </span> , <span
   title="clipping path"> <a href="#clipping"> clipping paths </a> </span> , and <span title="globalCompositeOperation"> <a
   href="#globalcompositeoperation"> global composition operators </a> </span> . <p> Negative values for width and height must cause the implementation to raise an <code> INDEX_SIZE_ERR </code> exception. <p> The <dfn id="clearrect"> <code> clearRect() </code> </dfn> method clears the pixels in the specified rectangle to a fully transparent black, erasing any previous image. <p> The <dfn id="fillrect"> <code> fillRect() </code> </dfn> method paints the specified rectangular area using the <code> <a
   href="#fillstyle"> fillStyle </a> </code> . <p> The <dfn id="strokerect"> <code> strokeRect() </code> </dfn> method draws a rectangular outline of the specified size using the <code> <a
   href="#strokestyle"> strokeStyle </a> </code> , <code> <a
   href="#linewidth"> lineWidth </a> </code> , <code> <a
   href="#linejoin"> lineJoin </a> </code> , and (if appropriate) <code> <a
   href="#miterlimit"> miterLimit </a> </code> attributes. <h5 id="paths"> <span class="secno"> <ins>6.1.1.8. </ins> <del>5.1.1.8. </del> </span> Paths </h5> <p> The context always has a current path. There is only one current path, it is not part of the <span> <a href="#drawing0"> drawing state </a> </span> . <p> A <dfn id="path"> path </dfn> has a list of subpaths and a current position. Each subpath consists of a list of points, some of which may be connected by straight and curved lines, and a flag indicating whether the subpath is closed or not. <p> The <dfn id="beginpath"> <code> beginPath() </code> </dfn> method resets the list of subpaths to an empty list, and calls <code> <a
   href="#movetox"> moveTo() </a> </code> with the point (0,0). When the context is created, a call to <code> <a href="#beginpath"> beginPath() </a> </code> is implied. <p> The <dfn id="movetox" title="moveTo"> <code> moveTo(x, y) </code> </dfn> method sets the current position to the given coordinate and creates a new subpath with that point as its first (and only) point. If there was a previous subpath, and it consists of just one point, then that subpath is removed from the path. <p> The <dfn id="closepath"> <code> closePath() </code> </dfn> method adds a straight line from the current position to the first point in the last subpath and marks the subpath as closed, if the last subpath isn't closed, and if it has more than one point in its list of points. If the last subpath is not open or has only one point, it does nothing. <p> The <dfn id="linetox" title="lineTo"> <code> lineTo(x, y) </code> </dfn> method adds the given coordinate ( <var title=""> x </var> , <var
   title=""> y </var> ) to the list of points of the subpath, and connects the current position to that point with a straight line. It then sets the current position to the given coordinate ( <var title=""> x </var> , <var
   title=""> y </var> ). <p> The <dfn id="quadraticcurvetocpx"
   title="quadraticCurveTo"> <code> quadraticCurveTo(cpx, cpy, x, y) </code> </dfn> method adds the given coordinate ( <var title=""> x </var> , <var title=""> y </var> ) to the list of points of the subpath, and connects the current position to that point with a quadratic curve with control point ( <var title=""> cpx </var> , <var title=""> cpy </var> ). It then sets the current position to the given coordinate ( <var title=""> x </var> , <var
   title=""> y </var> ). <p> The <dfn id="beziercurvetocp1x"
   title="bezierCurveTo"> <code> bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) </code> </dfn> method adds the given coordinate ( <var title=""> x </var> , <var title=""> y </var> ) to the list of points of the subpath, and connects the two points with a bezier curve with control points ( <var
   title=""> cp1x </var> , <var title=""> cp1y </var> ) and ( <var
   title=""> cp2x </var> , <var title=""> cp2y </var> ). It then sets the current position to the given coordinate ( <var title=""> x </var> , <var
   title=""> y </var> ). <p> The <dfn id="arctox1" title="arcTo"> <code> arcTo(x1, y1, x2, y2, radius) </code> </dfn> method adds an arc to the current path. The arc is given by the circle that has one point tangent to the line from the current position to point ( <var title=""> x1 </var> , <var
   title=""> y1 </var> ), one point tangent to the line from from the point ( <var title=""> x1 </var> , <var title=""> y1 </var> ) to the point ( <var
   title=""> x2 </var> , <var title=""> y2 </var> ), and that has radius <var
   title=""> radius </var> . The points at which this circle touches these two lines are called the start and end tangent points respectively. <p> If the point ( <var title=""> x2 </var> , <var title=""> y2 </var> ) is on the line from the current position to point ( <var title=""> x1 </var> , <var
   title=""> y1 </var> ) then this method does nothing. Otherwise, the arc is the shortest path along the circle's circumference between those two points. If the first tangent point is not equal to the current position then the first tangent point is added to the list of points of the subpath and the current position is joined to that point by a straight line. Then, the second tangent point is added to the list of points and the two tangent points are joined by the arc described above. Finally, the current position is set to the second tangent point. <p> Negative or zero values for <var title=""> radius </var> must cause the implementation to raise an <code> INDEX_SIZE_ERR </code> exception. <p> The <dfn id="arcx-y" title="arc"> <code> arc(x, y, radius, startAngle, endAngle, anticlockwise) </code> </dfn> method adds an arc to the current path. The arc is given by the circle that has its origin at ( <var
   title=""> x </var> , <var title=""> y </var> ) and that has radius <var
   title=""> radius </var> . The points at <var title=""> startAngle </var> and <var title=""> endAngle </var> along the circle, measured in radians clockwise from the positive x-axis, are the start and end points. The arc is the path along the circumference of the circle from the start point to the end point going anti-clockwise if the <var
   title=""> anticlockwise </var> argument is true, and clockwise otherwise. <p> The start point is added to the list of points of the subpath and the current position is joined to that point by a straight line. Then, the end point is added to the list of points and these last two points are joined by the arc described above. Finally, the current position is set to the end point. <p> Negative or zero values for <var title=""> radius </var> must cause the implementation to raise an <code> INDEX_SIZE_ERR </code> exception. <p> The <dfn id="rectx" title="rect"> <code> rect(x, y, w, h) </code> </dfn> method creates a new subpath containing just the rectangle with top left coordinate ( <var title=""> x </var> , <var title=""> y </var> ), width <var
   title=""> w </var> and height <var title=""> h </var> , and marks it as closed. It then calls <code> <a href="#movetox"> moveTo </a> </code> with the point (0,0). <p> Negative values for <var title=""> w </var> and <var title=""> h </var> must cause the implementation to raise an <code> INDEX_SIZE_ERR </code> exception. <p> The <dfn id="fill"> <code> fill() </code> </dfn> method fills each subpath of the current path in turn, using <code> <a
   href="#fillstyle"> fillStyle </a> </code> , and using the non-zero winding number rule. Open subpaths are implicitly closed when being filled (without affecting the actual subpaths). <p> The <dfn id="stroke"> <code> stroke() </code> </dfn> method strokes each subpath of the current path in turn, using the <code> <a
   href="#strokestyle"> strokeStyle </a> </code> , <code> <a
   href="#linewidth"> lineWidth </a> </code> , <code> <a
   href="#linejoin"> lineJoin </a> </code> , and (if appropriate) <code> <a
   href="#miterlimit"> miterLimit </a> </code> attributes. <p> Paths, when filled or stroked, are painted without affecting the current path, and are subject to <span> <a
   href="#transformations1"> transformations </a> </span> , <span
   title="shadows"> <a href="#shadows1"> shadow effects </a> </span> , <span
   title="globalAlpha"> <a href="#globalalpha"> global alpha </a> </span> , <span
   title="clipping path"> <a href="#clipping"> clipping paths </a> </span> , and <span title="globalCompositeOperation"> <a
   href="#globalcompositeoperation"> global composition operators </a> </span> . <p> The <dfn id="clip"> <code> clip() </code> </dfn> method creates a new <dfn
   id="clipping"> clipping path </dfn> by calculating the intersection of the current clipping path and the area described by the current path, using the non-zero winding number rule. Open subpaths are implicitly closed without affecting the actual subpaths). <p> When the context is created, the initial clipping path is the rectangle with the top left corner at (0,0) and the width and height of the coordinate space. <h5 id="images"> <span class="secno"> <ins>6.1.1.9. </ins> <del>5.1.1.9. </del> </span> Images </h5> <p> To draw images onto the canvas, the <dfn
   id="drawimage"> <code> drawImage </code> </dfn> method may be used. <p> This method is overloaded with three variants: <code> drawImage(image, dx, dy) </code> , <code> drawImage(image, dx, dy, dw, dh) </code> , and <code> drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh) </code> . (Actually it is overloaded with six; each of those three can take either an <code> <a
   href="#htmlimageelement"> HTMLImageElement </a> </code> or an <code> <a
   href="#htmlcanvaselement"> HTMLCanvasElement </a> </code> for the <var
   title=""> image </var> argument.) If not specified, the <var
   title=""> dw </var> and <var title=""> dh </var> arguments default to the values of <var title=""> sw </var> and <var title=""> sh </var> , interpreted such that one CSS pixel in the image is treated as one unit in the canvas coordinate space. If the <var title=""> sx </var> , <var title=""> sy </var> , <var title=""> sw </var> , and <var title=""> sh </var> arguments are omitted, they default to 0, 0, the image's intrinsic width in image pixels, and the image's intrinsic height in image pixels, respectively. <p> The <var title=""> image </var> argument must be an instance of an <code> <a href="#htmlimageelement"> HTMLImageElement </a> </code> or <code> <a
   href="#htmlcanvaselement"> HTMLCanvasElement </a> </code> . If the <var
   title=""> image </var> is of the wrong type, the implementation must raise a <code> TYPE_MISMATCH_ERR </code> exception. If one of the <var
   title=""> sy </var> , <var title=""> sw </var> , <var title=""> sw </var> , and <var title=""> sh </var> arguments is outside the size of the image, or if one of the <var title=""> dw </var> and <var title=""> dh </var> arguments is negative, the implementation must raise an <code> INDEX_SIZE_ERR </code> exception. <p> When <code> <a href="#drawimage"> drawImage </a> </code> is invoked, the specified region of the image specified by the source rectangle ( <var
   title=""> sx </var> , <var title=""> sy </var> , <var title=""> sw </var> , <var
   title=""> sh </var> ) is painted on the region of the canvas specified by the destination rectangle ( <var title=""> dx </var> , <var title=""> dy </var> , <var title=""> dw </var> , <var title=""> dh </var> ). <p> <img alt="" src="drawImage.png"> </p> <p> Images are painted without affecting the current path, and are subject to <span> <a href="#transformations1"> transformations </a> </span> , <span
   title="shadows"> <a href="#shadows1"> shadow effects </a> </span> , <span
   title="globalAlpha"> <a href="#globalalpha"> global alpha </a> </span> , <span
   title="clipping path"> <a href="#clipping"> clipping paths </a> </span> , and <span title="globalCompositeOperation"> <a
   href="#globalcompositeoperation"> global composition operators </a> </span> . <h5 id="drawing"> <span class="secno"> <ins>6.1.1.10. </ins> <del>5.1.1.10. </del> </span> Drawing model </h5> <p> When a shape or image is painted, user agents shall follow these steps, in the order given (or act as if they do): <ol> <li> The coordinates are transformed by the current transformation matrix. <li> The shape or image is rendered, creating image <var title=""> A </var> . <li> The shadow is rendered from image <var title=""> A </var> , creating image <var title=""> B </var> . <li> Image <var title=""> A </var> is composited over image <var
    title=""> B </var> creating the source image. <li> The source image has its alpha adjusted by <code> <a
    href="#globalalpha"> globalAlpha </a> </code> . <li> Within the clip region, the source image is composited over the current canvas bitmap using the composition operator. </ol> <h4 id="the-3d"> <span class="secno"> <ins>6.1.2. </ins> <del>5.1.2. </del> </span> The 3D context </h4> <p class="big-issue"> Well, one day. <h3 id="scs-sound">  <span class="secno"> <ins>6.2. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> <del>5.2. </del> </span> Sound </h3> <p> The <code> <a href="#audio"> Audio </a> </code> interface allows scripts to play sound clips. <p> There is no markup element that corresponds to <code> <a
   href="#audio"> Audio </a> </code> objects, they are only accessible from script. <p> User agents should allow users to dynamically enable and disable sound output, but doing so must not affect how <code> <a
   href="#audio"> Audio </a> </code> objects act in any way other than whether sounds are physically played back or not. For instance, sound files must still be downloaded, <code> load </code> events must still fire, and if two identical clips are started with a two second interval then when the sound is reenabled they must still be two seconds out of sync. <p> When multiple sounds are played simultaneously, the user agent must mix the sounds together. <pre class="idl"> interface <dfn id="audio"> Audio </dfn> { attribute EventListener onload; void play(); void loop(); void loop(in unsigned long repeatCount); void stop(); <ins>}; </ins> <del>} </del> </pre> <p> <code> <a href="#audio"> Audio </a> </code> objects must also implement the <code> EventTarget </code> interface. <a
   href="#refsDOM3EVENTS"> [DOM3EVENTS] </a> <p> In ECMAScript, an instance of <code> <a href="#audio"> Audio </a> </code> can be created using the <code> Audio( <var title=""> uri </var> ) </code> constructor: <pre class="example"> var a = new Audio("test.wav"); </pre> <p> The <dfn id="audio0"> <code> Audio() </code> constructor </dfn> takes a single argument, a URI (or IRI), which is resolved using the script context's <code> window.location.href </code> value as the base, and which returns an <code> <a href="#audio"> Audio </a> </code> object that will, at the completion of the current script, start loading that URI. <p> Once the URI is loaded, a <code> load </code> event must be fired on the <code> <a href="#audio"> Audio </a> </code> object. <p> <code> <a href="#audio"> Audio </a> </code> objects have a current position and a repeat count. Both are initially zero. <p> The <code> <a href="#audio"> Audio </a> </code> interface has the following members: </p> <dl> <dt> <dfn id="onload" title="Audio.onload"> onload </dfn> <dd> An event listener that is invoked along with any other appropriate event listeners that are registered on this object when a <code> load </code> event is fired on it. <dt> <dfn id="play" title="Audio.play"> play() </dfn> <dd> Begins playing the sound at the current position, setting the repeat count to 1. <dt> <dfn id="loop" title="Audio.loop"> loop() </dfn> <dd> Begins playing the sound at the current position, setting the repeat count to infinity. <dt> <dfn id="looprepeatcount" title="Audio.loopN"> loop( <var
    title=""> repeatCount </var> ) </dfn> <dd> Begins playing the sound at the current position, setting the repeat count to <var title=""> repeatCount </var> . <dt> <dfn id="stop" title="Audio.stop"> stop() </dfn> <dd> Stops playing the clip and resets the current position and repeat count to zero. </dl> <p> When playback of the sound reaches the end of the available data, its current position is reset to the start of the clip, and the repeat count is decreased by one (unless it is infinite). If the repeat count is greater than zero, then the sound is played again. </p> <h2 id="communication"> <span class="secno"> <ins>7. </ins> <del>6. </del> </span> Communication </h2> <h3 id="scs-server-sent">  <span class="secno"> <ins>7.1. </ins> </span> <span
   title="SCS"> <a href="#scs"> <ins>[SCS] </ins> </a> <del>6.1. </del> </span> Server-sent DOM events </h3> <p> This section describes a mechanism for allowing servers to dispatch DOM events into documents that expect it. <h4 id="the-event-source"> <span class="secno"> <ins>7.1.1. </ins> <del>6.1.1. </del> </span> The <dfn
   id="event-source0"> <code> event-source </code> </dfn> element </h4> <p> To specify an event source in an HTML document authors use a new (empty) element <code> <a href="#event-source0"> event-source </a> </code> , with an attribute <code> src="" </code> that takes a URI (or IRI) to open as a stream and, if the data found at that URI is of the appropriate type, treat as an event source. <p> The <code> <a href="#event-source0"> event-source </a> </code> element may also have an <code> onevent="" </code> attribute. If present, the attribute must be treated as script representing an event handler registered as non-capture listener of events with name <code> event </code> and the namespace <code> uuid:755e2d2d-a836-4539-83f4-16b51156341f </code> or null, that are targetted at or bubble through the element. <p> UAs must also support all the common attributes on the <code> <a
   href="#event-source0"> event-source </a> </code> element. <h4 id="the-remoteeventtarget"> <span class="secno"> <ins>7.1.2. </ins> <del>6.1.2. </del> </span> The <dfn
   id="remoteeventtarget0"> <code> RemoteEventTarget </code> </dfn> interface </h4> <p> Any object that implements the <code> EventTarget </code> interface shall also implement the <code> <a
   href="#remoteeventtarget1"> RemoteEventTarget </a> </code> interface. <pre
   class="idl"> interface <dfn id="remoteeventtarget1"> RemoteEventTarget </dfn> { void addEventSource(in DOMString src); void removeEventSource(in DOMString src); }; </pre> <p> The <dfn id="addeventsource"
   title="addEventSource"> <code> addEventSource( <var
   title=""> src </var> ) </code> </dfn> method shall register the URI (or IRI) specified in <var title=""> src </var> as an event source on the object. The <dfn id="removeeventsource"
   title="removeEventSource"> <code> removeEventSource( <var
   title=""> src </var> ) </code> </dfn> method shall remove the URI (or IRI) specified in <var title=""> src </var> from the list of event sources for that object. If a single URI is added multiple times, each instance must be handled individually. Removing a URI must only remove one instance of that URI. If the specified URI cannot be added or removed, the method must return without doing anything or raising an exception. <h4 id="processing0">  <span class="secno"> <ins>7.1.3. </ins> <del>6.1.3. </del> </span> Processing model </h4> <p> When an <code> <a href="#event-source0"> event-source </a> </code> element in a document has a <code> src </code> attribute set, the UA should fetch the resource indicated by the attribute's value. <p> Similarly, when the <code> <a
   href="#addeventsource"> addEventSource() </a> </code> method is invoked on an object, the UA should, at the completion of the script's current execution, fetch the resource identified by the method's argument (unless the <code> <a href="#removeeventsource"> removeEventSource() </a> </code> was called removing the URI from the list first). <p> When an <code> <a href="#event-source0"> event-source </a> </code> element is removed from the document, or when an event source is removed from the list of event sources for an object using the <code> <a
   href="#removeeventsource"> removeEventSource() </a> </code> method, the relevant connection must be closed (and not reopened unless the element is returned to the document or the <code> <a
   href="#addeventsource"> addEventSource() </a> </code> method is called with the same URI again). <p class="issue"> Should event-source elements be allowed to point to any remote server, or only origin hosts? <p> Since connections established to remote servers for such resources are expected to be long-lived, UAs should ensure that appropriate buffering is used. In particular, while line buffering may be safe if lines are defined to end with a single U+000A LINE FEED character, block buffering or line buffering with different expected line endings can cause delays in event dispatch. <p> In general, the semantics of the transport protocol specified by the "src" attribute must be followed. Clients should re-open <code> <a
   href="#event-source0"> event-source </a> </code> connections that get closed after a short interval (such as 5 seconds), unless they were closed due to problems that aren't expected to be resolved, as described in this section. <p> DNS errors must be considered fatal, and cause the user agent to not open any connection for the event-source. <p> HTTP 200 OK responses that have a Content-Type other than <code> application/x-dom-event-stream </code> must be ignored and must prevent the user agent from reopening the connection for that event-source. HTTP 200 OK responses with the right MIME type, however, should, when closed, be reopened after a small delay. <p> Resource with the type <code> application/x-dom-event-stream </code> must be processed line by line <a href="#event-stream-interpretation"> as described below </a> . <p> HTTP 201 Created, 202 Accepted, 203 Non-Authoritative Information, and 206 Partial Content responses must be treated like HTTP 200 OK responses for the purposes of reopening event-source connections. They are, however, likely to indicate an error has occurred somewhere and may cause the user agent to emit a warning. <p> HTTP 204 No Content, and 205 Reset Content responses must be treated as if they were 200 OK responses with the right MIME type but no content, and should therefore cause the user agent to reopen the connection after a short delay. <p> HTTP 300 Multiple Choices responses should be handled automatically if possible (treating the responses as if they were 302 Moved Permanently responses pointing to the appropriate resource), and otherwise must be treated as HTTP 404 responses. <p> HTTP 301 Moved Permanently responses must cause the user agent to use the server specified URI instead of the one specified in the event-source's "src" attribute for future connections. <p> HTTP 302 Found, 303 See Other, and 307 Temporary Redirect responses must cause the user agent to use the server specified URI instead of the one specified in the event-source's "src" attribute for the next connection, but if the user agent needs to reopen the connection at a later point, it must once again start from the "src" attribute (or the last URI given by a 301 Moved Permanently response in complicated cases where such responses are chained). <p> HTTP 304 Not Modified responses should be handled like HTTP 200 OK responses, with the content coming from the user agent cache. A new connection attempt should then be made after a short wait. <p> HTTP 305 Use Proxy, HTTP 401 Unauthorized, and 407 Proxy Authentication Required should be treated transparently as for any other subresource. <p> HTTP 400 Bad Request, 403 Forbidden, 404 Not Found, 405 Method Not Allowed, 406 Not Acceptable, 408 Request Timeout, 409 Conflict, 410 Gone, 411 Length Required, 412 Precondition Failed, 413 Request Entity Too Large, 414 Request-URI Too Long, 415 Unsupported Media Type, 416 Requested Range Not Satisfiable, 417 Expectation Failed, 500 Internal Server Error, 501 Not Implemented, 502 Bad Gateway, 503 Service Unavailable, 504 Gateway Timeout, and 505 HTTP Version Not Supported responses, and any other HTTP response code not listed here, should cause the user agent to stop trying to process this event-source element. <p> For non-HTTP protocols, UAs should act in equivalent ways. <h4 id="the-event"> <span class="secno"> <ins>7.1.4. </ins> <del>6.1.4. </del> </span> The event stream format </h4> <p> The event stream MIME type is <code> application/x-dom-event-stream </code> . <p> The event stream must always be encoded as UTF-8. Line must always be terminated by a single U+000A LINE FEED character. <p> The event stream format is (in pseudo-BNF): <pre> &lt;stream&gt; ::= &lt;event&gt;* &lt;event&gt; ::= [ &lt;comment&gt; | &lt;command&gt; | &lt;field&gt; ]* &lt;newline&gt; &lt;comment&gt; ::= ';' &lt;data&gt; &lt;newline&gt; <ins>&lt;command&gt; </ins> <del>&lt;special&gt; </del> ::= ':' &lt;data&gt; &lt;newline&gt; &lt;field&gt; ::= &lt;name&gt; [ ':' &lt;space&gt;? &lt;data&gt; ]? &lt;newline&gt; &lt;name&gt; ::= one or more UNICODE characters other than ':', ';', and U+000A LINE FEED &lt;data&gt; ::= zero or more UNICODE characters other than U+000A LINE FEED &lt;space&gt; ::= a single U+0020 SPACE character (' ') &lt;newline&gt; ::= a single U+000A LINE FEED character </pre> <p> Bytes that are not valid UTF-8 sequences must be interpreted as the U+FFFD REPLACEMENT CHARACTER. <p> The stream is parsed by reading everything line by line, in blocks separated by blank lines (blank lines are those consisting of just a single lone line feed character). Comment lines (those starting with the character ';') and command lines (those starting with the character ':') are ignored. Command lines are reserved for future use and should not be used. <p> For each non-blank, non-comment line, the field name is first taken. This is everything on the line up to but not including the first colon (':') or the line feed, whichever comes first. Then, if there was a colon, the data for that line is taken. This is everything after the colon, ignoring a single space after the colon if there is one, up to the end of the line. If there was no colon the data is the empty string. <div class="example"> <p> Examples: </p> <pre> Field name: Field data </pre> <pre> This is a blank field </pre> <pre> 1. These two lines: have the same data 2. These two lines:have the same data </pre> <pre> 1. But these two lines: do not 2. But these two lines: do not </pre> </div> <p> If a field name occurs multiple times, the data values for those lines are concatenated with a newline between them. <div class="example"> <p> For example, the following: </p> <pre> Test: Line 1 Foo: Bar Test: Line 2 </pre> <p> ...is treated as having two fields, one called <code> Test </code> with the value <code> Line 1\nLine 2 </code> (where <code> \n </code> represents a newline), and one called <code> Foo </code> with the value <code> Bar </code> . </p> </div> <p class="note"> Since any random stream of characters matches the above format, there is no need to define any error handling. <h4 id="event-stream-interpretation"> <span class="secno"> <ins>7.1.5. </ins> <del>6.1.5. </del> </span> Event stream interpretation </h4> <p> Once the fields have been parsed, they are interpreted as follows (these are case sensitive exact comparisons): <ul> <li> <p> <code> Event </code> is the name of the event. For example, <code> load </code> , <code> DOMActivate </code> , <code> updateTicker </code> . If there is no field with this name, then no event will be synthesised, and the other data will be ignored. <li> <p> <code> Namespace </code> is the DOM3 namespace for the event. For normal DOM events this would be <code> http://www.w3.org/2001/xml-events </code> . If it isn't specified the event namespace is null. <li> <p> <code> <a href="#class"> Class </a> </code> is the interface used for the event, for instance <code> Event </code> , <code> UIEvent </code> , <code> MutationEvent </code> , <code> KeyboardEvent </code> , etc. For compatibility with DOM3 Events, the values <code> UIEvents </code> , <code> MouseEvents </code> , <code> MutationEvents </code> , and <code> HTMLEvents </code> are valid values and must be treated respectively as meaning the interfaces <code> UIEvent </code> , <code> MouseEvent </code> , <code> MutationEvent </code> , and <code> Event </code> . (This value can therefore be used as the argument to <code> createEvent() </code> .) If the value is not specified it is defaulted based on the event name as follows: </p> <ul> <li> <p> If <code> Namespace </code> is <code> http://www.w3.org/2001/xml-events </code> or null and the <code> Event </code> field exactly matches one of the events specified by DOM3 Events in <a
       href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTypes-complete"> section 1.4.2 "Complete list of event types" </a> , then the Class defaults to the interface relevant for that event type. <a
       href="#refsDOM3EVENTS"> [DOM3EVENTS] </a> </p> <div class="example"> <p> For example: </p> <pre> Event: click </pre> <p> ...would cause <code> <a href="#class"> Class </a> </code> to be treated as <code> MouseEvent </code> . </p> </div> <li> <p> If <code> Namespace </code> is <code> uuid:755e2d2d-a836-4539-83f4-16b51156341f </code> or null and the <code> Event </code> doesn't match any of the known events, then the <code> <a href="#remoteevent"> RemoteEvent </a> </code> interface (described below) is used. <li> <p> Otherwise, if the UA doesn't have special knowledge of which class to use for the given event in the given namespace, then the <code> Event </code> interface is used. </ul> <p> It is quite possible to give the wrong class for an event. This is equivalent to creating an event in the DOM using the DOM Event APIs, but using the wrong interface for it. </p> <li> <p> <code> Bubbles </code> specifies whether the event is to bubble. If it is specified and has the value <code> No </code> , the event does not bubble. If it is specified and has any other value (including <code> no </code> or <code> No\n </code> ) then the event bubbles. If it is not specified it is defaulted based on the event name as follows: </p> <ul> <li> <p> If <code> Namespace </code> is <code> http://www.w3.org/2001/xml-events </code> or null and the <code> Event </code> field exactly matches one of the events specified by DOM3 Events in <a
       href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTypes-complete"> section 1.4.2 "Complete list of event types" </a> , then whether the event bubbles depends on whether the DOM3 Events spec specifies that that event should bubble or not. <a href="#refsDOM3EVENTS"> [DOM3EVENTS] </a> </p> <div class="example"> <p> For example: </p> <pre> Event: load </pre> <p> ...would cause <code> Bubbles </code> to be treated as <code> No </code> . </p> </div> <li> <p> Otherwise, if the UA doesn't have special knowledge of which class to use for the given event in the given namespace, then the event bubbles. </ul> <li> <p> <code> Cancelable </code> specifies whether the event may have its default action prevented. If it is specified and has the value <code> No </code> , the event may not have its default action prevented. If it is specified and has any other value (including <code> no </code> or <code> No\n </code> ) then the event may be canceled. If it is not specified it is defaulted based on the event name as follows: </p> <ul> <li> <p> If <code> Namespace </code> is <code> http://www.w3.org/2001/xml-events </code> or null and the <code> Event </code> field exactly matches one of the events specified by DOM3 Events in <a
       href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTypes-complete"> section 1.4.2 "Complete list of event types" </a> , then whether the event is cancelable depends on whether the DOM3 Events spec specifies that that event should be cancelable or not. <a
       href="#refsDOM3EVENTS"> [DOM3EVENTS] </a> </p> <div class="example"> <p> For example: </p> <pre> Event: load </pre> <p> ...would cause <code> Cancelable </code> to be treated as <code> No </code> . </p> </div> <li> <p> Otherwise, if the UA doesn't have special knowledge of which class to use for the given event in the given namespace, then the event may be canceled. </ul> <li> <p> <code> Target </code> is the element that the event is to be dispatched on. If its value starts with a <code> # </code> character then the remainder of the value represents an ID, and the event must be dispatched on the same node as would be obtained by the <code> getElementById() </code> method on the ownerDocument of the event-source element responsible for the event being dispatched. </p> <div class="example"> <p> For example, </p> <pre> Target: #test </pre> <p> ...would target the element with ID <code> test </code> . </p> </div> <p> If the value does not start with a <code> # </code> but has the literal value <code> Document </code> , then the event is dispatched at the <code> ownerDocument </code> of the <code> <a
     href="#event-source0"> event-source </a> </code> element responsible for the event being dispatched. </p> <p> Otherwise, the event is dispatched at the <code> <a
     href="#event-source0"> event-source </a> </code> element itself. <li> <p> Other fields depend on the interface specified (or possibly implied) by the <code> <a href="#class"> Class </a> </code> field. If the specified interface has an attribute that exactly matches the name of the field, and the value of the field can be converted (using the type conversions defined in ECMAScript) to the type of the attribute, then it must be used. Any attributes (other than the <code> Event </code> interface attributes) that do not have matching fields are initialised to zero, null, false, or the empty string. </p> <div class="example"> <p> For example: </p> <pre> ; ...some other fields... Class: MouseEvent button: 2 </pre> <p> ...would result in a MouseEvent event that had <code> button </code> set to <code> 2 </code> but <code> screenX </code> , <code> screenY </code> , etc, set to 0, false, or null as appropriate. </p> </div> <p> If a field does not match any of the attributes on the event, it is ignored. </p> <div class="example"> <p> For example: </p> <pre> Event: keypress Class: MouseEvent keyIdentifier: 0 </pre> <p> ...would result in a <code> MouseEvent </code> event with its fields all at their default values, with the event name being <code> keypress </code> . The <code> ctrlKey </code> field would be ignored. (If the author had not included the <code> <a
      href="#class"> Class </a> </code> field explicitly, it would have just worked, since the class would have defaulted as described above.) </p> </div> </ul> <p> Once a blank line is reached, an event of the appropriate type is synthesized and dispatched to the appropriate node as described by the fields above. No event is dispatched until a blank line has been received. <p> If the <code> Event </code> field was omitted, then no event is synthesised and the data is ignored. <div class="example"> <p> The following stream contains four blocks yet synthesises no events, since none of the blocks have a field called <code> Event </code> . (The first block has just a comment, the second block has two fields with names "load" and "Target" respectively, the third block is empty, and the fourth block has two comments.) </p> <pre> ; test load Target: #image1 ; if any real events follow this block, they will not be affected by ; the "Target" and "load" fields above. </pre> </div> <h4 id="the-remoteevent"> <span class="secno"> <ins>7.1.6. </ins> <del>6.1.6. </del> </span> The <code> <a
   href="#remoteevent"> RemoteEvent </a> </code> interface </h4> <p> The <code> <a href="#remoteevent"> RemoteEvent </a> </code> interface is defined as follows: <pre
   class="idl"> interface <dfn id="remoteevent"> RemoteEvent </dfn> : <span> Event </span> { readonly attribute DOMString data; void initRemoteEvent(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString dataArg); void initRemoteEventNS(in DOMString namespaceURI, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString dataArg); }; </pre> <p> Events that use the <code> <a href="#remoteevent"> RemoteEvent </a> </code> interface never have any default action associated with them. <h4 id="example">  <span class="secno"> <ins>7.1.7. </ins> <del>6.1.7. </del> </span> Example </h4> <div class="example"> <p> The following event description, once followed by a blank line: </p> <pre> Event: stock change data: YHOO data: -2 data: 10 </pre> <p> ...would cause an event <code> stock change </code> with the interface <code> <a href="#remoteevent"> RemoteEvent </a> </code> to be dispatched on the <code> <a href="#event-source0"> event-source </a> </code> element, which would then bubble up the DOM, and whose <code> data </code> attribute would contain the string <code> YHOO\n-2\n10 </code> (where <code> \n </code> again represents a newline). </p> <p> This could be used as follows: <pre> &lt;event-source src="http://stocks.example.com/ticker.php" id="stock"&gt; &lt;script type="text/javascript"&gt; document.getElementById('stock').addEventListener('stock change', function () { var data = event.data.split('\n'); updateStocks(data[0], data[1], data[2]); }, false); &lt;/script&gt </pre> <p> ...where updateStocks is a function defined as: <pre> function updateStocks(symbol, delta, value) { ... } </pre> <p> ...or some such. </p> </div> <h3 id="scripted-http"> <span class="secno"> <ins>7.2. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> <del>6.2. </del> </span> Scripted HTTP: <code> <a
   href="#xmlhttprequest">  XMLHttpRequest </a> </code> </h3> <p> To allow scripts to programmatically connect back to their originating server via HTTP, the following interface may be used. <pre
   class="idl">  interface <dfn id="xmlhttprequest"> XMLHttpRequest </dfn> { attribute EventListener onreadystatechange; readonly attribute int readyState; void open(in DOMString method, in DOMString uri); void open(in DOMString method, in DOMString uri, in boolean async); void open(in DOMString method, in DOMString uri, in boolean async, in DOMString user); void open(in DOMString method, in DOMString uri, in boolean async, in DOMString user, in DOMString password); void setRequestHeader(in DOMString header, in DOMString value); void send(); void send(in DOMString body); void send(in Document body); void abort(); DOMString getAllResponseHeaders(); DOMString getResponseHeader(in DOMString header); readonly attribute DOMString responseText; readonly attribute Document responseXML readonly attribute int status; readonly attribute DOMString statusText; }; </pre> <p> <code> <a href="#xmlhttprequest"> XMLHttpRequest </a> </code> objects must also implement the <code> EventTarget </code> interface. <a
   href="#refsDOM3EVENTS"> [DOM3EVENTS] </a> <p> In ECMAScript, an instance of <code> <a
   href="#xmlhttprequest"> XMLHttpRequest </a> </code> can be created using the <code> <a href="#xmlhttprequest"> XMLHttpRequest() </a> </code> constructor: <pre class="example"> var r = new XMLHttpRequest(); </pre> <p> The <code> <a href="#xmlhttprequest"> XMLHttpRequest </a> </code> interface has the following members: <dl> <dt> <dfn id="onreadystatechange"
    title="XMLHttpRequest.onreadystatechange"> onreadystatechange </dfn> <dd> An event listener that is invoked along with any other appropriate event listeners that are registered on this object when a <code> readystatechange </code> event is fired on it. <dt> <dfn id="readystate"
    title="XMLHttpRequest.readyState"> readyState </dfn> <dd> The state of the object. The values have the following meanings: <dl> <dt> 0 Uninitialised <dd> The initial value. <dt> 1 Open <dd> The <code title="XMLHttpRequest.open"> <a
      href="#openmethod"> open() </a> </code> method has been successfully called. <dt> 2 Sent <dd> The <code title="XMLHttpRequest.send"> <a
      href="#senddata"> send() </a> </code> method has been successfully called, but no data has yet been received. <dt> 3 Receiving <dd> Data is being received, but the data transfer is not yet complete. <dt> 4 Loaded <dd> The data transfer has been completed. </dl> A <code> readystatechange </code> event shall immediately be dispatched at the object whenever the <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute changes value. The <code> readystatechange </code> event must never be dispatched by the UA if the <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute did not change. The <code> readystatechange </code> event has no default action. <dt> <dfn id="openmethod" title="XMLHttpRequest.open"> open( <var
    title=""> method </var> , <var title=""> uri </var> , [ <var
    title=""> async </var> , [ <var title=""> user </var> , [ <var
    title=""> password </var> ]]]) </dfn> <dd> Initialises the object by remembering the <var title=""> method </var> , <var title=""> uri </var> , <var title=""> async </var> (defaulting to true if omitted), <var title=""> user </var> (defaulting to null if omitted), and <var title=""> password </var> (defaulting to null if omitted) arguments, setting the <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute to 1 (Open), resetting the <code title="XMLHttpRequest.responseText"> <a
    href="#responsetext"> responseText </a> </code> , <code
    title="XMLHttpRequest.responseXML"> <a
    href="#responsexml"> responseXML </a> </code> , <code
    title="XMLHttpRequest.status"> <a href="#status0"> status </a> </code> , and <code title="XMLHttpRequest.statusText"> <a
    href="#statustext"> statusText </a> </code> attributes to their initial values, and resetting the list of request headers. <p> The <var title=""> uri </var> argument is resolved to an absolute URI using the script context's <code> window.location.href </code> value as the base. </p> <p> Same-origin security restrictions should apply. </p> <p> If the URI given to this method contains a username and a password (the latter potentially being the empty string), then these must be used if the <var title=""> user </var> and <var title=""> password </var> arguments are omitted. If the arguments are not omitted, they take precedence, even if they are null. </p> <dt> <dfn id="setrequestheader"
    title="XMLHttpRequest.setRequestHeader"> setRequestHeader( <var
    title=""> header </var> , <var title=""> value </var> ) </dfn> <dd> If the <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute has a value other than 1 (Open), raises an exception. If the <var title=""> header </var> or <var
    title=""> value </var> arguments contain any U+000A LINE FEED or U+000D CARRIAGE RETURN characters, or if the <var title=""> header </var> argument contains any U+0020 SPACE or U+003A COLON charecters, does nothing. Otherwise, the request header <var title=""> header </var> is set to <var
    title=""> value </var> . If the request header <var title=""> header </var> had already been set, then the new <var title=""> value </var> is concatenated to the existing value after a comma and a space. <div class="example"> <p> The following script: </p> <pre> var r = new XMLHttpRequest; r.open('get', 'demo.cgi'); r.setRequestHeader('X-Test', 'one'); r.setRequestHeader('X-Test', 'two'); r.send(null); </pre> <p> ...would result in the following header being sent: </p> <pre> ... X-Test: one, two ... </pre> </div> <p> The list of request headers must be reset when the <code
     title="XMLHttpRequest.open"> <a href="#openmethod"> open() </a> </code> method is called. </p> <p> User agents must not set any headers other than the headers set by the author using this method, with the following exceptions: </p> <ul> <li> UAs must set the <code> Host </code> header appropriately (see <code
      title="XMLHttpRequest.open"> <a href="#openmethod"> open() </a> </code> ) and not allow it to be overridden. <li> UAs must set the <code> Authorization </code> header according to the values passed to the <code title="XMLHttpRequest.open"> <a
      href="#openmethod"> open() </a> </code> method (but must allow calls to <code title="XMLHttpRequest.setRequestHeader"> <a
      href="#setrequestheader"> setRequestHeader() </a> </code> to append values to it). <li> UAs may set the <code> Accept-Charset </code> and <code> Accept-Encoding </code> headers and must not allow them to be overridden. <li> UAs may set the <code> If-Modified-Since </code> , <code> If-None-Match </code> , <code> If-Range </code> , and <code> Range </code> headers if the resource is cached and has not expired (as allowed by HTTP), and must not allow those headers to be overridden. <li> UAs must set the <code title=""> Connection </code> and <code> Keep-Alive </code> headers as described by the HTTP specification, and must not allow those headers to be overridden. <li> UAs should set the proxy-related headers according to proxy settings of the environment, and must not allow those headers to be overridden. <li> UAs may give the <code> User-Agent </code> header an initial value, but must allow authors to append values to it. <li> UAs should set <code> Cookie </code> and <code> Cookie2 </code> headers appropriately for the given URI and given the user's current cookies, and must allow authors to append values to these headers. </ul> <p> In particular, UAs must not automatically set the <code> Cache-Control </code> or <code> Pragma </code> headers to defeat caching. <a href="#refsHTTP"> [HTTP] </a> </p> <dt> <dfn id="senddata" title="XMLHttpRequest.send"> send([ <var
    title=""> data </var> ]) </dfn> <dd> If the <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute has a value other than 1 (Open), raises an exception. Otherwise, sets the <code
    title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute to 2 (Sent) and sends a request to <var title=""> uri </var> using method <var
    title=""> method </var> , authenticating using <var title=""> user </var> and <var title=""> password </var> as appropriate. If the <var
    title=""> async </var> flag is set to false, then the method does not return until the request has completed. Otherwise, it returns immediately. (See: <code title="XMLHttpRequest.open"> <a
    href="#openmethod"> open() </a> </code> .) <p> If the <var title=""> method </var> is <code> post </code> or <code> put </code> , then the <var title=""> data </var> passed to the <code> send() </code> method is used for the entity body. If <var
     title=""> data </var> is a string, the data is encoded as UTF-8 for transmission. If the <var title=""> data </var> is a Document, then the document is serialised using the encoding given by <code> <var
     title=""> data </var> .xmlEncoding </code> , if specified, or UTF-8 otherwise. <a href="#refsDOM3CORE"> [DOM3CORE] </a> </p> <p> If the response is an HTTP redirect, then it should be transparently followed (unless it violates security or infinite loop precautions). Any other error (including a 401) must cause the object to use that error page as the response. </p> <p> Once the final HTTP status line has been received, the <code
     title="XMLHttpRequest.readyState"> <a
     href="#readystate"> readyState </a> </code> attribute should be set to to 3 (Receiving). When the request has completed loading, the <code
     title="XMLHttpRequest.readyState"> <a
     href="#readystate"> readyState </a> </code> attribute should be set to 4 (Loaded). </p> <dt> <dfn id="abort" title="XMLHttpRequest.abort"> abort </dfn> <dd> Cancels any network activity for which the object is responsible and returns <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> to 0 (Uninitialised). <dt> <dfn id="getallresponseheaders"
    title="XMLHttpRequest.getAllResponseHeaders"> getAllResponseHeaders() </dfn> <dd> If the <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute has a value other than 3 (Receiving) or 4 (Loaded), returns null. Otherwise, returns the HTTP headers that have been received so far for the last request sent, as a single string, with each header line separated by a CR (U+000D) LF (U+000A) pair. The status line is not included. <div class="example"> <p> The following script: </p> <pre> var r = new XMLHttpRequest; r.open('get', 'test.txt', false); r.send(); alert(r.getAllResponseHeaders()); </pre> <p> ...should display a dialog with text similar to the following: </p> <pre> Date: Sun, 24 Oct 2004 04:58:38 GMT Server: Apache/1.3.31 (Unix) Keep-Alive: timeout=15, max=99 Connection: Keep-Alive Transfer-Encoding: chunked Content-Type: text/plain; charset=utf-8 </pre> </div> <dt> <dfn id="getresponseheader"
    title="XMLHttpRequest.getResponseHeader"> getResponseHeader( <var
    title=""> header </var> ) </dfn> <dd> If the <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute has a value other than 3 (Receiving) or 4 (Loaded), returns an empty string. Otherwise, returns the value of the given HTTP header in the data received so far for the last request sent, as a single string. If more than one header of the given name was received, then the values should be concatenated, separated from each other by a comma and a space. If no headers of that name were received, then returns the empty string. Header names must be compared case-insensitively to the method argument ( <var
    title=""> header </var> ). <dt> <dfn id="responsetext"
    title="XMLHttpRequest.responseText"> responseText </dfn> <dd> If the <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute has a value other than 3 (Receiving) or 4 (Loaded), returns an empty string. Otherwise, returns the body of the data received so far, interpreted using the character encoding specified in the response, or UTF-8 if no character encoding was specified. Invalid bytes must be converted to U+FFFD REPLACEMENT CHARACTER. <dt> <dfn id="responsexml"
    title="XMLHttpRequest.responseXML"> responseXML </dfn> <dd> If the <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute has a value other than 4 (Loaded), returns null. Otherwise, if the <code> Content-Type </code> header is either <code> text/xml </code> , <code> application/xml </code> , or ends in <code> +xml </code> , returns an object that implements the Document interface representing the parsed document. If the document was not an XML document, or if the document could not be parsed (due to an XML well-formedness error or unsupported character encoding, for instance), returns null. </dd> <dt> <dfn id="status0" title="XMLHttpRequest.status"> status </dfn> <dd> If the <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute has a value other than 3 (Receiving) or 4 (Loaded), raises an exception. Otherwise, returns the HTTP status code (typically 200 for a successful connection). <dt> <dfn id="statustext"
    title="XMLHttpRequest.statusText"> statusText </dfn> <dd> If the <code title="XMLHttpRequest.readyState"> <a
    href="#readystate"> readyState </a> </code> attribute has a value other than 3 (Receiving) or 4 (Loaded), raises an exception. Otherwise, returns the HTTP status text sent by the server after the status code. </dd> </dl> <p> If an exception is raised due to an attribute or method being used when <code title="XMLHttpRequest.readyState"> <a
   href="#readystate"> readyState </a> </code> has an inappropriate value, it should be a <code> INVALID_STATE_ERR </code> DOM Exception. <p> HTTP requests sent from multiple different <code> <a
   href="#xmlhttprequest"> XMLHttpRequest </a> </code> objects in succession should be pipelined into shared HTTP connections. <h3 id="scs-network">   <span class="secno"> <ins>7.3. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> <del>6.3. </del> </span> Network connections </h3>  <del>This section needs much more work before being ready for review. At the moment it mostly consists of a place for ideas to be described. </del> <p> To enable Web applications to communicate with each other in local area networks, and to maintain bidirectional communications with their originating server, this specification introduces the <code> <a
   href="#connection0">  Connection </a> </code> interface. <p> <ins>The </ins> <code> <a href="#window0"> <ins>Window </ins> </a> </code> <ins>interface provides three constructors for creating </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>objects: </ins> <code
   title="dom-TCPConnection"> <a
   href="#tcpconnection"> <ins>TCPConnection() </ins> </a> </code> <ins>, for creating a direct (possibly encrypted) link to another node on the Internet using TCP/IP; </ins> <code title="dom-LocalBroadcastConnection"> <a
   href="#localbroadcastconnection"> <ins>LocalBroadcastConnection() </ins> </a> </code> <ins>, for creating a connection to any listening peer on a local network (which could be a local TCP/IP subnet using UDP, a Bluetooth PAN, or another kind of network infrastructure); and </ins> <code title="dom-PeerToPeerConnection"> <a
   href="#peertopeerconnection"> <ins>PeerToPeerConnection() </ins> </a> </code> <ins>, for a direct peer-to-peer connection (which could again be over TCP/IP, Bluetooth, IrDA, or some other type of network). </ins> <p class="note"> This interface does not allow for raw access to the underlying network. For example, this interface could not be used to implement an IRC <ins>client without proxying messages through a custom server. </ins> <h4 id="introduction3"> <span class="secno"> <ins>7.3.1. </ins> </span> <ins>Introduction </ins> <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h4> <p> <em> <ins>This section is non-normative. </ins> </em> <p class="big-issue"> <ins>An introduction to the client-side and server-side of using the direct connection APIs. </ins> <p class="big-issue"> <ins>An example of a party-line implementation of a broadcast service, and direct peer-to-peer chat for direct local connections. </ins> </p> <h4 id="the-connection"> <span class="secno"> <ins>7.3.2. </ins> </span> <ins>The </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>interface </ins> </h4> <del>client. </del> <pre class="idl"> interface <dfn id="connection0">  Connection </dfn> { readonly attribute DOMString <span title="dom-connection-network"> <a href="#network"> <ins>network </ins> </a> </span> <ins>; </ins> <del>network; </del> readonly attribute DOMString <span title="dom-connection-peer"> <a href="#peer"> <ins>peer </ins> </a> </span> <ins>; </ins> <del>peer; attribute EventListener onopen; attribute EventListener onread; attribute EventListener onclose; </del> readonly attribute int <span title="dom-connection-readyState"> <a href="#readystate0"> <ins>readyState </ins> </a> </span> <ins>; attribute EventListener </ins> <span title="dom-connection-onopen"> <a href="#onopen"> <ins>onopen </ins> </a> </span> <ins>; attribute EventListener </ins> <span title="dom-connection-onread"> <a href="#onread"> <ins>onread </ins> </a> </span> <ins>; attribute EventListener </ins> <span title="dom-connection-onclose"> <a href="#onclose"> <ins>onclose </ins> </a> </span> <ins>; </ins> <del>readyState; </del> void <span title="dom-connection-send"> <a href="#send"> <ins>send </ins> </a> </span> <ins>(in </ins> <del>send(in </del> DOMString data); void <span title="dom-connection-disconnect"> <a href="#disconnect"> <ins>disconnect </ins> </a> </span> <ins>(); </ins> <del>disconnect(); </del> }; </pre> <p> <code> <a href="#connection0"> <ins>Connection </ins> </a> </code> <ins>objects must also implement the </ins> <code> <ins>EventTarget </ins> </code> <ins>interface. </ins> <a
   href="#refsDOM3EVENTS"> <ins>[DOM3EVENTS] </ins> </a> <p> <ins>When a </ins> <code> <a href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object is created, the UA must try to establish a connection, as described in the sections below describing each connection type. </ins> <p> <ins>The </ins> <dfn id="network"
   title="dom-connection-network"> <code> <ins>network </ins> </code> </dfn> <ins>attribute represents the name of the network connection (the value depends on the kind of connection being established). The </ins> <dfn id="peer"
   title="dom-connection-peer"> <code> <ins>peer </ins> </code> </dfn> <ins>attribute identifies the remote host for direct (non-broadcast) connections. </ins> <p> <ins>The </ins> <code title="dom-connection-network"> <a
   href="#network"> <ins>network </ins> </a> </code> <ins>attribute must be set as soon as the </ins> <code> <a href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object is created, and keeps the same value for the lifetime of the object. The </ins> <code
   title="dom-connection-peer"> <a href="#peer"> <ins>peer </ins> </a> </code> <ins>attribute must initially be set to the empty string and must be updated once, when the connection is established, after which point it must keep the same value for the lifetime of the object. </ins> <p> <ins>The </ins> <dfn id="readystate0"
   title="dom-connection-readyState"> <code> <ins>readyState </ins> </code> </dfn> <ins>attribute represents the state of the connection. When the object is created it must be set to 0. It can have the following values: </ins> <dl> <dt> <ins>0 Connecting </ins> <dd> <ins>The connection has not yet been established. </ins> <dt> <ins>1 Connected </ins> <dd> <ins>The connection is established and communication is possible. </ins> <dt> <ins>2 Closed </ins> <dd> <ins>The connection has been closed. </ins> </dl> <p id="openConnection"> <ins>Once a connection is established, the </ins> <code
   title="dom-connection-readyState"> <a
   href="#readystate0"> <ins>readyState </ins> </a> </code> <ins>attribute's value must be changed to 1, and the </ins> <code title="event-connection-open"> <a
   href="#open0"> <ins>open </ins> </a> </code> <ins>event must be fired on the </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object. </ins> <p> <ins>When data is received, the </ins> <code title="event-connection-read"> <a
   href="#read"> <ins>read </ins> </a> </code> <ins>event will be fired on the </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object. </ins> </p> <p id="closeConnection"> <ins>When the connection is closed, the </ins> <code
   title="dom-connection-readyState"> <a
   href="#readystate0"> <ins>readyState </ins> </a> </code> <ins>attribute's value must be changed to 2, and the </ins> <code title="event-connection-close"> <a
   href="#close"> <ins>close </ins> </a> </code> <ins>event must be fired on the </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object. </ins> <p> <ins>The </ins> <dfn id="onopen"
   title="dom-connection-onopen"> <code> <ins>onopen </ins> </code> </dfn> <ins>, </ins> <dfn id="onread"
   title="dom-connection-onread"> <code> <ins>onread </ins> </code> </dfn> <ins>, and </ins> <dfn
   id="onclose" title="dom-connection-onclose"> <code> <ins>onclose </ins> </code> </dfn> <ins>attributes must, when set, register their new value as an event listener for their respective events (namely </ins> <code title="event-connection-open"> <a
   href="#open0"> <ins>open </ins> </a> </code> <ins>, </ins> <code title="event-connection-read"> <a
   href="#read"> <ins>read </ins> </a> </code> <ins>, and </ins> <code title="event-connection-close"> <a
   href="#close"> <ins>close </ins> </a> </code> <ins>), and unregister their previous value if any. </ins> <p> <ins>The </ins> <dfn id="send" title="dom-connection-send"> <code> <ins>send() </ins> </code> </dfn> <ins>method transmits data using the connection. If the connection is not yet established, it must raise an </ins> <code> <ins>INVALID_STATE_ERR </ins> </code> <ins>exception. If the connection </ins> <em> <ins>is </ins> </em> <ins>established, then the behaviour depends on the connection type, as described below. </ins> <p> <ins>The </ins> <dfn id="disconnect"
   title="dom-connection-disconnect"> <code> <ins>disconnect() </ins> </code> </dfn> <ins>method must close the connection, if it is open. If the connection is already closed, it must do nothing. Closing the connection causes a </ins> <code
   title="event-connection-close"> <a href="#close"> <ins>close </ins> </a> </code> <ins>event to be fired and the </ins> <code title="dom-connection-readyState"> <a
   href="#readystate0"> <ins>readyState </ins> </a> </code> <ins>attribute's value to change, as </ins> <a href="#closeConnection"> <ins>described above </ins> </a> <ins>. </ins> <h4 id="connection"> <span class="secno"> <ins>7.3.3. </ins> </span> <ins>Connection Events </ins> </h4> <p> <ins>All the events described in this section are events in the </ins> <code> <ins>http://www.w3.org/2001/xml-events </ins> </code> <ins>namespace, which do not bubble, are not cancelable, and have no default action. </ins> <p> <ins>The </ins> <dfn id="open0"
   title="event-connection-open"> <code> <ins>open </ins> </code> </dfn> <ins>event is fired when the connection is established. UAs must use the normal </ins> <code> <ins>Event </ins> </code> <ins>interface when firing this event. </ins> <p> <ins>The </ins> <dfn id="close"
   title="event-connection-close"> <code> <ins>close </ins> </code> </dfn> <ins>event is fired when the connection is closed (whether by the author, calling the </ins> <code
   title="dom-connection-disconnect"> <a
   href="#disconnect"> <ins>disconnect() </ins> </a> </code> <ins>method, or by the server, or by a network error). UAs must use the normal </ins> <code> <ins>Event </ins> </code> <ins>interface when firing this event as well. </ins> <p class="note"> <ins>No information regarding why the connection was closed is passed to the application in this version of this specification. </ins> <p> <ins>The </ins> <dfn id="read" title="event-connection-read"> <code> <ins>read </ins> </code> </dfn> <ins>event is fired when when data is received for a connection. UAs must use the </ins> <code> <a href="#connectionreadevent"> <ins>ConnectionReadEvent </ins> </a> </code> <ins>interface for this event. </ins> <pre
   class="idl"> interface <dfn id="connectionreadevent"> ConnectionReadEvent </dfn> : <span> Event </span> { readonly attribute DOMString <span title="dom-connectionReadEvent-data"> <a href="#data1"> <ins>data </ins> </a> </span> <ins>; </ins> <del>data; </del> readonly attribute DOMString <span title="dom-connectionReadEvent-source"> <a href="#source0"> <ins>source </ins> </a> </span> <ins>; </ins> <del>source; </del> void <span title="dom-connectionReadEvent-initConnectionReadEvent"> <a href="#initconnectionreadevent"> <ins>initConnectionReadEvent </ins> </a> </span> <ins>(in </ins> <del>initUIEvent(in </del> DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString dataArg); void <span title="dom-connectionReadEvent-initConnectionReadEventNS"> <a href="#initconnectionreadeventns"> <ins>initConnectionReadEventNS </ins> </a> </span> <ins>(in </ins> <del>initUIEventNS(in </del> DOMString namespaceURI, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString dataArg); }; </pre> <p> <ins>The </ins> <dfn id="data1"
   title="dom-connectionReadEvent-data"> <code> <ins>data </ins> </code> </dfn> <ins>attribute must contain the data that was transmitted from the peer. </ins> <p> <ins>The </ins> <dfn id="source0"
   title="dom-connectionReadEvent-source"> <code> <ins>source </ins> </code> </dfn> <ins>attribute must contain the name of the peer. This is primarily useful on broadcast connections; on direct connections it is equal to the </ins> <code
   title="dom-connection-peer"> <a href="#peer"> <ins>peer </ins> </a> </code> <ins>attribute on the </ins> <code> <a href="#connection0">   Connection </a> </code> <ins>object. </ins> </p> <p> <ins>The </ins> <dfn id="initconnectionreadevent"
   title="dom-connectionReadEvent-initConnectionReadEvent"> <code> <ins>initConnectionReadEvent() </ins> </code> </dfn> <ins>and </ins> <dfn id="initconnectionreadeventns"
   title="dom-connectionReadEvent-initConnectionReadEventNS"> <code> <ins>initConnectionReadEventNS() </ins> </code> </dfn> <ins>methods </ins> <del>objects </del> must <ins>initialise the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces. </ins> <a
   href="#DOM3Events"> <del>also implement the  EventTarget  interface. </del>  [DOM3EVENTS] </a> <p> <ins>Events that would </ins> <del>In ECMAScript, an instance of   Connection   can </del> be <ins>fired during script execution (e.g. between the connection object being </ins> created <ins>&mdash; and thus the connection being established &mdash; and the current script completing; or, during the execution of a </ins> <code title="event-connection-read"> <a
   href="#read"> <ins>read </ins> </a> </code> <ins>event handler) must be buffered, and those events queued up and each </ins> <del>using </del> one <ins>individually fired after the script has completed. </ins> </p> <h4 id="tcp-connections"> <span class="secno"> <ins>7.3.4. </ins> </span> <ins>TCP connections </ins> </h4> <p> <ins>The </ins> <dfn id="tcpconnection"
   title="dom-TCPConnection"> <del>of the connection constructors: </del>    <code> TCPConnection( <var
   title="">  subdomain </var> , <var title=""> port </var> <ins>, </ins> <var
   title=""> <ins>secure </ins> </var> ) </code> </dfn> <ins>constructor on the </ins> <code> <a
   href="#window0"> <ins>Window </ins> </a> </code> <ins>interface returns a new object implementing the </ins> <code> <a href="#connection0"> <ins>Connection </ins> </a> </code> <ins>interface, set up for a direct </ins>   <del>Establishes a TCP </del> connection to <ins>a </ins> <del>the </del> specified <ins>host on the page's domain. </ins> <p> <ins>When this constructor is invoked, the following steps must be followed. </ins> <p> <ins>First, if the </ins> <span> <a href="#domain0"> <ins>script's domain </ins> </a> </span> <ins>is not a host name (e.g. it is an IP address) then the UA must raise a </ins> <span> <ins>security exception </ins> </span> <ins>. </ins> <span class="issue"> <ins>We currently don't allow connections to be set up back to an originating IP address, but we could, if the </ins> subdomain <ins>is the empty string. </ins> </span> <p> <ins>Then, if </ins> <del>using the specified port. If </del> the <var title=""> subdomain </var> <ins>argument </ins> is null or the empty string, the <ins>target </ins> <del>connection shall be established to the script context's origin </del> host <ins>is the </ins> <span> <a href="#domain0"> <ins>script's domain </ins> </a> </span> <ins>. </ins> <del>(  window.location.host  ). </del> Otherwise, the <var title=""> subdomain </var> <ins>argument </ins> <del>string </del> is prepended to the <span> <a href="#domain0"> <ins>script's domain </ins> </a> </span>  <del>window.location.host  string </del> with a dot separating the two strings, and <del>if </del> that is <ins>the target host. </ins> <p> <ins>If the target host is not </ins> a valid host name, <del>the connection shall be established to that host. If the  window.location.host  is not a valid host, </del> or if <ins>the </ins> <var
   title=""> <ins>port </ins> <del>prepending the  subdomain </del> </var> <ins>argument is </ins> <del>does </del> not <ins>either equal to 80, 443, or greater than 1024 and less </ins> <del>yield an valid host, </del> then <ins>65537, then the UA must raise </ins> a <span> security exception </span> <ins>. </ins> </p> <p> <ins>Otherwise, the user agent must verify that the </ins> <span> <a
   href="#the-string"> <ins>the string representing the script's domain in IDNA format </ins> </a> </span> <ins>can </ins> <del>should </del> be <ins>obtained without errors. </ins> <del>thrown. </del>   If <ins>it cannot, then the user agent must raise </ins> <del>the port is not equal to 80 or greater than 1024, raises </del> a <span> security exception </span> . <p> <ins>The user agent may also raise a </ins> <span> <ins>security exception </ins> </span> <ins>at this time if, for some reason, permission to create a direct TCP connection to the relevant host is denied. Reasons could include the UA being instructed by the user to not allow direct connections, or the UA establishing (for instance using UPnP) that the network topology will cause connections on the specified </ins> <del>Otherwise, the given </del> port <ins>to </ins> <del>shall </del> be <ins>directed at the wrong host. </ins> <p> <ins>If no exceptions are raised by the previous steps, then a new </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object must be created, its </ins> <code title="dom-connection-peer"> <a href="#peer"> <ins>peer </ins> </a> </code> <ins>attribute must be set to a string consisting of the name of the target host, a colon (U+003A COLON), and the port number as decimal digits, and its </ins> <code title="dom-connection-network"> <a
   href="#network"> <ins>network </ins> </a> </code> <ins>attribute must be set to the same value as the </ins> <code title="dom-connection-peer"> <a href="#peer"> <ins>peer </ins> </a> </code> <ins>attribute. </ins> <p> <ins>This object must then be returned. </ins> <p> <ins>The user agent must then begin trying </ins> <del>used </del> to establish a <ins>connection with the target host and specified port. (This typically would begin in the backgound, while the script continues to execute.) </ins> <p> <ins>If the </ins> <var title=""> <ins>secure </ins> </var> <ins>boolean argument is set to true, then the user agent must establish a secure connection with the target host and specified port using TLS or another protocol, negotiated with the server. </ins> <a href="#refsRFC2246"> <ins>[RFC2246] </ins> </a> <ins>If this fails the user agent must act as if it had </ins> <a href="#closeConnection"> <ins>closed the connection </ins> </a> <ins>. </ins> <p> <ins>Once a secure connection is established, or if the </ins> <var
   title=""> <ins>secure </ins> </var> <ins>boolean argument is not set to true, then the user agent must continue to connect to the server using the protocol described in the section entitled </ins> <span> <a href="#clients1"> <ins>clients connecting over TCP </ins> </a> </span> <ins>. All data on connections made using TLS must be sent as "application data". </ins> <p> <ins>Once the connection is established, the UA must act as described in the section entitled </ins> <span> <a href="#sending1"> <ins>sending and receiving data over TCP </ins> </a> </span> <ins>. </ins> <p> <ins>User agents should allow multiple TCP connections to be established per host. In particular, user agents should not apply per-host HTTP connection limits to connections established with the </ins> <code
   title="dom-TCPConnection"> <a
   href="#tcpconnection"> <ins>TCPConnection </ins> </a> </code> <ins>constructor. </ins> <h4 id="broadcast"> <span class="secno"> <ins>7.3.5. </ins> </span> <ins>Broadcast connections </ins> </h4> <p> <ins>The </ins> <dfn id="localbroadcastconnection"
   title="dom-LocalBroadcastConnection"> <code> <ins>LocalBroadcastConnection() </ins> </code> </dfn> <ins>constructor on the </ins> <code> <a href="#window0"> <ins>Window </ins> </a> </code> <ins>interface returns a new object implementing the </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>interface, set up to broadcast on the local network. </ins> <p> <ins>When this constructor is invoked, a new </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object must be created. </ins> <p> <ins>The </ins> <code title="dom-connection-network"> <a
   href="#network"> <ins>network </ins> </a> </code> <ins>attribute of the object must be set to </ins> <span> <a href="#the-string"> <ins>the string representing the script's domain in IDNA format </ins> </a> </span> <ins>. If this string cannot be obtained, then the user agent must raise a </ins> <span> <ins>security exception </ins> </span> <ins>exception when the constructor is called. </ins> <p> <ins>The </ins> <code title="dom-connection-peer"> <a href="#peer"> <ins>peer </ins> </a> </code> <ins>attribute must be set to the empty string. </ins> <p> <ins>The object must then be returned, unless, for some reason, permission to broadcast on the local network is to be denied. In the latter case, a </ins> <span> <ins>security exception </ins> </span> <ins>must be raised instead. User agents may deny such permission for any reason, for example a user preference. </ins> <p> <ins>If the object is returned (i.e. if no exception is raised), the user agent must the begin broadcasting and listening on the local network, in the background, as described below. The user agent may define "the local network" in any way it considers appropriate and safe; for instance the user agent may ask the user which network (e.g. Bluetooth, IrDA, Ethernet, etc) the user would like to broadcast on before beginning broadcasting. </ins> <p> <ins>UAs may broadcast and listen on multiple networks at once. For example, the UA could broadcast on both Bluetooth and Wifi at the same time. </ins> <del>connection. </del> </p> <p> <ins>As soon as the </ins> <del>Returns a   Connection </del>   object <ins>is returned, the connection </ins> <a
   href="#openConnection"> <ins>has been established </ins> </a> <ins>, </ins> <del>with its  network  attribute set to the name of the host to </del> which <ins>implies that the </ins> <code title="event-connection-open"> <a href="#open0"> <ins>open </ins> </a> </code> <ins>event must be fired. Broadcast connections are never closed. </ins> <h5 id="broadcasting"> <span class="secno"> <ins>7.3.5.1. </ins> </span> <ins>Broadcasting over TCP/IP </ins> </h5> <p class="big-issue"> <ins>We need to register a UDP </ins> <del>the connection was established and its  peer  attribute set to "  host  : </del>  port <ins>for this. For now this spec refers to port 18080/udp. </ins> <p class="note"> <ins>Since this feature requires that the user agent listen to a particular port, typically only one user agent per IP address can use this feature at any one time. </ins> <p> <ins>On TCP/IP networks, broadcast connections transmit data using UDP over port 18080. </ins> <p> <ins>When the </ins> <code title="dom-connection-send"> <a href="#send"> <ins>send( </ins> <var
   title=""> <ins>data </ins>  <del>".     LocalBroadcastConnection(  topic </del> </var> ) </a> </code> <ins>method is invoked on a </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object that was created by the </ins> <code title="dom-LocalBroadcastConnection"> <a
   href="#localbroadcastconnection"> <ins>LocalBroadcastConnection() </ins> </a> </code> <ins>constructor, </ins>     <del>Prompts </del> the user <ins>agent must follow these steps: </ins> <ol> <li> <ins>Create a string consisting of the value of the </ins> <code
    title="dom-connection-network"> <a href="#network"> <ins>network </ins> </a> </code> <ins>attribute of the </ins> <code> <a href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object, a U+0020 SPACE character, a U+0002 START OF TEXT character, and the </ins> <var title=""> <ins>data </ins> </var> <ins>argument. </ins> <li> <ins>Encode the string as UTF-8. </ins> <li> <ins>If the resulting byte stream is longer than 65487 bytes, raise an </ins> <code> <ins>INDEX_SIZE_ERR </ins> </code> <ins>DOM exception and stop. </ins> <li> <ins>Create a UDP packet whose data is the byte stream, with the source and destination ports being 18080, and with appropriate length and checksum fields. Transmit this packet to IPv4 address 255.255.255.255 or IPv6 address ff02::1, as appropriate. </ins> <span class="note"> <ins>IPv6 applications will also have to enable reception from this address. </ins> </span> </ol> <p> <ins>When a broadcast connection is opened on a TCP/IP network, the user agent should listen for UDP packets on port 18080. </ins> <p> <ins>When the user agent receives a packet on port 18080, the user agent must attempt to decode </ins> <del>to confirm </del> that <ins>packet's data as UTF-8. If the data is not fully correct UTF-8 (i.e. if there are decoding errors) then the packet must </ins> <del>a connection should </del> be <ins>ignored. Otherwise, the user agent must check to see if the decoded string contains a U+0020 SPACE character. If it does not, then the packet must again be ignored (it might be a peer discovery packet from a </ins> <code
   title="dom-PeerToPeerConnection"> <a
   href="#peertopeerconnection"> <ins>PeerToPeerConnection() </ins> </a> </code> <ins>constructor). If it does then the user agent must split the the string at the first space character. All the characters before the space are then known as </ins> <var title=""> <ins>d </ins> </var> <ins>, and all the characters after the space are known as </ins> <var title=""> <ins>s </ins> </var> <ins>. If </ins> <var title=""> <ins>s </ins> </var> <ins>is not at least one character long, or if the first character of </ins> <var title=""> <ins>s </ins> </var> <ins>is not a U+0002 START OF TEXT character, then the packet must be ignored. (This allows for future extension of this protocol.) </ins> <p> <ins>Otherwise, for each </ins> <code> <a href="#connection0"> <del>made. Such a prompt could look like this:   |:: New </del> Connection </a> </code> <ins>object that </ins> <del>:::::::::::::::::::::::::::::::::::::::::| | | | Would you like to open a connection called "Chess" for | | this Web site?: | | | | example.org | | | | Select connection to use: [ Bluetooth | v ] | | | | (( Open connection )) ( Cancel ) | |___________________________________________________________|   Returns null if the prompt </del> was <ins>created by the </ins> <code
   title="dom-LocalBroadcastConnection"> <a
   href="#localbroadcastconnection"> <ins>LocalBroascastConnection() </ins> </a> </code> <ins>constructor and whose </ins> <code title="dom-connection-network"> <a
   href="#network"> <del>canceled. Otherwise, returns a   Connection   object with its </del>  network </a> </code> attribute <ins>exactly matches </ins> <var
   title=""> <ins>d </ins> <del>set to  topic </del> </var> <ins>, a </ins> <code title="event-connection-read"> <a
   href="#read"> <del>and its  peer  attribute set to null, and begins broadcasting on the relevant network. (See:   broadcast formats   .)    The following script creates a connection to a local party line:   var a = new LocalBroadcastConnection("Party Line"); a.onread = function(s, f) { alert(f + ' wrote ' + s); } a.send('hello');      LocalPeerConnection(  topic  )     Prompts the user to select a connection to make, which could look like this:   |:: New Connection :::::::::::::::::::::::::::::::::::::::::| | | | Select the peer to connect to: | | | | JohnSmith_Series60 via Bluetooth (( Connect )) | | Patrick's Phone via Bluetooth ( Connect ) | | John Smith via UDP ( Connect ) | | | | ( Cancel ) | |___________________________________________________________|   While the prompt is displayed, the UA should broadcast on all supported networks, as described   below   .   Returns null if the prompt was canceled. Otherwise, returns a   Connection   object with its  network  attribute set to  topic  and its  peer  attribute set to a string uniquely identifying the selected peer, and opens a connection to that peer. (See:   peer connection formats   .)    ...   Events: One event when the connection is first established, one event for when data is received, one event for when the connection is closed for good, one event for when the connection is cut temporarily, one event for when the connecton is restored.  When data is received for a connection, a </del>  read </a> </code> event must be fired on the <code> <a
   href="#connection0">  Connection </a> </code> <ins>object. The string </ins> <var
   title=""> <ins>s </ins> </var> <ins>, with the first character removed, must be used as the </ins> <code title="dom-connectionReadEvent-data"> <a
   href="#data1"> <ins>data </ins> </a> </code> <ins>, and the source IP address of the packet as the </ins> <code title="dom-connectionReadEvent-source"> <a
   href="#source0"> <ins>source </ins> </a> </code> <ins>. </ins> <p class="big-issue"> <ins>Making the source IP available means that if two or more machines in a private network can be made to go to a hostile page simultaneously, the hostile page can determine the IP addresses used locally (i.e. on the other side of any NAT router). Is there some way we can keep link-local IP addresses secret while still allowing for applications to distinguish between multiple participants? </ins> <h5 id="broadcasting0"> <span class="secno"> <ins>7.3.5.2. </ins> </span> <ins>Broadcasting over Bluetooth </ins> </h5> <p class="big-issue"> <ins>Does anyone know enough about Bluetooth to write this section? </ins> <h5 id="broadcasting1"> <span class="secno"> <ins>7.3.5.3. </ins> </span> <ins>Broadcasting over IrDA </ins> </h5> <p class="big-issue"> <ins>Does anyone know enough about IrDA to write this section? </ins> <h4 id="peer-to-peer"> <span class="secno"> <ins>7.3.6. </ins> </span> <ins>Peer-to-peer connections </ins> </h4> <p> <ins>The </ins> <dfn id="peertopeerconnection"
   title="dom-PeerToPeerConnection"> <code> <ins>PeerToPeerConnection() </ins> </code> </dfn> <ins>constructor on the </ins> <code> <a href="#window0"> <ins>Window </ins> </a> </code> <ins>interface returns a new object implementing the </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>interface, set up for a direct connection to a user-specified host. </ins> <p> <ins>When this constructor is invoked, a new </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object must be created. </ins> <p> <ins>The </ins> <code title="dom-connection-network"> <a
   href="#network"> <ins>network </ins> </a> </code> <ins>attribute of the object must be set to </ins> <span> <a href="#the-string"> <ins>the string representing the script's domain in IDNA format </ins> </a> </span> <ins>. If this string cannot be obtained, then the user agent must raise a </ins> <span> <ins>security exception </ins> </span> <ins>exception when the constructor is called. </ins> <p> <ins>The </ins> <code title="dom-connection-peer"> <a href="#peer"> <ins>peer </ins> </a> </code> <ins>attribute must be set to the empty string. </ins> <p> <ins>The object must then be returned, unless, for some reason, permission to establish peer-to-peer connections is generally disallowed, for example due to administrator settings. In the latter case, a </ins> <span> <ins>security exception </ins> </span> <ins>must be raised instead. </ins> <p> <ins>The user agent must then, typically while the script resumes execution, find a remote host to establish a connection to. To do this it must start broadcasting and listening for peer discovery messages and listening for incoming connection requests on all the supported networks. How this is performed depends on the type of network and is described below. </ins> <p> <ins>The UA should inform the user of the clients that are detected, and allow the user to select one to connect to. UAs may also allow users to explicit specify hosts that were not detected, e.g. by having the user enter an IP address. </ins> <p> <ins>If an incoming connection is detected before the user specifies a target host, the user agent should ask the user to confirm that this is the host they wish to connect to. If it is, the connection should be accepted and the UA will act as the </ins> <em> <ins>server </ins> </em> <ins>in this connection. (Which UA acts as the server and which acts as the client is not discernible at the DOM API level.) </ins> <p> <ins>If no incoming connection is detected and if the user specifies a particular target host, a connection should be established to that host, with the UA acting as the </ins> <em> <ins>client </ins> </em> <ins>in the connection. </ins> <p> <ins>No more than one connection must be established per </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> object, <ins>so once a connection has been established, the user agent must stop listening for further connections (unless, or until such time as, another </ins> <code> <a
   href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object is being created). </ins> <p> <ins>If at any point the user cancels the connection process or the remote host refuses the connection, then the user agent must act as if it had </ins> <a
   href="#closeConnection"> <ins>closed the connection </ins> </a> <ins>, and stop trying to connect. </ins> <h5 id="peer-to-peer0"> <span class="secno"> <ins>7.3.6.1. </ins> </span> <ins>Peer-to-peer connections over TCP/IP </ins> </h5> <p class="big-issue"> <ins>We need to register ports for this. For now this spec refers to port 18080/udp and 18080/tcp. </ins> <p class="note"> <ins>Since this feature requires that the user agent listen to a particular port, typically only one user agent per IP address can use this feature at any one time. </ins> <p> <ins>When </ins> using <ins>TCP/IP, broadcasting peer discovery messages must be done by creating UDP packets every few seconds containing as their data the value of the connection's </ins> <code title="dom-connection-network"> <a
   href="#network"> <ins>network </ins> </a> </code> <ins>attribute, encoded as UTF-8, with the source and destination ports being set to 18080 and appropriate length and checksum fields, and sending these packets to address (in IPv4) 255.255.255.255 or (in IPv6) ff02::1, as appropriate. </ins> <p> <ins>Listening </ins> <del>the   ConnectionReadEvent   interface </del> for <ins>peer discovery messages must be done by examining incoming UDP packets on port 18080. </ins> <span class="note"> <ins>IPv6 applications will also have to enable reception from the ff02::1 address. </ins> </span> <ins>If their payload is exactly byte-for-byte equal to a UTF-8 encoded version of the value of the connection's </ins> <code title="dom-connection-network"> <a
   href="#network"> <ins>network </ins> </a> </code> <ins>attribute, then the source address of that packet represents the address of a host that is ready to accept a peer-to-peer connection, and it should therefore be offered to the user. </ins> <p> <ins>Incoming connection requests must be listened for on TCP port 18080. If an incoming connection is received, the UA acts as a </ins> <em> <ins>server </ins> </em> <ins>, as described in the section entitled </ins> <span> <a href="#servers1"> <ins>servers accepting connections over TCP </ins> </a> </span> <ins>. </ins> <p> <ins>If </ins> <del>the event. The event has </del> no <ins>incoming connection requests are accepted and the user instead specifies a target host to connect to, the UA acts as a </ins> <em> <ins>client </ins> </em> <ins>: the user agent must attempt to connect to the user-specified host on port 18080, as described in the section entitled </ins> <span> <a
   href="#clients1"> <ins>clients connecting over TCP </ins> </a> </span> <ins>. </ins> <p> <ins>Once the connection is established, the UA must act as described in the section entitled </ins> <span> <a href="#sending1"> <ins>sending and receiving data over TCP </ins> </a> </span> <ins>. </ins> <p class="note"> <ins>This specification does not include a way to establish </ins> <em> <ins>secure </ins> </em> <ins>(encrypted) peer-to-peer connections at this time. </ins> <span
   class="big-issue"> <ins>If you can see a good way to do this, let me know. </ins> </span> <h5 id="peer-to-peer1"> <span class="secno"> <ins>7.3.6.2. </ins> </span> <ins>Peer-to-peer connections over Bluetooth </ins> </h5> <p class="big-issue"> <ins>Does anyone know enough about Bluetooth to write this section? </ins> <h5 id="peer-to-peer2"> <span class="secno"> <ins>7.3.6.3. </ins> </span> <ins>Peer-to-peer connections over IrDA </ins> </h5> <p class="big-issue"> <ins>Does anyone know enough about IrDA to write this section? </ins> </p> <h4 id="the-common"> <span class="secno"> <ins>7.3.7. </ins> </span> <ins>The common protocol for TCP-based connections </ins> </h4> <p> <ins>The same protocol is used for </ins> <code title="dom-TCPConnection"> <a
   href="#tcpconnection"> <ins>TCPConnection </ins> </a> </code> <ins>and </ins> <code
   title="dom-PeerToPeerConnection"> <a
   href="#peertopeerconnection"> <ins>PeerToPeerConnection </ins> </a> </code> <ins>connection types. This section describes how such connections are established from the client and server sides, and then describes how data is sent and received over such connections (which is the same for both clients and servers). </ins> <h5 id="clients"> <span class="secno"> <ins>7.3.7.1. </ins> </span> <dfn
   id="clients1"> <ins>Clients connecting over TCP </ins> </dfn> </h5> <p> <ins>This section defines the client-side requirements of the protocol used by the </ins> <code title="dom-TCPConnection"> <a
   href="#tcpconnection"> <ins>TCPConnection </ins> </a> </code> <ins>and </ins> <code
   title="dom-PeerToPeerConnection"> <a
   href="#peertopeerconnection"> <ins>PeerToPeerConnection </ins> </a> </code> <ins>connection types. </ins> <p> <ins>If a TCP connection to the specified target host and port cannot be established, for example because the target host is a domain name </ins> <del>default action.  Data </del> that <ins>cannot be resolved to an IP address, or because packets cannot be routed to the host, the user agent should retry creating the connection. If the user agent gives up trying to connect, the user agent must act as if it had </ins> <a href="#closeConnection"> <ins>closed </ins> <del>is received during script execution (e.g. between </del> the connection </a> <ins>. </ins> <p class="note"> <ins>No information regarding the state of </ins> <del>object being created &mdash; and thus </del> the connection <ins>is passed to the application while the connection is </ins> being established <ins>in this version of this specification. </ins> <p> <ins>Once a TCP/IP connection to the remote host is established, the user agent must transmit the following sequence of bytes, represented here in hexadecimal form: </ins> <pre> <ins>0x48 0x65 0x6C 0x6C 0x6F 0x0A </ins> </pre> <p class="note"> <ins>This represents the string "Hello" followed by a newline, encoded in UTF-8. </ins> <p> <ins>The user agent must then read all the bytes sent from the remote host, up to the first 0x0A byte (inclusive). That string of bytes is then compared byte-for-byte to the following string of bytes: </ins> <pre> <ins>0x57 0x65 0x6C 0x63 0x6F 0x6E 0x65 0x0A </ins> </pre> <p class="note"> <ins>This says "Welcome". </ins> <p> <ins>If the server sent back a string in any way different to this, then the user agent must </ins> <a href="#closeConnection"> <ins>close the connection </ins> </a> <ins>and give up trying to connect. </ins> <p> <ins>Otherwise, the user agent must then take </ins> <span> <a href="#the-string"> <ins>the string representing the script's domain in IDNA format </ins> </a> </span> <ins>, encode it as UTF-8, and send that to the remote host, followed by a 0x0A byte (a U+000A LINE FEED in UTF-8). </ins> <p> <ins>The user agent must then read all the bytes sent from the remote host, up to the first 0x0A byte (inclusive). That string of bytes must then be compared byte-for-byte to the string that was just sent to the server (the one with the IDNA domain name and ending with a newline character). If the server sent back a string in any way different to this, then the user agent must </ins> <a href="#closeConnection"> <ins>close the connection </ins> </a> <ins>and give up trying to connect. </ins> <p> <ins>Otherwise, the connection </ins> <a href="#openConnection"> <ins>has been established </ins> </a> <ins>(and events and so forth get fired, as described above). </ins> <p> <ins>If at any point </ins> <del>&mdash; and the current script completing, or </del> during <ins>this process the connection is closed prematurely, then the user agent must </ins> <a href="#closeConnection"> <ins>close the connection </ins> </a> <ins>and give up trying to connect. </ins> </p> <h5 id="servers"> <span class="secno"> <ins>7.3.7.2. </ins> </span> <dfn
   id="servers1"> <ins>Servers accepting connections over TCP </ins> </dfn> </h5> <p> <ins>This section defines the server side of the protocol described in the previous section. For authors, it should be used as a guide for how to implement servers that can communicate with Web pages over TCP. For UAs these are the requirements for the server part of </ins> <code
   title="dom-PeerToPeerConnection"> <a
   href="#peertopeerconnection"> <ins>PeerToPeerConnection </ins> </a> </code> <ins>s. </ins> <p> <ins>Once a TCP/IP connection from a remote host is established, the user agent must transmit the following sequence of bytes, represented here in hexadecimal form: </ins> <pre> <ins>0x57 0x65 0x6C 0x63 0x6F 0x6E 0x65 0x0A </ins> </pre> <p class="note"> <ins>This says "Welcome" and a newline in UTF-8. </ins> <p> <ins>The user agent must then </ins> <del>the execution of a </del>  read <ins>all the bytes sent from the remote host, up to the first 0x0A byte (inclusive). That string of bytes is then compared byte-for-byte to the following string of bytes: </ins> <pre> <ins>0x48 0x65 0x6C 0x6C 0x6F 0x0A </ins> </pre> <p class="note"> <ins>"Hello" and a newline. </ins> <p> <ins>If the remote host sent back a string in any way different to this, then the user agent must </ins> <a href="#closeConnection"> <ins>close the connection </ins> </a> <ins>and give up trying to connect. </ins> <p> <ins>Otherwise, the user agent must then take </ins> <span> <a href="#the-string"> <ins>the string representing the script's domain in IDNA format </ins> </a> </span> <ins>, encode it as UTF-8, and send that to the remote host, followed by a 0x0A byte (a U+000A LINE FEED in UTF-8). </ins> <p> <ins>The user agent must then read all the bytes sent from the remote host, up to the first 0x0A byte (inclusive). That string of bytes must then be compared byte-for-byte to the string that was just sent to that host (the one with the IDNA domain name and ending with a newline character). If the remote host sent back a string in any way different to this, then the user agent must </ins> <a href="#closeConnection"> <ins>close the connection </ins> </a> <ins>and give up trying to connect. </ins> <p> <ins>Otherwise, the connection </ins> <a href="#openConnection"> <ins>has been established </ins> </a> <ins>(and events and so forth get fired, as described above). </ins> <p class="note"> <ins>For author-written servers (as opposed to the server side of a peer-to-peer connection), the script's domain would be replaced by the hostname of the server. Alternatively, such servers might instead wait for the client to send its domain string, and then simply echo it back. This would allow connections from pages on any domain, instead of just pages originating from the same host. The client compares the two strings to ensure they are the same before allowing the connection to be used by author script. </ins> <p> <ins>If at any point during this process the connection is closed prematurely, then the user agent must </ins> <a href="#closeConnection"> <ins>close the connection </ins> </a> <ins>and give up trying to connect. </ins> </p> <h5 id="sending"> <span class="secno"> <ins>7.3.7.3. </ins> </span> <dfn
   id="sending1"> <ins>Sending and receiving data over TCP </ins> </dfn> </h5> <p> <ins>When the </ins> <code title="dom-connection-send"> <a href="#send"> <ins>send( </ins> <var
   title=""> <ins>data </ins> </var> <ins>) </ins> </a> </code> <ins>method is invoked on the connection's corresponding </ins> <code> <a href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object, the user agent must take the </ins> <var title=""> <ins>data </ins> </var> <ins>argument, replace any U+0000 NULL and U+0017 END OF TRANSMISSION BLOCK characters in it with U+FFFD REPLACEMENT CHARACTER characters, then transmit a U+0002 START OF TEXT character, this new </ins> <var title=""> <ins>data </ins> </var> <ins>string and a single U+0017 END OF TRANSMISSION BLOCK character (in that order) to the remote host, all encoded as UTF-8. </ins> <p> <ins>When the user agent receives bytes on the connection, the user agent must buffer received bytes until it receives a 0x17 byte (a U+0017 END OF TRANSMISSION BLOCK character). If the first buffered byte is not a 0x02 byte (a U+0002 START OF TEXT character encoded as UTF-8) then all the data up to the 0x17 byte, inclusive, </ins>  <del>event handler) </del> must be <ins>dropped. (This allows for future extension of this protocol.) Otherwise, all the data from (but not including) the 0x02 byte and up to (but not including) the 0x17 byte must be taken, interpreted as a UTF-8 string, and a </ins> <code
   title="event-connection-read"> <a href="#read"> <del>buffered, and </del>  read </a> </code> <ins>event must </ins>  <del>events queued up to </del> be fired <ins>on the </ins> <code> <a href="#connection0"> <ins>Connection </ins> </a> </code> <ins>object with that string as the </ins> <code title="dom-connectionReadEvent-data"> <a
   href="#data1"> <del>after the script has completed.  The </del>  data </a> </code> <ins>. If that </ins>  <del>attribute of the event object contains the </del> string <ins>cannot be decoded as UTF-8 without errors, the packet should be ignored. </ins> <p class="note"> <ins>This protocol does not yet allow binary </ins> <del>representing the </del> data <ins>(e.g. an image or video data) to be efficiently transmitted. A future version of this protocol might allow this by </ins> <del>received from the network.  For connections established </del> using <ins>the prefix character U+001F INFORMATION SEPARATOR ONE, followed by binary data which uses a particular byte (e.g. 0xFF) to encode byte 0x17 somehow (since otherwise 0x17 would be treated as transmission end by down-level UAs). </ins>   <del>TCPConnection   and   LocalPeerConnection   , the  source  attribute of the event is equal to the  peer  attribute of the connection object. For   LocalBroadcastConnection   connections, the  source  attribute of the event contains the string uniquely identifying the source of the message.  ... </del> </p> <h4 id="security0">  <span class="secno"> <ins>7.3.8. </ins> </span> <ins>Security </ins> <del>6.3.1.   TCP connections </del>  </h4> <p class="big-issue"> <ins>Need to write this section. </ins> <p class="big-issue"> <ins>If you have an unencrypted page that is (through a man-in-the-middle attack) changed, it can access a secure service that is using IP authentication and then send that data back to the attacker. Ergo we </ins> <del>All TCP connections </del> should <ins>probably stop unencrypted pages from accessing encrypted services, on the principle that the actual level of security is zero. Then again, if we do that, we prevent insecure sites from using SSL as a tunneling mechanism. </ins> <p class="big-issue"> <ins>Should consider dropping the subdomain-only restriction. It doesn't seem to add anything, and prevents cross-domain chatter. </ins> <h4 id="relationship3"> <span class="secno"> <ins>7.3.9. </ins> </span> <ins>Relationship to other standards </ins> </h4> <p class="big-issue"> <ins>Should </ins> have a <ins>section talking about the fact that we blithely ignoring IANA's port assignments here. </ins> <p class="big-issue"> <ins>Should explain why we are not reusing HTTP for this. (HTTP is too heavy-weight for such a simple need; requiring authors to implement an HTTP </ins> <del>handshake to ensure the </del> server <ins>just to have a party line is too much of a barrier to entry; cannot rely on prebuilt components; having a simple protocol makes it much easier to do RAD; HTTP doesn't fit the needs and doesn't have the security model needed; etc) </ins> <del>is expecting a TCPConnection. TCP connections should attempt to automatically re-connect when they get disconnected. All text is sent as UTF-8.   6.3.2.   Broadcast formats    ...   6.3.3.   Peer connection formats    ...   6.3.4.   Announcing peer connections    ... </del>  <h3 id="crossDocumentMessages"> <span class="secno"> <ins>7.4. </ins> </span> <span
   title="SCS"> <a href="#scs"> <ins>[SCS] </ins> </a> <del>6.4. </del> </span> Cross-document messaging </h3> <p> Web browsers, for security and privacy reasons, prevent documents in different domains from affecting each other; that is, cross-site scripting is disallowed. <p> While this is an important security feature, it prevents pages from different domains from communicating even when those pages are not hostile. This section introduces a messaging system that allows documents to communicate with each other regardless of their source domain, in a way designed to not enable cross-site scripting attacks. <h4 id="definitions"> <span class="secno"> <ins>7.4.1. </ins> <del>6.4.1. </del> </span> Definitions </h4> <p> Any <code> Document </code> object that supports this cross-document messaging API must implement the <code> <a
   href="#documentmessaging"> DocumentMessaging </a> </code> interface. </p> <pre
   class="idl"> interface <dfn id="documentmessaging"> DocumentMessaging </dfn> { void <span> <a href="#postmessage"> postMessage </a> </span> (in DOMString message); }; </pre> <p> Such <code> Document </code> objects must also implement the <code> EventTarget </code> interface. <a
   href="#refsDOM3EVENTS"> [DOM3EVENTS] </a> <p> The <span> <a href="#postmessage"> postMessage() </a> </span> method causes an event to be dispatched (as defined below). This event uses the following interface: <pre
   class="idl"> interface <dfn id="crossdocumentmessageevent"> CrossDocumentMessageEvent </dfn> : <span> Event </span> { readonly attribute DOMString <span title="CrossDocumentMessageEvent.data"> <a href="#data2">  data </a> </span> ; readonly attribute DOMString <span title="CrossDocumentMessageEvent.domain"> <a href="#domain2">  domain </a> </span> ; readonly attribute DOMString <span title="CrossDocumentMessageEvent.uri"> <a href="#uri"> uri </a> </span> ; readonly attribute Document <span title="CrossDocumentMessageEvent.source"> <a href="#source1">  source </a> </span> ; void <span> <a href="#initcrossdocumentmessageevent"> initCrossDocumentMessageEvent </a> </span> (in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString dataArg, in DOMString domainArg, in DOMString uriArg, in Document documentArg); void <span> <a href="#initcrossdocumentmessageeventns"> initCrossDocumentMessageEventNS </a> </span> (in DOMString namespaceURI, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString dataArg, in DOMString domainArg, in DOMString uriArg, in Document documentArg); }; </pre> <h4 id="processing1">  <span class="secno"> <ins>7.4.2. </ins> <del>6.4.2. </del> </span> Processing model </h4> <p> When a script invokes the <dfn
   id="postmessage"> <code> postMessage() </code> </dfn> method on a document, the user agent must create an event that uses the <code> <a
   href="#crossdocumentmessageevent"> CrossDocumentMessageEvent </a> </code> interface, with the event name <dfn id="message"
   title="message-event"> <code> message </code> </dfn> in the <code> uuid:7f37e11a-3a5c-4f3d-a82e-83b611439f37 </code> namespace, which bubbles, is cancelable, and has no default action. The <dfn id="data2"
   title="CrossDocumentMessageEvent.data">  <code> data </code> </dfn> attribute must be set to the value passed as the argument to the <code> <a
   href="#postmessage"> postMessage() </a> </code> method, the <dfn id="domain2"
   title="CrossDocumentMessageEvent.domain">  <code> domain </code> </dfn> attribute must be set to the domain of the document that the script that invoked the methods is associated with, the <dfn id="uri"
   title="CrossDocumentMessageEvent.uri"> <code> uri </code> </dfn> attribute must be set to the URI of that document, and the <dfn id="source1"
   title="CrossDocumentMessageEvent.source">  <code> source </code> </dfn> attribute must be set to the object representing that document. <p class="warning"> Authors should check the <code
   title="CrossDocumentMessageEvent.domain"> <a
   href="#domain2">  domain </a> </code> attribute to ensure that messages are only accepted from domains that they expect to receive messages from. Otherwise, bugs in the author's message handling code could be exploited by hostile sites. <div class="example"> <p> For example, if document A contains an <code> object </code> element that contains document B, and script in document A calls <code> <a
    href="#postmessage"> postMessage() </a> </code> on document B, then a message event will be fired on that element, marked as originating from document A. The script in document A might look like: </p> <pre> var o = document.getElementsByTagName('object')[0]; o. <span> contentDocument </span> . <span> <a href="#postmessage"> postMessage </a> </span> ('Hello world'); </pre> <p> To register an event handler for incoming events, the script would use <code> addEventListener() </code> (or similar mechanisms). For example, the script in document B might look like: </p> <pre> document.addEventListener('message', receiver, false); function receiver(e) { if (e.domain == 'example.com') { if (e.data == 'Hello world') { e.source.postMessage('Hello'); } else { alert(e.data); } } } </pre> <p> This script first checks the domain is the expected domain, and then looks at the message, which it either displays to the user, or responds to by sending a message back to the document which sent the message in the first place. </p> </div> <p class="note"> Implementors are urged to take extra care in the implementation of this feature. It allows authors to transmit information from one domain to another domain, which is normally disallowed for security reasons. It also requires that UAs be careful to allow access to certain properties but not others. <p> The <dfn
   id="initcrossdocumentmessageevent"> <code> initCrossDocumentMessageEvent() </code> </dfn> and <dfn
   id="initcrossdocumentmessageeventns"> <code> initCrossDocumentMessageEventNS() </code> </dfn> methods must initialise an event object in a manner analogous to other <code> initXXXEvent </code> metheds. <h2 id="the-html0">  <span class="secno"> <ins>8. </ins> </span> <ins>The HTML syntax </ins> </h2> <h3 id="writing"> <span class="secno"> <ins>8.1. </ins> </span> <ins>Writing HTML documents </ins> <span title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p> <em> <ins>This section only applies to authors and markup generators. </ins> </em> <p class="big-issue"> <ins>This section needs writing. </ins> <h3 id="parsing"> <span class="secno"> <ins>8.2. </ins> </span> <span title="SCS"> <a
   href="#scs"> <ins>[SCS] </ins> </a> <del>7. </del> </span> Parsing <ins>HTML documents </ins> <span title="TBW"> <a
   href="#tbw"> <ins>[TBW] </ins> </a> </span> </h3> <p> <em> <ins>This </ins>   <del>We also need a </del> section <ins>only applies to user agents. </ins> </em> <del>on HTML syntax, for authors. </del> <p> The rules for parsing <span> <a href="#xhtml"> XHTML </a> </span> documents into DOM trees are covered by the XML and Namespaces in XML specifications, and are out of scope of this specification. <a
   href="#refs"> </a> <p> For <span> <a href="#html1"> HTML </a> </span> documents, user agents must use the parsing rules described in this section to generate the DOM trees. <p> This specification mainly defines the parsing rules for syntactically valid HTML documents. When user agents encounter something described as a <dfn id="hard-parse"> hard parse error </dfn> in the rules below, they may use any error correction algorithm to handle the error. Such error correction should not result in DOMs that are not strictly trees. User agents are reluctantly encouraged to reverse engineer the error handling behaviour of the prevalent user agent in order to foster interoperability. </p>  <del>This specification also speaks of  easy parse errors  ; these are parse errors where the error handling is well-defined, and user agents must act as described below when encountering such problems. </del> <p> Conformance checkers must report all parse error conditions (both hard and easy errors) to the user, but may apply error correction algorithms (those described in the spec for easy errors, and those reverse-engineered from other UAs for hard errors) in an attempt to continue past the location of the error and find the remaining errors. <div class="note"> <p> While the HTML form of HTML5 bears a close resemblance to SGML and XML, it is a separate language with its own parsing rules. </p> <p> Past versions of HTML (in particular from HTML2 to HTML4) were based on SGML and used SGML parsing rules. However, few (if any) web browsers ever implemented true SGML parsing for HTML documents; the only user agents to strictly handle HTML as an SGML application have historically been validators. The resulting confusion &mdash; with validators claiming documents to have one representation while widely deployed Web browsers interoperably implemented a different representation &mdash; has resulted in this version of HTML returning to a non-SGML basis. </p> <p> Authors interested in using SGML tools in their authoring pipeline are encouraged to use the XML serialisation of HTML5 instead of the HTML serialisation. </p> </div> <p id="html-namespace"> <ins>To ease migration from HTML to XHTML, UAs must assign the </ins> <code> <ins>http://www.w3.org/1999/xhtml </ins> </code> <ins>namespace to elements in that are parsed in documents labelled as </ins> <code> <ins>text/html </ins> </code> <ins>, at least for the purposes of the DOM and CSS. </ins> </p> <p class="big-issue"> This section needs to be written, obviously. </p> <h2 id="rendering1"> <span class="secno"> <ins>9. </ins> <del>8. </del> </span> Rendering <span
   title="TBW"> <a href="#tbw"> <ins>[TBW] </ins> </a> </span> </h2> <p class="big-issue"> This section will probably include details on how to render DATAGRID, drag-and-drop, etc, in a visual media, in concert with CSS. <p> CSS UAs in visual media must, when scrolling a page to a fragment identifier, align the top of the viewport with the target element's top border edge. </p> <h3 id="rendering2"> <span class="secno"> <ins>9.1. </ins> <del>8.1. </del> </span> Rendering and the DOM </h3> <p class="big-issue"> This section is wrong. mediaMode will end up on Window, I think. All views implement Window. <p> Any object implement the <code> AbstractView </code> interface must also implement the <code> <a
   href="#mediamodeabstractview"> MediaModeAbstractView </a> </code> interface. <pre
   class="idl"> interface <dfn id="mediamodeabstractview"> MediaModeAbstractView </dfn> { readonly attribute DOMString <span> <a href="#mediamode"> mediaMode </a> </span> ; <ins>}; </ins> <del>} </del> </pre> <p> The <dfn id="mediamode"> <code> mediaMode </code> </dfn> attribute on objects implementing the <code> <a
   href="#mediamodeabstractview"> MediaModeAbstractView </a> </code> interface must return the string that represents the canvas' current rendering mode ( <code> screen </code> , <code> print </code> , etc). This is a lowercase string, as <a
   href="http://www.w3.org/TR/CSS21/media.html#media-types"> defined by the CSS specification </a> . <a href="#refsCSS21"> [CSS21] </a> <p> Some user agents may support multiple media, in which case there will exist multiple objects implementing the <code> AbstractView </code> interface. Only the default view implements the <code> <a
   href="#window0"> Window </a> </code> interface. The other views can be reached using the <code> view </code> attribute of the <code> UIEvent </code> inteface, during event propagation. There is no way currently to enumerate all the views. </p>   <del>9.  Menus, buttons and commands   This section will probably be moved to the structure details section near the top. Parts of it need a lot of work. We need to decide if we care about some of it, e.g. the menu bar nonsense should probably die. The main use case is context menus and drop down menus on buttons, probably (although the latter is dubious at best).   9.1.  Tutorial   This section still needs to be written. For now, here are some markup snippets to show how this should work:   &lt;menubar&gt; &lt;li&gt; &lt;a href="#file"&gt;File&lt;/a&gt; &lt;menu id="file"&gt; &lt;li&gt;&lt;button type="button" onclick="fnew()"&gt;New...&lt;/button&gt;&lt;/li&gt; &lt;li&gt;&lt;button type="button" onclick="fopen()"&gt;Open...&lt;/button&gt;&lt;/li&gt; &lt;li&gt;&lt;button type="button" onclick="fsave()" id="save"&gt;Save&lt;/button&gt;&lt;/li&gt; &lt;li&gt;&lt;button type="button" onclick="fsaveas()"&gt;Save as...&lt;/button&gt;&lt;/li&gt; &lt;/menu&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#edit"&gt;Edit&lt;/a&gt; &lt;menu id="edit"&gt; &lt;li&gt;&lt;button type="button" onclick="ecopy()"&gt;Copy&lt;/button&gt;&lt;/li&gt; &lt;li&gt;&lt;button type="button" onclick="ecut()"&gt;Cut&lt;/button&gt;&lt;/li&gt; &lt;li&gt;&lt;button type="button" onclick="epaste()"&gt;Paste&lt;/button&gt;&lt;/li&gt; &lt;/menu&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#help"&gt;Help&lt;/a&gt; &lt;menu id="help"&gt; &lt;li&gt;&lt;a href="help.html"&gt;Help&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="about.html"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;/menu&gt; &lt;/li&gt; &lt;/menubar&gt; ... &lt;input command="save"/&gt; &lt;!-- This will act exactly like the Save button above, including reflecting its  disabled  state dynamically --&gt;   Here's a way of doing something similar. This menu bar would not display inline in the page, but could be made to display in the browser's menu bar or as the window's only menu bar if the application is running standalone. How to do that hasn't yet been decided.  &lt;menubar id="appmenu"&gt; &lt;menulabel label="File"/&gt; &lt;menu&gt; &lt;command label="New..." onclick="fnew()"/&gt; &lt;command label="Open..." onclick="fopen()"/&gt; &lt;command label="Save" onclick="fsave()" id="save"/&gt; &lt;command label="Save as..." onclick="fsaveas()"/&gt; &lt;/menu&gt; &lt;menulabel label="Edit"/&gt; &lt;menu&gt; &lt;command label="Copy" onclick="ecopy()"/&gt; &lt;command label="Cut" onclick="ecut()"/&gt; &lt;command label="Paste" onclick="epaste()"/&gt; &lt;/menu&gt; &lt;menulabel label="Help"/&gt; &lt;menu&gt; &lt;a href="help.html"&gt;Help&lt;/a&gt; &lt;a href="about.html"&gt;About&lt;/a&gt; &lt;/menu&gt; &lt;/menubar&gt;   Here's some markup that falls back on the traditional abuse of the  select  element as a navigation menu, but which is implemented as a semi-correct menu using the new techniques of this document:  &lt;form action="redirect.cgi"&gt; &lt;menubar&gt; &lt;menulabel&gt;&lt;label for="goto"&gt;Go to...&lt;/label&gt;&lt;/menulabel&gt; &lt;menu&gt; &lt;select id="goto" onchange="if (this.options[this.selectedIndex].value) window.location = this.options[this.selectedIndex].value"&gt; &lt;option value="" selected="selected"&gt; Select site: &lt;/option&gt; &lt;option value="http://www.apple.com/"&gt; Apple &lt;/option&gt; &lt;option value="http://www.mozilla.org/"&gt; Mozilla &lt;/option&gt; &lt;option value="http://www.opera.com/"&gt; Opera &lt;/option&gt; &lt;/select&gt; &lt;span&gt;&lt;input type="submit" value="Go"&gt;&lt;/span&gt; &lt;/menu&gt; &lt;/menubar&gt; &lt;/form&gt;    9.2.   Commands    A command is the abstraction behind menu items, buttons, and keyboard shortcuts. Once a command is defined, it can be referred to by menu items, buttons, keyboard shortcut declarations, script, and so forth. The advantage of this is that it allows many access points to a single feature to share features such as their disabled state.  Commands have the following facets:   Type  The kind of command: "command", meaning it is a normal command; "radio", meaning that triggering the command will, amongst other things, set the Checked State to true (and probably uncheck some other commands); or "checkbox", meaning that triggering the command will, amongst other things, toggle the value of the Checked State.  ID  The name of the command, for referring to the command from the markup or from script. If a command has no ID, it is an  anonymous command  .  Label  The name of the command as seen by the user.  Hint  A helpful or descriptive string that can be shown to the user.  Icon  A graphical image that represents the action.  Action  The actual effect that triggering the command will have. This could be a scripted event handler, a URI to which to navigate, or a form submission.  Hidden State  Whether the command is hidden or not (basically, whether it should be shown in menus).  Disabled State  Whether the command can be triggered or not. If the Hidden State is true (hidden) then the Disabled state will be true (disabled) regardless.  Checked State  Whether the command is checked or not.  Triggers  The list of elements that can trigger the command. The element defining a command is always in the list of elements that can trigger the command. For anonymous commands, only the element defining the command is on the list, since other elements have no way to refer to it.   The distinction between Disabled State and Hidden State is subtle. A command should be Disabled if, in the same context, it could be enabled if only certain aspects of the situation were changed. A command should be marked as Hidden if, in that situation, the command will never be enabled. For example, in the context menu for a water faucet, the command "open" might be Disabled if the faucet is already open, but the command "eat" would be marked Hidden since the faucet could never be eaten.  In the DOM, the following interface is used to represent a command. (The comments describing each member of this interface are normative.)  interface  Command  { // The command's ID, null if the element defines an anonymous command. readonly attribute DOMString id; // The command's Label, null if the element does not specify one. readonly attribute DOMString label; // The command's Hint, null if the element does not specify one. readonly attribute DOMString title; // The absolute URI to the command's Icon, or, if the element // defining the command has no explicit icon, the computed value // of the CSS 'icon' property on that element.  [CSS3UI]  // Null if the element does not specify an icon and the computed // value of the CSS 'icon' property is 'auto'. readonly attribute DOMString icon; // The Hidden State of the command. True if the element is // hidden, false otherwise. readonly attribute boolean hidden; // The Disabled State of the command. True if the element is // disabled or hidden, false otherwise. readonly attribute boolean disabled; // The Checked State of the command. True if the element is // checked, false otherwise. readonly attribute boolean checked; // The type of command. Either "command", "radio", or "checkbox". // Null if the element does not define a command. readonly attribute DOMString commandType; // The Action of the command: a method that triggers the action for // the command. Has no effect if the element does not define a command. void triggerCommand(); // The list of elements that can trigger this command (the Triggers // for the command), null if the element does not define a command. readonly attribute HTMLCollection triggers; // The element referred to by the  command  attribute (if // specified), which is the element that actually defines the // command for this element. (See:   the  command  attribute   .) // If the element defines a command, this must point to the element // itself (as in  commandElement.command == commandElement  ). // Null if the element does not have a  command  attribute and // does not define a command. readonly attribute Command command; };   The   Command   interface is implemented by any element capable of defining a command. All the attributes of the   Command   interface are readonly. Elements implementing this interface may implement other interfaces that have attributes with identical names but that are writable; in bindings that simply flatten all supported interfaces on the object, the writable attributes have priority over the readonly attributes defined above.  All the commands defined in a document that have IDs are listed in the   document.commands   attribute:  interface  DocumentCommands  { readonly attribute HTMLCollection commands; }   The collection represented by this attribute is  live  . As commands are defined in or removed from the document, the attribute is updated.  The following elements may define commands:   a   ,   button   ,   input   ,   option   ,   command   .   9.2.1.  The   command   attribute   Any element that can define a command can also, instead, have a   command   attribute that specifies the ID of a command that the element should defer to. In this case the element does not define a command, but, in the absence of attributes to the contrary, reflects the state of the element specified.  If the   command   attribute specifies an ID that is not the ID of an element that defines a command, then the   command   DOM attribute is set to the null value, and the element acts as if it was linked to an element that defined a command with no Label, no Hint, no Icon, no Action, that was not Hidden, not Disabled, not Checked, and that was of Type "command".   9.2.2.  The   a   element and commands    9.2.2.1.   Using the  a  element to define a command    To define a command, an   a   element must have an appropriate  href  attribute, and must not have a   command   attribute. An appropriate  href  attribute is one whose URI does not contain a fragment identifier that points to a   menu   element in the same document as the   a   element.  An   a   element with an  href  attribute that points to a   menu   element in the same file can be used to   open a menu   .  The Type of the command is "command".  The ID of the command is the ID of the   a   element, if present. Otherwise it is an anonymous command.  The Label of the command is the string given by the element's   textContent   DOM attribute.  [DOM3CORE]   The Hint of the command is the string given by the   title   attribute, if any, and the empty string if the attribute is absent.  The Icon of the command is the absolute URI of the first image in the   a   element. Specifically, in a depth-first search of the children of the element, the first element that is either an   img   element with a  src  attribute, or an  object  element with a  data  attribute. If it is an   img   element then the URI is taken from the  src  attribute. If it is an  object  element then the URI is taken from the  data  attribute. Relative URIs must be resolved.  The Action of the command is that a  {"http://www.w3.org/2001/xml-events", "click"}  event is fired on the   a   element.  The Hidden State and Disabled State facets of the command are always false. (The command is always enabled.)  The Checked State of the command is always false. (The command is never checked.)   9.2.2.2.  Using the   a   element with the   command   attribute   If an   a   element has a   command   attribute, then:  If the element's   title   attribute is absent, then when the UA attempts to display the element's hint, it must instead use the specified command's Hint.  Even if the element's  href  attribute is absent, the element must still match the CSS   :link   or  :visited  pseudo-classes. It must match the  :visited  pseudo-class if the command's action is to follow a link that has already been visited by the user, and must match the   :link   pseudo-class otherwise.  If a  DOMActivate  event is dispatched on the element and is not canceled, and the event has no other default action, and the command's Disabled State is false (enabled), then the command's Action must be triggered as the default action.  The  DOMActivate  event is fired as the default action of the  click  event.  If the command's Disabled State is true (disabled) then the element must be disabled and must therefore match the  :disabled  pseudo-class. UAs should style disabled links in such a way as to clearly convey their disabled state.  The Label, Icon, Checked State and Type facets of the command are ignored by the   a   element (except for  matching CSS pseudo-classes  ).   9.2.3.  The  button  element and commands    9.2.3.1.   Using the  button  element to define a command    To define a command, a  button  element must not have a   command   attribute.  The Type of the command is "command".  The ID of the command is the ID of the  button  element, if present. Otherwise it is an anonymous command.  The Label, Hint, Icon, and Action facets of the command are determined as for   a   elements.  The Hidden State of the command is always false.  The Disabled State of the command mirrors the disabled state of the button. Typically this is given by the element's  disabled  attribute, but certain button types become disabled at other times too &mdash; for example, the Web Forms 2.0  move-up  button type is disabled when it would have no effect.  [WF2]   The Checked State of the command is always false.   9.2.3.2.  Using the  button  element with the   command   attribute   If a  button  element has a   command   attribute, then:  If the element's   title   attribute is absent, then when the UA attempts to display the element's hint, it must instead use the specified command's Hint.  If a  DOMActivate  event is dispatched on the element and is not canceled, and the event has no other default action, and the command's Disabled State is false (enabled), and the button's  disabled  attribute is absent, then the command's Action must be triggered as the default action.  The  DOMActivate  event is fired as the default action of the  click  event.  If the command's Disabled State is true (disabled) then the element must be disabled. The  button  element must also be disabled if the element's  disabled  attribute is set.  The Label, Icon, Checked State and Type facets of the command are ignored by the  button  element (except for  matching CSS pseudo-classes  ).   9.2.4.  The  input  element and commands    9.2.4.1.   Using the  input  element to define a command    To define a command, an  input  element must have a  type  attribute specifying a button, radio button, or check box type (In HTML4:  submit  ,  reset  ,  button  ,  radio  ,  checkbox  (but not  image  ); in WF2:  move-up  ,  move-down  ,  add  ,  remove  ), and must not have a   command   attribute.  The Type of the command is "radio" if the  type  attribute has the value  radio  , "checkbox" if the  type  attribute has the value  checkbox  , and "command" otherwise.  The ID of the command is the ID of the  input  element, if present. Otherwise it is an anonymous command.  The Label of the command depends on the Type of the command. If the Type is "command", then it is the string given by the   value   attribute, if any, and a UA-dependent value that the UA uses to label the button itself if the attribute is absent.  If the Type is "radio" or "checkbox", then, if the element has a  label  element associated with it, the   textContent   of the first such element is used as the Label (in DOM terms,  this.labels[0].textContent   [WF2]   [DOM3CORE]  ). Otherwise, the value of the   value   attribute, if present, used is as the Label. Otherwise, the Label is the empty string.  The Hint of the command is the string given by the   title   attribute, if any, and the empty string if the attribute is absent.  There is no Icon for the command.  The Action of the command is that a  {"http://www.w3.org/2001/xml-events", "click"}  event is fired on the  input  element.  The Hidden State and Disabled State facets of the command are as determined for  button  elements.  The Checked State of the command is true if the command is of Type "radio" or "checkbox" and the element has a  checked  attribute, and false otherwise.   9.2.4.2.  Using the  input  element with the   command   attribute   If an  input  element has no  type  attribute and no  name  attribute, and it has a   command   attribute, then:  If the command is of Type "command" then the element must generally be styled and behave as if it was of type  button  ; if the Type of the command is "radio" then the element must generally be styled and behave as if it was of type  radio  ; and if the Type of the command is "checkbox" then the element must generally be styled and behave as if it was of type  checkbox  .  If the command is of Type "command" and the element's   value   attribute is absent, then when the UA attempts to display the element's caption, it must instead use the specified command's Label. The Label facet is ignored if the command is not of Type "command".  The UA may use the Icon facet of the command to render an icon in the control, if appropriate for the UI used.  If the element's   title   attribute is absent, then when the UA attempts to display the element's hint, it must instead use the specified command's Hint.  If a  DOMActivate  event is dispatched on the element and is not canceled, and the event has no other default action, and the command's Disabled State is false (enabled), and the element's  disabled  attribute is absent, then the command's Action must be triggered as the default action.  The  DOMActivate  event is fired as the default action of the  click  event.  If the command's Disabled State is true (disabled) then the element must be disabled. The  input  element must also be disabled if the element's  disabled  attribute is set.  If the command's Checked State is true (checked) then the element must be checked. The  input  element must also be checked if the element's  checked  attribute is set.   9.2.5.  The  option  element and commands    9.2.5.1.   Using the  option  element to define a command    To define a command, an  option  element must have an ancestor  select  element and either no   value   attribute or a   value   attribute that is not the empty string.  The Type of the command is "radio" if the  option  's  select  element has no  multiple  attribute, and "checkbox" if it does.  The ID of the command is the ID of the  option  element, if present. Otherwise it is an anonymous command.  The Label of the command is the value of the  option  element's  label  attribute, if there is one, or the value of the  option  element's   textContent   DOM attribute if it doesn't.  The Hint of the command is the string given by the   title   attribute, if any, and the empty string if the attribute is absent.  There is no Icon for the command.  The Action of the command is that the element be selected in its  select  element. If the command is of Type "radio" then this must unselect all the other options, otherwise it must toggle the selection state of the current option. Once the selection has changed, a  change  event must be fired on the  select  element, as if the selection had been changed directly.  The Hidden State facet of the command is always false (shown).  The Disabled State of the command is true (disabled) when the  option  element is disabled, and false otherwise.  The Checked State of the command is true (checked) when the element is selected in its  select  element.   9.2.5.2.  Using the  option  element with the   command   attribute   The   command   attribute cannot be used with  option  elements.   9.2.6.  The   command   element and commands    9.2.6.1.  Using the   command   element to define a command   The most direct way to represent a command is by using the   command   element. A   command   element defines a command if it does not have a   command   attribute.   ... &lt;command id="c_stop" label="Emergency Stop" onclick="dostop()"/&gt; &lt;command id="c_go" label="Go" onclick="dogo()"/&gt; &lt;command id="c_lamp" label="Headlamps" onclick="dof2()" disabled="disabled"/&gt; ...    This element should not be directly displayed. In CSS-aware user agents, this should be achieved by including the following rules, or their equivalent, in the UA's user agent style sheet:  @namespace xh url(http://www.w3.org/1999/xhtml); xh|command { display: none; }   The   command   element, in addition to the core and internationalisation attributes, may have the following attributes specified:     type    The command's Type. If present, this attribute must either have the value  radio  , in which case the command is of Type "radio", or the value  checkbox  , in which case the command is (amazingly) of Type "checkbox". Any other value, or the absence of the attribute altogether, means that the command is of Type "command".    id    The command's ID. If this attribute is not specified, then the command is anonymous.    label    The command's Label. If the attribute is not specified, the command's Label is given by the element's   textContent   DOM attribute.    title    The command's Hint. If the attribute is not specified, the command's Hint is the empty string.    icon    A URI to the command's Icon. If the attribute is not specified, then the command has no Icon.    onclick    An event handler attribute that listens for  click  events.    hide    The command's Hidden State. If the attribute is present, the command is hidden (and also disabled, regardless of the value of the  disabled  attribute), otherwise, the command is shown. If the attribute is present, it should have the value "  hide  ".    disabled    The command's Disabled State. If the attribute is present, the command is disabled, otherwise, the command is enabled. If the attribute is present, it should have the value "  disabled  ".    checked    The command's Checked State. If the attribute is present, the command is checked, otherwise, the command is not. If the attribute is present, it should have the value "  checked  ".     radiogroup    An attribute indicating the name of the group of commands that will be toggled when the command itself is toggled. (Described  below  .)    default    An attribute indicating whether the command is the default command. If the attribute is present, the command is the default command, otherwise it is not. If it is set, it should have the value  default  . Used by context menus to indicate what the default option would be. The :default pseudo-class matches   command   elements with this attribute.   In addition,   command   elements may also have a   command   attribute, as  described below  .  The Type, ID, Label, Hint, Icon, Hidden State, Disabled State, and Checked State of the command defined by a   command   element are as described above. The Action of a   command   element is that a  {"http://www.w3.org/2001/xml-events", "click"}  event is fired on the element.  If the Type of the command is "checkbox", when a  click  event is dispatched on the element, user agents must toggle the value of the  checked  attribute before the event is dispatched in the document. (If the attribute is absent, then it is set to the value  checked  , and if the attribute is present, it is removed.) If the default action of the event is canceled, the value of the attribute must be changed back to the value it had before the event was dispatched.  If the Type of the command is "radio", when a  click  event is dispatched on the element, user agents must set the value of the  checked  attribute on the element to  checked  , and remove the attribute from any   command   elements with  type  set to  radio  and the same parent element and same  radiogroup  attribute, before the event is dispatched in the document. (If the element has no  radiogroup  attribute, then the elements "with the same  radiogroup  attribute" are those elements with  no   radiogroup  attribute.) If the default action of the event is canceled, the value of the attributes that were changed must be changed back to the values they had before the event was dispatched.  In HTML the   command   element is an empty element with no end tag.  Authors should put   command   elements inside the   head   element, inside any element that may contain   block-level elements   or   inline-level content   , or inside   commandset   elements.   Authors should not put elements or text inside   command   elements.   9.2.6.2.  Using the   command   element with the   command   attribute   If a   command   element has a   command   attribute, then:  If the element's  label  attribute is absent, then when the UA attempts to display the element's caption, it must instead use the specified command's Label.  If the element's  icon  attribute is absent, then when the UA attempts to display the element's icon, it must instead use the specified command's Icon.  If the element's   title   attribute is absent, then when the UA attempts to display the element's hint, it must instead use the specified command's Hint.  If a  click  event is dispatched on the element and is not canceled, and the command's Disabled State is false (enabled), and the element's own  disabled  attribute is absent, then the command's Action must be triggered as the default action.  If the command's Disabled State is true (disabled) then the element must be disabled. The   command   element must also be disabled if the element's  disabled  attribute is set.  If the command's Checked State is true (checked) then the element must be checked. The   command   element must also be checked if the element's  checked  attribute is set.  When a   command   element has a   command   attribute, any   type   and   radiogroup   attribute is ignored.   9.2.6.3.  Command Sets   Authors may place related commands together inside a   commandset   element.  Apart from the core and internationalisation attributes,   commandset   elements have no attributes.   Authors may use   commandset   elements wherever   command   elements are allowed.   commandset   elements may contain any number of   command   and   commandset   elements.   9.2.7.  The 'icon' property   UAs should use the command's Icon as the default generic icon provided by the user agent when the 'icon' property computes to 'auto' on an element that either defines a command or refers to one using the   command   attribute.   9.2.8.  CSS pseudo-classes and commands   When an element uses the   command   attribute, any UI pseudo-classes from the following list that apply to the element defining the command also apply to the elements that refer to that command.   :enabled, :disabled  Matches commands whose Disabled State facet is False and True respectively.  :checked  Matches commands whose Type facet is either "radio" or "checkbox", and whose Checked State facet is true.    9.3.  Menus   This section is horrible. Feel free to coment on this section, but be aware that the current state does not represent anything more than a step along the way to what this section will eventually become.    9.3.1.  The   menu   element   Menus are defined using the   menu   element. The semantic of the   menu   element is a structured list of navigation links and commands. The element can be used either as a list or as a block-level container. User agents must support all the common attributes and event handlers, plus the  label  attribute, on   menu   elements.    menu   elements with explicit  label  attributes, and   menu   elements following   menulabel   elements, should be hidden. In CSS-aware UAs, this effect should be achieved by including the following rules, or their equivalent, in the UA's user agent style sheet:  @namespace xh url(http://www.w3.org/1999/xhtml); xh|menu[label], xh|menulabel + xh|menu { display: none; }   All other   menu   elements should be rendered identically to   ul   elements. In CSS-aware UAs, this effect may be achieved by including rules similar to the following in the UA's user agent style sheet:  @namespace xh url(http://www.w3.org/1999/xhtml); xh|menu { display: block; margin: 0 0 0 40px; list-style: disc; }    9.3.1.1.  Menu labels   The  label  attribute sets the label of the menu.  If the attribute is not specified, and the element immediately preceding the   menu   element (with the same parent node, ignoring sibling nodes that are not elements) is a   menulabel   element, then that element provides the label.  Otherwise, if the   menu   element has no  label  attribute and the element that immediately precedes it is not a   menulabel   element, not an   hr   element, not a   commandset   element, not a  select  element, and not an element that defines or refers to a command, then the label of the menu is the value of the   textContent   DOM attribute of that previous sibling element.  Otherwise, the   menu   element has no label.   9.3.1.1.1.  The   menulabel   element   Menus may be labelled by   menulabel   elements. The semantic of the   menulabel   element is that it labels its following sibling element, which must be a   menu   element. It must only contain inline elements. User agents must support all the common attributes and event handlers, plus the  label  attribute, on the   menulabel   element.  A   menulabel   whose next sibling element is not a   menu   element is semantically meanginless.  The label of   menulabel   elements with explicit  label  attributes is given by that attribute; the label of   menulabel   elements with no  label  attribute is given by the DOM   textContent   attribute.  The default rendering of   menulabel   elements in visual UAs should be a block. In CSS-aware UAs, this effect should be achieved by including the following rules, or their equivalent, in the UA's user agent style sheet:  @namespace xh url(http://www.w3.org/1999/xhtml); xh|menulabel { display: block; }   Menu bars cause   menulabel   elements to be styled further.   9.3.1.2.  Content model of menus   When used as a list, a   menu   element must only contain   li   elements. When used in this way, each   li   element represents at most one item in the menu. What kind of item is represented depends on the children of the   li   .  When used as a block-level container, a   menu   element must only contain block-level markup. Each child element represents at most one item in the menu, depending on which kind of element it is.  Each item in a menu is either a group of commands, a single command, a separator, a submenu, or legacy fallback content. A menu is built up from these items.   9.3.1.3.  Using  optgroup  s as menus   When an  optgroup  element is a descendant of a   menu   element, and the  optgroup  element has a  label  attribute, then it defines a submenu. The label of such a menu is given by the  label  attribute.  When defining a submenu, an  optgroup  element must be a child node of either a  select  element or another  optgroup  element, must only contain  option  elements or other  optgroup  elements. Despite this, however, the processing model for constructing menus, as described in the next section, is the same whether the menu is defined by a   menu   element or an  optgroup  element.   9.3.1.4.  Building menus   Menus shall be built up from the children of their   menu   (or  optgroup  ) element by processing each child node of that element as follows:   If the node is not an element node, it is ignored. (Fallback content.)  If the node is an element node but is not in the XHTML namespace, it is ignored. (Fallback content.)  If the node is an   li   element, then:   If the first element node defines or refers to a   command   , or if the first element node is a   menu   element, an   hr   element, a   commandset   element, a  select  element, or an  optgroup  element, then continue the steps as if the   li   was actually this element.  Otherwise, if the first element node is an   a   element with an  href  attribute, then continue the steps as if the   li   was actually that   menu   element. (This can only happen if the   a   element is a   menu link   , otherwise it would have defined a command and be processed in the first item in this list.)  Otherwise, if the  second  element node is a   menu   element, then continue the steps as if the   li   was actually  that  element. (The first element will probably be used to  get the label of the menu  .)  Otherwise, this   li   element is ignored.  Non-element child nodes of the   li   element must be ignored. (Fallback content.)  If the node is a   command   of some sort, then add that command to the menu. The item can be further annotated as follows:   If the node is a   command   element with a  default  attribute, then the command is a default command and this should be reflected in the resulting interface.  For example, on Windows, context menus can have one menu item marked as being the default item. That item is usually highlighted in bold.   Each of the Triggers for the command must be checked in turn (in document order). If any of these triggers has an  access key  then the first such access key should be used as the shortcut key shown in the menu.   If the node is an   a   element with an  href  attribute whose URI points to the current document and contains a fragment identifier that points to a   menu   element that is not the   menu   element for which the menu is currently being built, nor any of the   menu   elements for which any of the higher-level menus were created, then continue the steps as if the   a   was actually that   menu   element.  If that   menu   element does not have a  label  then for the purposes of the current menu's creation, the   a   element's   textContent   is used as the label instead.   If the node is a   menu   element, then, if it  has a label  , add that menu to the menu as a submenu. Otherwise, if it is an unlabelled   menu   element, ignore the node. (Note that a temporary label that applies just for this step  may have been assigned by the previous step  .)  If the node is an  optgroup  element and it has a  label  attribute, then add that menu to the menu as a submenu.  If the node is a   commandset   element or a  select  element, then add a separator to the menu, process all the children nodes of the element as if they were children of the   menu   element, then add another separator.  If the node is an   hr   element, then add a separator to the menu.  If the node is an  option  element that does not define a command, that is disabled, and whose label (either from its  label  attribute, or, if it doesn't have one, from its   textContent   DOM attribute) consists of nothing but one or more hyphens (U+002D HYPHEN-MINUS), then add a separator to the menu.  Otherwise, ignore the node. (Fallback content.)   Once all the nodes have been processed in this way, any separators at the top of the menu and at the bottom of the menu shall be removed, and any consecutive separators shall be collapsed to just a single separator.  Commands of Type "radio" or "checkbox" should be represented appropriately. Commands whose Hidden State is true (hidden) must not be shown in the menu at all. Similarly, the Label, Icon, Hint, Disabled State and Checked State facets of the command should be appropriately reflected in the user interface created for the menu. The default state and access key for each menu item, if any, should similarly be reflected in the UI.  Menus are live: changes to the underlying document structure must be reflected in the menu visible to the user immediately.  Immediately prior to a menu or submenu being opened or made visible, a  click  event that cannot be canceled must be fired on the menu's   menu   (or  optgroup  ) element. This event allows menus and submenus to be populated dynamically if needed.  When commands are selected from the menu, their associated Action should be triggered.   9.3.1.5.  Displaying menus   When a   menu   element is activated, the associated menu should be constructed and shown. (For details on how a   menu   element can be activated, see the sections on   menu links   and   menu bars   .)  The styles applied to each element in the   menu   element, as well as the element itself, may be applied when constructing a menu. UAs are recommended to not apply styling to context menus and menus for application menu bars, and to only use styles for in-page menus.  If user agents support styling of menus, they should only support the '  background  ', '  color  ', '  border  ', '  padding  ' and '  font  ' properties on menus and menu items. (This list might be incomplete; in general, properties that merely affect the appearance of the element should work, but properties that affect the layout should not.)  As the user interacts with a menu, the elements from which the menu was created should have appropriate pseudo-classes (:hover, :focus, :active) applied.  The menu items must only consider the computed styles of the elements from which they were derived, not other elements.   For example, take this menu:   &lt;menu&gt; &lt;li&gt;&lt;command label="a"/&gt;&lt;/li&gt; &lt;menu&gt;   The menu has one menu item, labelled "a".   Styles applied to the   li   element in this menu would have no effect on the rendered menu, except in so far as styles inherit from that element to the   command   element.   Styles applied to the   command   element could affect the menu. While the user is hovering over the menu item, the  :hover  pseudo-class matches the   command   element and any appropriate newly matching rules could be applied.    When activated from a   menu link   , a menu must be placed in an Appropriate Place. Specifically, if the   a   element is displayed as a vertically-stacked box (as is typically seen for elements with '  display: block  ', '  list-item  ', or '  table  '), then the menu should appear vertically below the element, anchored so that one of its top corners coincides with a bottom corner of the box so that the menu and the box each have a horizontal sides in common (or a bottom corner of the menu coincides with a top corner of the box, if there isn't enough room for the menu to drop down); otherwise, if the element is displayed as a horizontally stacked box ('  display: inline  ', '  table-cell  ', etc), the menu should appear to the  side  of the box in an analogous way. If the element is on the right of the page, the menu should drop to the left, and vice versa.  UAs should implement the drop-down behaviour in more platform-appropriate ways if the platform conventions differ from the behaviour described above.   9.3.2.   Menu bars  : the   menubar   element   Menu bars are defined using the   menubar   element. The semantic of the   menubar   element is a structured list of menus. The element can be used either as a list or as a menu container. User agents must support all the common attributes and event handlers on   menubar   elements.  When used as a list, a   menubar   element must only contain   li   elements. When used in this way, each   li   element represents at most one item in the menu bar. What kind of item is represented depends on the children of the   li   .  When used as a menu container, a   menubar   element must only contain elements that define   commands   ,   menulabel   and   menu   elements,   hr   elements,   commandset   elements, plus any other inline content needed for fallback. Each child element represents at most one item in the menu, depending on which kind of element it is.   9.3.2.1.  Displaying menu bars inline   Do we even want to allow this? We could instead define menu bars as being always rendered "natively", with styling done as for menus.  When a   menubar   is displayed inline in the content of the document in a style-sheet-capable UA, it should be rendered according to the rules of the appropriate style sheet language.  Any   a   elements with  href  attributes that are children of   menubar   elements or children of   li   elements that are themselves children of   menubar   elements should be rendered in a way that indicates that they are not normal links, but can show menus, just like   menulabel   elements. Any   menu   elements that are children of   menubar   elements or children of   li   elements that are themselves children of   menubar   elements should be hidden until they are activated.  In a CSS-aware UA this could be achieved with rules such as:  @namespace xh url(http://www.w3.org/1999/xhtml); xh|menubar > xh|menu, xh|menubar > xh|li > xh|menu { display: none; } xh|menubar > xh|a[href], xh|menubar > xh|li > xh|a[href], xh|menulabel { /* styling */ }    9.3.2.2.  Displaying menu bars as menu bars   If the UA does not render a   menubar   element using a style sheet language's rendering model, then it should use the rendering model described in this section.  This model should also be used when a   menubar   element is to be shown as an actual menu bar in native UI.  First, menu bars shall be built up from the children of their   menubar   element by processing each child node of that element as follows:   If the node is not an element node, it is ignored. (Fallback content.)  If the node is an element node but is not in the XHTML namespace, it is ignored. (Fallback content.)  If the node is an   li   element, then if the first element node in that element is one of the following:   An element that defines or refers to a   command   .  An   a   element with an  href  attribute whose URI points to the current document and contains a fragment identifier that points to a   menu   element.  A   menulabel   element whose next sibling element is a   menu   element.  A   commandset   element.  An   hr   element.  ...then then continue the steps as if the   li   was that element. Otherwise, this   li   element is ignored. Non-element child nodes of the   li   element must be ignored. (Fallback content.)  If the node is a   command   of type Command, and the command's Hidden State is not hidden, then add that command to the menu.  If the node is an   a   element with an  href  attribute whose URI points to the current document and contains a fragment identifier that points to a   menu   element, then add that menu to the menu bar as a submenu, using the contents of the   textContent   DOM attribute of the   a   element as the menu label.  If the node is a   menulabel   element whose next sibling element is a   menu   element, then add that menu to the menu bar as a submenu, using the contents of the   menulabel   element's  label  attribute (if there is one) or of its   textContent   DOM attribute (if there isn't) as the menu label.  If the node is a   commandset   element, then add a separator to the menu, process all the children nodes of the element as if they were children of the   menu   element, then add another separator.  If the node is an   hr   element, then add a separator to the menu.  Otherwise, ignore the node. (Fallback content.)   This processing model, while similar to the processing model for constructing menus, is intentionally different in many respects.  Once all the nodes have been processed in this way, any separators at the top of the menu and at the bottom of the menu shall be removed, and any consecutive separators shall be collapsed to just a single separator. If the menu is to be rendered in a way that does not support separators, then all separators should be dropped.  The Label, Icon, Hint, and Disabled State facets of the command should be appropriately reflected in the user interface created for the menu bar. (Checkbox and Radio commands cannot be added to a menu bar, so the Checked facet is ignored.)  Menu bars are live: changes to the underlying document structure must be reflected in the menu visible to the user immediately.  When commands are selected from the menu bar, their associated Action should be triggered.   9.3.3.   Menu links    The default action of the  DOMActivate  event of   a   elements that do not   define   or   refer   to commands is as follows:   If the   a   element has an  href  attribute, and that attribute points to the   a   element's document, and contains a fragment identifier that points to a   menu   element, then activate the menu element.  Otherwise, if the   a   element has an  href  attribute, then follow that link, taking into account any other relevant attributes on the element as appropriate.   Thus, any   a   element can be made to activate a menu by making it point to a   menu   element in the same document.  By default, such   a   elements look like links, not like buttons or menus, unless they are placed inside   menubar   elements.   9.3.4.  Context menus   This section will probably describe a  context-menu  attribute (or similar) which would be a common attribute and would refer to a   menu   element, allowing any element to get a context menu. This section would have to define how the context menu commands determine which element the menu was triggered on. It would also have to ensure that UAs can show their own context menu alongside the author-provided menu (or at least, give access to it).   9.4.   Keyboard shortcuts    Support for the  accesskey  attribute is optional. User agents may use the attribute as a suggestion for a suitable shortcut key, or may ignore the attribute altogether. User agents should avoid letting author-specified access keys prevent users from accessing the UA's features.  Or should we just deprecate it? People do use this attribute usefully in certain cases.  Interactive user agents that support keyboard input devices should allow users to conveniently access or activate hyperlinks, form controls, and other interactive parts of Web content using the keyboard, without having to cycle through all such content.  The  accesskey  attribute has numerous problems, such as not being discoverable by users, not being consistent with the interface on certain platforms, clashing with the user agent's own access keys or requiring unusual modifiers, being unable to handle the differing needs of platforms with varying keyboard types, etc. Authors are discouraged from relying on this feature.  It is unclear what new features will be supported in Web Apps with respect to key handling, if any. Some sort of declarative way of listing key listeners that would take effect while a particular element has focus is possible, maybe with the key being given in a style sheet instead of the markup, allowing for a model where the user has final say, and allowing for per-device style sheets to be used to change the key based on the available input device(s). </del> <h2 id="things"> <span class="secno"> 10. </span> Things that you can't do with this specification because they are better handled using other technologies that are further described herein </h2> <p> <em> This section is non-normative. </em> <p> There are certain features that are not handled by this specification because a client side markup language is not the right level for them, or because the features exist in other languages that can be integrated into this one. This section covers some of the more common requests. <h3 id="localisation"> <span class="secno"> 10.1. </span> Localisation </h3> <p> If you wish to create localised versions of an HTML application, the best solution is to preprocess the files on the server, and then use HTTP content negotation to serve the appropriate language. </p> <h3 id="declarative"> <span class="secno"> 10.2. </span> Declarative 2D vector graphics and animation </h3> <p> Embedding vector graphics into XHTML documents is the domain of SVG. </p> <h3 id="declarative0"> <span class="secno"> 10.3. </span> Declarative 3D scenes </h3> <p> Embedding 3D imagery into XHTML documents is the domain of X3D, or technologies based on X3D that are namespace-aware. </p> <h2 class="no-num" id="references"> References <span title="TBW"> <a
   href="#tbw"> <ins>[TBW] </ins> </a> </span> </h2> <p class="big-issue"> This section will be written in a future draft. <h2 class="no-num" id="acknowledgements"> Acknowledgements </h2> <p> Thanks to <ins>Aankhen, </ins> Aaron Leventhal, Anne van Kesteren, Asbj&oslash;rn Ulsberg, Ben Godfrey, Ben Meadowcroft, Bjoern Hoehrmann, Boris Zbarsky, Brad Fults, Brad Neuberg, Brendan Eich, Chriswa, Darin Fisher, David <ins>Baron, David </ins> Hyatt, Derek Featherstone, Dimitri Glazkov, dolphinling, Doron Rosenberg, Eira Monstad, <ins>Erik Arvidsson, </ins> fantasai, Franck 'Shift' Qu&eacute;lain, Henri Sivonen, Henrik Lied, H&aring;kon Wium Lie, James Graham, James Perrett, Jan-Klaas Kollhof, <ins>Jasper Bryant-Greene, </ins> Jens Bannmann, Joel Spolsky, <ins>Jon Perlow, </ins> Jukka K. Korpela, Kai Hendry, Kornel Lesinski, Lachlan Hunt, <ins>Larry Page, </ins> Laurens Holst, <ins>L&eacute;onard Bouchet, </ins> Maciej Stachowiak, Malcolm Rowe, Mark Nottingham, Mark Schenk, Martijn Wargers, Martin Honnen, Matthew Mastracci, Matthew Raymond, Matthew Thomas, Mattias Waldau, Max Romantschuk, Michael A. Nachbaur, Michael Gratton, Michael 'Ratt' Iannarelli, Mike Shaver, Mikko Rantalainen, <ins>Neil Deakin, </ins> Olav Junker Kj&aelig;r, Rimantas Liubertas, <ins>Robert O'Callahan, "ROBO Design", Roman Ivanov, S. Mike Dierken, </ins> Shaun Inman, Simon Pieters, Steven Garrity, Stuart Parmenter, Tantek &Ccedil;elik, Thomas O'Connor, Tim Altman, Vladimir Vuki&#x0107;evi&#x0107;, and everyone on the WHATWG mailing list for their useful and substantial comments. <p> Special thanks to Richard Williamson for creating the first implementation of <code> <a href="#canvas"> canvas </a> </code> in Safari, from which the canvas feature was designed. <p> Special thanks also to the Microsoft employees who first implemented the <code> <a href="#xmlhttprequest"> XMLHttpRequest </a> </code> interface, the event-based drag-and-drop mechanism, and other features first widely deployed by the Windows Internet Explorer browser. <p> Thanks also the Microsoft blogging community for some ideas, to the attendees of the W3C Workshop on Web Applications and Compound Documents for inspiration, and to the #mrt crew, the #mrt.no crew, and the cabal for their ideas and support. </p> 
