<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">

<html lang="en-GB-hixie">
 <head>
  <title>Web Forms 2.0</title>

  <link href="/style/specification" rel="stylesheet" type="text/css">

  <link href="/images/icon" rel="icon">

  <style type="text/css">
   .applies thead code { display: block; }
   .applies td { text-align: center; }
   .applies .yes { background: yellow; }
   .applies .deprecated { background: #EEEEEE; }
   .applies .deprecated .yes { background: #DDDD99; }
   img { max-width: 100%; }
  </style>

 <body">
  <style scoped>
   * { color: gray ! important; background: none ! important; border-color: silver ! important; }
   img, object, iframe { filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale"); -webkit-filter: grayscale(100%); }
   .obsolete { border: double thick red ! important; background: yellow ! important; margin: 4em auto 0 auto; max-width: 50em; width: 70%; text-align: center; position: fixed;  z-index: 10000; top: 0; left: 0; right: 0; }
   .obsolete a { color: blue ! important; }
   .obsolete p { font: 900 2em sans-serif; color: red ! important; margin: 1em 1.5em ! important; }
  </style>
  <div class=obsolete>
   <p>This is a snapshot of an early working draft which has now
   been superseded by the <a href="http://whatwg.org/html#forms">HTML
   standard's Forms chapter</a>.</p>
   <p>This document will not be further updated.</p>
  </div>
  
  <div class="head">
   <p><a class="logo" href="http://www.whatwg.org/" rel="home"><img
    alt="WHATWG" src="/images/logo"></a></p>

   <h1 id="web-forms">Web Forms 2.0</h1>

   <h2 class="no-num no-toc" id="working">Working Draft &mdash; 1 September
    2005</h2>

   <dl>
    <dt>This version:

    <dd><a
     href="http://www.whatwg.org/specs/web-forms/2005-09-01/">http://www.whatwg.org/specs/web-forms/2005-09-01/</a>

    <dt>Latest version:

    <dd><a
     href="http://www.whatwg.org/specs/web-forms/current-work/">http://www.whatwg.org/specs/web-forms/current-work/</a>

    <dt>Previous versions:

    <dd><a
     href="http://www.whatwg.org/specs/web-forms/2005-07-03/">http://www.whatwg.org/specs/web-forms/2005-07-03/</a>
     (<a href="diff-2005-07-03">diffs</a>)

    <dd><a
     href="http://www.whatwg.org/specs/web-forms/2005-04-11-call-for-comments/">http://www.whatwg.org/specs/web-forms/2005-04-11-call-for-comments/</a>
     (<a href="diff-2005-04-11-call-for-comments">diffs</a>)

    <dd><a
     href="http://www.w3.org/Submission/2005/SUBM-web-forms2-20050411/">http://www.w3.org/Submission/2005/SUBM-web-forms2-20050411/</a>

    <dd><a
     href="http://www.whatwg.org/specs/web-forms/2005-01-28-call-for-comments/">http://www.whatwg.org/specs/web-forms/2005-01-28-call-for-comments/</a>

    <dd><a
     href="http://www.whatwg.org/specs/web-forms/2004-12-10-call-for-comments/">http://www.whatwg.org/specs/web-forms/2004-12-10-call-for-comments/</a>

    <dd><a
     href="http://www.whatwg.org/specs/web-forms/2004-06-27-call-for-comments/">http://www.whatwg.org/specs/web-forms/2004-06-27-call-for-comments/</a>

    <dd><a
     href="http://www.hixie.ch/specs/html/forms/web-forms-3">http://www.hixie.ch/specs/html/forms/web-forms-3</a>

    <dd><a
     href="http://www.hixie.ch/specs/html/forms/web-forms-2">http://www.hixie.ch/specs/html/forms/web-forms-2</a>

    <dd><a
     href="http://www.hixie.ch/specs/html/forms/xforms-basic-1">http://www.hixie.ch/specs/html/forms/xforms-basic-1</a>

    <dd><a
     href="http://lists.w3.org/Archives/Member/w3c-archive/2003Sep/att-0014/hfp.html">http://lists.w3.org/Archives/Member/w3c-archive/2003Sep/att-0014/hfp.html</a>
     (W3C member-only link)

    <dt>Editor:

    <dd>Ian Hickson, Opera Software, ian@hixie.ch
   </dl>

   <p class="copyright">&copy; Copyright 2004, 2005 Apple Computer, Inc.,
    Mozilla Foundation, and Opera Software ASA.</p>

   <p class="copyright">You are granted a license to use, reproduce and
    create derivative works of this document.</p>
  </div>

  <hr>

  <h2 class="no-num no-toc" id="abstract">Abstract</h2>

  <p>This specification defines Web Forms 2.0, an extension to the forms
   features found in HTML 4.01's Forms chapter and the corresponding DOM 2
   HTML interfaces. Web Forms 2.0 applies to both HTML and XHTML user agents.
   It provides new strongly-typed input fields, new attributes for defining
   constraints, a repeating model for declarative repeating of form sections,
   new DOM interfaces, new DOM events for validation and dependency tracking,
   and XML submission and initialization of forms. It also standardises and
   codifies existing practice in areas that have not been previously
   documented, and clarifies some of the interactions of HTML form controls
   and CSS.

  <p>HTML4, XHTML1.1, and the DOM are thus extended in a manner that has a
   clear migration path from existing HTML forms, leveraging the knowledge
   authors have built up with their experience with HTML so far.

  <h2 class="no-num no-toc" id="status">Status of this document</h2>

  <p>This document is the result of a loose collaboration between interested
   parties in the context of the <a href="http://www.whatwg.org/">Web
   Hypertext Application Technology Working Group</a>.

  <p>This is an archive copy of a working draft of Web Forms 2.0. If you wish
   to make comments regarding this document, please send them to <a
   href="mailto:whatwg@whatwg.org">whatwg@whatwg.org</a>. All feedback is
   welcome.

  <p><strong>This document is in the very final stages and will very shortly
   become a call for implementations.</strong>

  <p>To find the latest version of this specification, please follow the
   "Latest version" link above.

  <h2 class="no-num no-toc" id="contents">Table of contents</h2>
  <!--begin-toc-->

  <ul class="toc">
   <li><a href="#introduction"><span class="secno">1. </span>Introduction</a>
    
    <ul class="toc">
     <li><a href="#scope"><span class="secno">1.1. </span>Scope</a>

     <li><a href="#r-to-html"><span class="secno">1.2. </span>Relationship to
      HTML</a>

     <li><a href="#r-to-xhtml"><span class="secno">1.3. </span>Relationship
      to XHTML</a>

     <li><a href="#r-to-dom"><span class="secno">1.4. </span>Relationship to
      the W3C DOM</a>

     <li><a href="#r-to-xforms"><span class="secno">1.5. </span>Relationship
      to XForms</a>

     <li><a href="#r-to-xforms-basic"><span class="secno">1.6.
      </span>Relationship to XForms Basic</a>

     <li><a href="#r-to-css"><span class="secno">1.7. </span>Relationship to
      CSS</a>

     <li><a href="#missing"><span class="secno">1.8. </span>Missing
      features</a>

     <li><a href="#conformance"><span class="secno">1.9. </span>Conformance
      requirements</a>

     <li><a href="#terminology"><span class="secno">1.10.
      </span>Terminology</a>

     <li><a href="#extensibility"><span class="secno">1.11.
      </span>Extensibility</a>

     <li><a href="#security"><span class="secno">1.12. </span>Security</a>
    </ul>

   <li><a href="#extend-form-controls"><span class="secno">2.
    </span>Extensions to form control elements</a>
    <ul class="toc">
     <li><a href="#introduction0"><span class="secno">2.1.
      </span>Introduction for authors</a>

     <li><a href="#existing"><span class="secno">2.2. </span>Existing
      controls</a>

     <li><a href="#changes"><span class="secno">2.3. </span>Changes to
      existing controls</a>

     <li><a href="#extensions"><span class="secno">2.4. </span>Extensions to
      the <code>input</code> element</a>
      <ul class="toc">
       <li><a href="#ranges"><span class="secno">2.4.1. </span>Ranges</a>

       <li><a href="#precision"><span class="secno">2.4.2.
        </span>Precision</a>
      </ul>

     <li><a href="#extensions0"><span class="secno">2.5. </span>Extensions to
      existing attributes</a>

     <li><a href="#the-pattern"><span class="secno">2.6. </span>The
      <code>pattern</code> attribute</a>

     <li><a href="#the-required"><span class="secno">2.7. </span>The
      <code>required</code> attribute</a>

     <li><a href="#formAttribute"><span class="secno">2.8. </span>The <dfn
      id="form" title="form-attribute"><code>form</code></dfn> attribute</a>

     <li><a href="#the-autocomplete"><span class="secno">2.9. </span>The
      <code>autocomplete</code> attribute</a>

     <li><a href="#the-autofocus"><span class="secno">2.10. </span>The <dfn
      id="autofocus"><code>autofocus</code></dfn> attribute</a>

     <li><a href="#the-inputmode"><span class="secno">2.11. </span>The
      <code>inputmode</code> attribute</a>

     <li><a href="#the-datalist"><span class="secno">2.12. </span>The
      <code>datalist</code> element and the <code>list</code> attribute</a>

     <li><a href="#the-output"><span class="secno">2.13. </span>The <dfn
      id="output"><code>output</code></dfn> element</a>

     <li><a href="#extensions1"><span class="secno">2.14. </span>Extensions
      to the <code>textarea</code> element</a>

     <li><a href="#upload"><span class="secno">2.15. </span>Extensions to
      file upload controls</a>

     <li><a href="#extensions2"><span class="secno">2.16. </span>Extensions
      to the <code>form</code> element</a>

     <li><a href="#extensions3"><span class="secno">2.17. </span>Extensions
      to the submit buttons</a>

     <li><a href="#handling"><span class="secno">2.18. </span>Handling
      unexpected elements and values</a>
    </ul>

   <li><a href="#repeatingFormControls"><span class="secno">3. </span>The
    repetition model for repeating form controls</a>
    <ul class="toc">
     <li><a href="#introduction1"><span class="secno">3.1.
      </span>Introduction for authors</a>
      <ul class="toc">
       <li><a href="#more-features"><span class="secno">3.1.1. </span>More
        features</a>

       <li><a href="#suggestions"><span class="secno">3.1.2.
        </span>Suggestions for authors</a>

       <li><a href="#what-the"><span class="secno">3.1.3. </span>What the
        repetition model can't do</a>
      </ul>

     <li><a href="#definitions"><span class="secno">3.2.
      </span>Definitions</a>
      <ul class="toc">
       <li><a href="#repetition"><span class="secno">3.2.1. </span>Repetition
        templates</a>

       <li><a href="#repetition0"><span class="secno">3.2.2.
        </span>Repetition blocks</a>
      </ul>

     <li><a href="#new-form"><span class="secno">3.3. </span>New form
      controls</a>

     <li><a href="#the-repeat-min"><span class="secno">3.4. </span>The
      <code>repeat-min</code> and <code>repeat-max</code> attributes</a>

     <li><a href="#event"><span class="secno">3.5. </span>Event interface for
      repetition events</a>

     <li><a href="#repetitionModel"><span class="secno">3.6. </span>The
      repetition model</a>
      <ul class="toc">
       <li><a href="#addition"><span class="secno">3.6.1. </span>Addition</a>
        

       <li><a href="#removal"><span class="secno">3.6.2. </span>Removal</a>

       <li><a href="#movement"><span class="secno">3.6.3. </span>Movement of
        repetition blocks</a>

       <li><a href="#initial"><span class="secno">3.6.4. </span>Initial
        repetition blocks</a>

       <li><a href="#notes"><span class="secno">3.6.5. </span>Notes for
        assistive technologies</a>
      </ul>

     <li><a href="#repeatExamples"><span class="secno">3.7.
      </span>Examples</a>
      <ul class="toc">
       <li><a href="#repeatExample"><span class="secno">3.7.1.
        </span>Repeated rows</a>

       <li><a href="#nested"><span class="secno">3.7.2. </span>Nested
        repeats</a>
      </ul>
    </ul>

   <li><a href="#forms-events-model"><span class="secno">4. </span>The forms
    event model</a>
    <ul class="toc">
     <li><a href="#the-click"><span class="secno">4.1. </span>The
      <code>click</code> event and <code>input</code> controls</a>

     <li><a href="#the-change"><span class="secno">4.2. </span>The
      <code>change</code> and <code>input</code> events</a>

     <li><a href="#events"><span class="secno">4.3. </span>Events to enable
      simpler dependency tracking</a>

     <li><a href="#form-validation"><span class="secno">4.4. </span>Form
      validation</a>

     <li><a href="#receiving"><span class="secno">4.5. </span>Receiving the
      results of form submission</a>

     <li><a href="#the-domcontrolvaluechanged"><span class="secno">4.6.
      </span>The <code>DOMControlValueChanged</code> event</a>
    </ul>

   <li><a href="#form-submission"><span class="secno">5. </span>Form
    submission</a>
    <ul class="toc">
     <li><a href="#successful"><span class="secno">5.1. </span>Successful
      form controls</a>

     <li><a href="#unacceptableCharacters"><span class="secno">5.2.
      </span>Handling characters outside the submission character
      encoding</a>
      <ul class="toc">
       <li><a href="#the-charset"><span class="secno">5.2.1. </span>The <dfn
        id="charset"><code>_charset_</code></dfn> field</a>
      </ul>

     <li><a href="#x-www-form-urlencoded"><span class="secno">5.3.
      </span><code>application/x-www-form-urlencoded</code></a>

     <li><a href="#x-www-form-xml"><span class="secno">5.4.
      </span><code>application/x-www-form+xml</code>: XML submission</a>

     <li><a href="#text-plain"><span class="secno">5.5.
      </span><code>text/plain</code></a>

     <li><a href="#methodAndEnctypes"><span class="secno">5.6.
      </span><!--Semantics of <code>method</code> and
  <code>enctype</code> attributes: -->Submitting
      the encoded form data set</a>
      <ul class="toc">
       <li><a href="#for-http"><span class="secno">5.6.1. </span>For
        <code>http:</code> actions</a>

       <li><a href="#for-ftp"><span class="secno">5.6.2. </span>For
        <code>ftp:</code> actions</a>

       <li><a href="#for-data"><span class="secno">5.6.3. </span>For
        <code>data:</code> actions</a>

       <li><a href="#for-file"><span class="secno">5.6.4. </span>For
        <code>file:</code> actions</a>

       <li><a href="#for-mailto"><span class="secno">5.6.5. </span>For
        <code>mailto:</code> actions</a>

       <li><a href="#for-smsto"><span class="secno">5.6.6. </span>For
        <code>smsto:</code> and <code>sms:</code> actions</a>

       <li><a href="#for-javascript"><span class="secno">5.6.7. </span>For
        <code>javascript:</code> actions</a>
      </ul>
    </ul>

   <li><a href="#fetching-data"><span class="secno">6. </span>Fetching data
    from external resources</a>
    <ul class="toc">
     <li><a href="#selectSeeding"><span class="secno">6.1. </span>Filling
      <code>select</code> elements</a>

     <li><a href="#seeding"><span class="secno">6.2. </span>Seeding a form
      with initial values</a>
    </ul>

   <li><a href="#dom"><span class="secno">7. </span>Extensions to the HTML
    Level 2 DOM interfaces</a>
    <ul class="toc">
     <li><a href="#additions"><span class="secno">7.1. </span>Additions
      specific to the <code>HTMLFormElement</code> interface</a>

     <li><a href="#additions0"><span class="secno">7.2. </span>Additions
      specific to the <code>HTMLSelectElement</code> interface</a>

     <li><a href="#the-htmldatalistelement"><span class="secno">7.3.
      </span>The <code>HTMLDataListElement</code> interface</a>

     <li><a href="#changes0"><span class="secno">7.4. </span>Changes to the
      <code>HTMLOptionElement</code> interface</a>

     <li><a href="#additions1"><span class="secno">7.5. </span>Additions
      specific to the <code>HTMLFieldsetElement</code> interface</a>

     <li><a href="#the-htmloutputelement"><span class="secno">7.6. </span>The
      <code>HTMLOutputElement</code> interface</a>

     <li><a href="#validation"><span class="secno">7.7. </span>Validation
      APIs</a>

     <li><a href="#new-dom"><span class="secno">7.8. </span>New DOM
      attributes for new content attributes</a>

     <li><a href="#additions2"><span class="secno">7.9. </span>Additions
      specific to the <code>HTMLInputElement</code> interface</a>

     <li><a href="#the-defaultvalue"><span class="secno">7.10. </span>The
      <code>defaultValue</code> DOM attribute</a>

     <li><a href="#labels"><span class="secno">7.11. </span>Labels</a>

     <li><a href="#firing"><span class="secno">7.12. </span>Firing change
      events</a>

     <li><a href="#repetition1"><span class="secno">7.13. </span>Repetition
      interfaces</a>
    </ul>

   <li><a href="#presentation"><span class="secno">8. </span>Presentation and
    rendering</a>
    <ul class="toc">
     <li><a href="#styling-form-controls"><span class="secno">8.1.
      </span>Styling form controls</a>

     <li><a href="#relation"><span class="secno">8.2. </span>Relation to CSS
      selectors</a>

     <li><a href="#interaction"><span class="secno">8.3. </span>Interaction
      of the form processing model with CSS</a>

     <li><a href="#interaction0"><span class="secno">8.4. </span>Interaction
      of the form processing model with SMIL</a>
    </ul>

   <li class="no-num"><a href="#xhtml-module-def">A. XHTML module
    definition</a>

   <li class="no-num"><a href="#summary">B. Attribute summary</a>

   <li class="no-num"><a href="#c.-deprecated">C. Deprecated features</a>

   <li class="no-num"><a href="#d.-requirements">D. Requirements for
    declaring interoperability</a>

   <li class="no-num"><a href="#references">References</a>

   <li class="no-num"><a href="#acknowledgements">Acknowledgements</a>
  </ul>
  <!--end-toc-->

  <hr>

  <h2 id="introduction"><span class="secno">1. </span>Introduction</h2>

  <p>This is an update to the forms features found in HTML 4.01's <a
   href="http://www.w3.org/TR/html4/interact/forms.html">Forms chapter</a>,
   which are informally referred to as Web Forms 1.0.

  <p>Authors have long requested enhancements to HTML4 to support some of
   their more common needs. Such requests in mailing lists and other forums
   were examined, and from these sources a set of requirements and design
   goals were derived:

  <ul>
   <li>Backwards compatibility (where possible).

   <li>Ease of authoring for authors who are familiar with commonly used
    languages such as HTML and ECMAScript but have limited knowledge about
    XML, data models, etc.

   <li>Basic data typing, providing new controls for commonly used types so
    that authors do not need to repeatedly design complicated widgets such as
    calendars.

   <li>Simpler validation on the client side (while recognizing that server
    side validation will still be required), with declarative solutions for
    the common cases, but strong DOM support so that less common cases can
    easily be handled using scripting.

   <li>Dynamic addition of fields (repeating structures) on the client side
    without scripting.

   <li>XML submission (although not necessarily arbitrarily structured XML
    submission).

   <li>The ability to initialize forms from external data sources, so that
    authors do not have to dynamically rewrite the form content itself to
    prefill forms, but can instead use static pages with scripts that
    dynamically generate only the data part.

   <li>This specification should be implementable in full on devices with
    limited resources.
  </ul>

  <p>Not all the desired features have been included in this specification.
   Future versions may be introduced to address further needs.

  <p>This specification does not describe the complete behaviour of an HTML
   or XHTML user agent. Readers are expected to refer to the existing
   specifications for the definitions of features that this specification
   does not change.

  <h3 id="scope"><span class="secno">1.1. </span>Scope</h3>

  <p>This specification is limited specifically to incremental improvements
   to existing wide-spread technologies, namely HTML4 and the DOM, as
   implemented by browsers prevalent in 2004. It is also intended to be a
   small step, implementable without overwhelming effort.

  <p>Large sweeping changes or new markup languages are therefore out of
   scope for this specification.

  <h3 id="r-to-html"><span class="secno">1.2. </span>Relationship to HTML</h3>

  <p>This specification clarifies and extends the semantics put forth in <a
   href="#refsHTML4">[HTML4]</a> for form controls and form submission. It is
   expected to be implemented in ordinary HTML user agents alongside existing
   forms technology, and indeed, some of the features described in this draft
   have been implemented by user agents as ad-hoc, non-standard extensions
   for many years due to strong market need.

  <h3 id="r-to-xhtml"><span class="secno">1.3. </span>Relationship to XHTML</h3>

  <p>This specification can also be viewed as an extension to <a
   href="#refsXHTML1">[XHTML1]</a>. In particular, some of the features added
   in this module only apply to XHTML documents; for example, features
   allowing mixed namespaces.

  <h3 id="r-to-dom"><span class="secno">1.4. </span>Relationship to the W3C
   DOM</h3>

  <p>This specification clarifies and extends the semantics put forth in <a
   href="#refsDOM2HTML">[DOM2HTML]</a> for the form control interfaces. These
   extensions are expected to be implemented in HTML and XHTML user agents
   that support the DOM.

  <h3 id="r-to-xforms"><span class="secno">1.5. </span>Relationship to XForms</h3>

  <p class="note">This section is aimed at XForms authors and implementors.
   If you do not plan to use XForms, you may prefer to skip ahead to the next
   section. Knowledge of XForms is not required to use Web Forms.

  <p>This specification is in no way aimed at replacing XForms 1.0 <a
   href="#refsXForms">[XForms]</a>, nor is it a subset of XForms 1.0.

  <p>XForms 1.0 is well suited for describing business logic and data
   constraints. Web Forms 2.0 aims to simplify the task of transforming
   XForms 1.0 systems into documents that can be rendered on HTML Web
   browsers that do not support XForms.

  <p>In this transformation model, the XForms processor is a server-side
   process that converts XForms and XML Schema documents, according to the
   XForms specification, into HTML and Web Forms documents, which are then
   processed by the client side Web Forms processor, along with a style sheet
   for presentation.

  <p><img alt="" src="xforms-implementation-diagram"></p>
  <!-- no need for alt text, since the previous paragraph basically
  repeats it. The diagram is just there so that visual users can get
  a visual map. -->

  <p>The structured XML instance data stored on the server side (e.g. in a
   database) is converted by the XForms processor into name/value pairs that
   are then used by the UA to prefill the form. Submission follows the
   opposite path, with the UA generating name/value pairs and sending them to
   the XForms processor on the server, which converts them back into
   structured XML for storage or further processing.

  <p>In order to simplify this transformation process, this specification
   attempts to add some of the functionality of XForms with a minimum impact
   on the existing, widely implemented forms model. Where appropriate,
   backwards compatibility, ease of authoring, and ease of implementation
   have been given priority over theoretical purity.

  <p>The following features of XForms have <em>not</em> been addressed:

  <ul>
   <li>The separation of the instance data model, data typing, field
    interdependencies, and submission information from the content model and
    interface elements.

   <li>The ability to create arbitrary XML fragments to be filled in before
    submission.

   <li>The ability to edit local XML files directly. (While technically not
    defined by the XForms 1.0 specification, UAs have generally implemented
    such a feature since it is easy to extend the XForms model in that way.)

   <li>Compound data type definitions (schemas).
  </ul>

  <p>Many of the less-used features that XForms supports using declarative
   syntax are, in this specification, handled by using scripting. Some new
   interfaces are introduced to simplify some of the more tedious tasks.

  <h3 id="r-to-xforms-basic"><span class="secno">1.6. </span>Relationship to
   XForms Basic</h3>

  <p>This specification is unrelated to the XForms Basic profile.

  <p class="note">A previous version of this draft was called "XForms Basic".
   This name has been changed so as to avoid confusion with the similarly
   named draft from the W3C.

  <h3 id="r-to-css"><span class="secno">1.7. </span>Relationship to CSS</h3>

  <p>This specification does not extend CSS, but it does clarify some of the
   interactions between HTML's form features and CSS.

  <h3 id="missing"><span class="secno">1.8. </span>Missing features</h3>

  <p>This draft does not address all needs. In addition to the features of
   XForms that have not been addressed (see above), the following features
   were considered but rejected for this version of the specification:

  <ul>
   <li>Digital signatures for submissions. This is currently not covered by
    this specification due to patent concerns. However, it would still be
    considered for future inclusion if suggestions of how to support it
    without infringing on known patents were provided.

   <li>DOM interfaces for the creation of new controls that are still able to
    interact with form submission. This will probably be addressed by the <a
    href="http://whatwg.org/specs/web-controls/current-work/">Web Controls
    1.0 specification</a>.

   <li>Elements or properties to create tabbed interfaces or "wizard"
    interfaces. These needs will probably be addressed by the <a
    href="http://whatwg.org/specs/web-apps/current-work/">Web Applications
    1.0 specification</a>.

   <li>A rich text editing or HTML editing control. This will probably be
    addressed by the <a
    href="http://whatwg.org/specs/web-apps/current-work/">Web Applications
    1.0 specification</a>.

   <li>A grid or spreadsheet editing control. This will probably be addressed
    by the <a href="http://whatwg.org/specs/web-apps/current-work/">Web
    Applications 1.0 specification</a>.

   <li>A declarative way of specifying that one list should filter the view
    of a second list. This need may be addressed in a future version of this
    specification.
  </ul>

  <h3 id="conformance"><span class="secno">1.9. </span>Conformance
   requirements</h3>

  <p>Conformance to this specification is defined for user agents (UAs,
   implementations) and documents (authors, authoring tools, markup
   generators). Clauses specify whether they apply to user agents or
   documents.

  <p>User agents could include graphical Web browsers, voice-based mobile
   devices, automated agents, content indexing robots, and inference tools.
   In certain user agents, it may be impossible to determine whether a
   particular conformance criteria is followed or not. For instance, whether
   indexing robots mark the first option in a <code>select</code> element as
   selected or not is not detectable. When it is impossible to tell if a UA
   complies with a particular conformance requirement, that UA is exempt from
   conforming to that requirement.

  <p>Authoring tools and markup generators are conformant if they only
   produce conformant documents.

  <p>As well as sections marked as non-normative, all diagrams, examples, and
   notes in this specification are non-normative. Everything else in this
   specification is normative.

  <p>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in the
   normative parts of this document are to be interpreted as described in <a
   href="#refsRFC2119">[RFC2119]</a>. For readability, these words do not
   appear in all uppercase letters in this specification.

  <p>This specification includes by reference the form-related parts of the
   HTML4, XHTML1.1, DOM2 HTML, DOM3 Core, and DOM3 Events specifications (<a
   href="#refsHTML4">[HTML4]</a>, <a href="#refsXHTML1">[XHTML1]</a>, <a
   href="#refsDOM2HTML">[DOM2HTML]</a>, <a
   href="#refsDOM3CORE">[DOM3CORE]</a>, <a
   href="#refsDOM3EVENTS">[DOM3EVENTS]</a>). Compliant UAs must implement all
   the forms-related requirements of those specifications, except those
   modified by this specification, to claim compliance with this one.
   Implementations may optionally implement only one of HTML4 and XHTML1.1.

  <p>Implementations and documents must comply to the W3C Character Model
   specification. <a href="#refsCHARMOD">[CHARMOD]</a>

  <p>Implementations that do not support scripting (or which have their
   scripting features disabled) are exempt from supporting the events and DOM
   interfaces mentioned in this specification. For the parts of this
   specification that are defined in terms of an events model or in terms of
   the DOM, such user agents must still act as if events and the DOM were
   supported.

  <p class="note">Scripting can form an integral part of an application. User
   agents that do not support scripting, or that have scripting disabled,
   might be unable to fully convey the author's intent.

  <p>This specification introduces attributes for setting the maximum size or
   range of certain values. While user agents should support all possible
   values, there may be implementation-specific limits.

  <p>HTML documents that use the new features described in this specification
   and that are served over HTTP must be sent as <code>text/html</code> and
   must use the following DOCTYPE: <code>&lt;!DOCTYPE html&gt;</code>.

  <p>XML documents using elements from the XHTML namespace that use the new
   features described in this specification and that are served over HTTP
   must be sent using an XML MIME type such as <code>application/xml</code>
   or <code>application/xhtml+xml</code> and must not be served as
   <code>text/html</code>. <a href="#refsRFC3023">[RFC3023]</a>

  <p> These XML documents may contain a <code>DOCTYPE</code> if desired, but
   this is not required.

  <p class="note"> Documents that use the new features described in this
   specification cannot be strictly conforming XHTML1.1 or HTML4 documents,
   since they contain features not defined in those specifications.

  <h3 id="terminology"><span class="secno">1.10. </span>Terminology</h3>

  <p>This specification refers to both HTML and XML attributes and DOM
   attributes, often in the same context. When it is not clear which is being
   referred to, they are referred to as <dfn id="content">content
   attributes</dfn> for HTML and XML attributes, and <dfn
   id="dom-attributes">DOM attributes</dfn> for those from the DOM.
   Similarly, the term "properties" is used for both ECMAScript object
   properties and CSS properties. When these are ambiguous they are simply
   qualified as object properties and CSS properties respectively.

  <p>Generally, when the specification states that a feature applies to HTML
   or XHTML, it also includes the other. When a feature specifically only
   applies to one of the two languages, it is called out explicitly, as in:

  <blockquote cite="#nested-form-elements">
   <p>Similarly, <code>form</code> elements in XHTML may now be nested (this
    does not apply to HTML).
  </blockquote>

  <p>Unless otherwise stated, all XML elements defined or mentioned in this
   specification are in the <code>http://www.w3.org/1999/xhtml</code>
   namespace, and all attributes defined or mentioned in this specification
   have no namespace (they are in the per-element partition).

  <p>(There are elements from other namespaces in this specification, in
   particular the XML submission format uses the
   <code>http://n.whatwg.org/formdata</code> namespace.)

  <p>The term <dfn id="form-control">form control</dfn> refers to
   <code>input</code>, <code><a href="#output0">output</a></code>,
   <code>select</code>, <code>textarea</code> and <code>button</code>
   elements. It does not include <code>form</code>, <code>label</code>,
   <code><a href="#datalist">datalist</a></code>, <code>option</code>,
   <code>optgroup</code>, or <code>fieldset</code> elements.

  <p>Form controls are <dfn id="valid">valid</dfn> when they comply with
   their constraints, and <dfn id="invalid">invalid</dfn> when they don't.
   This is distinct from whether form controls have their <code><a
   href="#willvalidate">willValidate</a></code> attribute set to true, which
   relates to whether they will be validated, or whether they are <a
   href="#successful"><em title="">successful</em></a>, which relates to
   whether they will be submitted.

  <p>The terms URI and IRI in normative contexts are used as defined by <a
   href="#refsRFC3986">[RFC3986]</a> and <a
   href="#refsRFC3987">[RFC3987]</a>.

  <p>When a comparison is said to be <dfn
   id="case-insensitive">case-insensitive</dfn>, the comparison must be
   performed using case folding, as described in Unicode. See Unicode 4.0,
   section 5.18 "Case Mappings", subsection "Caseless Matching". <a
   href="#refsUNICODE">[UNICODE]</a>

  <h3 id="extensibility"><span class="secno">1.11. </span>Extensibility</h3>

  <p>Vendor-specific proprietary extensions to this specification are
   strongly discouraged. Documents must not use such extensions, as doing so
   reduces interoperability and fragments the user base, allowing only users
   of specific user agents to access the content in question.

  <p>If markup extensions are needed, they should be done using XML, with
   elements or attributes from custom namespaces. If DOM extensions are
   needed, the members should be prefixed by vendor-specific strings to
   prevent clashes with future versions of this specification. Extensions
   must be defined so that the use of extensions does not contradict nor
   cause the non-conformance of functionality defined in the specification.</p>
  <!-- thanks to QA
  Framework -->

  <div class="example">
   <p>For example, while strongly discouraged to do so, an implementation
    "Foo Browser" could add a new DOM attribute "fooTypeTime" to a control's
    DOM interface that returned the time it took the user to select the
    current value of a control (say). On the other hand, defining a new
    control that appears in a form's <code><a
    href="#elements">elements</a></code> array would be in violation of the
    above requirement, as it would violate the definition of <code><a
    href="#elements">elements</a></code> given in this specification.</p>
  </div>

  <p>User agents must treat elements and attributes that they do not
   understand as semantically neutral; leaving them in the DOM (for DOM
   processors), and styling them according to CSS (for CSS processors), but
   not inferring any meaning from them.

  <h3 id="security"><span class="secno">1.12. </span>Security</h3>

  <p>The delivery of Web Forms 2 documents to the user from a remote host and
   the submission of data from the user to a remote host may be performed
   using a number of different protocols, and therefore no specific
   statements can be made regarding the security of those operations.

  <p>In general, authors are urged to use a secure transport layer such as
   TLS when information of a confidential nature is to be transmitted.

  <p>On the client side, implementors must be aware of a number of potential
   attacks. Since it is relatively easy for a hostile Web site to trick users
   into loading hostile content, for example by sending e-mails claiming to
   include links to photos of naked girls, users must be confident that a
   hostile site cannot access confidential information, perform
   denial-of-service attacks, or hijack the client's host to perform actions
   on behalf of the user that the user may not approve of.

  <p>Confidential information can be stored in several places. Documents from
   other servers loaded into other browsing contexts (e.g. other windows),
   documents from other servers that the hostile page has caused to be loaded
   (of particular concern being pages that include user-specific information
   using out-of-band authentication and/or authorisation information such as
   HTTP cookies, HTTP authentication, or the origin host), files on the local
   system, as well as details of the user's configuration are all potential
   sources of confidential information.

  <p>User agents must therefore implement security mechanisms to block
   cross-domain accesses (where local files are considered a separate
   domain). Such mechanisms are referred to as <dfn
   id="cross-domain">cross-domain scripting security</dfn> mechanisms.
   Unfortunately, since it is difficult to predict exactly what attack
   vectors may exist in such a complex system, and in particular because it
   depends on the exact feature set of the implementaiton, this specification
   does not define the exact mechanism that must be implemented.

  <p>In practice user agents implement quite comprehensive cross-domain
   scripting security mechanisms. Implementation experience has shown that
   such security mechanisms must, at a minimum, prevent scripts originating
   from a site at one domain from accessing the properties and methods of any
   object (in particular, DOM nodes) associated with a page from another
   domain. Typically, such an access would cause an exception to be raised.

  <p>Denial of service attacks are naturally hard to prevent, since they
   frequently are hard to distinguish from legitimate behaviour. Implementors
   are encouraged to set arbitrary (although high) limits on what an author
   can do. For instance, user agents might place a limit on the length of the
   regular expression pattern allowed in the <code><a
   href="#pattern">pattern</a></code> attribute, if a long expression could
   be made to take unacceptably long to execute.

  <p>Implementations are also asked to consider how otherwise-legitimate UI
   could be abused by a hostile page. Naturally, since implementations are
   not restricted in how they implement their interface, no specific
   guidelines can be given. One example, however, would be the
   <code>mailto:</code> submission feature. Since a script can artificially
   submit a form, it is important that the UA not cause each submission to
   create a new mail window, since this would allow authors to overwhelm the
   user with windows containing author-specified text, which could act as
   both a denial-of-service attack, and an annoying advertising technique.

  <p>Finally, user agent implementors should prevent pages and scripts in
   those pages from performing potentially harmful or embarassing actions on
   behalf of the user without the user's knowledge.

  <p>For example, it is recommended that user agents limit the ports to which
   forms may be submitted, excluding, in particular, ports of well-known
   protocols like SMTP or telnet. The SMTP port in particular has been used
   by hostile pages in the past as a target of form submissions for the
   relaying of spam by unsuspecting users.

  <p>Certain actions, including submitting a form to a third-party site and
   making HTTP GET requests to remote sites (both of which would be blind
   attacks, assuming the UA implements a <span><a
   href="#cross-domain">cross-domain scripting security</a></span> mechanism)
   have been historically allowed, and many sites depend on these features
   for quite legitimate uses. User agents should allow them.

  <p>Servers therefore must also consider security. Servers should never
   perform non-idempotent actions in response to GET requests, as discussed
   by the HTTP specification. Servers should also check the
   <code>Referer</code> header to ensure that only requests from trusted
   hosts are honoured.

  <p>Servers should also consider the client to be untrusted, since in most
   scenarios requests can be made to hosts by hostile parties directly,
   bypassing any security logic included in the page nominally intended to
   perform the submission. Thus servers should perform validation on all
   submitted data, whether such validation is expected to be performed on the
   client or not.

  <p>Further specific securiy considerations are called out where relevant.

  <h2 id="extend-form-controls"><span class="secno">2. </span>Extensions to
   form control elements</h2>

  <p>This section describes how Web Forms 2.0 expands the traditional HTML
   form model to support new types and features.

  <h3 id="introduction0"><span class="secno">2.1. </span>Introduction for
   authors</h3>

  <p><em>This subsection is not normative.</em>

  <p>One of the big additions to the Web Forms model introduced with this
   specification is primitive type and validity checking.

  <p>Authors can use these new features in various ways. To indicate that a
   form control expects a particular type of input, authors can specify the
   types using the <code>type</code> attribute:

  <pre>&lt;label&gt;E-mail address: &lt;input <strong>type="email"</strong> name="addr"&gt;&lt;/label&gt;
&lt;label&gt;Start date: &lt;input <strong>type="date"</strong> name="start"&gt;&lt;/label&gt;</pre>

  <p>To mark a field as required, the <code><a
   href="#required0">required</a></code> attribute can be used:

  <pre>&lt;label&gt;Quantity: &lt;input type="number" <strong>required="required"</strong> name="qty"&gt;&lt;/label&gt;</pre>

  <p>To set the range of values that are allowed, the <code><a
   href="#min">min</a></code> and <code><a href="#max">max</a></code>
   attributes can be used:

  <pre>&lt;label&gt;Meeting time: &lt;input type="time" <strong>min="09:00" max="17:00"</strong> name="mt"&gt;&lt;/label&gt;</pre>

  <p>Once such constraints have been specified, the user agent will
   automatically guide the user through any errors he may have made before
   allowing the form to be submitted.

  <p>Authors can hook into this validation system with their scripts. There
   are several ways to do this.

  <p>At any point, scripts can check a control's <code><a
   href="#validity">validity</a></code> DOM attribute for up to date
   information on whether a control is valid:

  <pre>with (document.forms[0]) {
  if (qty.validity.valueMissing) {
    // the quantity field is required but not filled in
  } else if (qty.validity.typeMismatch) {
    // the quantity field is filled in, but it is not a number
  }
}</pre>

  <p>An author can explicitly set a control as being invalid ("invalid" means
   that the control's value is not acceptable):

  <pre>var myControl = document.forms[0].addr;
if (myControl.value == 'a@b.c') {
  myControl.setCustomValidity('You must enter your real address.');
}</pre>

  <p>Authors can also override the normal user agent error reporting
   behaviour by hooking into the <code><a href="#invalid0">invalid</a></code>
   event:

  <pre>&lt;label&gt;Home page: &lt;input type="url" name="hp" required="required"
                         <strong>oninvalid="alert('You must enter a valid home page address.'); return false;"</strong>&gt;
&lt;/label&gt;</pre>

  <h3 id="existing"><span class="secno">2.2. </span>Existing controls</h3>

  <p>HTML <code>input</code> elements use the <code>type</code> attribute to
   specify the data type. In <a href="#refsHTML4">[HTML4]</a>, the types (as
   seen by the server) are as follows:

  <dl>
   <dt><dfn id="text"><code>text</code></dfn>

   <dd>A free-form text field, nominally free of line breaks.

   <dt><dfn id="password"><code>password</code></dfn>

   <dd>A free-form text field for sensitive information, nominally free of
    line breaks.

   <dt><dfn id="checkbox"><code>checkbox</code></dfn>

   <dd>A set of zero or more values from a predefined list (in the limiting
    case of the list only containing one value, this is equivalent to a
    boolean).

   <dt><dfn id="radio"><code>radio</code></dfn>

   <dd>An enumerated value.

   <dt><dfn id="submit"><code>submit</code></dfn>

   <dd>An enumerated value, with the extra semantic that it must be the last
    value selected and initiates form submission.

   <dt><code><a href="#file">file</a></code>

   <dd>An arbitrary file with a MIME type and optionally a file name.

   <dt><dfn id="image"><code>image</code></dfn>

   <dd>A coordinate, relative to a particular image's size, with the extra
    semantic that it must be the last value selected and initiates form
    submission.

   <dt><dfn id="hidden"><code>hidden</code></dfn>

   <dd>An arbitrary string that is not normally displayed to the user.
  </dl>

  <p>In addition, HTML also provides a few alternate elements that convey
   typing semantics similar to the above types, but use different content
   models:

  <dl>
   <dt><code>select</code>

   <dd>An enumerated value, much like the <code><a
    href="#radio">radio</a></code> type.

   <dt><code>select multiple</code>

   <dd>A set of zero or more values from a predefined list, much like the
    <code><a href="#checkbox">checkbox</a></code> type.

   <dt><code>textarea</code>

   <dd>A free-form text field, nominally with no line break restrictions.

   <dt><code>button</code>

   <dd>An enumerated value, with the extra semantic that it must be the last
    value selected and initiates form submission, much like the <code><a
    href="#submit">submit</a></code> type but with a richer content model.
  </dl>

  <p>The difference between the <code><a href="#checkbox">checkbox</a></code>
   and <code><a href="#radio">radio</a></code> types and their
   <code>select</code> and <code>select multiple</code> counterparts is that
   for the <code>select</code> variants the values are only available through
   a single composite control, whereas for the <code><a
   href="#checkbox">checkbox</a></code> and <code><a
   href="#radio">radio</a></code> types the controls representing each value
   may be individually placed around the document.

  <p>There are also two button types (available on both <code>input</code>
   and <code>button</code> elements) that are never submitted:
   <code>button</code> and <code>reset</code>.

  <p>This specification includes all of these types, their semantics, and
   their processing rules, by reference, for backwards compatibility.

  <p>These types are useful, but limited. This specification expands the list
   to cover more specific data types, and introduces attributes that are
   designed to constrain data entry or other aspects of the UA's behaviour.

  <h3 id="changes"><span class="secno">2.3. </span>Changes to existing
   controls</h3>

  <p><span id="emptyElements">In addition to the attributes described below,
   some changes are made to the content model of HTML form elements to take
   into account scripting needs. Specifically, the <code
   id="emptyForm">form</code>, <code>legend</code>, <code>select</code>, and
   <code>optgroup</code> elements may now be empty. However, with the
   exception of the form element, authors should avoid allowing any of these
   elements to be both empty and visible for any noticable period, as it is
   likely to confuse users. <span class="note">In HTML4, those elements
   always required at least one element child, or, in the case of
   <code>legend</code>, at least one character of text.</span></span>

  <p>Also, as <a href="#formAttribute">controls no longer need to be
   contained within their <code>form</code> element</a> to be associated with
   it, authors may prefer to declare their forms in advance, at the top of
   their documents. The form element is therefore allowed in the
   <code>head</code> element of XHTML documents, although only when the
   <code>form</code> element is empty. (This does not apply to HTML, where a
   <code>&lt;form&gt;</code> tag has always implied the end of any unclosed
   <code>head</code> element and the beginning of the <code>body</code>.)

  <p id="nested-form-elements">Similarly, <code>form</code> elements in XHTML
   may now be nested (this does not apply to HTML, where a
   <code>&lt;form&gt;</code> tag is interpreted by UAs as implying the end of
   any unclosed <code>form</code> elements). Form controls by default
   associate with their nearest form ancestor. Forms are not semantically
   related to ancestor forms in any way, and do not share attributes or form
   controls or events (except insofar as events bubble up the DOM).

  <p id="form-content-model">The children of a <code>form</code> element must
   be block-level elements, unless one of the ancestors of the
   <code>form</code> element is an element other than <code>div</code> whose
   content model includes both block- and inline-level content, in which case
   either block-level or inline-level content is allowed (but not both).
   <code>input</code> elements of type <code><a
   href="#hidden">hidden</a></code> may be placed anywhere (both in inline
   contexts and block contexts).

  <p>The <code>form</code> and <code>select</code> elements are extended with
   <a href="#fetching-data"><code>data</code> attributes</a> for fetching
   values and options from external resources.

  <p id="radio-check-default">Radio buttons in sets where none of the buttons
   are marked as checked must all be initially left unchecked by the UA
   (which differs from the behavior described in <a
   href="#refsRFC1866">[RFC1866]</a>, but more accurately represents common
   implementation and author needs). <span id="always-check-one">Authors are
   recommended to always have one radio button selected. Having no radio
   buttons selected is considered very poor UI.</span>

  <p>Radio buttons in sets where more than one button is marked as checked
   must all be initially left unchecked by the UA except for the last radio
   button marked as checked. Each time a checked radio button is inserted
   into the document, the UA must uncheck all the other radio buttons in that
   set in the document. Authors must not mark more than one radio button per
   set as being checked.

  <p id="select-check-default">Previous versions of Web Forms were
   inconsistent about whether the first <code>option</code> element of a
   single-select <code>select</code> element with no otherwise-selected items
   should be automatically selected. According to <a
   href="#refsRFC1866">[RFC1866]</a>, it should be, and according to <a
   href="#refsHTML4">[HTML4]</a> it was undefined. User agents implementing
   this specification must select the first (non-disabled)
   <code>option</code> element of a single-select <code>select</code> element
   with no otherwise-selected items. (If all the items are disabled or there
   are no items, then no item will be selected.)</p>
  <!-- nested optgroups -->

  <p id="nested-optgroup">The <code>optgroup</code> element may now be nested
   inside other <code>optgroup</code> elements.

  <p id="label">The <code>label</code> element's exact default presentation
   and behaviour should match the platform's label behaviour. For example, on
   platforms where clicking a checkbox label checks the checkbox, clicking a
   <code>label</code> element must cause a <code>click</code> event to be
   synthesised and fired at the checkbox. In any case, events targeted at
   form controls (or other interactive elements, e.g. links) within a label
   must not be handled by the label itself.

  <p id="enter-submit">User agents may establish a button in each form as
   being the form's default button. (This should be the first submit button
   in the form, but UAs may pick another button if another would be more
   appropriate for the platform.) If the platform supports letting the user
   submit a form implicitly (for example, on some platforms hitting the
   "enter" key while a text field is focused implicitly submits the form),
   then when doing so the form's default submit button must be the one used
   to initiate form submission (and it will therefore probably be <a
   href="#successful">successful</a>). To initiate for submission in such a
   case, the user agent must fire a <code>click</code> event at the button's
   element, as if the user had clicked the button himself.

  <p>Consequently, if the default button is disabled, the form must not be
   submitted when such an implicit submission mechanism is used. (The default
   action of a click on a disabled button is to do nothing.)

  <p>If there is no submit button, then the implicit submission mechanism
   must submit the form as if there was an enabled, unnamed, default button.
   No <code>click</code> event is fired in this case.

  <p class="note">Submit buttons can be <span title="form-attribute"><a
   href="#form0">associated with multiple forms</a></span>, but only ever
   submit to the first form they are associated with. A default button for
   one form, therefore, could submit a different form when implicitly invoked
   than the form for which it is a default button. (This, however, is an edge
   case.)

  <p>For <code><a href="#checkbox">checkbox</a></code> and <code><a
   href="#radio">radio</a></code> form controls, the <code>value</code>
   attribute defaults to the literal string <code>on</code>, so that if the
   <code>value</code> content attribute is not specified then the
   <code>value</code> DOM attribute (and the value used for submission when
   the controls are checked) is "<code>on</code>". For other controls the
   default is the empty string.

  <p>The attributes defined in this specification as accepting a fixed set of
   values (e.g. <code>type</code>) must be compared to those values using a
   <span><a href="#case-insensitive">case-insensitive</a></span> literal
   comparison. Whitespace must not be trimmed from attribute values to make
   that comparison.

  <p>Whitespace must also not be trimmed from any other attributes (e.g. the
   <code>value</code> attribute).

  <p class="note">Whitespace can get trimmed by the parser for other reasons;
   e.g. if an XML DTD is used, the XML specification can require certain
   attributes to have whitespace trimmed.

  <h3 id="extensions"><span class="secno">2.4. </span>Extensions to the
   <code>input</code> element</h3>

  <p>Several new values are introduced for the <code>type</code> attribute.
   As with the older types, UAs are recommended to show specialized widgets
   for these types, instead of requiring that the user enter the data into a
   text field.

  <p><em>The formats described below are those that UAs must use in the DOM
   and when submitting the data. They do not necessarily represent what the
   user is expected to type. User agents are expected to show suitable user
   interfaces for each of these types (e.g. using the user's locale
   settings). It is the UA's responsibility to convert the user's input into
   the specified format.</em>

  <p>For most of these types, <code><a href="#min">min</a></code>, <code><a
   href="#max">max</a></code> and <code><a href="#step">step</a></code>
   attributes can be applied to restrict the range of numbers that apply.

  <dl>
   <dt><dfn id="datetime"><code>datetime</code></dfn>

   <dd>A date and time (year, month, day, hour, minute, second, fractions of
    a second) encoded according to ISO 8601 <a
    href="#refsISO8601">[ISO8601]</a> with the time zone set to UTC: four or
    more digits (0 to 9) representing the year, a hyphen (U+002D), two digits
    for the month, a hyphen, two digits for the day, a literal "T", two
    digits for the hour, a colon (U+003A), two digits for the minute,
    optionally a colon and two digits for the second, optionally (if the
    seconds are present) a period (U+002E) and one or more digits for the
    fraction of a second, and finally a mandatory literal "Z". All the
    numbers must be in base ten and zero-padded if necessary. If the seconds
    are omitted, they must be assumed to be zero. If the fraction is omitted,
    it must be assumed to be zero as well. For instance:
    <samp>1995-12-31T23:59:59.99Z</samp> or, representing the time 10
    milliseconds later, <samp>1996-01-01T00:00Z</samp>. The <code><a
    href="#step">step</a></code> attribute specifies the precision in
    seconds, defaulting to 60 (one minute).
    <p>User agents are expected to show an appropriate widget. UAs may
     display the time in whatever time zone is appropriate for the user, but
     should be clear to the user that the time is globally defined, not
     time-zone dependent. The submitted date and time must be in the UTC time
     zone.</p>

   <dt><dfn id="datetime-local"><code>datetime-local</code></dfn>

   <dd>A date and time (year, month, day, hour, minute, second, fractions of
    a second) encoded according to ISO 8601 <a
    href="#refsISO8601">[ISO8601]</a>, with no time zone information: four or
    more digits (0 to 9) representing the year, a hyphen (U+002D), two digits
    for the month, a hyphen, two digits for the day, a literal "T", two
    digits for the hour, a colon (U+003A), two digits for the minute,
    optionally a colon and two digits for the second, and optionally (if the
    seconds are present) a period (U+002E) and one or more digits for the
    fraction of a second. All the numbers must be in base ten and zero-padded
    if necessary. If the seconds are omitted, they must be assumed to be
    zero. If the fraction is omitted, it must be assumed to be zero as well.
    For instance: <samp>1995-12-31T23:59:59.99</samp> or, representing the
    time 10 milliseconds later, <samp>1996-01-01T00:00</samp>. The <code><a
    href="#step">step</a></code> attribute specifies the precision in
    seconds, defaulting to 60 (one minute).

   <dt><dfn id="date"><code>date</code></dfn>

   <dd>A date (year, month, day) encoded according to ISO 8601 <a
    href="#refsISO8601">[ISO8601]</a>: four or more digits (0 to 9)
    representing the year, a hyphen (U+002D), two digits for the month, a
    hyphen, and two digits for the day. All the numbers must be in base ten
    and zero padded if necessary. For instance: <samp>1995-12-31</samp>. The
    <code><a href="#step">step</a></code> attribute specifies the precision
    in days, defaulting to 1. User agents are expected to show an appropriate
    widget, such as a datepicker.

   <dt><dfn id="month"><code>month</code></dfn>

   <dd>A date consisting of a year and a month encoded according to ISO 8601
    <a href="#refsISO8601">[ISO8601]</a>: four or more digits (0 to 9)
    representing the year, a hyphen (U+002D), and two digits for the month,
    zero-padded if necessary. All the numbers must be in base ten. For
    instance: <samp>1995-12</samp>. The <code><a href="#step">step</a></code>
    attribute specifies the precision in months, defaulting to 1. This type
    is used most frequently for credit card expiry dates.

   <dt><dfn id="week"><code>week</code></dfn>

   <dd>A date consisting of a year and a week number encoded according to ISO
    8601 <a href="#refsISO8601">[ISO8601]</a>: four or more digits (0 to 9)
    representing the year, a hyphen (U+002D), a literal "W", and two digits
    for the week, zero-padded if necessary. All the numbers must be in base
    ten. The week number must be a number greater than or equal to 01. Week
    01 of a given year is the week containing the 4th of January; weeks start
    on Monday. For instance: <samp>2005-W52</samp> is the week that ends on
    Sunday the first of January, 2006. The <code><a
    href="#step">step</a></code> attribute specifies the precision in weeks,
    defaulting to 1. This type is used most frequently for dates in European
    industry.

   <dt><dfn id="time"><code>time</code></dfn>

   <dd>A time (hour, minute, seconds, fractional seconds) encoded according
    to ISO 8601 <a href="#refsISO8601">[ISO8601]</a> with no time zone: two
    digits (0-9) for the hour, a colon (U+003A), two digits for the minute,
    optionally a colon and two digits for the second, and optionally (if the
    seconds are present) a period (U+002E) and one or more digits for the
    fraction of a second. All the numbers must be in base ten and zero-padded
    if necessary. If the seconds are omitted, they must be assumed to be
    zero. If the fraction is omitted, it must be assumed to be zero as well.
    For instance: <samp>23:59:00.00000</samp> or <samp>00:00:05</samp>. The
    <code><a href="#step">step</a></code> attribute specifies the precision
    in seconds, defaulting to 60. Times must be greater than or equal to 0
    and must be less than 24 hours, in addition to any tighter restrictions
    placed on the field by the <code><a href="#min">min</a></code> and
    <code><a href="#max">max</a></code> attributes. Note that this type is
    not an elapsed time data type.
    <p>User agents are expected to show an appropriate widget, such as a
     clock. UAs should make it clear to the user that the time does not carry
     any time zone information.

   <dt><dfn id="number"><code>number</code></dfn>

   <dd>
    <p>A numerical value. The <code><a href="#step">step</a></code> attribute
     specifies the precision, defaulting to 1.</p>

    <p>Numbers must be submitted as a significand followed by an optional
     exponent. The significand is an optional minus sign (U+002D, "-"), an
     integer, and optionally a decimal point (U+002E, ".") and an integer
     representing the fractional part. The exponent is a lowercase literal
     letter "e", an optional minus sign, and an integer representing the
     index of a power of ten with which to multiply the significand to get
     the actual number. Integers are one or more decimal digits. If the
     exponent part is omitted its index of a power of ten must be assumed to
     be zero.</p>

    <p class="example">For example, negative-root-two, to 32 significant
     figures, would be <samp>-1.4142135623730950488016887242097e0</samp>, the
     radius of the earth given in furlongs, to an arbitrary precision, would
     be <samp>3.17e4</samp>, and the answer to the life, the universe and
     everything could be any of (amongst others) <samp>42</samp>,
     <samp>0042.000</samp>, <samp>42e0</samp>, <samp>4.2e1</samp>, or
     <samp>420e-1</samp>.</p>

    <p>This format is designed to be compatible with <code>scanf(3)</code>'s
     <code>%f</code> format, ECMAScript's <code>parseFloat</code>, and
     similar parsers while being easier to parse than some other floating
     point syntaxes that are also compatible with those parsers.</p>

    <p>The strings <code>+0</code>, <code>0e+0</code>, and <code>+1e+3</code>
     are all invalid numbers (the minus sign cannot be replaced by a plus
     sign for positive numbers, it must simply be omitted). Similarly,
     <code>.42e2</code> is invalid (there must be at least one digit before
     the decimal point). UAs must not submit numbers in invalid formats
     (whatever the user might enter).</p>

    <p>The submission format is not intended to be the format seen and used
     by users. UAs may use whatever format and UI is appropriate for user
     interaction; the description above is simply the submission format.</p>

   <dt><dfn id="range"><code>range</code></dfn>

   <dd>
    <p>Same as <code><a href="#number">number</a></code>, but indicates that
     the exact value is not important, letting UAs provide a simpler
     interface than they do for <code><a href="#number">number</a></code>.
     For instance, visual UAs may use a slider control. The <code><a
     href="#step">step</a></code>, <code><a href="#min">min</a></code>, and
     <code><a href="#max">max</a></code> attributes still apply. For this
     type, <code><a href="#step">step</a></code> defaults to 1, <code><a
     href="#min">min</a></code> defaults to 0, <code><a
     href="#max">max</a></code> defaults to 100, and <code>value</code>
     defaults to the <code><a href="#min">min</a></code> value.</p>

    <p class="example">Volume controls and brightness controls would be good
     examples of "range" data controls.</p>

   <dt><dfn id="email"><code>email</code></dfn>

   <dd>An e-mail address, following the format of the <code>addr-spec</code>
    token defined in RFC 2822 section 3.4.1 <a
    href="#refsRFC2822">[RFC2822]</a>, but excluding the <code>CFWS</code>
    subtoken everywhere, and excluding the <code>FWS</code> subtoken
    everywhere except in the <code>quoted-string</code> subtoken. UAs could,
    for example, offer e-mail addresses from the user's address book. (See
    below <a href="#IDN">for notes on IDN</a>.)</dd>
   <!--
   <dt><dfn><code>tel</code></dfn></dt>
   <dd>A telephone number, as defined by <a
   href="#refsRFC2806">[RFC2806]</a> (the
   <code>global-phone-number</code> token, defined in RFC 2806 section
   2.2).</dd>
-->

   <dt><dfn id="url"><code>url</code></dfn>

   <dd> An IRI, as defined by <a href="#refsRFC3987">[RFC3987]</a> (the
    <code>IRI</code> token, defined in RFC 3987 section 2.2<!--, in
    full logical order, as per RFC 3987 section 4.1-->).
    UAs could, for example, offer the user URIs from his bookmarks. (See <a
    href="#IDN">below</a> for notes on IDN.) The value is called <code><a
    href="#url">url</a></code> (as opposed to <code>iri</code> or
    <code>uri</code>) for consistency with CSS syntax and because it is
    generally felt authors are more familiar with the term "URL" than the
    other, more technically correct terms.
    <p class="note">Relative URIs and IRIs do not match the <code>IRI</code>
     token mentioned above. Only absolute addresses (potentially with
     fragment identifiers) are valid values for this input type. Of course,
     this does not prevent a user agent from allowing users to enter relative
     or incomplete values, but such values would have to be expanded to
     complete addresses before the control's <code>isTypeMismatch</code> flag
     is cleared.</p>

    <p>Any string that matches the IRI token must be accepted as a valid
     value by user agents. For example, user agents are not required to check
     that given values are in full logical order.</p>
   </dd>
   <!-- THIS SECTION HAS MAJOR ISSUES
     DO NOT REINTRODUCE THIS SECTION WITHOUT THOROUGH PUBLIC REVIEW

   <dt><dfn><code>location</code></dfn></dt>

   <dd>A geographical coordinate, specified as two floating point
   numbers (an optional negative sign (U+002D, "-"), one or more
   decimal digits, a decimal point (U+002E, "."), and six more decimal
   digits) separated by a comma (U+002C, ","). The value specifies
   latitude and longitude, in that order, as decimal degrees. The
   latitude represents the location north and south of the equator as
   a positive or negative real number, respectively, in the range
   -90.000000 &le; &theta; &le; 90.000000. The longitude represents
   the location east and west of the prime meridian as a positive or
   negative real number, respectively, in the range -180.000000 &lt;
   &phi; &le; 180.000000. The longitude and latitude values must be
   specified as decimal degrees and must be specified to six decimal
   places. This allows for granularity within a meter of the
   geographical position.

   <p>Servers should ignore data following a second comma (in other
   words, the data is really a comma separated list, and currently
   only the first two fields are defined). This will allow for future
   extension of this field. Clients should only specify coordinates
   that are accurate to at least a few hundred meters. User agents may
   offer "bookmarked" locations for the user's convenience, or offer a
   map-based control for coordinate selection, or offer the current
   location as determined by GPS, or use other interfaces. User agents
   should not automatically send the user's location without the
   user's consent.</p>

   <div class="example">
    <p>For example, the value <samp>37.386013,-122.082932</samp> is a
    coordinate near Santa Cruz, in California, USA.</p>
   </div>

   </dd>

-->
  </dl>

  <p id="IDN">The <code><a href="#email">email</a></code> and <code><a
   href="#url">url</a></code> fields may contain IDN domains. <a
   href="#refsRFC3490">[RFC3490]</a> These should be sent in their original
   (full-Unicode) characters, not IDNA-encoded. (Authors can use the pattern
   <code><span><a href="#pattern">pattern</a></span>="[\x00-\x7F]+"</code> to
   indicate that only ASCII-based domain names are to be allowed.)

  <p>A control is said to have <dfn id="no-value">no value selected</dfn> if
   its value is the empty string. File controls are said to have no value
   selected if no files have been selected.

  <p>By default, all of these new types (except <code><a
   href="#range">range</a></code>), just like the types from HTML4, must have
   <span><a href="#no-value">no value selected</a></span> unless a default
   value in a valid format is provided using the <code>value</code>
   attribute. For all controls, if a value is specified but it is not in a
   format that is valid for the type (where the valid types are the same as
   the valid submission types described above) then the <code
   title="dom-input-defaultValue"><a
   href="#defaultvalue0">defaultValue</a></code> DOM attribute has the
   specified value, and the control is left with the value it would have had
   if the <code>value</code> attribute had not been specified (namely,
   <span><a href="#no-value">no value selected</a></span>, except for
   <code><a href="#range">range</a></code> controls, which have the <code><a
   href="#min">min</a></code> value selected).

  <p>User agents may allow users to set a control to its "<span><a
   href="#no-value">no value selected</a></span>" state, but are not required
   to do so. For example, radio buttons often cannot be returned to their
   "<span><a href="#no-value">no value selected</a></span>" state.

  <p>Fields with <span><a href="#no-value">no value selected</a></span> do
   not need to match the format appropriate for their type. (Although if they
   are <a href="#required">required fields</a>, they will stop submission for
   that reason instead.)

  <p>If a control has its <code>type</code> attribute changed to another
   type, then the user agent must reinterpret the current value (given by the
   <code>value</code> DOM attribute) and the default value (given by the
   <code>value</code> content attribute and the <code>defaultValue</code> DOM
   attribute) in light of the new type. Values that no longer match the
   format allowed for the control must be handled as described <a
   href="#errInvalidValue">in the error handling section</a>.

  <div class="example">
   <p>The following form uses some of the types described above:</p>

   <pre>
&lt;form action="..." method="post" onsubmit="verify(event)"&gt;
 &lt;p&gt;
  &lt;label&gt;
   Quantity:
   &lt;input name="count" type="number" min="0" max="99" value="1" /&gt;
  &lt;/label&gt;
 &lt;/p&gt;
 &lt;p&gt;
  &lt;label for="time1"&gt; Preferred delivery time: &lt;/label&gt;
  &lt;input id="time1" name="time1" type="time" min="08:00" max="17:00" value="08:00" /&gt; &mdash;
  &lt;input id="time2" name="time2" type="time" min="08:00" max="17:00" value="17:00" /&gt;
 &lt;/p&gt;
 &lt;script type="text/javascript"&gt;
  function verify(event) {
    // check that time1 is smaller than time2, otherwise, swap them
    if (event.target.time1.value >= event.target.time2.value) { // ISO 8601 times are string-comparison safe.
      var time2Value = event.target.time2.value;
      event.target.time2.value = event.target.time1.value;
      event.target.time1.value = time2Value;
    }
  }
 &lt;/script&gt;
&lt;/form&gt;
</pre>

   <p>If in this example the "time1" field was changed to be of type <code><a
    href="#date">date</a></code>, the current value (as picked by the user or
    as initialised by the <code>value</code> attribute), the default value
    (given by the <code>value</code> attribute in the markup and the
    <code>defaultValue</code> attribute in the DOM) and the various
    constraints (<code><a href="#min">min</a></code> and <code><a
    href="#max">max</a></code> here) would all be found to be invalid and the
    control would therefore become a date control with no minimum or maximum,
    and with no value selected.</p>
  </div>

  <p>Servers should still perform type-checking on submitted data, as
   malicious users or rogue user agents might submit data intended to bypass
   this client-side type-checking. Validation done via script may also be
   easily bypassed if the user has disabled scripting. Additionally, legacy
   user agents do not support the validation features described in this
   specification and will therefore submit data that has not been checked.

  <p id="size-deprecated">The <code>size</code> attribute of the
   <code>input</code> element is deprecated in favor of using CSS to specify
   the layout of the form.

  <h4 id="ranges"><span class="secno">2.4.1. </span>Ranges</h4>

  <p>To limit the range of values allowed by some of the above types, two new
   attributes are introduced, which apply to the date-related, time-related,
   numeric, and file upload types:

  <dl>
   <dt><dfn id="min"><code>min</code></dfn>

   <dd>Gives the minimum value (inclusive) of the field, in the format
    specified for the relevant type. Values for the field less than the
    minimum value are out of range (<code><a
    href="#rangeunderflow">rangeUnderflow</a></code>). If absent, or if the
    minimum value is not in exactly the expected format, there is no minimum
    restriction, except for the <code><a href="#range">range</a></code> and
    <code><a href="#file">file</a></code> types, where the default is zero.

   <dt><dfn id="max"><code>max</code></dfn>

   <dd>Gives the maximum value (inclusive) of the field, in the format
    specified for the relevant type. Values for the field greater than the
    maximum value are out of range (<code><a
    href="#rangeoverflow">rangeOverflow</a></code>). If absent, or if the
    maximum value is not in exactly the expected format, there is no maximum
    restriction (beyond those intrinsic to the type), except for the <code><a
    href="#range">range</a></code> type, where the default is 100, and the
    <code><a href="#file">file</a></code> type, where the default is 1.
  </dl>

  <p>For date, time and numeric fields, the values indicate the allowed
   range. For file upload fields, the values indicate the allowed number of
   files.

  <p>The <code><a href="#typemismatch">typeMismatch</a></code> flag is used
   for fields whose values do not match their types, and the <code><a
   href="#rangeunderflow">rangeUnderflow</a></code> and <code><a
   href="#rangeoverflow">rangeOverflow</a></code> flags are used for fields
   whose values are outside the allowed range.

  <p>A field with a <code><a href="#max">max</a></code> less than its
   <code><a href="#min">min</a></code> can never fulfill both conditions when
   it has a value (since that value will always either underflow or overflow
   the allowed range) and thus must block its forms from being submitted.
   This does not make the document non-conformant.

  <p>The exact values allowed by <code><a href="#min">min</a></code> and
   <code><a href="#max">max</a></code> depend on the <code>type</code>
   attribute. For numeric types (<code><a href="#number">number</a></code>
   and <code><a href="#range">range</a></code>) the value must exactly match
   the <a href="#number">number</a> type described above. For <code><a
   href="#file">file</a></code> types it must be a sequence of digits 0-9,
   treated as a base ten integer. For date and time types it must match the
   relevant format mentioned for that type, all fields having the right
   number of digits, with the right separating punctuation.

  <p>If a control has its <code>type</code> attribute changed to another
   type, then the user agent must reinterpret the <code><a
   href="#min">min</a></code> and <code><a href="#max">max</a></code>
   attributes. If an attribute has an invalid value according to the new
   type, then the appropriate default must be used (and not, e.g., the
   default appropriate for the previous type). Control values that no longer
   match the range allowed for the control must be handled as described <a
   href="#errOORValue">in the error handling section</a>.

  <div class="example">
   <p>For example, <code>50.00</code> does not match the allowed value of
    <code><a href="#time">time</a></code>, so the following control has no
    artificial restrictions on its values:</p>

   <pre>&lt;input type="time" min="50.00"&gt;</pre>

   <p>Similarly, the value <code>2000</code> is not a valid value for
    <code><a href="#datetime">datetime</a></code>, <code><a
    href="#date">date</a></code>, or any of the other date or time types.</p>

   <p>The following cases would work, though;</p>

   <pre>&lt;input type="time" min="22:00"&gt;
&lt;input type="time" min="22:00:50.0001"&gt;</pre>
  </div>

  <h4 id="precision"><span class="secno">2.4.2. </span>Precision</h4>

  <p>The <dfn id="step"><code>step</code></dfn> attribute controls the
   precision allowed for the date-related, time-related, and numeric types.

  <p>For the control to be valid, the control's value must be an integral
   number of steps from the <code><a href="#min">min</a></code> value, or, if
   there is no <code><a href="#min">min</a></code> attribute, the <code><a
   href="#max">max</a></code> value, or if there is neither attribute, from
   the zero point.

  <p>The zero point for <code><a href="#datetime">datetime</a></code>
   controls is 1970-01-01T00:00:00.0Z, for <code><a
   href="#datetime-local">datetime-local</a></code> is 1970-01-01T00:00:00.0,
   for <code><a href="#date">date</a></code> controls is 1970-01-01, for
   <code><a href="#month">month</a></code> controls is 1970-01, for <code><a
   href="#week">week</a></code> controls is 1970-W01 (the week starting
   1969-12-29 and containing 1970-01-01), and for <code><a
   href="#time">time</a></code> controls is 00:00.

  <p>For time controls, the value of the <code><a
   href="#step">step</a></code> attribute is in seconds, although it may be a
   fractional number as well to allow fractional times. The format of the
   <code><a href="#step">step</a></code> attribute is the <a
   href="#number">number format</a> described above, except that the value
   must be greater than zero. The default value of the <code><a
   href="#step">step</a></code> attribute for <code><a
   href="#datetime">datetime</a></code>, <code><a
   href="#datetime-local">datetime-local</a></code> and <code><a
   href="#time">time</a></code> controls is 60 (one minute).

  <div class="example">
   <p>For the following control, the allowed values are any day of any year,
    with the times restricted to even minutes:</p>

   <pre>&lt;input type="datetime" step="120" name="start"&gt;</pre>

   <p>For the following control, the allowed values are fifteen seconds and
    two tenths of a second past the minute, any minute of the day, i.e.
    00:00:15.2, 00:01:15.2, 00:02:15.2 ... 23:59:15.2:</p>

   <pre>&lt;input type="time" min="00:00:15.20" name="t"&gt;</pre>

   <p>This is because the default <code><a href="#step">step</a></code> for
    <code><a href="#time">time</a></code> controls is 60 (one minute).</p>

   <p>How the <code><a href="#step">step</a></code> attribute affects the UI
    is not defined by this specification. For example, for a <code><a
    href="#datetime">datetime</a></code> control with <code>step="1"</code>,
    the UI could look like this:</p>

   <p><img alt="A text field with editable sections for each value, with a
    button to pop up a dialog showing a calendar or clock."
    src="sample-datetime-ui-1"></p>
  </div>

  <p>For date controls, the value of the <code><a
   href="#step">step</a></code> attribute is in days, weeks, or months, for
   the <code><a href="#date">date</a></code>, <code><a
   href="#week">week</a></code>, and <code><a href="#month">month</a></code>
   types respectively. The format is a non-negative integer; one or more
   digits 0-9 interpreted as base ten. If the step is zero, it is interpreted
   as the default. The default for the <code><a href="#step">step</a></code>
   attribute for these control types is 1.

  <div class="example">
   <p>The following control would only allow selection of any Sunday in any
    year from 1900 onward:</p>

   <pre>&lt;input type="date" min="1900-01-07" step="7" name="sunday"&gt;</pre>
  </div>

  <p>For numeric controls (<code><a href="#number">number</a></code> and
   <code><a href="#range">range</a></code>), the format of the <code><a
   href="#step">step</a></code> attribute is the <a href="#number">number
   format</a> described above, except that the value must be greater than
   zero. For numeric controls, the default value of the <code><a
   href="#step">step</a></code> attribute is 1.

  <div class="example">
   <p>If the step is <code>25e-2</code> (or <code>0.25</code>, which is
    equivalent), and if <code><a href="#max">max</a></code> is
    <code>-1.1</code>, then the allowed values would be -1.1, -1.35, -1.60,
    -1.85, -2.1, ...</p>

   <p>If you wanted a range control that allowed only even numbers, you could
    set:</p>

   <pre>&lt;input type="range" step="2" name="evenN"&gt;</pre>

   <p>The following control would have a step of 1, the default, because the
    given value for the <code><a href="#step">step</a></code> attribute does
    not match the allowed values for numbers as defined above (it would need
    a leading zero before the decimal point):</p>

   <pre>&lt;input type="range" step=".1" name="n"&gt;</pre>
  </div>

  <p>In addition, for any of the types, the literal value <dfn id="any"
   title="step-any"><code>any</code></dfn> may be used as the value of the
   <code><a href="#step">step</a></code> attribute. This keyword indicates
   that any value may be used (within the bounds of other restrictions placed
   on the field).

  <div class="example">
   <p>The following control would allow any floating point number:</p>

   <pre>&lt;input type="number" step="any" name="n"&gt;</pre>
  </div>

  <p>The <code><a href="#stepmismatch">stepMismatch</a></code> flag is used
   for fields whose values are not one of the values allowed by the <code><a
   href="#step">step</a></code> attribute. However, UAs may silently round
   the number to the nearest value allowed by the <code><a
   href="#step">step</a></code> attribute instead of reporting a <code><a
   href="#stepmismatch">stepMismatch</a></code> validation error. (Such
   rounding may make the value out of range, causing, for instance, a
   <code><a href="#rangeoverflow">rangeOverflow</a></code> validation error.)

  <p>If the author specified step is too small for the UA to handle (for
   example, <code>1e-9999999</code> would probably underflow most
   implementations) then the UA should treat the value as <code
   title="step-any"><a href="#any">any</a></code>. If the given <code><a
   href="#step">step</a></code> value is not one of the allowed values, then
   the default is used.

  <p>User agents are recommended to never convert user- and author-supplied
   values to their binary numeric representation, keeping the values in
   string form at all times and performing comparisons in that form. This
   ensures that UAs are able to handle arbitrarily large numbers without
   risking data loss due to rounding in the decimal-to-binary conversion.

  <p>If a UA needs to round a number to its nearest binary equivalent, as,
   for example, when converting a user-supplied decimal number and an
   author-supplied minimum in order to compare them to establish validity
   (ignoring the suggestion above to do these comparisons in string form),
   algorithms equivalent to those specified in ECMA262 sections 9.3.1
   ("ToNumber Applied to the String Type") and 8.5 ("The Number type") should
   be used (possibly after suitably altering the algorithms to handle numbers
   of the range that the UA can support). <a
   href="#refsECMA262">[ECMA262]</a>

  <p>If a control has its <code>type</code> attribute changed to another
   type, then the user agent must reinterpret the <code><a
   href="#step">step</a></code> attribute. If it has an invalid value
   according to the new type, then the new appropriate default must be used.
   Control values that no longer match the precision allowed for the control
   must be handled as described <a href="#errOORValue">in the error handling
   section</a>.

  <h3 id="extensions0"><span class="secno">2.5. </span>Extensions to existing
   attributes</h3>

  <p>In addition to the new attributes given in this section, some existing
   attributes from <a href="#refsHTML4">[HTML4]</a> are clarified and
   extended below. These, and other attributes from HTML4, continue having
   the same semantics as described in HTML4 unless specified otherwise.

  <dl>
   <dt><dfn id="accesskey"><code>accesskey</code></dfn>

   <dd>
    <p id="access-key-select">UAs may now support the <code><a
     href="#accesskey">accesskey</a></code> attribute on <code>select</code>
     elements (and must at a minimum support the relevant DOM attribute).</p>

    <p>The <code><a href="#accesskey">accesskey</a></code> attribute on
     <code>label</code> elements must act the same way as it would if
     specified on the associated element directly.</p>

   <dt><dfn id="disabled"><code>disabled</code></dfn>

   <dd>
    <p>The <code><a href="#disabled">disabled</a></code> attribute applies to
     all form controls except the <code><a href="#output0">output</a></code>
     element, and also to the <code>fieldset</code>, <code>option</code>, and
     <code>optgroup</code> elements. <span class="note">In HTML4 the <code><a
     href="#disabled">disabled</a></code> attribute did not apply to the
     <code>fieldset</code> element.</span></p>

    <p>When applied to a <code>fieldset</code> element it overrides the
     <code><a href="#disabled">disabled</a></code> attributes of any
     descendent form controls (regardless of whether they are associated with
     the same form). In other words, a form control shall be disabled if it
     has its <code><a href="#disabled">disabled</a></code> attribute set, or
     if any of its ancestor <code>fieldset</code> elements have
     <em>their</em> <code><a href="#disabled">disabled</a></code> attribute
     set.</p>

   <dt><dfn id="maxlength"><code>maxlength</code></dfn>

   <dd>
    <p>This attribute applies to <code><a href="#text">text</a></code>,
     <code><a href="#password">password</a></code>, <code><a
     href="#url">url</a></code>, <code><a href="#email">email</a></code><!--,
    <code>tel</code>-->
     and <code><a href="#file">file</a></code> input types, and
     <code>textarea</code> elements. In particular, it does not apply to the
     date-related, time-related, and numeric field types. <span
     class="note">In HTML4, this attribute only applied to the <code><a
     href="#text">text</a></code> and <code><a
     href="#password">password</a></code> types.</span></p>

    <p>For text input controls it specifies the maximum length of the input,
     in terms of numbers of code points. <a
     href="#refsCHARMOD">[CHARMOD]</a>.</p>

    <p id="textarea-newline-maxlength">A newline in a <code>textarea</code>'s
     value must count as two code points for <code><a
     href="#maxlength">maxlength</a></code> processing (because newlines in
     <code>textarea</code>s <a href="#textarea-newline-submit">are submitted
     as U+000D U+000A</a>). This includes the implied newlines that are added
     for submission when the <code><a href="#wrap">wrap</a></code> attribute
     has the value <code><a href="#hard">hard</a></code>.</p>

    <p>Authors are discouraged from using <code><a
     href="#maxlength">maxlength</a></code> on <code><a
     href="#url">url</a></code> and <code><a
     href="#email">email</a></code><!-- and
    <code>tel</code>--> fields
     unless the server side processor actually has a limit on the size of
     data fields it can usefully process. Valid URIs and e-mail addresses in
     particular can often be surprisingly long.</p>

    <p>When specified on a file upload control, it specifies the maximum size
     in bytes of each file (not the maximum size of the sum of all the
     files).</p>

    <p>The <code><a href="#toolong">tooLong</a></code> flag is used when this
     attribute is specified on a <code><a href="#text">text</a></code>,
     <code><a href="#password">password</a></code>, <code><a
     href="#url">url</a></code>, <code><a
     href="#email">email</a></code><!--, <code>tel</code>--> or
     <code>textarea</code> control and the control has more than the
     specified number of code points, or when it is specified on a <code><a
     href="#file">file</a></code> control and at least one of the selected
     files is longer than the specified number of bytes.</p>

    <p>Servers should still expect to receive, and must be able to cope with,
     content larger than allowed by the <code><a
     href="#maxlength">maxlength</a></code> attribute, in order to deal with
     malicious or non-conforming clients.</p>

    <p>This attribute must not affect the initial value (the DOM <code
     title="dom-input-defaultValue"><a
     href="#defaultvalue0">defaultValue</a></code> attribute). It must only
     affect what the user may enter and whether a validity error is flagged
     during validation.</p>

    <div class="note">
     <p>If the <code><a href="#maxlength">maxlength</a></code> attribute has
      a value that is less than the length required for a valid value of the
      given type, for example:</p>

     <pre>&lt;input type="email" maxlength="1" name="test"/&gt;</pre>

     <p>...then the control can only be valid if it is has <span><a
      href="#no-value">no value selected</a></span> (unless, of course, it is
      a <code><a href="#required0">required</a></code> field, in which case
      it can never be valid).</p>
    </div>

   <dt><dfn id="name"><code>name</code></dfn>

   <dd>Some names (all starting with the string "<code>Ecom_</code>") are
    reserved by <a href="#refsRFC3106">[RFC3106]</a>. Authors must not use
    names starting with the string "<code>Ecom_</code>" in ways that conflict
    with RFC3106.

   <dt><dfn id="readonly"><code>readonly</code></dfn>

   <dd>This attribute applies only to <code><a href="#text">text</a></code>,
    <code><a href="#password">password</a></code>, <code><a
    href="#email">email</a></code>, <!--
   <code>tel</code>,--> <code><a
    href="#url">url</a></code>, date-related, time-related, and <code><a
    href="#number">number</a></code> input types, as well as the
    <code>textarea</code> element. Specifically, it does not apply to radio
    buttons, checkboxes, file upload fields, <code><a
    href="#range">range</a></code> controls, <code>select</code> elements, or
    any of the button types; the interface concept of "readonly" values does
    not apply to button-like user
    interfaces.<!--(The DOM <code>readonly</code>
   attribute (<a href="#refsDOM2HTML">[DOM2HTML]</a>) obviously
   applies to the same set of types as the HTML attribute.)-->
  </dl>

  <p>Other attributes not listed in this specification retain the same
   semantics as in <a href="#refsHTML4">[HTML4]</a>.

  <h3 id="the-pattern"><span class="secno">2.6. </span>The <code><a
   href="#pattern">pattern</a></code> attribute</h3>

  <p>For the <code><a href="#text">text</a></code>, <code><a
   href="#password">password</a></code>, <code><a
   href="#email">email</a></code>, <!--<code>tel</code>,--> and <code><a
   href="#url">url</a></code> types of the <code>input</code> element, and
   for the <code>textarea</code> element, the <dfn
   id="pattern"><code>pattern</code></dfn> attribute specifies a pattern that
   the control value must match.

  <p>When specified, the <code><a href="#pattern">pattern</a></code>
   attribute contains a regular expression that the field's value must match
   before the form may be submitted (<code><a
   href="#patternmismatch">patternMismatch</a></code>).

  <pre class="example">
&lt;label&gt; Credit Card Number:
 &lt;input type="text" pattern="[0-9]{13-16}" name="cc" /&gt;
&lt;/label&gt;
</pre>

  <p>The regular expression language used for this attribute is the same as
   that defined in <a href="#refsECMA262">[ECMA262]</a>, except that the
   <code><a href="#pattern">pattern</a></code> attribute implies a
   <code>^</code> at the start of the pattern and a <code>$</code> at the end
   (so the pattern must match the entire value, not just any subset). The
   pattern must be compiled with the <code>global</code>,
   <code>ignoreCase</code>, and <code>multiline</code> flags disabled (see
   ECMA262, sections 15.10.7.2 through 15.10.7.4). If the attribute is
   omitted then the control has no pattern restriction.

  <div class="note">
   <p>The implicit <code>^</code> and <code>$</code> characters are inserted
    because it is expected that the overwhelming majority of use cases will
    be to require that user input exactly match the given pattern. Authors
    who forget that these characters are implied will immediately realise
    their mistake during testing. Had the characters not been implied,
    requiring most authors to insert them themselves, it is likely that
    authors who forgot them would not catch their mistake as easily.</p>

   <p>Authors who wish to allow for any input so long as a particular string
    occurs <em>somewhere</em> in the input should put <code>.*</code> at the
    start and end of their pattern. If the input is expected to allow
    newlines, then <code>[\s\S]*</code> or some equivalent should be used
    instead, since the dot character in JavaScript regular expressions does
    not include newlines.</p>
  </div>

  <p>The <code>/</code> character is not special in the <code><a
   href="#pattern">pattern</a></code> attribute. The two attributes
   <code>pattern="/etc/.+"</code> and <code>pattern="\/etc\/.+"</code> are
   therefore equivalent.

  <p>The <code>^</code> and <code>$</code> characters have their usual
   meaning. Thus, using the <code>^</code> character anywhere other than at
   the start of the pattern, or the <code>$</code> character anywhere other
   than at the end of the pattern, prevents the pattern from matching
   anything (unless the characters are escaped or part of a range).

  <p>In the case of the <code><a
   href="#email">email</a></code><!--, <code>tel</code>,--> and <code><a
   href="#url">url</a></code> types, the <code><a
   href="#pattern">pattern</a></code> attribute specifies a pattern that must
   be matched <em>in addition</em> to the value matching the generic pattern
   relevant for the field. If the pattern given by the attribute specifies a
   pattern that is incompatible with the grammar of the field type, as in the
   example below, then the field could never be satisfied. (A document
   containing such a situation is not technically non-conformant, but it is
   of dubious semantic use.)

  <pre class="example">
&lt;form&gt;
 &lt;p&gt;
  This form could never be submitted, as the following required field
  can never be satisfied:
  &lt;input type="url" pattern="[^:]+" required="required" name="test"/&gt;
 &lt;/p&gt;
&lt;/form&gt;
</pre>

  <p>When the value doesn't match the field's type, the <code><a
   href="#typemismatch">typeMismatch</a></code> flag must be set; when the
   value doesn't match the pattern, the <code><a
   href="#patternmismatch">patternMismatch</a></code> flag must be set. If
   the value matches neither the field's type nor the field's pattern, both
   flags must be set.

  <p>When the pattern is not a valid regular expression, it is ignored for
   the purposes of validation, as if it wasn't specified.

  <p>Fields with <span><a href="#no-value">no value selected</a></span> do
   not need to match their pattern. (Although if they are <a
   href="#required">required fields</a>, they will stop submission for that
   reason anyway.)

  <p>If the <code><a href="#pattern">pattern</a></code> attribute is present
   but empty, it doesn't match any value, and thus the <code><a
   href="#patternmismatch">patternMismatch</a></code> flag shall be set
   whenever the field's value isn't <span title="no value selected"><a
   href="#no-value">empty</a></span>.

  <p id="patternTitle">Authors should include a description of the pattern in
   the <code>title</code> attribute. User agents may use the contents of this
   attribute when informing the user that the pattern is not matched, or at
   any other suitable time, such as in a tooltip or read out by assistive
   technology when the control gains focus.

  <div class="example">
   <p>For example, the following snippet:</p>

   <pre>
&lt;label&gt; Part number:
 &lt;input pattern="[0-9][A-Z]{3}" name="part"
        title="A part number is a digit followed by three uppercase letters."/&gt;
&lt;/label&gt;
</pre>

   <p>...could cause the UA to display an alert such as:</p>

   <blockquote>
    <p>A part number is a digit followed by three uppercase letters.

    <p>You cannot complete this form until the field is correct.
   </blockquote>
  </div>

  <p>When a control has a <code><a href="#pattern">pattern</a></code>
   attribute, the <code>title</code> attribute, if used, must describe the
   pattern. Additional information could also be included, so long as it
   assists the user in entering the field. Otherwise, assistive technology
   would be impaired.

  <p class="example">For instance, if the title attribute contained the
   caption of the control, assistive technology could end up saying something
   like <samp>The text you have entered does not match the required pattern.
   Birthday</samp>, which is not useful.

  <p>UAs may still show the <code>title</code> in non-error situations (for
   example, as a tooltip when hovering over the control), so authors should
   be careful not to word <code>title</code>s as if an error has necessarily
   occurred.

  <h3 id="the-required"><span class="secno">2.7. </span>The <code
   id="required"><a href="#required0">required</a></code> attribute</h3>

  <p>Form controls can have the <dfn
   id="required0"><code>required</code></dfn> attribute specified, to
   indicate that the user must enter a value into the form control before
   submitting the form.

  <p>The <code><a href="#required0">required</a></code> attribute applies to
   all form controls except controls with the type <code><a
   href="#hidden">hidden</a></code>, image inputs, buttons (<code><a
   href="#submit">submit</a></code>, <code><a
   href="#move-up">move-up</a></code>, etc), and <code>select</code> and
   <code><a href="#output0">output</a></code> elements. It <em>can</em> be
   used on controls with the <code><a href="#readonly">readonly</a></code>
   attribute set; this may be useful in scripted environments. For disabled
   controls, the attribute has no effect.

  <p>The <code>missingValue</code> flag is used for form controls marked as
   required that do not have values.

  <p>For checkboxes, the <code><a href="#required0">required</a></code>
   attribute shall only be satisfied when one or more of the checkboxes with
   that name in that form are checked.

  <p>For radio buttons, the <code><a href="#required0">required</a></code>
   attribute shall only be satisfied when exactly one of the radio buttons in
   that radio group is checked.

  <p>For <span title="file"><a href="#file">file upload controls</a></span>,
   the <code><a href="#required0">required</a></code> attribute shall only be
   satisfied if at least one valid file is selected, regardless of the
   <code><a href="#min">min</a></code> and <code><a
   href="#max">max</a></code> attributes.

  <div class="example">
   <p>Here is a form fragment showing one required field and one optional
    field. A user agent would not allow the user to submit the form until the
    "name" field was filled in.</p>

   <pre>
&lt;ul&gt;
  &lt;li&gt;Name: &lt;input type="text" name="name" required="required" /&gt;&lt;/li&gt;
  &lt;li&gt;Comment: &lt;input type="text" name="comment" /&gt;&lt;/li&gt;
&lt;/ul&gt;
</pre>
  </div>

  <p>Any non-<span title="no value selected"><a
   href="#no-value">empty</a></span> value satisfies the <code><a
   href="#required0">required</a></code> condition, including a simple
   whitespace character.

  <h3 id="formAttribute"><span class="secno">2.8. </span>The <dfn id="form0"
   title="form-attribute"><code>form</code></dfn> attribute</h3>

  <p>All form controls as well as the <code>fieldset</code> element may have
   the <code>form</code> attribute specified. The <code>form</code> attribute
   gives a space-separated list of IDs of <code>form</code> elements that the
   form control is to be associated with, and overrides the relationship
   between the form control and any ancestor <code>form</code> element.

  <p>Any of the IDs in the space-separated list that do not identify an
   element in the document, or that identify an element that is not an HTML
   <code>form</code> element, must be ignored. Setting an element's
   <code>form</code> attribute to the empty string (or to a string consisting
   only of IDs that do not correctly identify <code>form</code> elements)
   just disassociates the form control from its form, leaving it unassociated
   with any form.

  <p>When set on a <code>fieldset</code> element, this attribute also changes
   the association of any descendent form controls, unless they have
   <code>form</code> attributes of their own or are contained inside forms
   that are themselves descendants of the <code>fieldset</code> element.

  <p id="control-form-association">In other words, form controls and
   <code>fieldset</code>s must be associated with the forms given in their
   <code title="form-attribute"><a href="#form0">form</a></code> attribute,
   or, if they don't have one, must be associated with the nearest ancestor
   <code>form</code> element or the forms given in the <code
   title="form-attribute"><a href="#form0">form</a></code> attribute of the
   nearest <code>fieldset</code> element with a <code
   title="form-attribute"><a href="#form0">form</a></code> attribute,
   whichever is the nearest. If none of those apply, the element is not
   associated with any form.

  <p>When forms are submitted, are reset, or have their form controls
   enumerated through the DOM, only those controls associated with the form
   are taken into account. A control can be associated with more than one
   form at a time. Submit buttons and image controls must only submit the
   first form they are associated with. Reset buttons must reset all the
   forms they are associated with.

  <p>A <code>form</code> attribute that specifies an ID that occurs multiple
   times in a document must select the same form as would be selected by the
   <code>getElementById()</code> method for that ID (<a
   href="#refsDOM3CORE">[DOM3CORE]</a>). (That is, the exact behaviour is
   undefined, but must be the same as if the <code>getElementById()</code>
   method was used.)

  <p>If a form is specified multiple times in the <code>form</code>
   attribute, all occurrences but the first must be ignored. (An element can
   only be associated with a form once.)

  <div class="example">
   <p>In this example, each row contains one form. Without the "form"
    attribute, it would not be possible to have more than one form per table
    if any of them spanned cells.</p>

   <pre>
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th&gt;Name&lt;/th&gt;
   &lt;th&gt;Value&lt;/th&gt;
   &lt;th&gt;Action&lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;form id="edit1" action="/edit" method="post"&gt;
     &lt;input type="hidden" name="id" value="1"/&gt;
     &lt;input type="text" name="name" value="First Row"/&gt;
    &lt;/form&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;input form="edit1" type="text" name="value"/&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;input form="edit1" type="submit" name="Edit"/&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;form id="edit2" action="/edit" method="post"&gt;
     &lt;input type="hidden" name="id" value="2"/&gt;
     &lt;input type="text" name="name" value="Second Row"/&gt;
    &lt;/form&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;input form="edit2" type="text" name="value"/&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;input form="edit2" type="submit" name="Edit"/&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
</pre>

   <p>In the following example, the text control is associated with two
    forms.</p>

   <pre>&lt;form action="test.cgi"&gt;
 &lt;input type="text" name="q" form="fg fy"&gt;
 &lt;input type="submit" name="t" value="Test"&gt;
&lt;/form&gt;
&lt;form id="fg" action="google.cgi"&gt;&lt;input type="submit" value="Google"&gt;&lt;/form&gt;
&lt;form id="fy" action="yahoo.cgi"&gt;&lt;input type="submit" value="Yahoo"&gt;&lt;/form&gt;</pre>

   <p>There are three submit buttons. The first, "Test", submits just the
    "Test" button, and submits it to <code>test.cgi</code>. The text field is
    not submitted with that form in Web Forms 2 compliant UAs. (It
    <em>is</em> submitted in legacy UAs, which can be used for implementing
    fallback behaviour.)</p>

   <p>The second button submits the text field to <code>google.cgi</code>,
    the third button submits the same text field to <code>yahoo.cgi</code>.</p>
  </div>

  <h3 id="the-autocomplete"><span class="secno">2.9. </span>The <code><a
   href="#autocomplete">autocomplete</a></code> attribute</h3>

  <p>The <dfn id="autocomplete"><code>autocomplete</code></dfn> attribute
   applies to the <code><a href="#text">text</a></code>, <code><a
   href="#password">password</a></code> date-related, time-related, numeric,
   <code><a href="#email">email</a></code>, and <code><a
   href="#url">url</a></code> controls. The attribute takes two values,
   <code>on</code> and <code>off</code>. The default, when the attribute is
   not specified, is <code>on</code>.</p>
  <!--XXX IE also applies it to <form> elements. It doesn't apply it
  to <textarea>. -->

  <p>The <code>off</code> value means that the control's input data is either
   particularily sensitive (for example the activation code for a nuclear
   weapon) or that it is a value that will never be reused (for example a
   one-time-key for a bank login) and indicates that the user should
   therefore explicitly enter the data each time, instead of being able to
   rely on the UA to prefill the value for him. The <code>on</code> value
   indicates that the value is not particularily sensitive and the user
   should expect to be able to rely on his UA to remember values he has
   entered for that field.

  <p>When a control has its <code><a
   href="#autocomplete">autocomplete</a></code> attribute set to a value
   other than <code>off</code>, or when the attribute is omitted, the UA may
   store the value entered by the user so that if the user returns to the
   page, the UA can prefill the form. When a control has its <code><a
   href="#autocomplete">autocomplete</a></code> attribute set to
   <code>off</code>, the UA should not remember that field's value.

  <p>This specification does not define the autocompletion mechanism. UAs may
   implement any system within the conformance criteria of this
   specification, taking into account security and privacy concerns.

  <div class="example">
   <p>Banks frequently do not want UAs to prefill login information:</p>

   <pre>
&lt;p&gt;Account: &lt;input type="text" name="ac" autocomplete="off" /&gt;&lt;/p&gt;
&lt;p&gt;PIN: &lt;input type="text" name="pin" autocomplete="off" /&gt;&lt;/p&gt;
</pre>
  </div>

  <p>A UA may allow the user to disable support for this attribute. Support
   for the attribute should be enabled by default, and the ability to disable
   support should not be trivially accessible, as there are significant
   security implications for the user if support for this attribute is
   disabled.

  <p class="note">In practice, this attribute is required by many banking
   institutions, who insist that UAs with auto-complete features implement it
   before supporting them on their Web sites. For this reason, it is
   implemented by most major Web browsers already, and has been for many
   years.

  <h3 id="the-autofocus"><span class="secno">2.10. </span>The <dfn
   id="autofocus0"><code>autofocus</code></dfn> attribute</h3>

  <p>Any form control (except <code><a href="#hidden">hidden</a></code> and
   <code><a href="#output0">output</a></code> controls) can have an <code><a
   href="#autofocus0">autofocus</a></code> attribute specified.

  <p>When a form control is inserted into a document, the UA must check to
   see if it has this attribute set. If it does, and the control is not
   <span><a href="#disabled">disabled</a></span>, and it is of a type
   normally focusable in the user's operating environment, then the UA should
   focus the control, as if the control's <code>focus()</code> method was
   invoked. UAs with a viewport should also scroll the document enough to
   make the control visible, even if it is not of a type normally focusable.

  <p>Authors should avoid setting the <code><a
   href="#autofocus0">autofocus</a></code> attribute on multiple enabled
   elements in a document. If multiple elements with the <code><a
   href="#autofocus0">autofocus</a></code> attribute set <em>are</em>
   inserted into a document, each one will be processed as described above,
   as they are inserted. This means that during document load, for example,
   the last focusable form control in document order with the attribute set
   will end up with the focus.

  <p>UAs may ignore this attribute if the user has indicated (for example, by
   starting to type in a form control) that he does not wish focus to be
   changed.

  <p>The value of the attribute, if set, should be <code
   title="">autofocus</code>. The <code title="dom-autofocus"><a
   href="#autofocus1">autofocus</a></code> DOM attribute is true when the
   attribute is present (regardless of its value, even if it is the empty
   string), and false when it is absent. Setting the DOM attribute to true
   sets the content attribute to the value <code title="">autofocus</code>.
   Setting the DOM attribute to false removes the content attribute.

  <div class="example">
   <p>In the following snippet, the text field would be focused when the
    document was loaded.</p>

   <pre>&lt;input maxlength="256" name="q" value="" autofocus="autofocus"&gt;
&lt;input type="submit" value="Search"&gt;</pre>
  </div>

  <p>In HTML, the minimised form may be used (just <code><a
   href="#autofocus0">autofocus</a></code> instead of
   <code>autofocus="autofocus"</code>).

  <div class="example">
   <p>The following would cause the <code><a
    href="#autofocus0">autofocus</a></code> attribute to be set to <code><a
    href="#autofocus0">autofocus</a></code>:</p>

   <pre>&lt;input autofocus&gt;</pre>
  </div>

  <p class="note">Focusing the control does not imply that the UA must focus
   the browser window if it has lost focus.

  <h3 id="the-inputmode"><span class="secno">2.11. </span>The <code><a
   href="#inputmode">inputmode</a></code> attribute</h3>

  <p>The <dfn id="inputmode"><code>inputmode</code></dfn> attribute applies
   to the <code>input</code> element when it has a <code>type</code>
   attribute of <code><a href="#text">text</a></code>, <code><a
   href="#password">password</a></code>, <code><a
   href="#email">email</a></code><!--,
  <code>tel</code>-->, or <code><a
   href="#url">url</a></code>, and to the <code>textarea</code> element.

  <p>This attribute is defined to be exactly equivalent to the <code><a
   href="#inputmode">inputmode</a></code> attribute <a
   href="http://www.w3.org/TR/xforms/sliceE.html">defined in the XForms 1.0
   specification</a> (sections E1 through E3.2) <a
   href="#refsXForms">[XForms]</a>.

  <h3 id="the-datalist"><span class="secno">2.12. </span>The <code><a
   href="#datalist">datalist</a></code> element and the <code><a
   href="#list">list</a></code> attribute</h3>

  <p>For the <code><a href="#text">text</a></code>, <code><a
   href="#email">email</a></code>, <!--<code>tel</code>,--> <code><a
   href="#url">url</a></code>, date-related, time-related, and numeric types
   of the <code>input</code> element, a new attribute <dfn
   id="list"><code>list</code></dfn> is introduced to point to a list of
   values that the UA should offer to the user in addition to allowing the
   user to pick an arbitrary value.

  <p>To complement the new <code><a href="#list">list</a></code> attribute, a
   <dfn id="datalist"><code>datalist</code></dfn> element is introduced. This
   element has two roles: it provides a list of data values, in the form of a
   list of <code>option</code> elements, and it may be used to provide
   fallback content for user agents that do not support this specification.

  <p>If the UA supports this element, it should not be displayed. In
   CSS-aware user agents, this should be achieved by including the following
   rules, or their equivalent, in the UA's user agent stylesheet:

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|datalist { display: none; }</pre>

  <p>When a control has a <code><a href="#list">list</a></code> attribute, it
   specifies an element from which to derive the list of author-specified
   autocompletion values for the control.

  <p>The element specified is the one that would be returned when calling
   <code>getElementById()</code> with the value of the <code><a
   href="#list">list</a></code> attribute as the argument, if the returned
   value is an element node with either the tag name <code><a
   href="#datalist">datalist</a></code> or the tag name <code>select</code>,
   and (for XHTML) with the XHTML namespace. If the attribute is present but
   either specifies an ID that is not in the document, or specifies an
   element that is not an (X)HTML <code><a
   href="#datalist">datalist</a></code> or <code>select</code>, then it must
   be ignored.

  <p>The list of autocompletion values shall be given by the list of elements
   that would be found by calling <code>getElementsByTagName()</code> with
   the tag name <code>option</code> on the element specified, if any (or, in
   XHTML documents, the list of elements that would be found by calling
   <code>getElementsByTagName<em>NS</em>()</code> with the same tag name and
   the XHTML namespace).</p>
  <!--
  <p>To put it in exact terms: when a control has a <code>list</code>
  attribute, the list of author-specified autocompletion values shall
  be given by the list of elements that would be found by first
  calling <code>getElementById()</code> with the value of the
  <code>list</code> attribute as the argument, and then, if the
  returned value is an element node with either the tag name
  <code>datalist</code> or the tag name <code>select</code>, and (for
  XHTML) with the XHTML namespace, calling
  <code>getElementsByTagName()</code> with the tag name
  <code>option</code> (or, in XHTML, its namespaced variant, with the
  same tag name and the XHTML namespace).</p>
-->

  <p>For each element in this list, if the element is not marked as <code><a
   href="#disabled">disabled</a></code>, the autocompletion value is either
   the value of its <code>value</code> content attribute, or, if that
   attribute is absent, the value of its <code><a
   href="#text">text</a></code> DOM attribute. The UA may use the
   <code>label</code> attribute to annotate the value in its interface. If
   the element is marked as <code><a href="#disabled">disabled</a></code>, if
   the autocompletion value is the empty string, or if the autocompletion
   value is not a valid value for the control's type (for example,
   <code>20</code> is not a valid value for a <code><a
   href="#datetime">datetime</a></code> control) then it must be ignored.

  <p>The author-specified list of predefined values may be augmented by the
   UA's own autocompletion logic. For example, the UA may remember previous
   values that the user has entered.

  <p>Authors must only use empty <code>option</code> elements or elements
   that would be allowed in the <code><a href="#datalist">datalist</a></code>
   element's parent as children of <code><a
   href="#datalist">datalist</a></code> elements. <code><a
   href="#datalist">datalist</a></code> elements may be used wherever
   block-level elements are allowed and wherever <code>select</code> elements
   are allowed.

  <p>Controls inside <code><a href="#datalist">datalist</a></code> elements
   must never be <a href="#successful">successful</a>. (They must still,
   however, be <a href="#control-form-association">associated</a> with their
   form.)

  <p>The <code><a href="#datalist">datalist</a></code> element may be
   prefilled from an external file with the <code title="select-data"><a
   href="#data">data</a></code> attribute.

  <p>The <code>selected</code> attribute and the <code>form</code>,
   <code>selected</code>, <code>defaultSelected</code>, and
   <code>index</code> DOM attributes on <code>option</code> elements must
   have no effect on the <code>input</code> and <code><a
   href="#datalist">datalist</a></code> elements when <code>option</code>
   elements are used in this context.

  <div class="example">
   <p>If a document contained the following markup:</p>

   <pre>&lt;input type="url" name="location" list="urls"&gt;
&lt;datalist id="urls"&gt;
 &lt;option label="MIME: Format of Internet Message Bodies" value="http://www.ietf.org/rfc/rfc2045"&gt;
 &lt;option label="HTML 4.01 Specification" value="http://www.w3.org/TR/html4/"&gt;
 &lt;option label="Form Controls" value="http://www.w3.org/TR/xforms/slice8.html#ui-commonelems-hint"&gt;
 &lt;option label="Scalable Vector Graphics (SVG) 1.1 Specification" value="http://www.w3.org/TR/SVG/"&gt;
 &lt;option label="Feature Sets - SVG 1.1 - 20030114" value="http://www.w3.org/TR/SVG/feature.html"&gt;
 &lt;option label="The Single UNIX Specification, Version 3" value="http://www.unix-systems.org/version3/"&gt;
&lt;/datalist&gt;
</pre>

   <p>...and the user had typed "<kbd>www.w3</kbd>", and the user agent had
    also found that the user had visited
    <code>http://www.w3.org/Consortium/#membership</code> and
    <code>http://www.w3.org/TR/XForms/</code> in the recent past, then the
    rendering might look like this:</p>

   <p><img alt="A text box with an icon on the left followed by the text
    &quot;www.w3&quot; and a cursor, with a drop down button on the right
    hand side; with, below, a drop down box containing a list of six URIs on
    the left, with sthe first four having grayed out labels on the right; and
    a scroll bar to the right of the drow down box, indicating further values
    are available." src="sample-autocompletion-ui-1"></p>

   <p>The first four URIs in this sample consist of the four URIs in the
    author-specified list that match the text the user has entered, sorted
    lexically. Note how the UA is using the knowledge that the values are
    URIs to allow the user to omit the scheme part and perform intelligent
    matching on the domain name.</p>

   <p>The last two URIs (and probably many more, given the scrollbar's
    indications of more values being available) are the matches from the user
    agent's session history data. This data is not made available to the page
    DOM. In this particular case, the UA has no titles to provide for those
    values.</p>
  </div>

  <div class="example">
   <p>This example demonstrates how to design a form that uses the
    autocompletion list feature while still degrading usefully in legacy user
    agents.</p>

   <p>If the autocompletion list is merely an aid, and is not important to
    the content, then simply using a <code><a
    href="#datalist">datalist</a></code> element with children
    <code>option</code> elements is enough. To prevent the values from being
    rendered in legacy user agents, they should be placed inside the
    <code>value</code> attribute instead of inline.</p>

   <pre>&lt;p&gt;
 &lt;label&gt;
  Enter a breed:
  &lt;input type="text" name="breed" data="breeds"&gt;
  &lt;datalist id="breeds"&gt;
   &lt;option value="Abyssinian"&gt;
   &lt;option value="Alpaca"&gt;
   &lt;!-- ... --&gt;
  &lt;/datalist&gt;
 &lt;/label&gt;
&lt;/p&gt;</pre>

   <p>However, if the values need to be shown in legacy UAs, then fallback
    content can be placed inside the <code><a
    href="#datalist">datalist</a></code> element, as follows:</p>

   <pre>&lt;p&gt;
 &lt;label&gt;
  Enter a breed:
  &lt;input type="text" name="breed" data="breeds"&gt;
 &lt;/label&gt;
 &lt;datalist id="breeds"&gt;
  &lt;label&gt;
   or select one from the list:
   &lt;select name="breed"&gt;
    &lt;option value=""&gt; (none selected)
    &lt;option&gt;Abyssinian
    &lt;option&gt;Alpaca
    &lt;!-- ... --&gt;
   &lt;/select&gt;
  &lt;/label&gt;
 &lt;/datalist&gt;
&lt;/p&gt;
</pre>

   <p>The fallback content will only be shown in UAs that don't support
    <code><a href="#datalist">datalist</a></code>. The options, on the other
    hand, will be detected by all UAs, even though they are not direct
    children of the <code><a href="#datalist">datalist</a></code> element.</p>

   <p>Note that if an <code>option</code> element used in a <code><a
    href="#datalist">datalist</a></code> is <code>selected</code>, it will be
    selected by default by legacy UAs (because it affects the
    <code>select</code>), but it will not have any effect on the
    <code>input</code> element in UAs that support <code><a
    href="#datalist">datalist</a></code>.</p>
  </div>

  <div class="example">
   <p>Here is another example, this time with a range control. This could be
    useful if there are values along the full range of the control that are
    especially important, such as preconfigured light levels or typical speed
    limits in a range control used as a speed control. The following markup
    fragment:</p>

   <pre>&lt;input type="range" min="-100" max="100" value="0" step="10" name="power" list="powers"&gt;
&lt;datalist id="powers"&gt;
 &lt;option value="0"&gt;
 &lt;option value="-30"&gt;
 &lt;option value="30"&gt;
 &lt;option value="+50"&gt;
&lt;/datalist&gt;
</pre>

   <p>...with the following stylesheet applied:</p>

   <pre>input { height: 75px; width: 49px; background: #D5CCBB; color: black; }</pre>

   <p>...might render as:</p>

   <p><img alt="A vertical slider control whose primary colour is black and
    whose background colour is beige, with the slider having five tick marks,
    one long one at each extremity, and three short ones clustered around the
    midpoint." src="sample-autocompletion-ui-2">

   <p>Note how the UA determined the orientation of the control from the
    ratio of the stylesheet-specified height and width properties. The
    colours were similiarly derived from the stylesheet. The tick marks,
    however, were derived from the markup. In particular, the <code><a
    href="#step">step</a></code> attribute has not affected the placement of
    tick marks, the UA deciding to only use the author-specified completion
    values and then adding longer tick marks at the extremes.</p>

   <p>Note also how the invalid value <code>+50</code> was completely
    ignored.</p>
  </div>

  <p class="note">This specification does not mandate a particular interface.
   The UA could have used a rotary control, a combo box, a voice-driven text
   box, or any other widget or interface while still being compliant with
   this specification.

  <h3 id="the-output"><span class="secno">2.13. </span>The <dfn
   id="output0"><code>output</code></dfn> element</h3>

  <p>The <code><a href="#output0">output</a></code> element acts very much
   like a <code>span</code> element, except that it is considered to be a
   form control for the purposes of the DOM. Its namespace (in XML) is the
   same as for the other form control elements,
   <code>http://www.w3.org/1999/xhtml</code>.

  <p>The <code><a href="#output0">output</a></code> element may have any of
   the <a href="http://www.w3.org/TR/html4/sgml/dtd.html#attrs">common
   attributes</a>, the <code>form</code> and <code><a
   href="#name">name</a></code> attributes, the <code><a
   href="#for">for</a></code> attribute (defined below), and the
   <code>onchange</code>, <code>onforminput</code> and
   <code>onformchange</code> attributes.

  <p>Its current value is given by its contents, which may be any inline
   content (like the <code>span</code> element).

  <p>The current value can be set and retrieved dynamically using the mutable
   <dfn id="value" title="dom-output-value"><code>value</code></dfn> DOM
   attribute of type <code>DOMString</code>. This attribute is defined to be
   identical to the DOM3 Core <code>textContent</code> attribute. <a
   href="#refsDOM3CORE">[DOM3CORE]</a>

  <p>The <em>initial value</em> of the <code><a
   href="#output0">output</a></code> control is stored in a mutable <dfn
   id="defaultvalue"
   title="dom-output-defaultValue"><code>defaultValue</code></dfn> DOM
   attribute of type <code>DOMString</code>. See <a
   href="#refsHTML4">[HTML4]</a> section 17.2 for <a
   href="http://www.w3.org/TR/html4/interact/forms.html#initial-value">the
   definiton of the term "initial value"</a>. (In brief, it is the value used
   when the form is reset.)

  <p id="outputDefaultValue">The <code title="dom-output-defaultValue"><a
   href="#defaultvalue">defaultValue</a></code> DOM attribute of an <code><a
   href="#output0">output</a></code> control must initially be set to the
   empty string. If an <code><a href="#output0">output</a></code> element is
   added to the document at parse time, its <code
   title="dom-output-defaultValue"><a
   href="#defaultvalue">defaultValue</a></code> DOM attribute must be set to
   the value of its <code>textContent</code> attribute after all its children
   nodes were parsed. (If the value of <code
   title="dom-output-defaultValue"><a
   href="#defaultvalue">defaultValue</a></code> is queried before the entire
   element's contents have been parsed, or if the element was created
   dynamically (as opposed to being inserted into the DOM by the UA's
   parser), then <code title="dom-output-defaultValue"><a
   href="#defaultvalue">defaultValue</a></code> must return the empty
   string.)

  <p>The <code><a href="#output0">output</a></code> element is never <a
   href="#successful">successful</a> for form submission. Resetting a form
   <em>does</em> reset its <code><a href="#output0">output</a></code>
   elements (using the <code title="dom-output-defaultValue"><a
   href="#defaultvalue">defaultValue</a></code> DOM attribute &mdash; note
   that if the element originally contained elements as children, they will
   be removed when the form is reset).

  <p class="note">Unless the <code title="dom-output-value"><a
   href="#value">value</a></code> attribute is directly manipulated or the
   form is reset, elements that are children of the <code><a
   href="#output0">output</a></code> element when the document was parsed are
   not flattened away.

  <div class="example">
   <p>The following example shows two input fields. Changing either field
    updates an <code><a href="#output0">output</a></code> element containing
    the product of both fields.</p>

   <pre>
&lt;form&gt;
 &lt;p&gt;
  &lt;input name="a" type="number" step="any" value="0"&gt; *
  &lt;input name="b" type="number" step="any" value="0"&gt; =
  &lt;output name="result" onforminput="value = a.value * b.value"&gt;0&lt;/output&gt;
 &lt;/p&gt;
&lt;/form&gt;
</pre>

   <p>This would work something like the following:</p>

   <form action=""><script type="text/javascript">
     function outputExampleUpdate(event) {
      with (event.target.form)
        document.getElementById('outputExampleResult').firstChild.data = a.value * b.value;
     }
    </script>
    <p> <input name="a" onchange="outputExampleUpdate(event)" value="0"> *
     <input name="b" onchange="outputExampleUpdate(event)" value="0"> = <span
     id="outputExampleResult">0</span>
   </form>

   <p class="note">The <code><a href="#forminput">forminput</a></code> event
    is defined in the section on new events.</p>
  </div>

  <p>Authors may provide a list of space-separated IDs in a <dfn
   id="for"><code>for</code></dfn> attribute that represents the list of
   elements that control the value of the <code><a
   href="#output0">output</a></code> element. User agents may use this list
   to suggest to users the relevant parts of the document with which the user
   should interact to change the value.

  <div class="example">
   <p>In the following example, the <code><a
    href="#output0">output</a></code> element is used to indicate the
    relationship between the given value and the later prose. The number
    cannot be changed directly by the user, but the specified element
    describes the process through which the user could change the value.</p>

   <pre>
...
&lt;p&gt;Your fax number is &lt;output for="fax"&gt;&lt;em&gt;+1&lt;/em&gt; 650 555 1234&lt;/output&gt;.&lt;/p&gt;
...
&lt;p id="fax"&gt;To change your fax number, you must send us a fax
from your new number with a signed request that your fax number
details be changed. We will then call you to confirm the
change.&lt;/p&gt;
</pre>

   <p>Note the <code>em</code> element in the markup emphasising a part of
    the number. Markup like this is allowed inside <code><a
    href="#output0">output</a></code> elements.</p>
  </div>

  <p>Whenever the <code title="dom-output-value"><a
   href="#value">value</a></code> attribute changes (whether directly or
   because the DOM under the element was mutated), a <code>change</code>
   event is fired on the <code><a href="#output0">output</a></code> element.
   The <code>onchange</code> attribute can therefore be used with this
   element, in the same way as for other form controls.

  <p><strong>Usage:</strong> The <code><a href="#output0">output</a></code>
   element should be used when the user will never directly manipulate the
   value, and when the value can be derived from other values (e.g. a total),
   or, when the value is a repetition of a value editable elsewhere (e.g. a
   fax number that the user can edit on the site's preferences page).

  <p>Contrast this with the <code><a href="#readonly">readonly</a></code>
   attribute, which should be used on controls that the user should not
   change, but which need to be submitted to the server (such as an ID number
   when editing a record), and the <code><a
   href="#disabled">disabled</a></code> attribute, which should be used on
   controls that the user cannot change and that are not to be submitted
   (controls that could be edited in some cases, for instance if the user had
   more privileges, but that are irrelevant at the current point in time).

  <h3 id="extensions1"><span class="secno">2.14. </span>Extensions to the
   <code>textarea</code> element</h3>

  <p>The <code>rows</code> and <code>cols</code> attributes of the
   <code>textarea</code> element are no longer required attributes. When
   unspecified, CSS-compliant browsers should lay the element out as
   specified by CSS, and non-CSS UAs may use UA-specific defaults, such as,
   for visual UAs, using the available width on the page and a height
   suitable for the device.

  <p>The <code>textarea</code> element may have a <dfn
   id="wrap"><code>wrap</code></dfn> attribute specified. This attribute
   controls the wrapping behaviour of submitted text.

  <dl>
   <dt><dfn id="soft"><code>soft</code></dfn>

   <dd>This is the default value. The text is submitted without line breaks
    other than explicitly entered line breaks. (In other words, the submitted
    text is exactly as found in the DOM.)

   <dt><dfn id="hard"><code>hard</code></dfn>

   <dd>The text is submitted with the explicit line breaks, and also with
    line breaks added to wrap the text at the width given by the
    <code>cols</code> attribute. (These additional line breaks can't be seen
    in the DOM.)
  </dl>

  <p>Authors should always specify a <code>cols</code> attribute when the
   <code><a href="#wrap">wrap</a></code> attribute is set to <code><a
   href="#hard">hard</a></code>. When <code>wrap="hard"</code> is specified
   without a <code>cols</code> attribute, user agents should use the display
   width when wrapping the text for submission. This will typically mean that
   different users submit text at different wrapping widths, defeating much
   of the purpose of client-side wrapping.

  <p>CSS UAs should <em>render</em> <code>textarea</code> elements as
   specified by the <code>'white-space'</code> property, although UAs may
   have rules in their UA stylesheet that set the default 'white-space'
   property values based on the <code><a href="#wrap">wrap</a></code> element
   for <code>textarea</code> elements.

  <p id="textarea-newline-submit">A newline in a <code>textarea</code>
   submission must be delimited by the two code points U+000D U+000A (CRLF).
   This includes the implied newlines that are added for submission when the
   <code><a href="#wrap">wrap</a></code> attribute has the value <code><a
   href="#hard">hard</a></code>. This also affects <a
   href="#textarea-newline-maxlength">how newlines are handled for the
   <code>maxlength</code> attribute</a>, which applies to
   <code>textarea</code> controls.

  <p>Authors may include an <dfn id="accept"><code>accept</code></dfn>
   attribute on <code>textarea</code> elements to indicate the type of
   content expected. User agents may use this attribute to provide more
   appropriate editors, syntax highlighting, spelling checkers, etc. The
   value of the attribute must be a single text-based MIME type (for example,
   <code>text/plain</code>, <code>message/news</code>,
   <code>image/svg+xml</code>). The default, if the attribute is omitted or
   if the value is not recognised by the UA, shall be
   <code>text/plain</code>. <a href="#refsRFC2046">[RFC2046]</a>

  <h3 id="upload"><span class="secno">2.15. </span>Extensions to file upload
   controls</h3>

  <p>The <code><a href="#min">min</a></code> and <code><a
   href="#max">max</a></code> attributes apply to file upload controls
   (<code>input</code> elements of type <dfn
   id="file"><code>file</code></dfn>) and specify (using non-negative
   integers) how many files must be attached for the control to be valid.
   They default to 0 and 1 respectively (and so limit the default number of
   files to 1 optional file, as per most existing implementations in early
   2004). The defaults are used when the attributes are omitted or have
   non-integer or negative integer values. The <code><a
   href="#rangeunderflow">rangeUnderflow</a></code> and <code><a
   href="#rangeoverflow">rangeOverflow</a></code> flags are used to indicate
   when fields do not have the specified number of files selected.

  <p class="note">There is currently no way to specify that an unlimited
   number of files may be uploaded. Authors are encouraged to consider what
   the practical limit actually is for their server-side script. For example,
   if the server uses an unsigned 16 bit integer to track file uploads, a
   suitable <code><a href="#max">max</a></code> value would be
   <code>65536</code>.

  <p>The <code><a href="#required0">required</a></code> attribute applies to
   file upload controls; it is only satisfied when at least one valid file
   (that is, one that will actually be uploaded if the form is submitted) is
   selected, irrespective of the <code><a href="#min">min</a></code> and
   <code><a href="#max">max</a></code> attributes.

  <p>Non-existent files and files the UA won't be able to upload (for
   whatever reason), when specified in file upload controls, do not count
   towards the number of files selected for the purposes of <code><a
   href="#min">min</a></code> and <code><a href="#max">max</a></code>, and
   are not submitted. It is recommended that user agents report problems of
   this nature to the user. There is no way for scripts to detect this
   situation because that would open the way for some privacy or security
   leaks.

  <p>The <code><a href="#maxlength">maxlength</a></code> attribute applies to
   file upload controls. It specifies the maximum size, in bytes, of each
   file.

  <p>The <dfn id="accept0"><code>accept</code></dfn> attribute may be used to
   specify a comma-separated list of content types that a server processing
   the form will handle correctly. <a href="#refsRFC2046">[RFC2046]</a> This
   attribute was specified in HTML4. <a href="#refsHTML4">[HTML4]</a> In this
   specification, this attribute is extended as follows:

  <ul>
   <li> In addition to specific MIME types, MIME ranges may be used, either
    where the subtype is <code>*</code>, or where the whole string is
    <code>*/*</code>. For example:
    <pre class="example">&lt;input type="file" name="avatar"
    accept="<em><a href="#image">image/*</a></em>"/&gt;</pre>
    In this way, the <code><a href="#accept0">accept</a></code> attribute may
    be used to specify that the server is expecting (say) images or sound
    clips, without specifying the exact list of types.

   <li>The values in the <code><a href="#accept0">accept</a></code> attribute
    must not have any MIME type parameters. The syntax of the attribute,
    therefore, is (in pseudo-BNF):
    <pre>accept  := space* range [ space* "," space* range]* space*
range   := "*/*" | type "/*" | subtype "/" type
space   := U+0020 | U+000A
type    := <em>defined in RFC2045</em> <a href="#refsRFC2045">[RFC2045]</a>
subtype := <em>defined in RFC2045</em> <a href="#refsRFC2045">[RFC2045]</a></pre>

   <li>UAs should use the list of acceptable types in constructing a filter
    for a file picker, if one is provided to the user.

   <li>If the UA wishes to let the user create the file prior to upload, it
    should use the <code><a href="#accept0">accept</a></code> attribute's
    MIME type list to determine which application to use.
    <div class="example">
     <p>One recent use for sound file upload has been the concept of
      <em>audio blogging</em>. This is similar to straight-forward Web
      logging, or diary writing, but instead of submitting textual entries,
      one submits sound bites.</p>

     <p>The submission interface to such a system could be written as
      follows:</p>

     <pre>
&lt;form action="/weblog/submit" method="post" enctype="multipart/form-data"&gt;
&lt;label&gt;
Attach your audio-blog sound file:
&lt;input type="file" name="blog" accept="audio/*"/&gt;
&lt;/label&gt;
&lt;input type="submit" value="Blog!"/&gt;
&lt;/form&gt;
</pre>

     <p>A compliant UA could, upon encountering this form, provide a "Record"
      button instead of, or in addition to, the more usual "Browse" button.
      Selecting this button could then bring up a sound recording
      application.</p>
    </div>

    <p>This is expected to be most useful on small devices that do not have
     file systems and for which the only way of handling file upload is to
     generate the content on the fly.</p>

   <li>The <code><a href="#typemismatch">typeMismatch</a></code> flag is used
    to indicate that at least one of the selected files does not have a MIME
    type conforming to one of the MIME types or MIME ranges listed as
    acceptable. UAs may allow the user to override the MIME type to be one of
    the allowable types if the file is originally incorrectly
    labeled<!-- (but should not allow users to override the type merely
   to let submission continue, as that would defeat the point of
   having a restriction in the first place)-->.

   <li>If an <code><a href="#accept0">accept</a></code> attribute is set on a
    <code>form</code> element, it sets the default for any file upload
    controls in that form. If a file upload control has a valid <code><a
    href="#accept0">accept</a></code> attribute, its value is used and the
    relevant form element's <code><a href="#accept0">accept</a></code>
    attribute is ignored for that control. If a file upload control has an
    <code><a href="#accept0">accept</a></code> attribute but it is invalid,
    then the value <code>*/*</code> is assumed instead, and the form's
    <code><a href="#accept0">accept</a></code> attribute is ignored.
  </ul>

  <p>If the file upload process fails, UAs should report this failure to the
   user in a useful and accessible manner, as with any failed submission.

  <p id="anonymous-files">If a file selected for upload does not have an
   explicit file name (for example because the user agent allowed the user to
   create the submitted file on the fly) then the file name shall be the
   empty string for the purposes of submission.

  <h3 id="extensions2"><span class="secno">2.16. </span>Extensions to the
   <code>form</code> element</h3>

  <p id="optionalAction">The <code>form</code> element's <code>action</code>
   attribute is no longer a required attribute. Authors may omit it. When the
   attribute is absent, UAs must act as if the <code>action</code> attribute
   was the empty string, which is a relative URI reference, and would thus
   point to the current document (or the specified base URI, if any).

  <div class="example">
   <p>In the following XML example, the form would submit to
    <code>http://search.example.com/</code>, whatever the URI of the current
    page.</p>

   <pre>&lt;form xml:base="http://search.example.com/"&gt;
 &lt;p>&lt;input type="submit">&lt;/p>
&lt;/form></pre>
  </div>

  <p>To support incremental updates of forms, a new attribute is introduced
   on the <code>form</code> element: <dfn
   id="replace"><code>replace</code></dfn>. This attribute takes two values:

  <dl>
   <dt>document

   <dd>The default value. The entire document (as specified by the
    <code>target</code> attribute when the document uses frames or windows)
    is replaced by the return value.

   <dt>values

   <dd>The body returned from the server is treated as a new data file for
    prefilling the form.
  </dl>

  <p class="note">These names, and their exact semantics, differ from those
   of the equivalent attribute in XForms 1.0 (the <code><a
   href="#replace">replace</a></code> attribute on the <code
   title="">submission</code> element). The equivalent of
   <code>document</code> in this specification is <code>all</code> in XForms,
   and the equivalent of <code>values</code> is <code>instance</code>. The
   equivalent of the XForms <code>none</code> value is <code>document</code>
   with the server returning an HTTP 204 No Content return code.

  <p>The exact semantics are described in detail in <a
   href="#form-submission">the section on submission</a>, under <a
   href="#replaceSemantics">step eight</a>.

  <h3 id="extensions3"><span class="secno">2.17. </span>Extensions to the
   submit buttons</h3>

  <p>Normally, activating a submit button (an <code>input</code> or
   <code>button</code> element with the <code>type</code> attribute set to
   <code><a href="#submit">submit</a></code>, or an <code>input</code>
   element with the <code>type</code> attribute set to <code><a
   href="#image">image</a></code>) must submit the first form the control is
   associated with, using the form's submission details (<code>action</code>,
   <code>method</code>, <code>enctype</code>, and <code><a
   href="#replace">replace</a></code> attributes).

  <p>In some cases, authors would like to be able to submit a form to
   different processors, using different submission methods, or not replacing
   the form but just updating the details with new data. For this reason, the
   following attributes may be used on submit buttons: <code>action</code>,
   <code>method</code>, <code>enctype</code>, <code><a
   href="#replace">replace</a></code>, and <code>target</code>.

  <p>If a submit button is activated, then the submission must use the values
   as given by the button that caused the activation. For missing attributes,
   the values of the equivalent attributes on the relevant <code>form</code>
   element, if any, are used instead.

  <p>If the submit button is not associated with any form, then no form is
   submitted.

  <h3 id="handling"><span class="secno">2.18. </span>Handling unexpected
   elements and values</h3>

  <p>There are several elements that are defined as expecting particular
   elements as children. Using the DOM, or in the markup, it is sometimes
   possible for authors to violate these expectations and place elements in
   unexpected places.

  <p>Similarly, attributes are defined to accept values that conform to
   certain syntaxes, but it is possible for authors to violate these
   constraints.

  <p>Authors must not do this. User agent implementors may curse authors who
   violate these rules, and may persecute them to the full extent allowed by
   applicable international law.

  <p>Upon encountering incorrect constructs, UAs must proceed as follows:

  <dl>
   <dt>For parsing errors in HTML

   <dd>This document does not specify exact parsing semantics for ambiguous
    cases that are not covered by SGML. UA implementors should divine
    appropriate behaviour by reverse engineering existing products and
    attempting to emulate their behaviour. (This does not apply to XHTML,
    since the XML specification specifies mandatory formal error handling
    rules.)

   <dt>For non-empty <code>form</code> elements in <code>head</code> elements
    in XHTML

   <dd>Typically UAs are expected to hide all the contents of
    <code>head</code> elements. No other special behaviour is required to
    cope with this case; if the author overrides this hiding (e.g. through
    CSS) then the form must behave like any other form. (This does not apply
    to HTML, where a <code>form</code> in a <code>head</code> would, per SGML
    parsing rules, imply a <code>body</code> start tag.)

   <dt>For non-empty <code>input</code> elements

   <dd>By default, the form control must be rendered, and the contents of the
    element must not be. Using CSS3 Generated Content <a
    href="#refsCSS3CONTENT">[CSS3CONTENT]</a> or XBL <a
    href="#refsXBL">[XBL]</a>, however, it is possible for the author to
    override this behaviour.

   <dt>For <code><a href="#output0">output</a></code> elements containing
    elements in the DOM

   <dd>The <code title="dom-output-defaultValue"><a
    href="#defaultvalue">defaultValue</a></code> DOM attribute <a
    href="#outputDefaultValue">must be initialized</a> from the DOM3 Core
    <code>textContent</code> attribute (<a
    href="#refsDOM3CORE">[DOM3CORE]</a>). Setting the element's <code
    title="dom-output-value"><a href="#value">value</a></code> attribute must
    be identical to setting the DOM3 Core <code>textContent</code> attribute.
    While the element contains elements, they are rendered according to the
    CSS rules.

   <dt>For <code>textarea</code> elements containing tags in HTML

   <dd>The tags should be parsed as character data, but entities and comments
    should be recognised and handled correctly. (This doesn't apply to XHTML,
    since it would contravene XML parsing rules.)

   <dt>For <code>textarea</code> elements containing elements in the DOM

   <dd>The <code title="dom-textarea-defaultValue"><a
    href="#defaultvalue1">defaultValue</a></code> DOM attribute is identical
    to the <code>textContent</code> DOM attribute both for reading and
    writing, and is used to set the initial <code>value</code>. The rendering
    is based on the <code>value</code> DOM attribute, not the contents of the
    element, unless CSS is used to override this somehow.

   <dt>For <code>select</code> and <code>optgroup</code> elements containing
    nodes other than <code>option</code> and <code>optgroup</code> elements

   <dd>Only the <code>option</code> and <code>optgroup</code> elements take
    part in the <code>select</code> semantics. Unless otherwise forced to
    appear by a stylesheet, other child nodes are never visible.

   <dt>For <code>option</code> elements containing nodes other than text
    nodes

   <dd>The value of the control, if not specified explicitly, must be
    initialized using the <code>textContent</code> DOM attribute's value.
    <p>How such markup should be rendered is undefined. Two possibilities are
     sensible: rendering the content normally, just as it would have been
     outside the form control; and rendering the initial value (the value
     stored in the DOM <code title="dom-defaultValue">defaultValue</code>
     attribute) only, with the rest of the content not displayed (unless
     forced to appear through some CSS).</p>
    <!--
   <p class="note">While <a href="data:application/xhtml+xml;base64,PGh0bWwgbGFuZz0iZW4iIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4NCiA8aGVhZD4NCiAgPHRpdGxlPkEgZm9ybSBuZXN0ZWQgaW4gYSBzZWxlY3QgZWxlbWVudDwvdGl0bGU%2BDQogPC9oZWFkPg0KIDxib2R5Pg0KICA8cD4NCiAgIDxzZWxlY3Q%2BDQogICAgPG9wdGlvbj4NCiAgICAgUGl6emENCiAgICAgPGZvcm0gYWN0aW9uPSJodHRwOi8vc29mdHdhcmUuaGl4aWUuY2gvdXRpbGl0aWVzL2NnaS90ZXN0LXRvb2xzL2VjaG8iPg0KICAgICAgPGxhYmVsPiBUb3BwaW5nOg0KICAgICAgIDxzZWxlY3Q%2BDQogICAgICAgIDxvcHRpb24%2BIENoZWVzZSA8L29wdGlvbj4NCiAgICAgICAgPG9wdGlvbj4gU2FsYW1pIDwvb3B0aW9uPg0KICAgICAgIDwvc2VsZWN0Pg0KICAgICAgPC9sYWJlbD4NCiAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiLz4NCiAgICAgPC9mb3JtPg0KICAgIDwvb3B0aW9uPg0KICAgIDxvcHRpb24%2BIEJyZWFkIDwvb3B0aW9uPg0KICAgIDxvcHRpb24%2BIFdpbmUgPC9vcHRpb24%2BDQogICA8L3NlbGVjdD4NCiAgPC9wPg0KIDwvYm9keT4NCjwvaHRtbD4%3D">nesting a form inside a <code>select</code> control</a> may look cool, it is extremely poor UI and must not be encouraged.</p>
-->
    

   <dt>For <code>option</code> and <code>optgroup</code> elements that are
    not inside <code>select</code> elements

   <dd>The elements should be rendered much the same as <code>span</code>
    elements.

   <dt>For <code><a href="#accept0">accept</a></code> attributes that are
    invalid

   <dd>The given value is what must be used in the DOM and elsewhere, but it
    must be interpreted as <code>*/*</code> when doing comparisons with
    actual MIME types, e.g. to filter a file list or when validating the
    control prior to submission.

   <dt id="errInvalidValue">For <code>value</code> attributes that are
    invalid according to the <code>type</code> attribute

   <dd>The attribute must be ignored. It will appear in the DOM for the <code
    title="dom-input-defaultValue"><a
    href="#defaultvalue0">defaultValue</a></code> attribute, but will not be
    used as the value of the control. The control will therefore initially
    have <span><a href="#no-value">no value selected</a></span>.

   <dt id="errOORValue">For <code>value</code> attributes that are invalid
    according to the <code><a href="#min">min</a></code>, <code><a
    href="#max">max</a></code>, <code><a href="#step">step</a></code>,
    <code><a href="#maxlength">maxlength</a></code>, etc, attributes

   <dd>The control must be set to that value. The form will not submit with
    that value, though. If the control cannot be set to that value (for
    example, a range control cannot represent values outside its range) then
    the value must be clamped to the nearest value that can be represented by
    the control. (This situation can also arise if these attributes are
    dynamically updated using the DOM.)

   <dt>For labels pointing (via <code title="">for</code>) to elements that
    are not form controls

   <dd>The attribute must be ignored. It will appear in the DOM (including as
    the value of <code>htmlFor</code>) but the <code title="dom-control"><a
    href="#control">control</a></code> DOM attribute must return null and
    activating the label must not send focus to the associated element.

   <dt>For labels with no <code title="">for</code> attributes and containing
    more than one form control

   <dd>The <code title="dom-control"><a href="#control">control</a></code>
    DOM attribute must return, and activating the label, if supported, must
    transfer focus to or activate, the first control in a depth-first search
    of the label's children.

   <dt>For labels containing other labels

   <dd>As events bubble from the target node, user agents must make the
    default action of the event be the action that would be appropriate for
    the first <code>label</code> element that the event bubbles through. In
    other respects, nested labels are oblivious to each other. Note that in
    HTML, parsers typically treat a <code>&lt;label&gt;</code> opening tag as
    implying a closing tag for any already open label.

   <dt>For other attributes that contain invalid values

   <dd>The attribute must be ignored. It will appear in the DOM, but not
    affect the form semantics. For example, if a <code><a
    href="#min">min</a></code> attribute on a <code><a
    href="#datetime">datetime</a></code> control is an integer instead of a
    date and time string, then the range has no minimum. If the
    <code>type</code> attribute is then changed to <code><a
    href="#number">number</a></code>, then the attribute would take effect.

   <dt>For other instances of elements that violate their content models

   <dd>The user agent processing model is defined in terms of the DOM and is
    independent of whether content models are being violated or not.
    Behaviour is therefore fully defined even for invalid content.
  </dl>

  <p>Other invalid cases should be handled analogously.

  <h2 id="repeatingFormControls"><span class="secno">3. </span>The repetition
   model for repeating form controls</h2>

  <p>Occasionally forms contain repeating sections. For example, an order
   form could have one row per item, with product, quantity, and subtotal
   fields. The <dfn id="repeating">repeating form controls model</dfn>
   defines how such a form can be described without resorting to scripting.

  <p class="note">The entire model can be emulated purely using JavaScript
   and the DOM. With such a library, this model could be used and down-level
   clients could be supported before user agents implemented it ubiquitously.
   Creating such a library is left as an exercise for the reader.

  <h3 id="introduction1"><span class="secno">3.1. </span>Introduction for
   authors</h3>

  <p><em>This subsection is not normative.</em>

  <p>Occasionally, a form may need a section to be repeated an arbitrary
   number of times. For example, an order form could have one row per item.
   Traditionally, this has been implemented either by using complex
   client-side scripts or by sending a request to the server for every new
   row.

  <p>Using the mechanisms described in this section, the problem is reduced
   to describing a template in the markup, and then specifying where and when
   that template should be repeated.

  <p>To explain this, we will step through an example. Here is a sample form
   with three rows:

  <pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Sample Order Form&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;form&gt;
   &lt;table&gt;
    &lt;tr&gt;
     &lt;th&gt;Product&lt;/th&gt;
     &lt;th&gt;Quantity&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;&lt;input type="text" name="row0.product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row0.quantity" value="1"&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;&lt;input type="text" name="row1.product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row1.quantity" value="1"&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;&lt;input type="text" name="row2.product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row2.quantity" value="1"&gt;&lt;/td&gt;
    &lt;/tr&gt;
   &lt;/table&gt;
   &lt;p&gt;&lt;button type="submit"&gt;Submit&lt;/button&gt;&lt;/p&gt;
  &lt;/form&gt;
 &lt;/body&gt;
&lt;/html&gt;
</pre>

  <p>The template for those rows could look something like:

  <pre>
    &lt;tr&gt;
     &lt;td&gt;&lt;input type="text" name="row0.product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row0.quantity" value="1"&gt;&lt;/td&gt;
    &lt;/tr&gt;
</pre>

  <p>...except that then the names would all be the same &mdash; all rows
   would be "row0", so there would be no clear way of distinguishing which
   "quantity" went with which "product" except by the order in which they
   were submitted.

  <p>To get around this, the template is modified slightly:

  <pre>
    &lt;tr <strong>id="order"</strong>&gt;
     &lt;td&gt;&lt;input type="text" name="row<strong>[order]</strong>.product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row<strong>[order]</strong>.quantity" value="1"&gt;&lt;/td&gt;
    &lt;/tr&gt;
</pre>

  <p>The template now has a unique identifier ("order"), and that identifier
   is used to indicate where the row index should be substituted in. When a
   template is replicated, all the attributes containing the template's id
   between square bracket characters (<code>[<var>id</var>]</code>) have that
   ID (and the brackets) replaced by a unique index.

  <p class="note">To prevent an attribute from being processed in this way,
   put a non-breaking zero-width space character (<code>&amp;#xFEFF;</code>)
   at the start of the attribute value. When the template is cloned, that
   character will be removed, but any other text in the attribute will be
   left alone. This could be useful if you have no control over the rest of
   the contents in the attribute, e.g. if it is user configurable text.

  <p>In order to distinguish this row from a normal row, something needs to
   be added to the template to mark it as being a template. This is done
   using a <span><code><a href="#repeat">repeat</a></code> attribute</span>:

  <pre>
    &lt;tr id="order" <strong>repeat="template"</strong>&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].quantity" value="1"&gt;&lt;/td&gt;
    &lt;/tr&gt;
</pre>

  <p>Now we replace the table with that markup:

  <pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Sample Order Form&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;form&gt;
   &lt;table&gt;
    &lt;tr&gt;
     &lt;th&gt;Product&lt;/th&gt;
     &lt;th&gt;Quantity&lt;/th&gt;
    &lt;/tr&gt;
<strong>    &lt;tr id="order" repeat="template"&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].quantity" value="1"&gt;&lt;/td&gt;
    &lt;/tr&gt;</strong>
   &lt;/table&gt;
   &lt;p&gt;&lt;button type="submit"&gt;Submit&lt;/button&gt;&lt;/p&gt;
  &lt;/form&gt;
 &lt;/body&gt;
&lt;/html&gt;
</pre>

  <p>This will make one row appear, because by default templates repeat
   themselves once. We can control how many times the template repeats itself
   using the <span><code><a href="#repeat-start">repeat-start</a></code>
   attribute</span>:

  <pre>
    <em>...</em>
    &lt;tr id="order" repeat="template" <strong>repeat-start="3"</strong>&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].quantity" value="1"&gt;&lt;/td&gt;
    &lt;/tr&gt;
   &lt;/table&gt;
</pre>

  <p>This is now identical to the original example (three rows with empty
   fields will appear). It still isn't dynamic &mdash; there is no way for
   the user to add more rows.

  <p>This can be solved by adding an <code><a href="#add">add</a></code>
   button. The <code><a href="#add">add</a></code> button type adds a copy of
   a template when the user presses the button.

  <p>There are two ways to use <code><a href="#add">add</a></code> buttons.
   The first is by explicitly specifying which template should be replicated:

  <pre>
   &lt;p&gt;&lt;button type="add" <strong>template="order"</strong>&gt;Add Row&lt;/button&gt;&lt;/p&gt;
</pre>

  <p>The template is specified using a <code><a
   href="#template">template</a></code> attribute on the <code>button
   type="add"</code> or <code>input type="add"</code> elements. In the
   <code><a href="#template">template</a></code> attribute, you put the ID of
   the template you want the button to affect.

  <p>When such a button is pressed, the template is replicated, and the
   resulting block is inserted just after the last block that is associated
   with the template. For example, there are three rows in the example above,
   so if the user pressed that button, the new block would be inserted just
   after the third one.

  <p>The second way is by including an <code><a href="#add">add</a></code>
   button inside the template, so that when the template is replicated, the
   button is replicated into the resulting block. When such a button is
   pressed, the template is replicated, and inserted immediately after the
   block in which the button is found. For example, if there were <code><a
   href="#add">add</a></code> buttons in the rows of the example above, and
   someone pressed the button in the first row, a row would be inserted
   between the first row and the second row.

  <p>For this example we will only do it the first way:

  <pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Sample Order Form&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;form&gt;
   &lt;table&gt;
    &lt;tr&gt;
     &lt;th&gt;Product&lt;/th&gt;
     &lt;th&gt;Quantity&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr id="order" repeat="template" repeat-start="3"&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].quantity" value="1"&gt;&lt;/td&gt;
    &lt;/tr&gt;
   &lt;/table&gt;
<strong>   &lt;p&gt;&lt;button type="add" template="order"&gt;Add Row&lt;/button&gt;&lt;/p&gt;</strong>
   &lt;p&gt;&lt;button type="submit"&gt;Submit&lt;/button&gt;&lt;/p&gt;
  &lt;/form&gt;
 &lt;/body&gt;
&lt;/html&gt;
</pre>

  <p>Now the user can add more rows, but he cannot remove them. Removing rows
   is done via the <code><a href="#remove">remove</a></code> button type.
   When a user presses such a button, the row in which the button is kept is
   removed from the document.

  <pre>
  &lt;button type="remove"&gt;Remove This Row&lt;/button&gt;
</pre>

  <p>This is added to the template so that it appears on every row:

  <pre>
    &lt;tr id="order" repeat="template" repeat-start="3"&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].quantity" value="1"&gt;&lt;/td&gt;
<strong>     &lt;td&gt;&lt;button type="remove"&gt;Remove This Row&lt;/button&gt;&lt;/td&gt;</strong>
    &lt;/tr&gt;
</pre>

  <p>The final result looks like this:

  <pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Sample Order Form&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;form&gt;
   &lt;table&gt;
    &lt;tr&gt;
     &lt;th&gt;Product&lt;/th&gt;
     &lt;th&gt;Quantity&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr id="order" repeat="template" repeat-start="3"&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].quantity" value="1"&gt;&lt;/td&gt;
     &lt;td&gt;&lt;button type="remove"&gt;Remove This Row&lt;/button&gt;&lt;/td&gt;
    &lt;/tr&gt;
   &lt;/table&gt;
   &lt;p&gt;&lt;button type="add" template="order"&gt;Add Row&lt;/button&gt;&lt;/p&gt;
   &lt;p&gt;&lt;button type="submit"&gt;Submit&lt;/button&gt;&lt;/p&gt;
  &lt;/form&gt;
 &lt;/body&gt;
&lt;/html&gt;
</pre>

  <p>If the user pressed "Add" once, removed the middle two rows, typed in
   some garbage in the two "product" text fields, and pressed "Submit", the
   user agent would submit the following name-value pairs:

  <pre>
row0.product=some
row0.quantity=1
row3.product=garbage
row3.quantity=1
</pre>

  <p>Further examples are given in the <a href="#repeatExamples">examples
   section</a> below.

  <h4 id="more-features"><span class="secno">3.1.1. </span>More features</h4>

  <p>The repetition model supports more than just the cases given above; for
   instance, there are <code><a href="#move-up">move-up</a></code> and
   <code><a href="#move-down">move-down</a></code> buttons that can be
   inserted inside templates much like the <code><a
   href="#remove">remove</a></code> button but for moving rows up and down.

  <p>Repetition templates can also be nested. The concept of hierarchy is
   expected to be represented in the names, as it is in manually-created
   repeating forms; for example:

  <pre>
order0.name
order0.quantity
order0.comment0.text
order0.comment1.text
order1.name
order1.quantity
order1.comment0.text
</pre>

  <p>That way the submission can remain compatible with the long-established
   <code>multipart/form-data</code>, yet not lose the structure of the data.

  <p class="note">The naming schemes used above are arbitrary. Any naming
   scheme could be used, at the convenience of the author.

  <h4 id="suggestions"><span class="secno">3.1.2. </span>Suggestions for
   authors</h4>

  <p>To include prefilled rows in the document, include copies of the row
   with <code><a href="#repeat">repeat</a></code> attributes having the value
   of the repetition index you want to use for that block.

  <div class="example">
   <p>For example, here is a prefilled version of the earlier table, with one
    row having index "1" with the text "Tom figurine" in the first field and
    "12" in the second, and with a second row having index "2" and values
    "Jerry figurine" and "5".</p>

   <pre>...
   &lt;table&gt;
    &lt;tr&gt;
     &lt;th&gt;Product&lt;/th&gt;
     &lt;th&gt;Quantity&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr repeat="<strong>1</strong>"&gt;
     &lt;td&gt;&lt;input type="text" name="row<strong>1</strong>.product" value="Tom figurine"&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row<strong>1</strong>.quantity" value="12"&gt;&lt;/td&gt;
     &lt;td&gt;&lt;button type="remove"&gt;Remove This Row&lt;/button&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr repeat="2"&gt;
     &lt;td&gt;&lt;input type="text" name="row2.product" value="Jerry figurine"&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row2.quantity" value="5"&gt;&lt;/td&gt;
     &lt;td&gt;&lt;button type="remove"&gt;Remove This Row&lt;/button&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr id="order" repeat="template" repeat-start="1"&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].product" value=""&gt;&lt;/td&gt;
     &lt;td&gt;&lt;input type="text" name="row[order].quantity" value="1"&gt;&lt;/td&gt;
     &lt;td&gt;&lt;button type="remove"&gt;Remove This Row&lt;/button&gt;&lt;/td&gt;
    &lt;/tr&gt;
   &lt;/table&gt;
...</pre>
  </div>

  <p>Prefilled rows must go <em>before</em> the template.

  <p>Prefilled rows can contain any content; it need not match the template.
   In order to be considered a part of the repetition model, however, the row
   must have a <code><a href="#repeat">repeat</a></code> attribute with a
   numeric value. That value can be any integer. (For example, you could use
   "-1" as the value of all prefilled rows.)

  <p>In HTML4-compliant UAs that do not implement this specification, the
   template acts as an initial blank row, and the "add" and "remove", buttons
   cause the form to be submitted, allowing the server to simulate the
   insertion and removal of rows.

  <p class="note">The add and remove buttons act as submit buttons in
   compliant HTML4 UAs only if <code>button</code> elements are used. If
   <code>input</code> buttons are used, then legacy UAs will instead render
   the controls as text fields. It is thus recommended that authors use
   <code>button</code> elements.

  <h4 id="what-the"><span class="secno">3.1.3. </span>What the repetition
   model can't do</h4>

  <p>This specification does not address the ability to select a repetition
   block to move it up or down without using buttons directly associated with
   the current block.

  <h3 id="definitions"><span class="secno">3.2. </span>Definitions</h3>

  <p class="note">This section makes a number of references to namespaces.
   For authors who are only using HTML or XHTML, the definitions below ensure
   that no namespaces need appear in the document (except the namespace on
   the root element). Thus, such a reader can simply gloss over the parts
   that mention namespaces.

  <p>Several new global attributes are introduced as part of the repetition
   model: <code><a href="#repeat">repeat</a></code>, <code><a
   href="#repeat-start">repeat-start</a></code>, <code><a
   href="#repeat-min">repeat-min</a></code>, <code><a
   href="#repeat-max">repeat-max</a></code>, and <code><a
   href="#repeat-template">repeat-template</a></code>. When placed on
   elements in the <code>http://www.w3.org/1999/xhtml</code> namespace, they
   must be namespace-free attributes, and when placed on other elements, they
   must be attributes in the <code>http://www.w3.org/1999/xhtml</code>
   namespace.

  <p>The most important one is the <dfn id="repeat"><code>repeat</code></dfn>
   attribute. The effect of this attribute depends on its value, which can be
   either the literal string "<code><a href="#template">template</a></code>",
   or an integer.

  <h4 id="repetition"><span class="secno">3.2.1. </span>Repetition templates</h4>

  <p>An element in the <code>http://www.w3.org/1999/xhtml</code> namespace
   with the <span><code><a href="#repeat">repeat</a></code> attribute</span>
   in no namespace, or an element in any other namespace with the <code><a
   href="#repeat">repeat</a></code> attribute in the
   <code>http://www.w3.org/1999/xhtml</code> namespace, with the attribute's
   value equal to <code><a href="#template">template</a></code>, is a <dfn
   id="repetition2">repetition template</dfn>.

  <p>Repetition templates may occur anywhere. They are not specifically
   associated with any form.

  <p>Every template has an index associated with it. The initial value of a
   template's index is always 0. The index is used to ensure that when
   cloning templates, the new block has a unique ID. The template's index
   does not appear in the markup. (It does, however, appear in the DOM, as
   the <code><a href="#repetitionindex">repetitionIndex</a></code>
   attribute.)

  <p>Unrecognized values must be ignored.

  <pre class="example">
&lt;div repeat="template"/&gt; &lt;!-- A template. --&gt;
&lt;div repeat="template +1 3"/&gt; &lt;!-- Not a template. --&gt;
&lt;div repeat=" template"/&gt; &lt;!-- Not a template (leading whitespace). --&gt;
</pre>

  <p>Authors may use "title" attributes on templates (if they are in the HTML
   namespace) to describe their purpose. Assistive technologies may then use
   these descriptions to help users. (Note, though, that such titles would
   get propagated to the repetition blocks too.)

  <h4 id="repetition0"><span class="secno">3.2.2. </span>Repetition blocks</h4>

  <p>An element in the <code>http://www.w3.org/1999/xhtml</code> namespace
   with the <span><code><a href="#repeat">repeat</a></code> attribute</span>
   in no namespace, or an element in any other namespace with the <dfn
   id="repeat0" title="repetition block repeat"><code>repeat</code></dfn>
   attribute in the <code>http://www.w3.org/1999/xhtml</code> namespace, with
   the attribute's value equal to an integer (an optional leading '-'
   character followed by one or more decimal digits), is a <dfn
   id="repetition3">repetition block</dfn>.

  <p>Repetition blocks may have a <dfn
   id="repeat-template"><code>repeat-template</code></dfn> attribute to
   specify a template that the block is to be associated with. If the
   document contains an element with an ID equal to the value of the <code><a
   href="#repeat-template">repeat-template</a></code> attribute, and that
   element is a <span><a href="#repetition2">repetition template</a></span>,
   then that is the template that the repetition block is associated with.
   (In the case of duplicate IDs, the behaviour should be the same as with
   <code>getElementById()</code>.) Otherwise, if the <code><a
   href="#repeat-template">repeat-template</a></code> attribute does not
   point to a repetition template, then the element is not associated with a
   template.

  <p>Repetition blocks without a <code><a
   href="#repeat-template">repeat-template</a></code> attribute are
   associated with their first following sibling that is a repetition
   template, if there is one.

  <p>Repetition blocks that don't have an associated template are called <dfn
   id="orphan">orphan repetition blocks</dfn>. They can take part in the
   deletion and movement aspects of the repetition model, but not addition.

  <p>Every repetition block has an index associated with it. The index's
   initial value is the value of the <code title="repetition block repeat"><a
   href="#repeat0">repeat</a></code> attribute.

  <pre class="example">
&lt;div&gt;
 &lt;div repeat="0"/&gt; &lt;!-- A simple repetition block, index 0. --&gt;
 &lt;div repeat="-5"/&gt; &lt;!-- Another, index -5 --&gt;
 &lt;div repeat="2"/&gt; &lt;!-- A simple repetition block, index 2. --&gt;
 &lt;div repeat="nothing"/&gt; &lt;!-- Just a normal element. --&gt;
 &lt;div repeat=" 3"/&gt; &lt;!-- Another normal element (leading whitespace). --&gt;
 &lt;div repeat="template"/&gt; &lt;!-- The template for the last few elements. --&gt;
 &lt;div repeat="1"/&gt; &lt;!-- Orphan repetition block, index 1. --&gt;
&lt;/div&gt;
&lt;div repeat="0"/&gt; &lt;!-- Orphan repetition block, index 0. --&gt;
</pre>

  <h3 id="new-form"><span class="secno">3.3. </span>New form controls</h3>

  <p>Several new button types are introduced to support the repetition model.
   These values are valid types for both the <code>button</code> element and
   the <code>input</code> element.

  <dl>
   <dt><dfn id="add"><code>add</code></dfn>

   <dd>Adds a new repetition block.

   <dt><dfn id="remove"><code>remove</code></dfn>

   <dd>Removes the nearest ancestor repetition block.

   <dt><dfn id="move-up"><code>move-up</code></dfn>

   <dd>Moves the nearest ancestor repetition block up one.

   <dt><dfn id="move-down"><code>move-down</code></dfn>

   <dd>Moves the nearest ancestor repetition block down one.
  </dl>

  <p>These control types can never be <a href="#successful">successful</a>.

  <p>When these new types are used with <code>input</code> buttons, the
   <code>value</code> attribute shall, if present, provide the button caption
   (although this may be further overridden by the stylesheet). When the
   <code>value</code> attribute is absent, the buttons should be given
   locale-dependent default labels, in the same way as <code><a
   href="#submit">submit</a></code> and <code>reset</code> buttons.

  <p>However, user agents may instead render buttons consistent with those
   performing equivalent functions in the user's operating environment. For
   this reason, authors who are nesting repetition blocks should position
   such buttons carefully to make clear which block a button applies to.

  <p>Invoking these buttons generates events (such as <code>click</code>), as
   specified by the DOM specifications. The default action for these events
   is to act as described below. However, if the event is canceled, then the
   default action will not occur.

  <p>In addition, to support the <code><a href="#add">add</a></code> type, a
   new attribute is introduced to the <code>button</code> and
   <code>input</code> elements: <code><a
   href="#template">template</a></code>.

  <dl>
   <dt><dfn id="template"><code>template</code></dfn>

   <dd>Specifies the repetition template to use.
  </dl>

  <p>These new types and attributes are described in more detail in the next
   few sections.

  <h3 id="the-repeat-min"><span class="secno">3.4. </span>The <code><a
   href="#repeat-min">repeat-min</a></code> and <code><a
   href="#repeat-max">repeat-max</a></code> attributes</h3>

  <p>The <dfn id="repeat-min"><code>repeat-min</code></dfn> attribute
   specifies the number of repetition blocks that the <code><a
   href="#remove">remove</a></code> button type will ensure are present each
   time a block is removed. Its value must be a positive integer (one or more
   digits 0-9 interpreted as a base ten number). If the attribute is omitted
   or if it has an invalid value then it is treated as if its value was zero.

  <p>The <dfn id="repeat-max"><code>repeat-max</code></dfn> attribute
   specifies the maximum number of repetition blocks that the <code><a
   href="#add">add</a></code> button type can cause to be present. Its value
   must be a positive integer (one or more digits 0-9 interpreted as a base
   ten number). If the attribute is omitted or if it has an invalid value
   then there is no limit.

  <p>These two attributes have no effect on the repetition model when present
   on elements that do not have a <code><a href="#repeat">repeat</a></code>
   attribute with the value set to <code title="">template</code>.

  <h3 id="event"><span class="secno">3.5. </span>Event interface for
   repetition events</h3>

  <p>The repetition model includes several events. The following interface is
   used by these events.

  <pre class="idl">
/* Similar to the UIEvent interface */
interface <dfn id="repetitionevent">RepetitionEvent</dfn> : Event {
  readonly attribute <code><a href="#repetitionelement0">RepetitionElement</a></code> <code title="dom-RepetitionElement-element"><a href="#element">element</a></code>;
  void               <span><a href="#initrepetitionevent">initRepetitionEvent</a></span>(in DOMString typeArg, 
                                         in boolean canBubbleArg, 
                                         in boolean cancelableArg, 
                                         in RepetitionElement elementArg);
  void               <span><a href="#initrepetitioneventns">initRepetitionEventNS</a></span>(in DOMString namespaceURIArg,
                                           in DOMString typeArg, 
                                           in boolean canBubbleArg, 
                                           in boolean cancelableArg, 
                                           in RepetitionElement elementArg);
};
</pre>

  <p>The <dfn
   id="initrepetitionevent"><code>initRepetitionEvent()</code></dfn> and <dfn
   id="initrepetitioneventns"><code>initRepetitionEventNS()</code></dfn>
   methods have the same behaviours as the <code><a
   href="#initevent">initEvent()</a></code> and <code><a
   href="#initeventns">initEventNS()</a></code> events from <a
   href="#refsDOM3EVENTS">[DOM3EVENTS]</a>.

  <p>The context information for repetition events must be given in the <dfn
   id="element"
   title="dom-RepetitionElement-element"><code>element</code></dfn>
   attribute.

  <h3 id="repetitionModel"><span class="secno">3.6. </span>The repetition
   model</h3>

  <p>A <span><a href="#repetition2">repetition template</a></span> should not
   be displayed. In CSS-aware user agents, this should be achieved by
   including the following rules, or their equivalent, in the UA's user agent
   stylesheet:

  <pre>
@namespace xh url(http://www.w3.org/1999/xhtml);
:not(xh|*)[xh|repeat="template"],
xh|*[|repeat="template"] { display: none; }
</pre>

  <p>Any form controls inside a <span><a href="#repetition2">repetition
   template</a></span> are associated with their forms' <code><a
   href="#templateelements">templateElements</a></code> DOM attributes, and
   are <em>not</em> present in the forms' <code><a
   href="#elements">elements</a></code> DOM attributes. Since controls in the
   <code><a href="#templateelements">templateElements</a></code> attribute
   cannot be <a href="#successful">successful</a>, controls inside repetition
   templates can never be submitted. They also cannot be prefilled directly
   when the form is preseeded. However, see the section on <span
   title="form-data"><a href="#data0">seeding a form with initial
   values</a></span> for details on how repetition blocks can be prefilled.

  <h4 id="addition"><span class="secno">3.6.1. </span>Addition</h4>

  <p>If an <code><a href="#add">add</a></code> button with a <code><a
   href="#template">template</a></code> attribute is activated, and its
   <code><a href="#template">template</a></code> attribute gives the ID of an
   element in the document that is a <span><a href="#repetition2">repetition
   template</a></span> as defined above, then that template's replication
   behaviour is invoked. (Specifically, in scripting-aware environments, the
   template's <code><a
   href="#addrepetitionblock">addRepetitionBlock()</a></code> method is
   called with a null argument.) In the case of duplicate IDs, the behaviour
   should be the same as with <code>getElementById()</code>.

  <p>If an <code><a href="#add">add</a></code> button <em>without</em> a
   <code><a href="#template">template</a></code> attribute is activated, and
   it has an ancestor that is a <span><a href="#repetition3">repetition
   block</a></span> that is not an <span>orphan repetition block</span>, then
   the <span><a href="#repetition2">repetition template</a></span> associated
   with that repetition block has its template replication behaviour invoked
   with the respective repetition block as its argument. (Specifically, in
   scripting-aware environments, the template's <code><a
   href="#addrepetitionblock">addRepetitionBlock()</a></code> method is
   called with a reference to the DOM Element node that represents the
   repetition block.)

  <p>When a template's replication behaviour is invoked (specifically, when
   either its <dfn
   id="addrepetitionblock"><code>addRepetitionBlock()</code></dfn> method is
   called or its <dfn
   id="addrepetitionblockbyindex"><code>addRepetitionBlockByIndex()</code></dfn>
   method is called) the following is performed:

  <ol>
   <li>If the template has no parent node or its parent node is not an
    element, then the method must abort the steps and do nothing.

   <li>The template examines its preceding siblings, up to the start of the
    parent element. For each sibling that is a <span><a
    href="#repetition3">repetition block</a></span> whose associated template
    is this template, if the repetition block's index is greater than or
    equal to the template's index, then the template's index is increased to
    the repetition block's index plus one. The total number of repetition
    blocks associated with this template that were found is used in the next
    step.

   <li>If the repetition template has a <code><a
    href="#repeat-max">repeat-max</a></code> attribute and that attribute's
    value is less than or equal to the number of repetition blocks associated
    with this template that were found in the previous step, the UA must stop
    at this step, returning a null value.

   <li>If this algorithm was invoked via the <code><a
    href="#addrepetitionblockbyindex">addRepetitionBlockByIndex()</a></code>
    method, and the value of the method's index argument is greater than the
    template's index, then the template's index is set to the value of the
    method's index argument.

   <li>A clone of the template is made. The resulting element is the new
    repetition block element.

   <li>If this algorithm was invoked via the <code><a
    href="#addrepetitionblockbyindex">addRepetitionBlockByIndex()</a></code>
    method, the new repetition block element's index is set to the method's
    index argument. Otherwise, the new repetition block element's index is
    set to the template's index.

   <li>If the new repetition block element is in the
    <code>http://www.w3.org/1999/xhtml</code> namespace, then the <code><a
    href="#repeat">repeat</a></code> attribute in no namespace on the cloned
    element has its value changed to the new block's index. Otherwise, the
    <code><a href="#repeat">repeat</a></code> attribute in the
    <code>http://www.w3.org/1999/xhtml</code> namespace has its value changed
    to the new block's index.

   <li>If the new repetition block element is in the
    <code>http://www.w3.org/1999/xhtml</code> namespace, then any <code><a
    href="#repeat-min">repeat-min</a></code>, <code><a
    href="#repeat-max">repeat-max</a></code>, or <code><a
    href="#repeat-start">repeat-start</a></code> attributes in no namespace
    are removed from the element. Otherwise, any <code><a
    href="#repeat-min">repeat-min</a></code>, <code><a
    href="#repeat-max">repeat-max</a></code>, or <code><a
    href="#repeat-start">repeat-start</a></code> attributes in the
    <code>http://www.w3.org/1999/xhtml</code> namespace are removed instead.

   <li>If the new repetition block has an ID attribute (that is, an attribute
    specifying an ID, regardless of the attribute's namespace or name), then
    that attribute's value is used as the template name in the following
    steps. Otherwise, the template has no name. (If there is more than one ID
    attribute, the "first" one in terms of <a
    href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DocumentPosition">node
    order</a> is used. <a href="#refsDOM3CORE">[DOM3CORE]</a>)

   <li>If the template has a name (see the previous step), and that name
    contains either an opening square bracket (U+005B, "[") a modifier letter
    half triangular colon (U+02D1, "&#x02D1;"), a closing square bracket
    (U+005D, "]") or a middle dot (U+00B7, "&#x00B7;"), then the template's
    name is ignored for the purposes of the next step.

   <li>If the template has a name and it is not being ignored (see the
    previous two steps), then, for every attribute on the new element, and
    for every attribute in every descendant of the new element: if the
    attribute starts with a zero-width non-breaking space character (U+FEFF)
    then that character is removed from the attribute; otherwise, any
    occurrences of a string consisting of an opening square bracket (U+005B,
    "[") or a modifier letter half triangular colon (U+02D1, "&#x02D1;"), the
    template's name, and a closing square bracket (U+005D, "]") or a middle
    dot (U+00B7, "&#x00B7;"), are replaced by the new repetition block's
    index. This is performed regardless of the types, names, or namespaces of
    attributes, and is done to <em>all</em> descendants, even those inside
    nested forms, nested repetition templates, and so forth.
    <p class="example">For example, if the template is called
     <code>order</code>, and the new repetition block's index has the value
     2, and one of the attributes of one of the descendants of the new
     repetition block is marked up as
     <code>name="order.[order].comment.[comment[order]]"</code>, then the
     attribute's value is changed to <code>order.2.comment.[comment2]</code>.
     However, if the attribute was written as
     <code>name="&amp;#xFEFF;order.[order]"</code>, then its value would have
     only been changed to <code>order[order]</code>, only removing the
     leading character.</p>

    <p class="example">The characters don't have to be paired, so for
     instance, <code>name="field[n&#x00B7;</code> will cause the repetition
     block's index to be put in place of the "<code>[n&#x00B7;</code> string
     (assuming the template is called "n").</p>

    <p class="note">The recommended characters to use for readability are the
     square brackers [ ], but the two dot-like characters are allowed as well
     because those two characters happen to be valid in XML IDs while the
     square brackets are not.</p>

   <li>If the template has a name (see the earlier steps): If the new
    repetition block element is in the
    <code>http://www.w3.org/1999/xhtml</code> namespace, then the <code><a
    href="#repeat-template">repeat-template</a></code> attribute in no
    namespace on the cloned element has its value set to the template's name.
    Otherwise, the <code><a
    href="#repeat-template">repeat-template</a></code> attribute in the
    <code>http://www.w3.org/1999/xhtml</code> namespace has its value set to
    the template's name. (This happens even if the name was ignored for the
    purposes of the previous step.)

   <li>The attribute from which the template's name was derived, if any, and
    even if it was ignored, is removed from the new repetition block element.
    (See the previous four steps.)

   <li>If the first argument to the method was null, then the template once
    again crawls through its previous siblings, this time stopping at the
    first node (possibly the template itself) whose previous sibling is a
    repetition block (regardless of what that block's template is) or the
    first node that has no previous sibling, whichever comes first. The new
    element is the inserted into the parent of the template, immediately
    before that node. Mutation events are fired if appropriate.

   <li>Otherwise, the new element is inserted into the parent of the node
    that was passed to the method as the first argument, immediately
    <em>after</em> that node (before the node's following sibling, if any).
    Mutation events are fired if appropriate.

   <li>The template's index is increased by one.

   <li>An <code>added</code> event in the
    <code>http://www.w3.org/2001/xml-events</code> namespace, which bubbles
    but is not cancelable and has no default action, is fired on the
    repetition template using the <code><a
    href="#repetitionevent">RepetitionEvent</a></code> interface, with the
    repetition block's DOM node as the context information.

   <li>The return value is the newly cloned element.
  </ol>

  <p>In addition, user agents must automatically disable <code><a
   href="#add">add</a></code> buttons (irrespective of the value of the
   <code><a href="#disabled">disabled</a></code> DOM attribute) when the
   buttons are not in a repetition block that has an associated template and
   their <code><a href="#template">template</a></code> attribute is either
   not specified or does not have an ID that points to a repetition template,
   and, when the repetition template's <code><a
   href="#repeat-max">repeat-max</a></code> attribute is less than or equal
   to the number of repetition blocks that are associated with that template
   and that have the same parent. This automatic disabling does not affect
   the DOM <code><a href="#disabled">disabled</a></code> attribute. It is an
   intrinsic property of these buttons.

  <p>For an example, see the <a href="#repeatExample">example section</a>
   below.

  <h4 id="removal"><span class="secno">3.6.2. </span>Removal</h4>

  <p>If a <code><a href="#remove">remove</a></code> button is activated, and
   the element has an ancestor that is a <span><a
   href="#repetition3">repetition block</a></span> as defined above, then the
   nearest such ancestor's template deletion behaviour is invoked.
   (Specifically, in scripting-aware environments, the element's <code><a
   href="#removerepetitionblock">removeRepetitionBlock()</a></code> method is
   invoked.)

  <p>When a repetition block's deletion behaviour is invoked (specifically,
   when its <dfn
   id="removerepetitionblock"><code>removeRepetitionBlock()</code></dfn>
   method is called) the following is performed:

  <ol>
   <li>The node is removed from its parent, if it has one. Mutation events
    are fired if appropriate. (This occurs even if the repetition block is an
    <span>orphan repetition block</span>.)

   <li>If the repetition block is not an orphan, a <code>removed</code> event
    in the <code>http://www.w3.org/2001/xml-events</code> namespace, which
    bubbles but is not cancelable and has no default action, is fired on the
    element's repetition template, using the <code><a
    href="#repetitionevent">RepetitionEvent</a></code> interface, with the
    repetition block's DOM node as the context information.

   <li>If the repetition block is not an orphan, then while the remaining
    number of repetition blocks associated with the original element's
    repetition template and with the same parent as the template is less than
    the template's <code><a href="#repeat-min">repeat-min</a></code>
    attribute and less than its <code><a
    href="#repeat-max">repeat-max</a></code> attribute, the template's
    replication behaviour is invoked (specifically, its <code><a
    href="#addrepetitionblock">addRepetitionBlock()</a></code> method is
    called).
  </ol>

  <p>In addition, user agents must automatically disable <code><a
   href="#remove">remove</a></code> buttons (irrespective of the value of the
   <code><a href="#disabled">disabled</a></code> DOM attribute) when the
   buttons are not in a repetition block. This automatic disabling does not
   affect the DOM <code><a href="#disabled">disabled</a></code> attribute. It
   is an intrinsic property of these buttons.

  <p>For an example, see the <a href="#repeatExample">example section</a>
   below.

  <h4 id="movement"><span class="secno">3.6.3. </span>Movement of repetition
   blocks</h4>

  <p>The two remaining button types, <code><a
   href="#move-up">move-up</a></code> and <code><a
   href="#move-down">move-down</a></code>, are used to move repetition blocks
   up or down past its sibling repetition blocks.

  <p>If a <code><a href="#move-up">move-up</a></code> or <code><a
   href="#move-down">move-down</a></code> button is activated, and the
   element has an ancestor that is a <span><a href="#repetition3">repetition
   block</a></span> as defined above, then the nearest such ancestor's
   template movement behaviour is invoked in the relevant direction.
   (Specifically, in scripting-aware environments, the element's <code><a
   href="#moverepetitionblock">moveRepetitionBlock()</a></code> method is
   called; for <code><a href="#move-up">move-up</a></code> buttons the
   argument is -1 and for <code><a href="#move-down">move-down</a></code>
   buttons the argument is 1).

  <p>When a repetition block's movement behaviour is invoked (specifically,
   when its <dfn
   id="moverepetitionblock"><code>moveRepetitionBlock()</code></dfn> method
   is called) the following is performed, where <var>distance</var> is an
   integer representing how far and in what direction to move the block (the
   argument to the method):

  <ol>
   <li>If <var>distance</var> is 0, or if the repetition block has no parent,
    nothing happens and the algorithm ends here.

   <li>Set <var>target</var>, a reference to a DOM Node, to the repetition
    block being moved.

   <li>If <var>distance</var> is negative: while <var>distance</var> is not
    zero and <var>target</var>'s <code>previousSibling</code> is defined and
    is not a <span><a href="#repetition2">repetition template</a></span>, set
    <var>target</var> to this <code>previousSibling</code> and, if it is a
    <span><a href="#repetition3">repetition block</a></span>, increase
    <var>distance</var> by one (make it less negative by one).

   <li>Otherwise, <var>distance</var> is positive: while <var>distance</var>
    is not zero and <var>target</var>'s <code>nextSibling</code> is defined
    and is not a <span><a href="#repetition2">repetition template</a></span>,
    set <var>target</var> to this <code>nextSibling</code> and, if it is a
    <span><a href="#repetition3">repetition block</a></span>, decrease
    <var>distance</var> by one. After the loop, set <var>target</var> to
    <var>target</var>'s <code>nextSibling</code> (which may be null).

   <li>Call the repetition block's parent node's <code>insertBefore()</code>
    method with the <code>newChild</code> argument being the repetition block
    and the <code>refChild</code> argument being <var>target</var> (which may
    be null by this point). Mutation events are fired if appropriate.

   <li>A <code>moved</code> event in the
    <code>http://www.w3.org/2001/xml-events</code> namespace, which bubbles
    but is not cancelable and has no default action, is fired on the
    element's repetition template (if it has one), using the <code><a
    href="#repetitionevent">RepetitionEvent</a></code> interface, with the
    repetition block's DOM node as the context information.
  </ol>

  <p>This occurs even if the repetition block is an <span>orphan repetition
   block</span> (although if it is, the event is not fired).

  <p>Moving repetition blocks does not change the index of the repetition
   blocks.

  <p>In addition, user agents must automatically disable <code><a
   href="#move-up">move-up</a></code> buttons (irrespective of the value of
   the <code><a href="#disabled">disabled</a></code> DOM attribute) when
   their repetition block could not be moved any higher according to the
   algorithm above, and when the buttons are not in a repetition block.
   Similarly, user agents must automatically disable <code><a
   href="#move-down">move-down</a></code> buttons when their repetition block
   could not be moved any lower according to the algorithm above, and when
   the buttons are not in a repetition block. This automatic disabling does
   not affect the DOM <code><a href="#disabled">disabled</a></code>
   attribute. It is an intrinsic property of these buttons.

  <h4 id="initial"><span class="secno">3.6.4. </span>Initial repetition
   blocks</h4>

  <p>The <dfn id="repeat-start"><code>repeat-start</code></dfn> attribute on
   repetition templates is used to insert repetition blocks at load time
   without having to explicitly copy the repetition template markup in the
   source document or use scripting.

  <p>When present, the attribute must contain one or more digits 0-9
   interpreted as a base ten integer. If the value is not in this format, or
   if the attribute is omitted, the value "1" is used instead.

  <p>Before <code>load</code> events are fired, but after the entire document
   has been parsed and after forms with <code>data</code> attributes are
   prefilled (if necessary), UAs must iterate through every node in the
   document, depth first, looking for templates so that their initial
   repetition blocks can be created. For each element that has a <code><a
   href="#repeat">repeat</a></code> attribute with the literal value <code><a
   href="#template">template</a></code>, the UA must invoke the template's
   replication behaviour as many times as the <code><a
   href="#repeat-start">repeat-start</a></code> attribute on the same element
   specifies (just once, if the attribute is missing or has an invalid
   value). Then, while the number of repetition blocks associated with the
   repetition template is less than the template's <code><a
   href="#repeat-min">repeat-min</a></code> attribute, the template's
   replication behaviour must be further invoked. (Invoking the template's
   replication behaviour means calling its <code><a
   href="#addrepetitionblock">addRepetitionBlock()</a></code> method).

  <p>The above step must be skipped for any element in the document whose
   parent node is not an element. (In particular, nothing happens if <code><a
   href="#repeat-start">repeat-start</a></code> or <code><a
   href="#repeat-min">repeat-min</a></code> are set on the root element.)

  <p>UAs should not specifically wait for images and stylesheets to be loaded
   before creating initial repetition blocks as described above.

  <h4 id="notes"><span class="secno">3.6.5. </span>Notes for assistive
   technologies</h4>

  <p>The repetition templates and blocks are present in the DOM, and all
   modifications to these blocks (whether via the DOM or via the buttons
   described above) result in mutation events being fired on the document.
   Assistive technologies can therefore use normal DOM navigation and
   mutation event listeners to help present repetition sections to the user.

  <h3 id="repeatExamples"><span class="secno">3.7. </span>Examples</h3>

  <p>This section gives some more practical examples of repetition.

  <h4 id="repeatExample"><span class="secno">3.7.1. </span>Repeated rows</h4>

  <p>The following example shows how to use repetition templates to
   dynamically add rows to a form in a table.

  <pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Form Repeat Demo&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;form action="http://software.hixie.ch/utilities/cgi/test-tools/echo" method="post" enctype="multipart/form-data"&gt;
   &lt;table&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Number of Cats&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr repeat="0"&gt;
      &lt;td&gt;&lt;input type="text" name="name_0" value="John Smith"&gt;&lt;/td&gt;
      &lt;td&gt;&lt;input type="text" name="count_0" value="2"&gt;&lt;/td&gt;
      &lt;td&gt;&lt;button type="remove"&gt;Delete Row&lt;/button&gt;&lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr repeat="template" id="row"&gt;
      &lt;td&gt;&lt;input type="text" name="name_[row]" value=""&gt;&lt;/td&gt;
      &lt;td&gt;&lt;input type="text" name="count_[row]" value="1"&gt;&lt;/td&gt;
      &lt;td&gt;&lt;button type="remove"&gt;Delete Row&lt;/button&gt;&lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
   &lt;p&gt;
    &lt;button type="add" template="row"&gt;Add Row&lt;/button&gt;
    &lt;button type="submit"&gt;Submit&lt;/button&gt;
   &lt;/p&gt;
  &lt;/form&gt;
 &lt;/body&gt;
&lt;/html&gt;
</pre>

  <p>Initially, two rows would be visible, each with two text input fields,
   the first row having the values "John Smith" and "2", the second row
   having the values "" (a blank text field) and "1". The second row is the
   result of the (implied) <span><code><a
   href="#repeat-start">repeat-start</a></code> attribute</span> adding a
   repetition block when the document was loaded.

  <p>If the "Add Row" button is pressed, a new row is added. The first such
   row would have the index 2 (since there are already two repetition blocks
   numbered 0 and 1) and so the controls would be named "name_2" and
   "count_2" respectively.

  <p>If the "Delete Row" button above is pressed, the row is removed.

  <h4 id="nested"><span class="secno">3.7.2. </span>Nested repeats</h4>

  <p>The previous example does not demonstrate nested repeat blocks,
   reordering repetition blocks, and inserting new repetition blocks in the
   middle of the existing sequence, all of which are possible using the
   facilities described above.

  <p>This example shows nested repeats.

  <pre>
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
 &lt;head&gt;
  &lt;title&gt;Solar System&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;form&gt;
   &lt;h1&gt; Solar system &lt;/h1&gt;
   &lt;p&gt; &lt;label&gt; System Name: &lt;input name="name"/&gt; &lt;/label&gt; &lt;/p&gt;
   &lt;h2&gt; Planets &lt;/h2&gt;
   &lt;ol&gt;
    &lt;li repeat="template" repeat-start="0" id="planets"&gt;
     &lt;label&gt; Name: &lt;input name="planet[planets].name" required="required"/&gt; &lt;/label&gt;
     &lt;h3&gt; Moons &lt;/h3&gt;
     &lt;ul&gt;
      &lt;li repeat="template" repeat-start="0" id="planet[planets].moons"&gt;
       &lt;input name="planet[planets].moon[planet[planets].moons]"/&gt;
       &lt;button type="remove"&gt;Delete Moon&lt;/button&gt;
      &lt;/li&gt;
     &lt;/ul&gt;
     &lt;p&gt;&lt;button type="add" template="planet[planets].moons"&gt;Add Moon&lt;/button&gt;&lt;/p&gt;
     &lt;p&gt;&lt;button type="remove"&gt;Delete Planet&lt;/button&gt;&lt;/p&gt;
    &lt;/li&gt;
   &lt;/ol&gt;
   &lt;p&gt;&lt;button type="add" template="planets"&gt;Add Planet&lt;/button&gt;&lt;/p&gt;
   &lt;p&gt;&lt;button type="submit"&gt;Submit&lt;/button&gt;&lt;/p&gt;
  &lt;/form&gt;
 &lt;/body&gt;
&lt;/html&gt;
</pre>

  <p>Note that to uniquely identify each nested repeat (which is required
   since the <code><a href="#add">add</a></code> buttons are dependent on IDs
   to specify which template should have a block added), the IDs of the
   nested templates are specified in terms of the ancestor template's ID,
   using the index substitution feature.

  <p class="note">Since square brackets are not allowed in ID attributes in
   XML, the above example cannot validate to an XML DTD. It is still
   well-formed, however, and conformant to this specification. It is possible
   to make a version that validates according to an XML DTD by using U+02D1
   MODIFIER LETTER HALF TRIANGULAR COLON and U+00B7 MIDDLE DOT characters
   instead of the U+005B OPENING SQUARE BRACKET and U+005D CLOSING SQUARE
   BRACKET characters in the value of the second "<code>id</code>" attribute,
   without any other changes.

  <h2 id="forms-events-model"><span class="secno">4. </span>The forms event
   model</h2>

  <p id="formEvents"><dfn id="form-events">Form events</dfn> are those that
   are specifically fired on <code>form</code> elements and form controls as
   part of the forms event model. The following events are considered form
   events:

  <ul>
   <li>{"http://www.w3.org/2001/xml-events", "change"}

   <li>{"http://www.w3.org/2001/xml-events", "formchange"}

   <li>{"http://www.w3.org/2001/xml-events", "input"}

   <li>{"http://www.w3.org/2001/xml-events", "forminput"}

   <li>{"http://www.w3.org/2001/xml-events", "invalid"}

   <li>{"http://www.w3.org/2001/xml-events", "submit"}

   <li>{"http://www.w3.org/2001/xml-events", "reset"}

   <li>{"http://www.w3.org/2001/xml-events", "received"}

   <li>{"http://www.w3.org/2001/xml-events", "DOMControlValueChanged"}
  </ul>

  <p>Some of these events are described in <a
   href="#refsDOM3EVENTS">[DOM3EVENTS]</a> and <a
   href="#refsHTML4">[HTML4]</a>. This section introduces the new events and
   new semantics for the existing events.

  <p class="note">The repetition model events are not form events since they
   are not form-specific.

  <h3 id="the-click"><span class="secno">4.1. </span>The <code>click</code>
   event and <code>input</code> controls</h3>

  <p>During the handling of a <code>click</code> event on an
   <code>input</code> element with a <code>type</code> attribute that has the
   value "<code><a href="#radio">radio</a></code>" or "<code><a
   href="#checkbox">checkbox</a></code>", user agents must change the value
   of the <code>checked</code> property of the elements affected before the
   event is dispatched in the document. The default action of the
   <code>click</code> event in this case is to fire a
   <code>DOMActivate</code> event, <!-- as described
  in DOM3 Events and in WA1 -->
   and the default action of the <code>DOMActivate</code> event is to fire
   the <code>change</code> event (assuming the activation did change the
   value). If the default action of any of these events is canceled, the
   value of the properties changed must be changed back to their original
   value.

  <p>This is a change from DOM2 HTML where <a
   href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-30233917">this
   behaviour was optional</a>. <a href="#refsDOM2HTML">[DOM2HTML]</a>

  <h3 id="the-change"><span class="secno">4.2. </span>The <code>change</code>
   and <code>input</code> events</h3>

  <p>In <a href="#refsDOM3EVENTS">[DOM3EVENTS]</a> and <a
   href="#refsHTML4">[HTML4]</a>, the <code>change</code> event is fired on a
   form control element when the control loses the input focus and its value
   has been modified since gaining focus.

  <p>This specification changes these semantics to more accurately reflect
   the behaviour expected by Web authors. Specifically, for controls
   implemented with a non-editable stateful UI (e.g. <code>select</code>
   elements, checkboxes, or radio buttons as deployed in typical desktop Web
   browsers), the <code>change</code> event shall be fired when the selection
   is completed, even if the control does not lose focus. (For example, if a
   <code><a href="#date">date</a></code> control has a button which shows a
   calendar, then the <code>change</code> event would fire when the calendar
   is closed after the user selected a date.)

  <p>In addition, to address the need for even more immediate feedback
   mechanisms, this specification introduces the <dfn
   id="input"><code>input</code> event</dfn>. This event is fired on a
   control whenever the value of the control changes due to input from the
   user, and is otherwise identical to the <code>change</code> event. (For
   example, it bubbles, is not cancelable, and has no context information.)

  <p>UAs may delay firing the <code>input</code> event if the data entry is
   rapid. Authors must not rely on this event firing once for each key press,
   mouse input, or similar.

  <p>When the <code>change</code> event is fired at the same time as the
   <code>input</code> event, the <code>input</code> event must be fired
   first.

  <p>Change and input events must never be triggered by scripted changes to
   the control value. Thus, loops caused by change event handlers triggering
   changes are not usually possible.

  <p>Any element that accepts an <code>onchange</code> attribute to handle
   <code>change</code> events shall also accept an <code>oninput</code>
   attribute to handle <code>input</code> events, except the <code><a
   href="#output0">output</a></code> element (for which it would make no
   sense).

  <h3 id="events"><span class="secno">4.3. </span>Events to enable simpler
   dependency tracking</h3>

  <p>Sometimes form controls are inter-dependent. In these cases, it is more
   intuitive to specify the dependencies on the control whose value or
   attributes depend on another's, rather than specify which controls should
   be affected by a change on the element that changes. For this reason, two
   new events are introduced, <dfn
   id="formchange"><code>formchange</code></dfn> and <dfn
   id="forminput"><code>forminput</code></dfn>.

  <p>These events are in the same namespace as the other <span><a
   href="#form-events">form events</a></span>, do not bubble, cannot be
   canceled, have no context information, and have no default action.

  <p>The default action of a <code>change</code> event on most elements is to
   fire a <code><a href="#formchange">formchange</a></code> event at each
   element in the form's <code><a href="#elements">elements</a></code>, in
   document order, and finally at the form itself. Note that template
   controls are not affected. If authors need this event to affect template
   controls, they should hook into the form's <code>onformchange</code> event
   handler.

  <p>The exception is the <code><a href="#output0">output</a></code> control.
   Since changing an <code><a href="#output0">output</a></code> control is
   often the result of a <code><a href="#formchange">formchange</a></code>
   event, <code>change</code> events whose target is an <code><a
   href="#output0">output</a></code> control do not cause <code><a
   href="#formchange">formchange</a></code> events to be dispatched.

  <p>The <code>input</code> event analogously invokes the <code><a
   href="#forminput">forminput</a></code> event as its default action (again,
   except if the target is an <code><a href="#output0">output</a></code>
   control).

  <p>When a form is reset, a <code><a
   href="#formchange">formchange</a></code> event is fired on all the form
   controls of the form in the same way.

  <p class="note">If authors wish to use <code><a
   href="#formchange">formchange</a></code> events to set up the initial
   state of the form (for forms with complex dependencies), they can either
   write a script to call <code title="form-dispatchFormChange"><a
   href="#dispatchformchange">dispatchFormChange()</a></code> on the form, or
   set the <code>data</code> attribute of the form to <code title="<formdata
   xmlns=&quot;http://n.whatwg.org/formdata&quot;
   type=&quot;incremental&quot;/>">data:application/xml,%3Cformdata%20xmlns%3D%22http%3A%2F%2Fn.whatwg.org%2Fformdata%22%20type%3D%22incremental%22%2F%3E</code>,
   which <a href="#seeding">is equivalent to seeding a form with no new
   values</a>.

  <h3 id="form-validation"><span class="secno">4.4. </span>Form validation</h3>

  <p>With the introduction of the various type-checking mechanisms, some way
   for scripting authors to hook into the type-checking process is required.
   This is provided by the <code>change</code> event and the new <dfn
   id="invalid0"><code>invalid</code></dfn> event (in the
   <code>http://www.w3.org/2001/xml-events</code> namespace).

  <p>Authors should use the <code>change</code> and <code>input</code> events
   to specify <span title="setCustomValidity"><a
   href="#setcustomvalidity">custom validation code</a></span>. Authors who
   use custom validation code should keep the validity flags up to date at
   all times, so that the <code><a href="#invalid0">:invalid</a></code>
   pseudo class correctly matches elements as they go in and out of valid
   states, and so that UAs can provide up to date hints to the user to help
   him fill in the form.

  <p>When <a href="#form-submission">a form is submitted</a>, user agents
   must act as if they used the following algorithm. First, each element in
   that form's <code><a href="#elements">elements</a></code> list is added to
   a temporary list (note that the <code><a
   href="#elements">elements</a></code> list is defined to be in document
   order). Then, each element in this list whose <code><a
   href="#willvalidate">willValidate</a></code> DOM attribute is true is
   checked for validity, and an <code><a href="#invalid0">invalid</a></code>
   event is fired on each element that, when checked, is found to fail to
   comply with its constraints (i.e. each element whose
   <code>validity.valid</code> DOM attribute is false) and is still a member
   of the form after the event has been handled.

  <p class="note">This definition implies a defined behaviour in the face of
   event handlers that mutate the document. For example, if one control's
   <code>oninvalid</code> attribute changes a later control's value from
   invalid to valid, the event is not fired on that later control, yet in the
   reverse case, if a later form control's <code>oninvalid</code> attribute
   changes an earlier control, then the earlier control is not checked again.
   Controls added to the form during the process will not have any events
   fired, even if their value is invalid. Controls invalid at the start of
   the process that are removed from the form before receiving their events
   simply don't receive the event. Controls that change from one invalid
   state to another invalid state before receiving their event receive an
   event that describes their state at the point in the process at which they
   were checked and had the event fired on them.

  <p>The event can also be fired if the <code title="">checkValidity()</code>
   method <span title="form.checkValidity()"><a href="#form.checkvalidity">of
   a form</a></span> or <span title="checkValidity()"><a
   href="#checkvalidity">form control</a></span> is invoked via script.

  <p>The <code>oninvalid</code> attribute (on <code>input</code>,
   <code>textarea</code>, and <code>select</code> elements) can be used to
   write handlers for this event.

  <p>This event bubbles and is cancelable.

  <p>The default action is UA-specific, but is expected to consist of
   focusing the element (possibly firing focus events if appropriate), and
   alerting the user (ideally using a non-modal mechanism such as a help
   balloon) that the entered value is unacceptable in the user's native
   language along with explanatory text saying <em>why</em> the value is
   currently invalid.

  <p>If the reason the control is invalid is an author defined <span
   title="customError"><a href="#customerror">custom error</a></span> then
   the message that the author provided using the <code><a
   href="#setcustomvalidity">setCustomValidity()</a></code> method should be
   used.

  <p>If the event was fired during form submission or as a result of the
   form's <code><a href="#form.checkvalidity">form.checkValidity()</a></code>
   method being called, UAs would typically only focus the first form control
   found to be invalid, although UAs are encouraged to give the user an idea
   of what other fields are invalid. The event shall, however, still be
   dispatched to all invalid controls whose <code><a
   href="#willvalidate">willValidate</a></code> DOM attribute is true. If the
   event was fired as a result of a control's <code><a
   href="#checkvalidity">checkValidity()</a></code> method, then the default
   action is performed regardless of whether the script has checked other
   controls as well.

  <p>If the element causing trouble is not visible (for example, a field made
   invisible using CSS or a field of type <code><a
   href="#hidden">hidden</a></code>) then the UA may wish to indicate to the
   user that there may be an error with the page's script.

  <p>When a radio group has no checked radio button and more than one of the
   radio buttons is marked as <code><a href="#required0">required</a></code>,
   the UA should only tell the user that the radio group as a whole is
   missing a value, not complain about each radio button in turn, even though
   all of the radio buttons marked with the <code><a
   href="#required0">required</a></code> attribute would have the
   <code>missingValue</code> flag set.

  <p class="note">Authors are encouraged to either cancel all <code><a
   href="#invalid0">invalid</a></code> events (if they wish to handle the
   error UI themselves) or to not cancel any (if they wish to leave the error
   UI to the UA). Canceling one <code><a href="#invalid0">invalid</a></code>
   event and reporting the error via script does not prevent the UA from
   handling another <code><a href="#invalid0">invalid</a></code> event,
   possibly confusing the user by having two separate errors reported
   simultaneously in different ways. To cancel all events, a single capturing
   listener could be placed on the root element node canceling the default
   action of all <code><a href="#invalid0">invalid</a></code> events.

  <div class="example">
   <p>The following example shows one way to use this event.</p>

   <pre>
&lt;form action="..." method="post"&gt;
 &lt;p&gt;
  &lt;label&gt;
   Byte 1:
   &lt;input name="byte" type="number" min="0" max="255" required="required"
          oninvalid="failed(event)" /&gt;
  &lt;/label&gt;
  &lt;output name="error"/&gt;
 &lt;/p&gt;
 &lt;script type="text/javascript"&gt; &lt;![CDATA[
  function failed(event) {
    // a control can fail for more than one reason; only report one of them.
    form.error.value = 'The value is wrong for a reason I did not expect.';
    if (event.target.validity.typeMismatch)
      form.error.value = 'You must enter a number.';
    else if (event.target.validity.stepMismatch)
      form.error.value = 'Fractional numbers are not allowed.';
    else if (event.target.validity.rangeUnderflow)
      form.error.value = 'The number must be zero or greater.';
    else if (event.target.validity.rangeOverflow)
      form.error.value = 'The number must be 255 or less.';
    else if (event.target.validity.valueMissing)
      form.error.value = 'You must enter a number.';
    event.preventDefault(); /* don't want the UA to do its own reporting */
  }
 ]]&gt; &lt;/script&gt;
&lt;/form&gt;
</pre>
  </div>

  <h3 id="receiving"><span class="secno">4.5. </span>Receiving the results of
   form submission</h3>

  <p>The <dfn id="receivedevent"><code>ReceivedEvent</code></dfn> interface
   is used in the form submission process to handle the results of form
   submission.

  <pre
   class="idl">interface <dfn id="receivedevent0">ReceivedEvent</dfn> : Event {
  readonly attribute <code>Document</code> <code>receivedDocument</code>;
  void               <code><a href="#initreceivedevent">initReceivedEvent</a></code>(in DOMString typeArg, 
                                       in boolean canBubbleArg, 
                                       in boolean cancelableArg, 
                                       in Document documentArg);
  void               <code><a href="#initreceivedeventns">initReceivedEventNS</a></code>(in DOMString namespaceURIArg,
                                         in DOMString typeArg, 
                                         in boolean canBubbleArg, 
                                         in boolean cancelableArg, 
                                         in Document documentArg);
};</pre>

  <p>The <dfn id="initreceivedevent"><code>initReceivedEvent()</code></dfn>
   and <dfn id="initreceivedeventns"><code>initReceivedEventNS()</code></dfn>
   methods have the same behaviours as the <dfn
   id="initevent"><code>initEvent()</code></dfn> and <dfn
   id="initeventns"><code>initEventNS()</code></dfn> events from <a
   href="#refsDOM3EVENTS">[DOM3EVENTS]</a>.

  <p>The <code>receivedDocument</code> attribute (set from the
   <var>documentArg</var> argument) contains a reference to the document that
   was the result of the form submission. If the result cannot be represented
   as a DOM document, then the attribute is null. The document is mutable.

  <h3 id="the-domcontrolvaluechanged"><span class="secno">4.6. </span>The
   <code>DOMControlValueChanged</code> event</h3>

  <p>A <code>DOMControlValueChanged</code> event, which bubbles, has no
   default action, and uses the basic <code>Event</code> interface, is fired
   an a control whenever its value changes, for whatever reason (including a
   scripted change).

  <p>This event has no corresponding event handler attribute and is primarily
   intended for use by assistive technologies.

  <h2 id="form-submission"><span class="secno">5. </span>Form submission</h2>

  <p>Processors conforming to this specification must use a slightly
   different algorithm than the <a href="#refsHTML4">[HTML4]</a> form
   submission algorithm (HTML4 section 17.13.3), as described in this
   section.

  <p>When the user agent submits a form, it must perform the following steps.

  <ol>
   <li> <strong>Step one: Dispatch the <code><a
    href="#submit">submit</a></code> event</strong>
    <p>If the submission was not initiated using the <code><a
     href="#submit">submit()</a></code> method then the <code><a
     href="#submit">submit</a></code> event is submitted as described in <a
     href="#refsHTML4">[HTML4]</a>. If it is canceled, then the submission
     processing stops at this point. If it is not canceled, then its default
     action is to perform the rest of the submission procedure.</p>

   <li> <strong>Step two: Check the validity of the form</strong>
    <p>If the form submission was initiated as a result of a <code><a
     href="#submit">submit</a></code> event's default action, then the form
     is <a href="#form-validation">checked for validity</a>. If, after the
     form has had any relevant <code><a href="#invalid0">invalid</a></code>
     events fired, any controls remain invalid, then the submission shall be
     aborted.</p>

    <p>Otherwise, if the form submission was initiated via the <code><a
     href="#submit">submit()</a></code> method, then instead of firing
     <code><a href="#invalid0">invalid</a></code> events, a
     <code>SYNTAX_ERR</code> exception shall be raised (and submission is
     aborted) if any of the controls are invalid. <a
     href="#refsDOM3CORE">[DOM3CORE]</a></p>

    <p>Script authors who wish to validate the form before performing
     submission can use script such as:</p>

    <pre>
if (<code><a href="#form.checkvalidity">form.checkValidity()</a></code>)
   form.submit();
</pre>

    <p>...which will cause the UA to report the errors to the user, exactly
     as if the user had clicked a submit button.</p>

   <li> <strong>Step three: Identify all form controls</strong>
    <p>All the controls that apply to the form should be identified, in
     document order. These controls are all those whose <code><a
     href="#forms">forms</a></code> DOM attribute have an entry that points
     at the form and that are not in the form's <code><a
     href="#templateelements">templateElements</a></code> DOM attribute (this
     excludes certain controls as specified in the section describing
     <span>the repetition model</span>, but does include the image controls
     that are excluded in the definition of the <code><a
     href="#elements">elements</a></code> DOM attribute).</p>

   <li> <strong>Step four: Build a form data set</strong>
    <p>A <dfn id="form-data">form data set</dfn> consists of a <span>form
     control list</span> and a <span>repetition block list</span>.</p>

    <p>The <!--<dfn>-->form control list<!--</dfn>--> is a sequence of
     <em><span>control-name</span>, <span>control-index</span>,
     <span>current-value</span></em> triplets constructed from the controls
     identified in the previous step.</p>

    <p class="note">The control index here is unrelated to the repetition
     index mentioned earlier.</p>

    <p>It is constructed by iterating over the form controls listed in step
     three, taking note of the form control names as they are seen. With each
     control, if it is the first time that control's name has been seen, then
     the control is assigned a control index of 0. Otherwise, if the control
     name was associated with an earlier control, then the index assigned is
     exactly one more than the last control with that name. Even unsuccessful
     controls and controls with <span><a href="#no-value">no value
     selected</a></span> are so numbered (including <code><a
     href="#output0">output</a></code> elements). However, only <a
     href="#successful">successful controls</a> are added to the form data
     set.</p>

    <p>Successful controls have exactly one value, except for
     <code>select</code> controls and file upload controls, which have zero
     or more values depending on how many items or files they have selected.
     A successful control with more than one value is added multiple times,
     one for each value (each time with the same form control name and form
     control index). A successful control with zero values is omitted from
     the form data set.</p>

    <p>Image buttons, during this step, must be handled as if they were two
     controls, one with the control's name with <code>.x</code> appended,
     whose value is the x coordinate selected by the user, and the other with
     the control's name with <code>.y</code> appended, whose value is the y
     coordinate selected by the user. If the control's name is the empty
     string (e.g. if the <code><a href="#name">name</a></code> attribute is
     omitted) then the names <code>x</code> and <code>y</code> must be used
     instead. The indices of these two virtual controls are handled
     separately and could, depending on the names of other controls, end up
     with different values.</p>

    <div class="example">
     <p>For example, the following form:</p>

     <pre>
&lt;form&gt;
 &lt;p&gt; &lt;label&gt; Name: &lt;input type="text" name="username"/&gt; &lt;/label&gt; &lt;/p&gt;
 &lt;p&gt; Lottery numbers:
     &lt;input name="number" type="number" min="1" max="49"/&gt;
     &lt;input name="number" type="number" min="1" max="49"/&gt;
     &lt;input name="number" type="number" min="1" max="49"/&gt;
     &lt;input name="number" type="number" min="1" max="49"/&gt;
     &lt;input name="number" type="number" min="1" max="49"/&gt;
 &lt;/p&gt;
 &lt;p&gt;
  &lt;label&gt;
   Games:
   &lt;select name="type" multiple="multiple"&gt;
    &lt;option value="Thunderbolt"&gt; Thunderbolt &lt;/option&gt;
    &lt;option value="Lightning"&gt; Lightning &lt;/option&gt;
   &lt;/select&gt;
  &lt;/label&gt;
 &lt;/p&gt;
 &lt;p&gt;
  &lt;input type="submit" value="Send"/&gt;
 &lt;/p&gt;
&lt;/form&gt;
</pre>

     <p>...if filled in with the name "Erwin" and the numbers 20, 30 and 40
      with the first and last number fields left blank, and all the values in
      the select list selected, would generate the following form data set:</p>

     <ol>
      <li>username, 0, "Erwin"

      <li>number, 0, ""

      <li>number, 1, "20"

      <li>number, 2, "30"

      <li>number, 3, "40"

      <li>number, 4, ""

      <li>type, 0, "Thunderbolt"

      <li>type, 0, "Lightning"
     </ol>
    </div>

    <p>The form data set also includes a list of which <span><a
     href="#repetition3">repetition block</a></span>s are involved in the
     submission.</p>

    <p>For each control in the form data set, the control and the control's
     ancestors are examined, up to but not including the first node that is a
     common ancestor of the control and the form, or is the form itself. For
     each element so examined, if it is a <span><a
     href="#repetition3">repetition block</a></span> that is not an
     <span>orphan repetition block</span> and whose template does have an ID,
     and that repetition block has not yet been added to the list of
     repetition blocks, it is added.</p>

   <li> <strong>Step five: Encode the form data set</strong>
    <p>The form data set is then encoded according to the content type
     specified by the <code>method</code> and <code>enctype</code> attributes
     of the element that caused the form to be submitted. See the <a
     href="#methodAndEnctypes"><!--semantics of
    <code>method</code> and <code>enctype</code> attributes:
    -->submitting
     the encoded form data set</a> section for details on how the
     <code>action</code> and <code>enctype</code> attributes are to be
     treated. The possible values of <code>enctype</code> defined by this
     specification are:</p>

    <dl>
     <dt><code>application/x-www-form-urlencoded</code>

     <dd>Described <a href="#x-www-form-urlencoded">below</a>.

     <dt><code>multipart/form-data</code>

     <dd>Described in <a href="#refsHTML4">[HTML4]</a> (<a
      href="http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.2">section
      17.13.4</a>) and <a href="#refsRFC2388">[RFC2388]</a>. Note that this
      submission method discards the control index and repetition block parts
      of the form data set.

     <dt><code>application/x-www-form+xml</code>

     <dd>Described <a href="#x-www-form-xml">below</a>.

     <dt><code>text/plain</code>

     <dd>Described <a href="#text-plain">below</a>.

     <dt>Attribute not specified

     <dd>Described <a href="#missing-enctype">below</a>.
    </dl>

    <p>Other values may be defined by other specifications.</p>

    <p>During this step, the form data set is <a
     href="#unacceptableCharacters">examined to ensure all the characters are
     representable</a> in the submission character encoding.</p>

    <p>When Unicode encodings are used, text in the submission should be
     converted to <a
     href="http://www.unicode.org/reports/tr15/#Specification">normalisation
     form C</a> (NFC) before encoding the data set. <a
     href="#refsUNICODE">[UNICODE]</a></p>

   <li> <strong>Step six: Submit the encoded form data set</strong>
    <p>The encoded data is sent to the processing agent designated by the
     <code>action</code> attribute of the element that initiated the
     submission, using the protocol method specified by the
     <code>method</code> attribute of that same element. If either of the
     attributes is missing from that element, and that element is not a
     <code>form</code>, then the relevant attribute on the element's
     associated <code>form</code> element is used instead. (If it is
     associated with multiple forms, the first one in the order given in the
     <code title="form-attribute"><a href="#form0">form</a></code> attribute
     is used.) The <a href="#methodAndEnctypes"><!--semantics
    of <code>method</code> and <code>enctype</code> attributes:
    -->submitting
     the encoded form data set</a> section describes this in more detail.</p>
    <!-- <p>If the submission protocol used is able to carry character
    encoding metadata (for example, HTTP POST submissions can carry
    encoding information in the <code>Content-Type</code> header) then
    the submission character encoding may be specified. However, this
    breaks servers.</p> -->
    

   <li> <strong>Step seven: Dispatch the <code><a
    href="#received">received</a></code> event.</strong>
    <p>This step must be skipped if the form has no <code><a
     href="#onreceived">onreceived</a></code> attribute. If this step is not
     skipped, then it defeats any attempt at incremental rendering, as the
     entire return value from the server must be downloaded and parsed before
     the event is fired (unless the user agent instantiates the document
     lazily).</p>

    <p>The <dfn id="received"><code>received</code></dfn> event is fired on
     the <code>form</code> element. This event does not bubble. The <dfn
     id="onreceived"><code>onreceived</code></dfn> attribute can be used to
     handle this event.</p>

    <p>The event uses the <code><a
     href="#receivedevent0">ReceivedEvent</a></code> interface.</p>

    <p>If it is canceled, then the submission processing stops at this point.
     If it is not canceled, then its default action is to perform the rest of
     the submission procedure (step eight). If the <code>document</code>
     attribute of the event was mutated, the mutated version is what is used
     in the next step.</p>

   <li id="replaceSemantics"> <strong>Step eight: Handle the returned
    data</strong>
    <p>If the response is an HTTP 204 No Content response (or equivalent for
     other protocols), then the document is left in place, and new metadata
     (if any) is applied, as per the HTTP specification <a
     href="#refsRFC2616">[RFC2616]</a>.</p>

    <p>If the response is an HTTP 205 Reset Content response (or equivalent
     for other protocols), then the document in the frame or window targeted
     by the form submission is left in place and all form elements in it are
     reset to their initial values (by effectively invoking their <code
     title="dom-form-reset">reset()</code> method, which also causes
     <code>reset</code> events to be dispatched). (This is based on the vague
     requirement given in the HTTP specification. <a
     href="#refsRFC2616">[RFC2616]</a>) Other specifications may require
     additional processing for 205 responses, but those do not affect
     conformance to this specification.</p>

    <p class="note">This does not attempt to define how UAs are to react to
     205 responses in other contexts.</p>

    <p>Otherwise, how the UA handles a response depends on the <code><a
     href="#replace">replace</a></code> attribute of the element that
     initiated the submission.</p>

    <p>For <code>replace="document"</code> (the default), the response body
     replaces the document from which the submission initiated (or, if there
     is a <code>target</code> attribute, the document in the appropriate
     frame or window).</p>

    <p class="example">For example, if the <code>action</code> attribute
     denotes an HTTP resource, the <code>method</code> attribute is "POST",
     the <code><a href="#replace">replace</a></code> attribute is
     <code>document</code> and the remote server replies with a <code>200
     OK</code> response, then the returned document should be displayed to
     the user as if the user had navigated to that document by following a
     link to it.</p>

    <p>For <code>replace="values"</code>, the algorithm described in the
     section on <a href="#seeding">seeding a form with initial values</a>
     must be run with the given response body used instead of the document
     mentioned in the data attribute. (Any <code>target</code> attribute is
     ignored.)</p>
    <!-- XXX This so needs an example. -->
  </ol>

  <p>If the submission process fails, UAs should report this failure to the
   user in a useful and accessible manner.

  <h3 id="successful"><span class="secno">5.1. </span>Successful form
   controls</h3>

  <p>The controls that are <dfn id="successful0">successful</dfn> are those
   that are included in the submission (in the form data set) when their form
   is submitted.

  <p>All form controls are successful except:

  <ul>
   <li>Controls with no associated form.

   <li>Controls that are inside <span title="repetition template"><a
    href="#repetition2">repetition templates</a></span> (those that are in
    their forms' <code><a
    href="#templateelements">templateElements</a></code> list).

   <li>Controls that are inside <code><a href="#datalist">datalist</a></code>
    elements.

   <li>Controls with no name, except if they are <code><a
    href="#image">image</a></code> controls.

   <li>Disabled controls.

   <li>Checkboxes that are not checked.

   <li>Radio buttons that are not checked.

   <li>Submit buttons (including image buttons) that did not initiate the
    current submission process.

   <li>Buttons of type <code>button</code>, <code>reset</code>, <code><a
    href="#add">add</a></code>, <code><a href="#remove">remove</a></code>,
    <code><a href="#move-up">move-up</a></code>, or <code><a
    href="#move-down">move-down</a></code>.

   <li>Output controls.

   <li>File upload controls with <span><a href="#no-value">no value
    selected</a></span>, or with only values that point to non-existent
    files.
  </ul>

  <p>Controls do not have to have a value to be successful.

  <h3 id="unacceptableCharacters"><span class="secno">5.2. </span>Handling
   characters outside the submission character encoding</h3>

  <p>The different form data set encoding types each define how to find the
   character encoding to use to submit the data.

  <p>Sometimes, the form submission character encoding used is not able to
   represent all the characters present in the form submission.

  <p>If the form data set contains characters that are outside the submission
   character set, the user agent should inform the user that his submission
   will be changed. For example, if the user entered "<span
   lang="fr">D&uuml;rst &eacute;tait tr&egrave;s utile ici</span>" in a text
   field but the author specified a character encoding where the "&uuml;",
   "&eacute;", and "&egrave;" characters could not be represented, then the
   UA could use a dialog of the form:

  <pre> ____________________________________________________
|| Warning |||||||||||||||||||||||||||||||||||||||||||
|                                                    |
| This form cannot handle some of the characters you |
| have entered (including "&uuml;" and "&eacute;").              |
| If you submit this form, the text will be changed  |
| before being sent (e.g. "D?rst").                  |
|                                                    |
|                      (( Send anyway ))  ( Cancel ) |
`----------------------------------------------------'</pre>

  <p>When the value that is the cause of encoding problems is not accessible
   to the user (e.g. a <code><a href="#hidden">hidden</a></code> form
   control, one that is hidden by CSS, a read-only control, the value of an
   <code>option</code> or <code><a href="#radio">radio</a></code> element,
   etc) the UA may wish to simply indicate to the user that there might be an
   error with the page itself.

  <p>If the submission is not canceled, the user agent must replace each
   character that is not in the submission character set with one or more
   replacement characters.

  <p>For each such missing character, UAs must either transliterate the
   character to a UA-defined human-recognizable representation (for example,
   transliterating U+263A to the three-character string ":-)" in US-ASCII, or
   U+2126 to the byte 0xD9 in ISO-8859-7), or, for characters where a
   dedicated transliteration is not known to the UA, replace the character
   with either U+FFFD, "?", or some other single character representing the
   same semantic as U+FFFD.

  <p>Note that a string containing the codepoint's value itself (for example,
   the six-character string "U+263A" or the seven-character string
   "&amp;#9786;") is not considered to be human readable and must not be used
   as a transliteration. (This is to discourage servers from attempting to
   mechanically convert such codepoints back into Unicode characters, as
   there is no way to distinguish such characters from identical literal
   strings entered by the user.)

  <h4 id="the-charset"><span class="secno">5.2.1. </span>The <dfn
   id="charset0"><code>_charset_</code></dfn> field</h4>

  <p>The <code>application/x-www-form-urlencoded</code> and
   <code>text/plain</code> encoding types for the form data set look for a
   <code><a href="#hidden">hidden</a></code> form field with the name
   <code><a href="#charset0">_charset_</a></code>, and if it is present in
   the form data set, they include it in the submission with the submission
   encoding. This allows authors to determine the encoding that was used in
   submissions that would otherwise be ambiguous.

  <h3 id="x-www-form-urlencoded"><span class="secno">5.3.
   </span><code>application/x-www-form-urlencoded</code></h3>

  <p>This section defines the expected behaviour for step 5, "Step five:
   Encode the form data set", of the submission algorithm described above,
   for the form content type <code>application/x-www-form-urlencoded</code>.
   The rest of the form submission process progresses as described above.

  <p>This is the default content type. Forms submitted with this content type
   must be encoded as follows:

  <ol>
   <li>The submission character encoding is selected from the form's
    <code>accept-charset</code> attribute. UAs must use the encoding that
    most completely covers the characters found in the form data set of the
    encodings specified. If the attribute is not specified, then the client
    should use either the page's character encoding, or, if that cannot
    encode all the characters in the form data set, UTF-8. Character
    encodings that are not mostly supersets of US-ASCII must not be used
    (this includes UTF-16 and EBCDIC) even if specified in the
    <code>accept-charset</code> attribute. <!-- because
   otherwise they wouldn't be even loosly backwards compatible. -->
    
    <p>How a UA establishes the page's character encoding is determined by
     the markup language specification (for example, <a
     href="http://www.w3.org/TR/html4/charset.html#h-5.2.2">HTML4 section
     5.2.2</a> <a href="#refsHTML4">[HTML4]</a>). It could be explicitly
     specified by the page, overridden by the user, or auto-detected by the
     UA.</p>

    <p>Authors must not specify an encoding other than UTF-8 or US-ASCII in
     the <code>accept-charset</code> attribute when the method used is
     <code>get</code> and the <code>action</code> indicates an HTTP resource.</p>

   <li>If the form contains an input control of type <code><a
    href="#hidden">hidden</a></code> with the name <code><a
    href="#charset0">_charset_</a></code>, it is forced to appear in the form
    data set, with the value equal to the name of the submission character
    encoding used.

   <li>The values of file upload controls are the names (excluding path
    information) of the files selected by the user, <em>not</em> their
    contents. (The names <a href="#anonymous-files">may be blank</a>.)

   <li>Control names and values are escaped. Space characters are replaced by
    "+" (U+002B), and other non-alphanumeric characters are encoded in the
    submission character encoding and each resulting byte is replaced by
    "%HH", a percent sign (U+0025) and two uppercase hexadecimal digits
    representing the value of the byte.

   <li>The control names/values are listed in the order they appear in the
    form data set. The name is separated from the value by "=" (U+003D) and
    name/value pairs are separated from each other by "&amp;" (U+0026).
  </ol>

  <p> Note that the control index and repetition block parts of the form data
   set are not used.

  <h3 id="x-www-form-xml"><span class="secno">5.4.
   </span><code>application/x-www-form+xml</code>: XML submission</h3>

  <p>This section defines the expected behaviour for step 5, "Step five:
   Encode the form data set", of the submission algorithm described above,
   for the form content type <code>application/x-www-form+xml</code>. The
   rest of the form submission process progresses as described above.

  <p>The message entity must be a well-formed XML 1.0 document, encoded as
   either UTF-8 or UTF-16 (at the choice of the UA), which has a root element
   named <code>formdata</code>, with no prefix, defining a default namespace
   <code>http://n.whatwg.org/formdata</code>.

  <p class="note">As described by the XML specification, UAs may include an
   XML declaration (although doing so would be redundant). If using UTF-16,
   UAs must include a BOM. If using UTF-8, UAs may include a BOM, but it is
   not required.

  <p>Note that the form's <code>accept-charset</code> attribute is ignored
   for this encoding type.

  <p>First, for each repetition block in the form data set, an element
   <code><a href="#repeat">repeat</a></code> is inserted, with an attribute
   <code><a href="#template">template</a></code> equal to the ID of the
   template, and an attribute <code>index</code> equal to the index of the
   repetition block. The element is empty.

  <p class="note">Servers are generally expected to ignore <code><a
   href="#repeat">repeat</a></code> elements; they are primarily included so
   that form data can be round-tripped using the <code>data</code> attribute
   on the form element.

  <p>Then, for each <a href="#successful">successful</a> control that is not
   a file upload control, in the order that the controls are to be found in
   the original document, an element <code>field</code> is inserted, with an
   attribute <code><a href="#name">name</a></code> having the name of the
   form control, an attribute <code>index</code> having the control index
   described above in the definition of the <span><a href="#form-data">form
   data set</a></span>, and with the element content being the <span>current
   value</span> of the form control. Form controls with multiple values
   result in multiple <code>field</code> elements being inserted into the
   output, one for each value, all with the same index.

  <p>File controls are submitted using a <code><a
   href="#file">file</a></code> element instead of a <code>field</code>
   element. The <code><a href="#file">file</a></code> element has four
   attributes, <code><a href="#name">name</a></code>, <code>index</code>,
   <code>filename</code>, and <code>type</code>. The <code><a
   href="#name">name</a></code> attribute contains the name of the file
   control. The <code>index</code> attribute contains the control index in
   the control's entry in the form data set. The <code>filename</code>
   attribute is optional and may contain the name of the file, <a
   href="#anonymous-files">if it has one</a>. The <code>type</code> attribute
   is also optional and must either contain the MIME type of the file or be
   omitted if the client is unaware of the correct type. The type may contain
   MIME parameters if appropriate. <a href="#refsRFC2046">[RFC2046]</a> The
   contents of the file are base64 encoded and then included literally as
   content directly inside the <code><a href="#file">file</a></code> element.
   As base64 data is whitespace-clean, UAs may introduce whitespace into the
   <code><a href="#file">file</a></code> element to ensure the submitted data
   has reasonable line lengths. This is, however, completely optional. (It is
   primarily intended to make it possible to write readable examples of
   submission output.)

  <p>UAs may use either CDATA blocks, entities, or both in escaping the
   contents of attributes and elements, as appropriate. The resulting XML
   must be a well-formed XML instance. The only mention of namespaces in the
   submission document must be the declaration of the default namespace on
   the root element.

  <p>Whitespace may be inserted around elements that are children of the
   <code>formdata</code> element in order to make the submitted data easier
   to scan by eye. However, this is optional. Processors should not be
   affected by such whitespace, or whitespace inside <code><a
   href="#file">file</a></code> elements, when reading the submitted data
   back from the XML instance. (Whitespace inside <code>field</code> elements
   is significant, however.)

  <p class="note">While this section restricts the exact features of XML that
   a UA may use, these restrictions do not apply to the files used when <a
   href="#seeding">seeding a form with initial values</a>.

  <p class="note">For forward compatibility, it is suggested that scripts
   skip past unexpected nodes and their descendents when processing XML files
   representing form submissions.

  <div class="example">
   <p>The following example illustrates
    <code>application/x-www-form+xml</code> encoding. Suppose we have the
    following form:</p>

   <pre>
&lt;form action="http://example.com/cgi/handle"
      enctype="application/x-www-form+xml"
      method="post"&gt;
 &lt;p&gt;
  &lt;label&gt; What is your name? &lt;input type="text" name="submit-name"/&gt; &lt;/label&gt;
  &lt;label&gt; What files are you sending? &lt;input type="file" name="files"/&gt; &lt;/label&gt;
  &lt;label&gt; When were they written? &lt;input type="date" name="stamp"/&gt; &lt;/label&gt;
  &lt;input type="submit" value="Send"/&gt;
 &lt;/p&gt;
&lt;/form&gt;
</pre>

   <p>If the user enters "Larry" in the text input, selects the text file
    "file1.txt", and picks an arbitrary date, the user agent might send back
    the following data:</p>

   <pre>
Content-Type: application/x-www-form+xml

&lt;formdata xmlns="http://n.whatwg.org/formdata"&gt;
 &lt;field name="submit-name" index="0"&gt;Larry&lt;/field&gt;
 &lt;file name="files" index="0" filename="file1.txt" type="text/plain;charset=iso-8859-1"&gt;
  Y29udGVudHMgb2YgZmlsZTEudHh0
 &lt;/file&gt;
 &lt;field name="stamp" index="0"&gt;1979-04-13&lt;/field&gt;
&lt;/formdata&gt;
</pre>

   <p>If the user selects a second (image) file "file2.png"<!--, and
   changes the date-->,
    the user agent might construct the entity as follows:</p>

   <pre>
Content-Type: application/x-www-form+xml

&lt;formdata xmlns="http://n.whatwg.org/formdata"&gt;
 &lt;field name="submit-name" index="0"&gt;Larry&lt;/field&gt;
 &lt;file name="files" index="0" filename="file1.txt" type="text/plain;charset=iso-8859-1"&gt;
  Y29udGVudHMgb2YgZmlsZTEudHh0
 &lt;/file&gt;
 &lt;file name="files" index="0" filename="file2.png" type="image/png"&gt;
  iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAMAAAAoyzS7AAAABGdBTUEAAK
  /INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwA
  AAAGUExURQD/AAAAAG8DfkMAAAAMSURBVHjaYmAACDAAAAIAAU9tWeEAAA
  AASUVORK5CYII=
 &lt;/file&gt;
 &lt;field name="stamp" index="0"&gt;1979-12-27&lt;/field&gt;
&lt;/formdata&gt;
</pre>

   <p>Note how the content of the plain text attached file is base64-encoded,
    despite being a plain text file. This preserves the integrity of the file
    in cases where the MIME type is incorrect. It also means that files with
    malformed content, for example, a file encoded as UTF-8 with stray
    continuation bytes, will be transmitted faithfully instead of being
    re-encoded by the UA.</p>
  </div>

  <div class="example">
   <p>This example illustrates this encoding for the case with two form
    controls with the same name. Suppose we have the following form:</p>

   <pre>
&lt;form enctype="application/x-www-form+xml" method="post"&gt;
 &lt;p&gt;
  Enter your new password twice:
  &lt;input type="password" name="password"/&gt;
  &lt;input type="password" name="password"/&gt;
  &lt;input type="submit" value="Send"/&gt;
 &lt;/p&gt;
&lt;/form&gt;
</pre>

   <p>If the user enters "perfect" and "prefect", the user agent might send
    back the following data:</p>

   <pre>
Content-Type: application/x-www-form+xml

&lt;formdata xmlns="http://n.whatwg.org/formdata"&gt;
 &lt;field name="password" index="0"&gt;perfect&lt;/field&gt;
 &lt;field name="password" index="1"&gt;prefect&lt;/field&gt;
&lt;/formdata&gt;
</pre>
  </div>

  <div class="example">
   <p>Recall the <a href="#repeatExample">example for repetition blocks</a>.
    If it was immediately submitted, the output would be an XML file
    equivalent to:</p>

   <pre>
Content-Type: application/x-www-form+xml

&lt;formdata xmlns="http://n.whatwg.org/formdata"&gt;
 &lt;repeat template="row" index="0"/&gt;
 &lt;repeat template="row" index="1"/&gt;
 &lt;field name="name_0" index="0"&gt;John Smith&lt;/field&gt;
 &lt;field name="count_0" index="0"&gt;2&lt;/field&gt;
 &lt;field name="name_1" index="0"&gt;&lt;/field&gt;
 &lt;field name="count_1" index="0"&gt;1&lt;/field&gt;
&lt;/formdata&gt;
</pre>
  </div>
  <!-- XXX for a future version:
  <p>[after the document has been created, an onXMLSubmit event is
  fired on the form with a mutable version of the document node of the
  submission document as its context information. this could be passed
  to an XSLT processor to turn the submission XML into a new
  format.]</p> -->

  <h3 id="text-plain"><span class="secno">5.5. </span><code>text/plain</code></h3>

  <p>This section defines the expected behaviour for step 5, "Step five:
   Encode the form data set", of the submission algorithm described above,
   for the form content type <code>text/plain</code>. The rest of the form
   submission process progresses as described above.

  <p>This content type is more human readable than the others but is not
   unambiguously parseable. Forms submitted with this content type must be
   encoded as follows:

  <ol>
   <li>The submission character encoding is selected from the form's
    <code>accept-charset</code> attribute. UAs must use the encoding that
    most completely covers the characters found in the form data set of the
    encodings specified. If the attribute is not specified, then the client
    should use either the page's character encoding, or, if that cannot
    encode all the characters in the form data set, UTF-8.
    <p>How a UA establishes the page's character encoding is determined by
     the language specification (for example, <a
     href="http://www.w3.org/TR/html4/charset.html#h-5.2.2">HTML4 section
     5.2.2</a> <a href="#refsHTML4">[HTML4]</a>). It could be explicitly
     specified by the page, overridden by the user, or auto-detected by the
     UA.</p>
   </li>
   <!-- because otherwise they wouldn't be even loosly backwards
   compatible. -->

   <li>If the form contains an input control of type <code><a
    href="#hidden">hidden</a></code> with the name <code><a
    href="#charset0">_charset_</a></code>, it is forced to appear in the form
    data set, with the value equal to the name of the submission character
    encoding used.

   <li>The values of file upload controls are the names (excluding path
    information) of the files selected by the user, <em>not</em> their
    contents. (The names <a href="#anonymous-files">may be blank</a>.)

   <li>The control names/values are listed in the order they appear in the
    form data set. The name is separated from the value by "=" (U+003D) and
    name/value pairs are separated from each other by a newline character.
  </ol>

  <p> Note that the control index and repetition block parts of the form data
   set are not used.

  <p class="note">This algorithm does not directly parallel the algorithm for
   <code>application/x-www-form-urlencoded</code>. This is mostly due to
   backwards compatibility concerns (for both cases).

  <h3 id="methodAndEnctypes"><span class="secno">5.6.
   </span><!--Semantics of <code>method</code> and
  <code>enctype</code> attributes: -->Submitting
   the encoded form data set</h3>

  <p>The exact semantics of the <code>method</code> and <code>enctype</code>
   attributes depend on the protocol specified by the <code>action</code>
   attribute, in the manner described in this section.

  <p>The attributes considered are those of the element that initiated the
   submission &mdash; if the user started the submission then the attributes
   come from the submit button or image that the user activated; if script
   started the submission then the attributes of the form are used. If an
   attribute is missing from a submit button, then the equivalent attribute
   on the form is used instead.

  <div class="example">
   <p>In the following example:</p>

   <pre>
&lt;form action="test.php" method="post"&gt;
 &lt;input type="submit"&gt;
 &lt;input type="submit" method="get"&gt;
&lt;/form&gt;
</pre>

   <p>The first submit button would submit to the <code>test.php</code>
    script using the HTTP POST method, and the second would submit to the
    same script but using the HTTP GET method.</p>
  </div>

  <p>The HTTP specification defines various methods that can be used with
   HTTP URIs. Four of these may be used as values of the <code>method</code>
   attribute: <code>get</code>, <code>post</code>, <code>put</code>, and
   <code>delete</code>. In this specification, these method names are applied
   to other protocols as well. This section defines how they should be
   interpreted.

  <p>If the specified <code>method</code> is not one of <code>get</code>,
   <code>post</code>, <code>put</code>, or <code>delete</code> then it is
   treated as <code>get</code> in the tables below.

  <p id="missing-enctype">If the <code>enctype</code> attribute is not
   specified (or is set to the empty string), and the form consists of
   exactly one file upload control with exactly one file selected, then in
   the tables below, the "File upload" rows must be used. (This is primarily
   to allow the PUT method to actually be useful for uploading data other
   than form fields.) If the form contains something other than just one file
   upload control with exactly one file selected, or if the attribute
   <em>is</em> specified but has an unrecognised value, the
   <code>enctype</code> attribute is treated as if it was
   <code>application/x-www-form-urlencoded</code>.

  <p>User agents may implement whichever URI schemes are required for their
   particular application. This specification does not specify a required
   core set of protocols that must be implemented. For those that are
   implemented, UAs must use the algorithms given in the following sections
   when submitting data using those protocols.

  <p>What user agents should do when the designated resource is fetched
   depends on the value of the <code><a href="#replace">replace</a></code>
   attribute. This is described in <a href="#replaceSemantics">step eight of
   the algorithm</a>.

  <p id="enctype-comparison">The value of the <code>enctype</code> attribute
   must be dispatched using a <code><a
   href="#case-insensitive">case-insensitive</a></code> literal comparison.
   The attribute must therefore not have any MIME parameters. (For example,
   the value <code>multipart/form-data;charset=utf-8</code> must not be
   treated as matching <code>multipart/form-data</code>.)

  <p class="note">In the tables below, cells that specify that their case
   should be handled as another represent attribute combinations that are
   otherwise meaningless. In such cases, the encoded data set is created from
   the fallback encoding type, not the specified encoding type.

  <h4 id="for-http"><span class="secno">5.6.1. </span>For <code>http:</code>
   actions</h4>

  <p>HTTP is described by <a href="#refsRFC2616">[RFC2616]</a>.

  <table>
   <tbody>
    <tr>
     <th>

     <th>get

     <th>post

     <th>put

     <th>delete

    <tr>
     <th>application/x-www-form-urlencoded

     <td>Use the encoded data set as the query value for a URI formed from
      the <code>action</code> attribute and fetch it via HTTP GET. If the URI
      given by the <code>action</code> attribute already contains a query
      value (i.e. the URI already contains a <code>?</code> character) then
      that query value is removed first.

     <td colspan="2" rowspan="4">Use the encoded data set as the entity body,
      with the <code>Content-Type</code> set appropriately, and submit it
      using the specified method.

     <td rowspan="5">Ignore the form data set and access <code>action</code>
      with the specified method.

    <tr>
     <th>multipart/form-data

     <td rowspan="4">Handle as if <code>enctype</code> was
      <code>application/x-www-form-urlencoded</code>.

    <tr>
     <th>application/x-www-form+xml

    <tr>
     <th>text/plain

    <tr>
     <th>File upload

     <td colspan="2">Use the file content as the entity body, with the
      <code>Content-Type</code> set to its MIME type, and submit it using the
      specified method.
  </table>

  <p class="example">For a GET request, if the <code>action</code> attribute
   of a form resolved to <code>http://example.com/?q=test</code> and the
   encoded data set was <code>foo=bar</code> then the resulting URI would be
   <code>http://example.com/?foo=bar</code>.

  <h4 id="for-ftp"><span class="secno">5.6.2. </span>For <code>ftp:</code>
   actions</h4>

  <p>The <code>ftp:</code> URI scheme is described by <a
   href="#refsRFC1738">[RFC1738]</a> and FTP itself is described by <a
   href="#refsRFC959">[RFC959]</a>.

  <p>Using the FTP protocol for form submission is of dubious value and is
   discouraged.

  <table>
   <tbody>
    <tr>
     <th>

     <th>get

     <th>post

     <th>put

     <th>delete

    <tr>
     <th>application/x-www-form-urlencoded

     <td rowspan="5">Ignore the form data set and retrieve the file specified
      by <code>action</code> (<code>RETR</code>).

     <td rowspan="5">Handle as if <code>method</code> was <code>put</code>.

     <td rowspan="4">Use the encoded data set as the content of a file and
      upload it to the location specified by <code>action</code>
      (<code>STOR</code>). The response body has no content (equivalent to an
      HTTP 204 No Content response.)

     <td rowspan="5">Ignore the form data set and delete the file specified
      by <code>action</code> (<code>DELE</code>). The response body has no
      content (equivalent to an HTTP 204 No Content response.)

    <tr>
     <th>multipart/form-data

    <tr>
     <th>application/x-www-form+xml

    <tr>
     <th>text/plain

    <tr>
     <th>File upload

     <td>Upload the selected file to the location specified by the
      <code>action</code> attribute (<code>STOR</code>). The response body
      has no content (equivalent to an HTTP 204 No Content response.)
  </table>

  <div class="example">
   <p>Using these semantics, a poor man's FTP upload form could be written
    like so:</p>

   <pre>
&lt;form method="put" xml:base="ftp://ftp.example.com/incoming/"&gt;
 &lt;p&gt;
  &lt;label&gt;
   Path:
   &lt;input type="text" pattern="[^./][^/]*"
             onchange="if (validity == 0) form.action = encodeURIComponent(value)"/&gt;
  &lt;/label&gt;
  &lt;input type="file" name="file"/&gt;
  &lt;input type="submit" value="Upload file"/&gt;
 &lt;/p&gt;
&lt;/form&gt;
</pre>
  </div>

  <h4 id="for-data"><span class="secno">5.6.3. </span>For <code>data:</code>
   actions</h4>

  <p>The <code>data:</code> URI scheme is described by <a
   href="#refsRFC2397">[RFC2397]</a>.

  <table>
   <tbody>
    <tr>
     <th>

     <th>get

     <th>post

     <th>put

     <th>delete

    <tr>
     <th>application/x-www-form-urlencoded

     <td>Ignore the form data set and access the <code>action</code> URI.

     <td rowspan="5">If the <code>action</code> contains the string "%%%%",
      URI escape all non-alphanumeric characters in the encoded form data
      set, URI escape the result again, and substitute the result for the
      first occurrence of the string "%%%%" in the <code>action</code>.
      Otherwise, just URI escape the encoded form data set once and
      substitute it for the first occurrence of the string "%%" in the
      <code>action</code> (if any). Then, access the resulting URI.

     <td rowspan="4">Ignore <code>action</code>; form a new base64-encoded
      data: URI from the entity body, using the appropriate MIME type, and
      access it.

     <td rowspan="5">Handle as if <code>method</code> was <code>post</code>.

    <tr>
     <th>multipart/form-data

     <td rowspan="4">Handle as if <code>enctype</code> was
      <code>application/x-www-form-urlencoded</code>.

    <tr>
     <th>application/x-www-form+xml

    <tr>
     <th>text/plain

    <tr>
     <th>File upload

     <td>Ignore <code>action</code>; form a new base64-encoded data: URI from
      the selected file's contents, using the file's MIME type, and access
      it.
  </table>

  <div class="example">
   <p>If the following form is submitted by pressing the button:</p>

   <pre>&lt;form action="data:,Data%20was:%20'%%%%'" method="post"&gt;
 &lt;p&gt;&lt;input type="submit" name="x" value="It's a test"&gt;
&lt;/form&gt;
</pre>

   <p>...it would result in the following URI being used:</p>

   <pre>data:,Data%20was:%20'x%253DIt%2527s%252Ba%252Btest'</pre>

   <p>...but if the action was changed to just
    <code>data:,Data%20was:%20'%%'</code> (that is, just "%%" instead of
    "%%%%") then the URI used would be:</p>

   <pre>data:,Data%20was:%20'x%3DIt's%2Ba%2Btest'</pre>
  </div>

  <p>Note that '%%' is invalid in a URI, so authors should exercise caution
   when using the <code>post</code> method with <code>data:</code> URIs.

  <p><strong>Usage:</strong> Submitting to data: URIs is mainly useful when
   debugging (to find out exactly what is being submitted).

  <h4 id="for-file"><span class="secno">5.6.4. </span>For <code><a
   href="#file">file:</a></code> actions</h4>

  <p>The <code><a href="#file">file:</a></code> URI scheme is described by <a
   href="#refsRFC1738">[RFC1738]</a>.

  <p>For security reasons, untrusted content should never be allowed to
   submit or fetch files specified by <code><a href="#file">file</a></code>
   URIs.

  <p>The semantics described in this subsection are recommended, but UAs may
   implement alternative semantics if desired, as consistent behaviour for
   submission to <code><a href="#file">file:</a></code> URIs is not required
   for interoperability on the World Wide Web.

  <table>
   <tbody>
    <tr>
     <th>

     <th>get

     <th>post

     <th>put

     <th>delete

    <tr>
     <th>application/x-www-form-urlencoded

     <td rowspan="5">Ignore the form data set and retrieve the file specified
      by <code>action</code>.

     <td rowspan="4">If the specified file is executable, launch the
      specified file in an environment that complies with the CGI
      Specification <a href="#refsRFC3875">[RFC3875]</a>, using the encoded
      data set as the standard input and the resulting standard output as an
      HTTP response entity (see details below). If the specified file is not
      executable, handle as if <code>method</code> was <code>get</code>.

     <td rowspan="4">Use the encoded data set as the content of a file and
      store it in the location specified by <code>action</code>. The response
      body has no content (equivalent to an HTTP 204 No Content response.)

     <td rowspan="5">Ignore the form data set and delete the file specified
      by <code>action</code>. The response body has no content (equivalent to
      an HTTP 204 No Content response.)

    <tr>
     <th>multipart/form-data

    <tr>
     <th>application/x-www-form+xml

    <tr>
     <th>text/plain

    <tr>
     <th>File upload

     <td>Same as for other types except the encoded form data set is the
      contents of the specified file.

     <td>Store the selected file at the location specified by the
      <code>action</code> URI.
  </table>

  <p>The standard output mentioned above for "post" requests should be
   handled as an HTTP/1.1 response entity, with a header section and an
   entity body section. If the header section contains a header with the name
   "Status", its value is appended to the string <code>HTTP/1.1 </code> and
   treated as the response status line. Otherwise, the response status line
   is assumed to be <code>HTTP/1.1 200 OK</code>. An explicit response status
   line if present, is treated as a header, not a status line.

  <div class="example">
   <p>If the standard output of a program executed in this context is:</p>

   <pre>Content-Type: text/plain
Status: 301 Permanent Redirect
Location: http://www.example.org/

See http://www.example.org/</pre>

   <p>...then the UA should handle this exactly as if it had received the
    following response over an HTTP connection:</p>

   <pre>HTTP/1.1 301 Permanent Redirect
Content-Type: text/plain
Location: http://www.example.org/

See http://www.example.org/</pre>

   <p>If a program in this context returned the following standard output:</p>

   <pre>'submit.pl' is not recognized as an internal or external command,
operable program or batch file.</pre>

   <p>...then the UA should handle this as the following HTTP response
    entity:</p>

   <pre>HTTP/1.1 200 OK
'submit.pl' is not recognized as an internal or external command,
operable program or batch file.
<!-- blank line --></pre>

   <p>...which is equivalent to an empty document (since there is no response
    body).</p>
  </div>

  <p><strong>Usage:</strong> Submitting to file: URIs is mainly useful when
   developing. The definition for POST to file: enables authors to develop
   CGI scripts without a Web server. It also allows content that uses simple
   CGI scripts to be shipped on media without Web servers (such as CDROMs).

  <p>Submitting to file: with PUT and DELETE is useful primarily with the XML
   submission format and preseeding, as it allows data to be stored locally
   between uses of the application.

  <h4 id="for-mailto"><span class="secno">5.6.5. </span>For
   <code>mailto:</code> actions</h4>

  <p>The <code>mailto:</code> URI scheme is described by <a
   href="#refsRFC2368">[RFC2368]</a>.

  <p>UAs should not send e-mails without the explicit consent of the user.

  <p>All submissions made using <code>mailto:</code> result in the equivalent
   of an HTTP 204 No Content response. Thus the <code><a
   href="#replace">replace</a></code> attribute is effectively ignored when
   <code>action</code> is a <code>mailto</code> URI.

  <table>
   <tbody>
    <tr>
     <th>

     <th>get

     <th>post

     <th>put

     <th>delete

    <tr>
     <th>application/x-www-form-urlencoded

     <td>Use the encoded data set as the <code>headers</code> part (see <a
      href="#refsRFC2368">[RFC2368]</a>) of a <code>mailto:</code> URI formed
      from the <code>action</code> attribute and process that URI.

     <td rowspan="4">Use the encoded data set as the default message body,
      with the <code>Content-Type</code> set appropriately, for a message
      based on the specified <code>action</code> attribute.

     <td colspan="2" rowspan="5">Handle as if <code>method</code> was
      <code>post</code>.

    <tr>
     <th>multipart/form-data

     <td rowspan="4">Handle as if <code>enctype</code> was
      <code>application/x-www-form-urlencoded</code>.

    <tr>
     <th>application/x-www-form+xml

    <tr>
     <th>text/plain

    <tr>
     <th>File upload

     <td>Attach the selected file to a message based on the specified
      <code>action</code> attribute.
  </table>

  <h4 id="for-smsto"><span class="secno">5.6.6. </span>For
   <code>smsto:</code> and <code>sms:</code> actions</h4>

  <p>The <code>smsto:</code> and <code>sms:</code> URI schemes are not yet
   specified.

  <p>UAs should not send SMSes without the explicit consent of the user.

  <p>All submissions made using the <code>smsto:</code> and <code>sms:</code>
   URI schemes result in the equivalent of an HTTP 204 No Content response.
   Thus the <code><a href="#replace">replace</a></code> attribute is
   effectively ignored when <code>enctype</code> is an SMS URI.

  <table>
   <tbody>
    <tr>
     <th>

     <th>get

     <th>post

     <th>put

     <th>delete

    <tr>
     <th>application/x-www-form-urlencoded

     <td><!--Use the encoded data set as the <code>headers</code> part
    (see <a href="#refsXXX">[XXX]</a>) of an <code>smsto:</code> URI
    formed from the <code>action</code> URI and process that
    URI.--><em>Behaviour
      is undefined, pending the release of an <code>smsto:</code> or
      <code>sms:</code> specification.</em>

     <td>Use the encoded data set as the default message body for a message
      based on the specified <code>action</code> attribute.

     <td colspan="2" rowspan="5">Handle as if <code>method</code> was
      <code>post</code>.

    <tr>
     <th>multipart/form-data

     <td rowspan="4">Handle as if <code>enctype</code> was
      <code>application/x-www-form-urlencoded</code>.

     <td rowspan="2">Handle as if <code>enctype</code> was
      <code>application/x-www-form-urlencoded</code>.

    <tr>
     <th>application/x-www-form+xml

    <tr>
     <th>text/plain

     <td>Use the encoded data set as the default message body for a message
      based on the specified <code>action</code> attribute.

    <tr>
     <th>File upload

     <td>Handle as if <code>enctype</code> was
      <code>application/x-www-form-urlencoded</code>.
  </table>

  <h4 id="for-javascript"><span class="secno">5.6.7. </span>For
   <code>javascript:</code> actions</h4>

  <p>The <code>javascript:</code> URI scheme is <a
   href="http://devedge.netscape.com/library/manuals/2000/javascript/1.3/reference/location.html#1193181">described</a>
   by <a href="#refsCSJSR">[CSJSR]</a>. ECMAScript is defined in <a
   href="#refsECMA262">[ECMA262]</a>.

  <p>If the response body of a submission to a <code>javascript:</code>
   action is the ECMAScript <code>void</code> type, then it is treated as if
   it was an HTTP 204 No Content response.

  <table>
   <tbody>
    <tr>
     <th>

     <th>get

     <th>post

     <th>put

     <th>delete

    <tr>
     <th>application/x-www-form-urlencoded

     <td rowspan="5">Ignore the form data set and access the URI given by the
      <code>action</code> attribute in the current context. The response body
      is the return value of the script.

     <td rowspan="5"> Encode the form data set by putting each name/value
      pair into a newly created object using the names as attributes of that
      object and the values as the values of those attributes. Execute the
      URI given by the <code>action</code> attribute in the context of the
      document after having added the aforementioned object to the start of
      the scope chain. Duplicate names should cause the property to become an
      array, with each value represented in the array. The response body is
      the return value of the script.

     <td colspan="2" rowspan="5">Handle as if <code>method</code> was
      <code>post</code>.

    <tr>
     <th>multipart/form-data

    <tr>
     <th>application/x-www-form+xml

    <tr>
     <th>text/plain

    <tr>
     <th>File upload
  </table>

  <p><strong>Usage:</strong> Submitting to javascript: URIs is useful for
   applications that are entirely client-side, but still form-driven.</p>
  <!--
  <table>
   <tr>
    <th></th>
    <th>get</th>
    <th>post</th>
    <th>put</th>
    <th>delete</th>
   </tr>
   <tr>
    <th>application/x-www-form-urlencoded</th>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
   </tr>
   <tr>
    <th>multipart/form-data</th>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
   </tr>
   <tr>
    <th>application/x-www-form+xml</th>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
   </tr>
   <tr>
    <th>text/plain</th>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
   </tr>
   <tr>
    <th>File upload</th>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
   </tr>
  </table>

  -->

  <h2 id="fetching-data"><span class="secno">6. </span>Fetching data from
   external resources</h2>

  <p>There are two scenarios where authors may wish data to be fetched from
   an external file to fill forms. In the first, a <code>select</code>'s
   options are replaced by options from an external file. In the second, a
   form's values are prefilled from an external data source.

  <p>In both cases, the prefilling may either be full, in which case the
   previous contents are removed first, or incremental, in which case the
   fetched data is in addition to the data already in the form.

  <p>Implementations may limit which hosts, ports, and schemes can be
   accessed using these methods. For example, HTTP-based content should not
   be able to preseed a form based on content from the local file system.
   Similarly, cross-domain scripting restrictions are fully expected to
   apply.

  <h3 id="selectSeeding"><span class="secno">6.1. </span>Filling
   <code>select</code> elements</h3>

  <p>If a <code>select</code> element or a <code><a
   href="#datalist">datalist</a></code> element being parsed has a <dfn
   id="data" title="select-data"><code>data</code></dfn> attribute, then as
   soon as the element and all its children have been parsed and added to the
   document, the prefilling process described here should start.

  <p>If a <code>select</code> element or a <code><a
   href="#datalist">datalist</a></code> element has a <code>data</code>
   attribute, it must be a URI or IRI that points to a well-formed XML file
   whose root element is a <code>select</code> element in the
   <code>http://www.w3.org/1999/xhtml</code> namespace. The MIME type must be
   an XML MIME type <a href="#refsRFC3023">[RFC3023]</a>, preferably
   <code>application/xml</code>. It should not be
   <code>application/xhtml+xml</code> since the root element is not
   <code>html</code>.

  <p>UAs must process this file if it has an XML MIME type <a
   href="#refsRFC3023">[RFC3023]</a>, if it is a well-formed XML file, and if
   the root element is the right root element in the right namespace. If any
   of these conditions are not met, UAs must act as if the attribute was not
   specified, although they may report the error to the user. UAs are
   expected to correctly handle namespaces, so the file may use prefixes,
   etc.

  <p>If the UA processes the file, it must use the following algorithm to
   fill the form.

  <ol>
   <li>Unless the root element of the file has a <code>type</code> attribute
    with the exact literal string <code>incremental</code>, the children of
    the <code>select</code> or <code><a href="#datalist">datalist</a></code>
    element in the original document must all be removed from the document.

   <li>The entire contents of the <code>select</code> element in the
    referenced document are imported into the original document and appended
    as children of the <code>select</code> or <code><a
    href="#datalist">datalist</a></code> element. (Even if importing into a
    <code>text/html</code> document, the newly imported nodes will still be
    namespaced.)

   <li>All nodes outside the <code>select</code> (such as stylesheet
    processing instructions, whitespace text nodes, and
    <code>DOCTYPE</code>s) are ignored, as are attributes (other than
    <code>type</code>) on the <code>select</code> element.
  </ol>

  <p>The prefilling processes for <code>select</code> and <code><a
   href="#datalist">datalist</a></code> elements started during document load
   must all be completed before the document's <code>load</code> event can
   fire.

  <p>If a <code>select</code> or <code><a
   href="#datalist">datalist</a></code> element has its <code>data</code>
   attribute manipulated via the DOM, then the prefilling process must start
   as soon as any executing scripts have run to completion. If the attribute
   is set multiple times during one execution of a script, only the last
   request must take effect. If the process is started while an outstanding
   prefilling request is still being attended to, the requests must all be
   serviced in the order they were started.

  <div class="example">
   <p>The following script has only one possible valid outcome:</p>

   <pre>
var select = document.createElementNS('http://www.w3.org/1999/xhtml', 'select');
select.data = '<span title="<select xmlns=&quot;http://www.w3.org/1999/xhtml&quot; type=&quot;incremental&quot;><option>b</option></select>">data:application/xml,%3Cselect%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml%22%20type%3D%22incremental%22%3E%3Coption%3Eb%3C%2Foption%3E%3C%2Fselect%3E</span>';
// at this point, select.length == 0 is guaranteed
var option = document.createElementNS('http://www.w3.org/1999/xhtml', 'option');
option.appendChild(document.createTextNode('a'));
select.appendChild(option);
// at this point, select.length == 1 is guaranteed
document.documentElement.appendChild(select);
</pre>

   <p>...namely, the insertion at the end of the document of a select widget
    which, in due course, will have three options, namely "a", "b" and "b".</p>
  </div>

  <h3 id="seeding"><span class="secno">6.2. </span>Seeding a form with
   initial values</h3>

  <p>Before <code>load</code> events are fired, but after the entire document
   has been parsed and after <code>select</code> elements have been <a
   href="#selectSeeding">filled from external data sources</a> (if
   necessary), forms with <dfn id="data0"
   title="form-data"><code>data</code></dfn> attributes are prefilled.

  <p class="note">In particular, UAs should not specifically wait for images
   and stylesheets to be loaded before preseeding forms.</p>
  <!-- the above is non-normative on purpose. The "should" is not an
  RFC 2119 one. -->

  <p>If a <code>form</code> has a <code>data</code> attribute, it must be a
   URI or IRI that points to a well-formed XML file whose root element is a
   <code>formdata</code> element in the
   <code>http://n.whatwg.org/formdata</code> namespace. The MIME type must be
   an XML MIME type <a href="#refsRFC3023">[RFC3023]</a>, preferably
   <code>application/xml</code>.

  <p>UAs must process this file if these conditions are met. If any of these
   conditions are not met, UAs must act as if the attribute was not
   specified, although they may report the error to the user. UAs are
   expected to correctly handle namespaces, so the file may use prefixes,
   etc.

  <p>If the UA processes the file, it must use the following algorithm to
   fill the form.

  <ol>
   <li>Unless the root element has a <code>type</code> attribute with the
    exact literal string <code>incremental</code>, the form must be reset to
    its initial values as specified in the markup.

   <li>Child text nodes, CDATA blocks, comments, and PIs of the root element
    of the specified file must be ignored.

   <li><code title="">repeat</code> elements in the
    <code>http://n.whatwg.org/formdata</code> namespace that are children of
    the root element, have a non-empty <code><a
    href="#template">template</a></code> attribute and an <code>index</code>
    attribute that contains only one or more digits in the range 0-9 with an
    optional leading minus sign (U+002D, "-"), have no other non-namespaced
    attributes (ignoring <code>xmlns</code> attributes), and have no content,
    must be processed as follows:
    <p>The <code><a href="#template">template</a></code> attribute should
     contain the ID of an element in the document. If the <code><a
     href="#template">template</a></code> attribute specifies an element that
     is not a <span><a href="#repetition2">repetition template</a></span>,
     then the <code><a href="#repeat">repeat</a></code> element is ignored.</p>

    <p>If the <code><a href="#template">template</a></code> attribute
     specifies a <span><a href="#repetition2">repetition template</a></span>
     and that template already has a <span><a href="#repetition3">repetition
     block</a></span> with the index specified by the <code>index</code>
     attribute, then the element is ignored.</p>

    <p>Otherwise, the specified template's <code><a
     href="#addrepetitionblockbyindex">addRepetitionBlockByIndex()</a></code>
     method is called, with a null first argument and the index specified by
     the <code><a href="#repeat">repeat</a></code> element's
     <code>index</code> attribute as the second.</p>

   <li><code>field</code> elements in the
    <code>http://n.whatwg.org/formdata</code> namespace that are children of
    the root element, have a non-empty <code><a href="#name">name</a></code>
    attribute, either an <code>index</code> attribute that contains only one
    or more digits in the range 0-9 or no <code>index</code> attribute at
    all, have no other non-namespaced attributes (ignoring <code>xmlns</code>
    attributes), and have either nothing or only text and CDATA nodes as
    children, must be used to initialize fields, as follows.
    <p>First, the form control that the field references must be identified.
     This is done by walking the list of form controls associated with the
     form until one is found that has a name exactly equal to the name given
     in the <code>field</code> element's <code><a
     href="#name">name</a></code> attribute, skipping as many such matches as
     is specified in the <code>index</code> attribute, or, <em>if the
     <code>index</code> attribute was omitted</em>, skipping over any
     <code>type="radio"</code> and <code>type="checkbox"</code> controls that
     have the exact name given but have a value that is not exactly the same
     as the contents of the <code>field</code> element.</p>

    <p>For <code><a href="#image">image</a></code> controls, instead of using
     the name given by the <code><a href="#name">name</a></code> attribute,
     the field's name is checked against two names, the first being the value
     of the <code><a href="#name">name</a></code> attribute with the string
     <code>.x</code> appended to it, and the second being the same but with
     <code>.y</code> appended instead. If an <code><a
     href="#image">image</a></code> control's name is the empty string (e.g.
     if its <code><a href="#name">name</a></code> attribute is omitted) then
     the names <code>x</code> and <code>y</code> must be used instead. Thus
     <code><a href="#image">image</a></code> controls are handled as if they
     were two controls.</p>

    <p>If the identified form control is a file upload control, a push button
     control, or an image control, then the <code>field</code> element is now
     skipped.</p>

    <p>Next, if the identified form control is not a multiple-valued control
     (a multiple-valued control is one that can generate more than one value
     on submission, such as a <code>&lt;select
     multiple="multiple"&gt;</code>), or if it is a multiple-valued control
     but it is the first time the control has been identified by a
     <code>field</code> element in this data file that was not ignored, then
     it is set to the given value (the contents of the <code>field</code>
     element), removing any previous values (even if these values were the
     result of processing previous <code>field</code> elements in the same
     data file). Otherwise, this is a
     subsequent<!-- by which i mean "not first" --> value for a
     multiple-valued control, and the given value (the contents of the
     <code>field</code> element) should be <em>added</em> to the list of
     values that the element has selected.</p>

    <p>If the element cannot be given the value specified, the
     <code>field</code> element is ignored and the control's value is left
     unchanged. For example, if a checkbox has its value attribute set to
     <code>green</code> and the <code>field</code> element specifies that its
     value should be set to <code>blue</code>, it won't be changed from its
     current value. (The only values that would have an effect in this
     example are "", which would uncheck the checkbox, and "green", which
     would check the checkbox.) Another example would be a <code><a
     href="#datetime">datetime</a></code> control where the specified value
     is outside the range allowed by the <code><a href="#min">min</a></code>
     and <code><a href="#max">max</a></code> attributes. The format must
     match the allowed formats for that type for the value to be set.</p>

    <p>If the element is a multiple-valued control and the control already
     has the given value selected, but it can be given the value again, then
     that occurs. For example, in the following case:</p>

    <pre>
&lt;select name="select" multiple="multiple"&gt;
 &lt;option&gt;test&lt;/option&gt;
 &lt;option&gt;test&lt;/option&gt;
 &lt;option&gt;test&lt;/option&gt;
&lt;/select&gt;
</pre>

    <p>...if the data file contained two instances of:</p>

    <pre>&lt;field name="select" index="0"&gt;test&lt;/field&gt;</pre>

    <p>...then the first two <code>option</code> elements would end up
     selected, and the last would not. This would be the case irrespective of
     which <code>option</code> elements had their <code>selected</code>
     attribute set in the markup.</p>

    <p class="note">The <code>option</code> elements are never directly
     matched by <code>field</code> elements; it is the <code>select</code>
     element in this case that is matched (twice). This is why the two
     <code>field</code> elements select subsequent values in the control.</p>

    <p>If the element is a multiple-valued control and the control already
     has the given value selected and it <em>cannot</em> be given the value
     again, then the field is ignored.</p>

    <p>If the element is a radio button, then setting it to its value resets
     all the other radio buttons in the group to their unchecked state.</p>

   <li>A <code><a href="#formchange">formchange</a></code> event is then
    fired on all the form controls of the form.
  </ol>

  <p>All other elements in the file must be ignored. The algorithm must be
   processed in the order given above, meaning <code><a
   href="#repeat">repeat</a></code> elements are handled before the
   <code>field</code> elements, regardless of the order in which the elements
   are given. (Note that this implies that this process cannot be performed
   incrementally.)

  <p class="note">Note that file upload controls cannot be repopulated.
   However, an <code><a href="#output0">output</a></code> control
   <em>can</em> be populated. This can be used, for example, for localizing a
   form by including the structure in one file and the strings in another.
   (The semantics of this practice are somewhat dubious, however. It is only
   mentioned because XForms advocates claim this as a feature.)</p>
  <!--
   Take:
   <select name="a" multiple="multiple">
     <option value="a" selected="selected"/>
     <option value="b" selected="selected"/>
   </select>
   <select name="a">
     <option value="a" selected="selected"/>
     <option value="b" selected="selected"/>
   </select>
   <input type="text" name="a" value="a">
   <input type="text" name="a" value="b">

   If the user sets
     the first to be blank
     the second to have only "b" selected
     the third to say "a"
     the fourth to say "a".

  -->

  <p>The form prefilling processes started during document load must all be
   completed before the document's <code>load</code> event can fire.

  <p>Setting the <code>data</code> attribute dynamically does not cause the
   UA to refill the form. The semantics of the <code>data</code> attribute
   are only relevant during initial document load, with the form filling
   kicked off just as the document has finished being parsed. Thus, as far as
   scripted changes to the DOM are concerned, UAs must only prefill forms
   with <code>data</code> attributes that are added to the document by script
   before the UA has finished parsing the document. The DOM <a
   href="#resetFromDataDOM">can be used to refill a form</a> after the
   document has finishing loading using other methods, however.

  <h2 id="dom"><span class="secno">7. </span>Extensions to the HTML Level 2
   DOM interfaces</h2>

  <p>Unless otherwise specified, these interfaces have the same semantics as
   defined in <a href="#refsDOM2HTML">[DOM2HTML]</a>.

  <p>The interfaces found within this section are mandatory for UAs that
   implement this specification and support scripting. A DOM application may
   use the <code>hasFeature(feature, version)</code> method of the
   <code>DOMImplementation</code> interface with parameter values "WebForms"
   and "2.0" (respectively) to determine whether or not this module is
   supported by the implementation. User agents may return true for such a
   call (full compliance is not required to return true). Please refer to
   additional information about conformance in the DOM Level 3 Core
   specification. <a href="#refsDOM3CORE">[DOM3CORE]</a>

  <pre class="idl">
interface <dfn id="htmlformelement">HTMLFormElement</dfn> : <code>HTMLElement</code> {
  readonly attribute HTMLCollection  <code><a href="#elements">elements</a></code>;
  readonly attribute long            <code title="">length</code>;
           attribute DOMString       <code title="">name</code>;
           attribute DOMString       <code title="">acceptCharset</code>;
           attribute DOMString       <code title="">action</code>;
           attribute DOMString       <code title="">enctype</code>;
           attribute DOMString       <code title="">method</code>;
           attribute DOMString       <code title="">target</code>;
  void               <code title="">submit</code>();
  void               <code title="">reset</code>();

  // new in this specification:
           attribute DOMString       <code title="dom-accept"><a href="#accept2">accept</a></code>;
           attribute DOMString       <code title="dom-replace"><a href="#replace0">replace</a></code>;
           attribute DOMString       <code title="dom-data"><a href="#data1">data</a></code>;
  readonly attribute HTMLCollection  <code title="templateElements"><a href="#templateelements">templateElements</a></code>;
  bool               <code title="checkValidity"><a href="#checkvalidity">checkValidity</a></code>();
  void               <code title="resetFromData"><a href="#resetfromdata">resetFromData</a></code>(in Document data);

  void               <code title="form-dispatchFormInput"><a href="#dispatchforminput">dispatchFormInput</a></code>();
  void               <code title="form-dispatchFormChange"><a href="#dispatchformchange">dispatchFormChange</a></code>();
};

interface <dfn id="htmlselectelement">HTMLSelectElement</dfn> : <code>HTMLElement</code> {
  readonly attribute DOMString       <code title="dom-type"><a href="#type">type</a></code>;
           attribute long            <code title="">selectedIndex</code>;
           attribute DOMString       <code title="">value</code>;
           attribute unsigned long   <code title="">length</code>;
                                        // raises(DOMException) on setting

  readonly attribute HTMLFormElement <code title="dom-form"><a href="#form1">form</a></code>;
  readonly attribute HTMLOptionsCollection <code title="">options</code>;
           attribute boolean         <code title="dom-disabled"><a href="#disabled1">disabled</a></code>;
           attribute boolean         <code title="">multiple</code>;
           attribute DOMString       <code title="">name</code>;
           attribute long            <code title="dom-select-size"><a href="#size">size</a></code>;
           attribute long            <code title="">tabIndex</code>;
  void               <code title="">add</code>(in HTMLElement element, 
                         in HTMLElement before)
                                        raises(DOMException);
  void               <code title="">remove</code>(in long index);
  void               <code title="">blur</code>();
  void               <code title="">focus</code>();

  // new in this specification:
  readonly attribute NodeList        <code><a href="#forms">forms</a></code>;
           attribute DOMString       <code title="dom-accessKey">accessKey</code>;
           attribute boolean         <code title="dom-autofocus"><a href="#autofocus1">autofocus</a></code>;
           attribute DOMString       <code title="dom-data"><a href="#data1">data</a></code>;
  readonly attribute HTMLCollection  <code title="dom-selectedOptions"><a href="#selectedoptions">selectedOptions</a></code>;
  readonly attribute HTMLCollection  <code title="dom-labels"><a href="#labels0">labels</a></code>;

  readonly attribute boolean         <code title="willValidate"><a href="#willvalidate">willValidate</a></code>;
  readonly attribute <code><a href="#validitystate0">ValidityState</a></code>   <code title="validity"><a href="#validity">validity</a></code>;
  readonly attribute DOMString       <code title="validationMessage"><a href="#validationmessage">validationMessage</a></code>;
  bool               <code title="checkValidity"><a href="#checkvalidity">checkValidity</a></code>();
  void               <code title="setCustomValidity"><a href="#setcustomvalidity">setCustomValidity</a></code>(in DOMString error);
  void               <code title="dispatchChange"><a href="#dispatchchange">dispatchChange</a></code>();
  void               <code title="dispatchFormChange"><a href="#dispatchformchange0">dispatchFormChange</a></code>();
};

interface <dfn id="htmldatalistelement">HTMLDataListElement</dfn> : HTMLElement {
  readonly attribute HTMLOptionsCollection <code title="dom-options">options</code>;
           attribute DOMString       <code title="dom-data"><a href="#data1">data</a></code>;
};

interface <dfn id="htmloptgroupelement">HTMLOptGroupElement</dfn> : <code>HTMLElement</code> {
           attribute boolean         <code title="dom-disabled"><a href="#disabled1">disabled</a></code>;
           attribute DOMString       <code title="dom-label">label</code>;
};

interface <dfn id="htmloptionelement">HTMLOptionElement</dfn> : <code>HTMLElement</code> {
  readonly attribute HTMLFormElement <code title="dom-form"><a href="#form1">form</a></code>;
           attribute boolean         <code title="dom-defaultSelected">defaultSelected</code>;
  readonly attribute DOMString       <code title="dom-text">text</code>;
  readonly attribute long            <code title="dom-index">index</code>;
           attribute boolean         <code title="dom-disabled"><a href="#disabled1">disabled</a></code>;
           attribute DOMString       <code title="dom-label">label</code>;
           attribute boolean         <code title="dom-selected">selected</code>;
           attribute DOMString       <code title="dom-value">value</code>;

  // new in this specification:
  readonly attribute NodeList        <code><a href="#forms">forms</a></code>;
};

interface <dfn id="htmlinputelement">HTMLInputElement</dfn> : <code>HTMLElement</code> {
           attribute DOMString       <code title="dom-input-defaultValue"><a href="#defaultvalue0">defaultValue</a></code>;
           attribute boolean         <code title="dom-defaultChecked">defaultChecked</code>;
  readonly attribute HTMLFormElement <code title="dom-form"><a href="#form1">form</a></code>;
           attribute DOMString       <code title="dom-accept"><a href="#accept2">accept</a></code>;
           attribute DOMString       <code title="dom-accessKey">accessKey</code>;
           attribute DOMString       <code title="dom-align">align</code>;
           attribute DOMString       <code title="dom-alt">alt</code>;
           attribute boolean         <code title="dom-checked">checked</code>;
           attribute boolean         <code title="dom-disabled"><a href="#disabled1">disabled</a></code>;
           attribute long            <code title="dom-maxLength">maxLength</code>;
           attribute DOMString       <code title="dom-name">name</code>;
           attribute boolean         <code title="dom-readOnly">readOnly</code>;
           attribute unsigned long   <code title="dom-size">size</code>;
           attribute DOMString       <code title="dom-src">src</code>;
           attribute long            <code title="dom-tabIndex">tabIndex</code>;
           attribute DOMString       <code title="dom-type"><a href="#type">type</a></code>;
           attribute DOMString       <code title="dom-useMap">useMap</code>;
           attribute DOMString       <code title="dom-value">value</code>;
  void               <code title="dom-blur">blur</code>();
  void               <code title="dom-focus">focus</code>();
  void               <code title="dom-select">select</code>();
  void               <code title="dom-click">click</code>();

  // new in this specification:
  readonly attribute NodeList        <code><a href="#forms">forms</a></code>;
           attribute DOMString       <code title="dom-min"><a href="#min0">min</a></code>;
           attribute DOMString       <code title="dom-max"><a href="#max0">max</a></code>;
           attribute DOMString       <code title="dom-step"><a href="#step0">step</a></code>;
           attribute DOMString       <code title="dom-pattern"><a href="#pattern0">pattern</a></code>;
           attribute boolean         <code title="dom-required"><a href="#required1">required</a></code>;
           attribute boolean         <code title="dom-autocomplete"><a href="#autocomplete0">autocomplete</a></code>;
           attribute boolean         <code title="dom-autofocus"><a href="#autofocus1">autofocus</a></code>;
           attribute DOMString       <code title="dom-inputmode"><a href="#inputmode0">inputmode</a></code>;
           attribute DOMString       <code title="dom-action"><a href="#action">action</a></code>;
           attribute DOMString       <code title="dom-enctype"><a href="#enctype">enctype</a></code>;
           attribute DOMString       <code title="dom-method"><a href="#method">method</a></code>;
           attribute DOMString       <code title="dom-target"><a href="#target">target</a></code>;
           attribute DOMString       <code title="dom-replace"><a href="#replace0">replace</a></code>;
  readonly attribute HTMLElement     <code title="dom-list"><a href="#list0">list</a></code>;
  readonly attribute <code><a href="#htmloptionelement">HTMLOptionElement</a></code> <code title="dom-selectedOption"><a href="#selectedoption">selectedOption</a></code>;
  readonly attribute <code><a href="#repetitionelement0">RepetitionElement</a></code> <code title="dom-htmlTemplate"><a href="#htmltemplate">htmlTemplate</a></code>;
  readonly attribute HTMLCollection  <code title="dom-labels"><a href="#labels0">labels</a></code>;

           attribute DOMTimeStamp    <code><a href="#valueasdate">valueAsDate</a></code>;
           attribute float           <code><a href="#valueasnumber">valueAsNumber</a></code>;

  void <code title="stepUp"><a href="#stepup">stepUp</a></code>(in int n);
  void <code title="stepDown"><a href="#stepdown">stepDown</a></code>(in int n);
<!--
           attribute long            <code title="selectionStart">selectionStart</code>;
           attribute long            <code title="selectionEnd">selectionEnd</code>;
  void <code title="setSelectionRange">setSelectionRange</code>(in long start, in long end);
-->
  readonly attribute boolean         <code title="willValidate"><a href="#willvalidate">willValidate</a></code>;
  readonly attribute <code><a href="#validitystate0">ValidityState</a></code>   <code title="validity"><a href="#validity">validity</a></code>;
  readonly attribute DOMString       <code title="validationMessage"><a href="#validationmessage">validationMessage</a></code>;
  bool               <code title="checkValidity"><a href="#checkvalidity">checkValidity</a></code>();
  void               <code title="setCustomValidity"><a href="#setcustomvalidity">setCustomValidity</a></code>(in DOMString error);
  void               <code title="dispatchChange"><a href="#dispatchchange">dispatchChange</a></code>();
  void               <code title="dispatchFormChange"><a href="#dispatchformchange0">dispatchFormChange</a></code>();
};

interface <dfn id="htmltextareaelement">HTMLTextAreaElement</dfn> : <code>HTMLElement</code> {
           attribute DOMString       <code title="dom-textarea-defaultValue"><a href="#defaultvalue1">defaultValue</a></code>;
  readonly attribute HTMLFormElement <code title="dom-form"><a href="#form1">form</a></code>;
           attribute DOMString       <code title="dom-accessKey">accessKey</code>;
           attribute long            <code title="dom-cols">cols</code>;
           attribute boolean         <code title="dom-disabled"><a href="#disabled1">disabled</a></code>;
           attribute DOMString       <code title="dom-name">name</code>;
           attribute boolean         <code title="dom-readOnly">readOnly</code>;
           attribute long            <code title="dom-rows">rows</code>;
           attribute long            <code title="dom-tabIndex">tabIndex</code>;
  readonly attribute DOMString       <code title="dom-type"><a href="#type">type</a></code>;
           attribute DOMString       <code title="dom-value">value</code>;
  void               <code title="blur">blur</code>();
  void               <code title="focus">focus</code>();
  void               <code title="select">select</code>();

  // new in this specification:
  readonly attribute NodeList        <code><a href="#forms">forms</a></code>;
           attribute DOMString       <code title="dom-wrap"><a href="#wrap0">wrap</a></code>;
           attribute DOMString       <code title="dom-pattern"><a href="#pattern0">pattern</a></code>;
           attribute boolean         <code title="dom-required"><a href="#required1">required</a></code>;
           attribute boolean         <code title="dom-autofocus"><a href="#autofocus1">autofocus</a></code>;
           attribute DOMString       <code title="dom-inputmode"><a href="#inputmode0">inputmode</a></code>;
           attribute long            <code title="dom-maxLength">maxLength</code>;
           attribute DOMString       <code title="dom-accept"><a href="#accept2">accept</a></code>;
  readonly attribute HTMLCollection  <code title="dom-labels"><a href="#labels0">labels</a></code>;
<!--
           attribute long            <code title="dom-selectionStart">selectionStart</code>;
           attribute long            <code title="dom-selectionEnd">selectionEnd</code>;
  void <code title="setSelectionRange">setSelectionRange</code>(in long start, in long end);
-->
  readonly attribute boolean         <code title="willValidate"><a href="#willvalidate">willValidate</a></code>;
  readonly attribute <code><a href="#validitystate0">ValidityState</a></code>   <code title="validity"><a href="#validity">validity</a></code>;
  readonly attribute DOMString       <code title="validationMessage"><a href="#validationmessage">validationMessage</a></code>;
  bool               <code title="checkValidity"><a href="#checkvalidity">checkValidity</a></code>();
  void               <code title="setCustomValidity"><a href="#setcustomvalidity">setCustomValidity</a></code>(in DOMString error);
  void               <code title="dispatchChange"><a href="#dispatchchange">dispatchChange</a></code>();
  void               <code title="dispatchFormChange"><a href="#dispatchformchange0">dispatchFormChange</a></code>();
};

interface <dfn id="htmlbuttonelement">HTMLButtonElement</dfn> : <code>HTMLElement</code> {
  readonly attribute HTMLFormElement <code title="dom-form"><a href="#form1">form</a></code>;
           attribute DOMString       <code title="dom-accessKey">accessKey</code>;
           attribute boolean         <code title="dom-disabled"><a href="#disabled1">disabled</a></code>;
           attribute DOMString       <code title="dom-name">name</code>;
           attribute long            <code title="dom-tabIndex">tabIndex</code>;
           attribute DOMString       <code title="dom-value">value</code>;

  // modified in this specification
           attribute DOMString       <code title="dom-type"><a href="#type">type</a></code>;

  // new in this specification:
  readonly attribute NodeList        <code><a href="#forms">forms</a></code>;
           attribute DOMString       <code title="dom-action"><a href="#action">action</a></code>;
           attribute DOMString       <code title="dom-enctype"><a href="#enctype">enctype</a></code>;
           attribute DOMString       <code title="dom-method"><a href="#method">method</a></code>;
           attribute DOMString       <code title="dom-target"><a href="#target">target</a></code>;
           attribute DOMString       <code title="dom-replace"><a href="#replace0">replace</a></code>;
           attribute boolean         <code title="dom-autofocus"><a href="#autofocus1">autofocus</a></code>;
  readonly attribute HTMLCollection  <code title="dom-labels"><a href="#labels0">labels</a></code>;
  readonly attribute <code><a href="#repetitionelement0">RepetitionElement</a></code> <code title="dom-htmlTemplate"><a href="#htmltemplate">htmlTemplate</a></code>;
  void               <code title="blur">blur</code>();
  void               <code title="focus">focus</code>();

  readonly attribute boolean         <code title="willValidate"><a href="#willvalidate">willValidate</a></code>; // always false
  readonly attribute <code><a href="#validitystate0">ValidityState</a></code>   <code title="validity"><a href="#validity">validity</a></code>; // all members always set to false
  readonly attribute DOMString       <code title="validationMessage"><a href="#validationmessage">validationMessage</a></code>; // always the empty string
  bool               <code title="checkValidity"><a href="#checkvalidity">checkValidity</a></code>(); // returns true
  void               <code title="setCustomValidity"><a href="#setcustomvalidity">setCustomValidity</a></code>(in DOMString error); // raises NOT_SUPPORTED_ERR
  void               <code title="dispatchChange"><a href="#dispatchchange">dispatchChange</a></code>();
  void               <code title="dispatchFormChange"><a href="#dispatchformchange0">dispatchFormChange</a></code>();
};

interface <dfn id="htmllabelelement">HTMLLabelElement</dfn> : <code>HTMLElement</code> {
  readonly attribute HTMLFormElement <code title="dom-form"><a href="#form1">form</a></code>;
           attribute DOMString       <code title="dom-accessKey">accessKey</code>;
           attribute DOMString       <code title="dom-htmlFor">htmlFor</code>;

  // new in this specification:
  readonly attribute NodeList        <code><a href="#forms">forms</a></code>;
  readonly attribute Element         <code title="dom-control"><a href="#control">control</a></code>;
};

interface <dfn id="htmlfieldsetelement">HTMLFieldSetElement</dfn> : <code>HTMLElement</code> {
  readonly attribute HTMLFormElement <code title="dom-form"><a href="#form1">form</a></code>;

  // new in this specification
  readonly attribute NodeList        <code><a href="#forms">forms</a></code>;
  readonly attribute HTMLCollection  <code title="dom-fieldset-elements"><a href="#elements0">elements</a></code>;
           attribute boolean         <code title="dom-fieldset-disabled">disabled</code>;
};

interface <dfn id="htmllegendelement">HTMLLegendElement</dfn> : <code>HTMLElement</code> {
  readonly attribute HTMLFormElement <code title="dom-form"><a href="#form1">form</a></code>;
           attribute DOMString       <code title="dom-accessKey">accessKey</code>;
           attribute DOMString       <code title="dom-align">align</code>;

  // new in this specification:
  readonly attribute NodeList        <code><a href="#forms">forms</a></code>;

  readonly attribute boolean         <code title="willValidate"><a href="#willvalidate">willValidate</a></code>; // always false
  readonly attribute <code><a href="#validitystate0">ValidityState</a></code>   <code title="validity"><a href="#validity">validity</a></code>; // all members always set to false
  readonly attribute DOMString       <code title="validationMessage"><a href="#validationmessage">validationMessage</a></code>; // always the empty string
  bool               <code title="checkValidity"><a href="#checkvalidity">checkValidity</a></code>(); // returns true
  void               <code title="setCustomValidity"><a href="#setcustomvalidity">setCustomValidity</a></code>(in DOMString error); // raises NOT_SUPPORTED_ERR
};

// new in this specification
interface <dfn id="htmloutputelement">HTMLOutputElement</dfn> : HTMLElement {
           attribute DOMString       <code title="dom-output-defaultValue"><a href="#defaultvalue">defaultValue</a></code>;
  readonly attribute HTMLFormElement <code title="dom-form"><a href="#form1">form</a></code>;
  readonly attribute NodeList        <code><a href="#forms">forms</a></code>;
           attribute DOMString       <code title="dom-name">name</code>;
           attribute DOMString       <code title="dom-output-value"><a href="#value">value</a></code>;

  readonly attribute boolean         <code title="willValidate"><a href="#willvalidate">willValidate</a></code>; // always false
  readonly attribute <code><a href="#validitystate0">ValidityState</a></code>   <code title="validity"><a href="#validity">validity</a></code>; // all members always set to false
  readonly attribute DOMString       <code title="validationMessage"><a href="#validationmessage">validationMessage</a></code>; // always the empty string
  bool               <code title="checkValidity"><a href="#checkvalidity">checkValidity</a></code>(); // returns true
  void               <code title="setCustomValidity"><a href="#setcustomvalidity">setCustomValidity</a></code>(in DOMString error); // raises NOT_SUPPORTED_ERR
};

// new in this specification
interface <dfn id="repetitionelement">RepetitionElement</dfn> {
  const              unsigned short  REPETITION_NONE = 0;
  const              unsigned short  REPETITION_TEMPLATE = 1;
  const              unsigned short  REPETITION_BLOCK = 2;

           attribute unsigned short  <code title="repetitionType"><a href="#repetitiontype">repetitionType</a></code>;
           attribute long            <code title="repetitionIndex"><a href="#repetitionindex">repetitionIndex</a></code>;
  readonly attribute Element         <code title="repetitionTemplate"><a href="#repetitiontemplate">repetitionTemplate</a></code>;
  readonly attribute HTMLCollection  <code title="repetitionBlocks"><a href="#repetitionblocks">repetitionBlocks</a></code>;
           attribute unsigned long   <code title="repeatStart"><a href="#repeatstart">repeatStart</a></code>;
           attribute unsigned long   <code title="repeatMin"><a href="#repeatmin">repeatMin</a></code>;
           attribute unsigned long   <code title="repeatMax"><a href="#repeatmax">repeatMax</a></code>;
  Element            <code title="addRepetitionBlock"><a href="#addrepetitionblock">addRepetitionBlock</a></code>(in Node refNode);
  Element            <code title="addRepetitionBlockByIndex"><a href="#addrepetitionblockbyindex">addRepetitionBlockByIndex</a></code>(in Node refNode, in long index);
  void               <code title="moveRepetitionBlock"><a href="#moverepetitionblock">moveRepetitionBlock</a></code>(in long distance);
  void               <code title="removeRepetitionBlock"><a href="#removerepetitionblock">removeRepetitionBlock</a></code>();
};

// new in this specification
interface <dfn id="validitystate">ValidityState</dfn> {
  readonly attribute boolean         <code title="typeMismatch"><a href="#typemismatch">typeMismatch</a></code>;
  readonly attribute boolean         <code title="stepMismatch"><a href="#stepmismatch">stepMismatch</a></code>;
  readonly attribute boolean         <code title="rangeUnderflow"><a href="#rangeunderflow">rangeUnderflow</a></code>;
  readonly attribute boolean         <code title="rangeOverflow"><a href="#rangeoverflow">rangeOverflow</a></code>;
  readonly attribute boolean         <code title="tooLong"><a href="#toolong">tooLong</a></code>;
  readonly attribute boolean         <code title="patternMismatch"><a href="#patternmismatch">patternMismatch</a></code>;
  readonly attribute boolean         <code title="valueMissing"><a href="#valuemissing">valueMissing</a></code>;
  readonly attribute boolean         <code title="customError"><a href="#customerror">customError</a></code>;
  readonly attribute boolean         <code title="valid"><a href="#valid0">valid</a></code>; // !(typeMismatch || rangeUnderflow || rangeOverflow || tooLong || patternMismatch || valueMissing || customError)
};
</pre>

  <h3 id="additions"><span class="secno">7.1. </span>Additions specific to
   the <code><a href="#htmlformelement">HTMLFormElement</a></code> interface</h3>

  <p>The new <dfn id="accept1" title="dom-accept"><code>accept</code></dfn>
   attribute reflects the <code>form</code> element's <code><a
   href="#accept0">accept</a></code> attribute and its addition here merely
   addresses an oversight in DOM2.

  <p>The <dfn id="elements"><code>elements</code></dfn> array must contain
   all the <code>input</code>, <code><a href="#output0">output</a></code>,
   <code>select</code>, <code>textarea</code>, <code>button</code>, and
   <code>fieldset</code> elements that are <a
   href="#control-form-association">associated with the form</a> except those
   that have a repetition template as an ancestor.

  <p>There is one exception. The <code><a
   href="#elements">elements</a></code> array is defined to not include image
   controls (<code>input</code> elements of type <code><a
   href="#image">image</a></code>). This is for backwards compatibility with
   DOM Level 0. This excludes image buttons from several features of this
   specification, such as <code>onformchange</code> processing and
   validation.

  <p>The <dfn id="templateelements"><code>templateElements</code></dfn>
   attribute contains the list of form controls associated with this form
   that form part of repetition templates. It is defined in more detail in
   the section on the <a href="#repetitionModel">repetition model</a>. (Image
   controls <em>are</em> part of this array, when appropriate.)

  <p>The controls in the <code><a href="#elements">elements</a></code> and
   <code><a href="#templateelements">templateElements</a></code> lists must
   be in document order.

  <p>The <dfn id="form.checkvalidity"><code>form.checkValidity()</code></dfn>
   method shall make a list of all the elements in the form's <code><a
   href="#elements">elements</a></code> list whose interfaces have a <code><a
   href="#checkvalidity">checkValidity()</a></code> method defined and a
   <code><a href="#willvalidate">willValidate</a></code> attribute defined,
   and whose <code><a href="#willvalidate">willValidate</a></code> attribute
   has the true value, then shall invoke the <code><a
   href="#checkvalidity">checkValidity()</a></code> method on all the
   elements in that list. It shall return the logical-and of all the return
   values (i.e. it returns false if any of the form controls have <code><a
   href="#willvalidate">willValidate</a></code> set to true but are invalid).
   See the section on <a href="#form-validation">form validation</a> for
   details regarding the resulting events.

  <p>The <code>reset()</code> method resets the form, then fires a a <code><a
   href="#formchange">formchange</a></code> event on all the form controls of
   the form.

  <p id="resetFromDataDOM">The <dfn
   id="resetfromdata"><code>resetFromData()</code></dfn> method takes one
   argument, a <code>Document</code> to use for resetting the form. If this
   argument is null, the method does nothing. Otherwise, the algorithm
   described in the section on <a href="#seeding">seeding a form with initial
   values</a> must be run with the given document instead of the document
   mentioned in the <code>data</code> attribute.

  <p>The <dfn id="dispatchformchange"
   title="form-dispatchFormChange"><code>dispatchFormChange()</code></dfn>
   and <dfn id="dispatchforminput"
   title="form-dispatchFormInput"><code>dispatchFormInput()</code></dfn>
   methods cause <code><a href="#formchange">formchange</a></code> and
   <code><a href="#forminput">forminput</a></code> events (respectively) to
   be fired to all the elements in the <code><a
   href="#elements">elements</a></code> array, much like what happens for the
   default action of <code>change</code> and <code>input</code> events.

  <p>In the ECMAScript binding, objects that implement the <code><a
   href="#htmlformelement">HTMLFormElement</a></code> interface must reflect
   their <code><a href="#elements">elements</a></code> according to the
   following semantics:

  <p>If a name is used by more than one control, the form object has a
   property of that name that references a <code>NodeList</code> interface
   that lists the controls of that name.

  <p>If a name is used by exactly one control, the form object has a property
   of that name that references that control.

  <h3 id="additions0"><span class="secno">7.2. </span>Additions specific to
   the <code><a href="#htmlselectelement">HTMLSelectElement</a></code>
   interface</h3>

  <p>The <dfn id="selectedoptions"
   title="dom-selectedOptions"><code>selectedOptions</code></dfn> attribute
   provides a readonly list of the descendent <code><a
   href="#htmloptionelement">HTMLOptionElement</a></code> nodes that
   currently have their <code>selected</code> attribute set to a true value
   (a subset of the controls listed in the <code>options</code> attribute).
   The list is returned live, so changing the options selected (by the user
   or by script) will change the list. The order of the list should be
   consistent with the order of the <code>options</code> list.

  <p>The <dfn id="size" title="dom-select-size"><code>size</code></dfn> DOM
   attribute must reflect the content attribute of the same name. When the
   content attribute is absent the DOM attribute must return 0.

  <p>Setting the <dfn id="value0"
   title="dom-select-value"><code>value</code></dfn> or <dfn
   id="selectedindex"
   title="dom-select-selectedIndex"><code>selectedIndex</code></dfn> DOM
   attributes to values that do not correspond to any of the actual values of
   the <code>select</code> element must unselect any selected options. For
   single-select controls, this must then <a
   href="#select-check-default">cause the first non-disabled
   <code>option</code> to be selected</a>.</p>
  <!--(section removed pending further investigation into exactly what it is UAs really do)
  <h4>The <code>HTMLCollection</code> interface</h4>

  <p>This specification does not change the
  <code>HTMLCollection</code> interface's definition from its DOM2
  HTML definition, but does slightly amend its ECMAScript binding.</p>

  <p>For the ECMAScript binding, when <code>namedItem()</code> would
  match more than one node, instead of returning an arbitrary node
  from the collection, it must return a <code>NodeList</code> giving
  all the nodes that would match, in document order.</p>

  <p class="note">This intentionally matches what existing
  implementations have done. User agents have found that supporting
  the DOM2 definition strictly is not possible without sacrificing
  compatibility with existing content.</p>
-->

  <h3 id="the-htmldatalistelement"><span class="secno">7.3. </span>The
   <code><a href="#htmldatalistelement">HTMLDataListElement</a></code>
   interface</h3>

  <p>The <code>options</code> element returns the same as
   <code>getElementsByTagName()</code> would return if called on the same
   element, with <code>option</code> as the argument (or, in XHTML, if the
   namespaced version was called with the same tag name but with the XHTML
   namespace).

  <h3 id="changes0"><span class="secno">7.4. </span>Changes to the <code><a
   href="#htmloptionelement">HTMLOptionElement</a></code> interface</h3>

  <p>The <dfn id="index"
   title="HTMLOptionElement.index"><code>index</code></dfn> DOM attribute is
   redefined to be the index of the element in the <code>options</code> list
   of its nearest ancestor implementing the <code><a
   href="#htmlselectelement">HTMLSelectElement</a></code> or <code><a
   href="#htmldatalistelement">HTMLDataListElement</a></code> interface. If
   there is no such ancestor, or if the element is not in that list, the
   <code title="HTMLOptionElement.index"><a href="#index">index</a></code>
   attribute must return -1.

  <p class="note">In addition to adding <code><a
   href="#datalist">datalist</a></code> to the definition, this also corrects
   an ambiguity in DOM2 HTML's definition of the attribute: it was undefined
   if the parent was not a <code>select</code> element.

  <h3 id="additions1"><span class="secno">7.5. </span>Additions specific to
   the <code><a href="#htmlfieldsetelement">HTMLFieldsetElement</a></code>
   interface</h3>

  <p>The new <dfn id="elements0"
   title="dom-fieldset-elements"><code>elements</code> attribute lists the
   form controls under the <code>fieldset</code>, regardless of which form
   they belong to. The array must contain all the <code>input</code>,
   <code>output</code>, <code>select</code>, <code>textarea</code> and
   <code>button</code> controls that have the <code>fieldset</code> element
   as an ancestor, in document order.</dfn>

  <h3 id="the-htmloutputelement"><span class="secno">7.6. </span>The <code><a
   href="#htmloutputelement">HTMLOutputElement</a></code> interface</h3>

  <p>This interface is added for the new <code><a
   href="#output0">output</a></code> element. Its attributes work analogously
   to those on other controls. The semantics of the <code
   title="dom-output-value"><a href="#value">value</a></code> and <code
   title="dom-output-defaultValue"><a
   href="#defaultvalue">defaultValue</a></code> DOM attributes are described
   in the section describing the <code><a href="#output0">output</a></code>
   element.

  <h3 id="validation"><span class="secno">7.7. </span>Validation APIs</h3>

  <p>The <dfn id="willvalidate"><code>willValidate</code></dfn> attribute of
   a form control element must return true if all of the following conditions
   are met:

  <ul>
   <li>The control is <a href="#control-form-association">associated</a> with
    a form (or several forms).

   <li>The control does not have a <span><a href="#repetition2">repetition
    template</a></span> as an ancestor.

   <li>The control does not have a <code><a
    href="#datalist">datalist</a></code> element as an ancestor.

   <li>The control has a name.

   <li>The control is not <span><a href="#disabled">disabled</a></span>.

   <li>The control is not a button of type <code>button</code>,
    <code>reset</code>, <code><a href="#add">add</a></code>, <code><a
    href="#remove">remove</a></code>, <code><a
    href="#move-up">move-up</a></code>, or <code><a
    href="#move-down">move-down</a></code>.

   <li>The control is not an <code><a href="#output0">output</a></code>
    element.
  </ul>

  <p>It must return false if any of these conditions are not met.

  <p>The <dfn id="validity"><code>validity</code></dfn> attribute must return
   an object implementing the <dfn
   id="validitystate0"><code>ValidityState</code></dfn> interface that
   represents the state of that form control. Note that this object is live;
   the same object must be returned every time the attribute is retrieved.
   The interface has several flags, each of which must be set on the object
   when its respective condition (as defined below) is matched.

  <dl>
   <dt> <dfn id="typemismatch"><code>typeMismatch</code></dfn>

   <dd> The data entered does not match the type of the control. For example,
    if the UA allows uninterpreted arbitrary text entry for <code><a
    href="#month">month</a></code> fields, and the user has entered
    <kbd>SEP02</kbd>, then this flag would be set. This code is also used
    when the selected file in a file upload control does not have an
    appropriate MIME type. If the control is empty, this flag must not be
    set.

   <dt> <dfn id="rangeunderflow"><code>rangeUnderflow</code></dfn>

   <dd> The numeric, date, or time value of a field with a <code><a
    href="#min">min</a></code> attribute is lower than the minimum, or a file
    upload control has fewer files selected than the minimum. If the control
    is empty or if the <code><a href="#typemismatch">typeMismatch</a></code>
    flag is set, this flag must not be set.

   <dt> <dfn id="rangeoverflow"><code>rangeOverflow</code></dfn>

   <dd> The numeric, date, or time value of a field with a <code><a
    href="#max">max</a></code> attribute is higher than the maximum, or a
    file upload control has more files selected than the maximum. If the
    control is empty or if the <code><a
    href="#typemismatch">typeMismatch</a></code> flag is set, this flag must
    not be set.

   <dt> <dfn id="stepmismatch"><code>stepMismatch</code></dfn>

   <dd> The value is not one of the values allowed by the <code><a
    href="#step">step</a></code> attribute, and the UA will not be rounding
    the value for submission. Empty values and values that caused the
    <code><a href="#typemismatch">typeMismatch</a></code> flag to be set must
    not cause this flag to be set.

   <dt> <dfn id="toolong"><code>tooLong</code></dfn>

   <dd> The value of a field with a <code><a
    href="#maxlength">maxlength</a></code> attribute is longer than the
    attribute allows.

   <dt> <dfn id="patternmismatch"><code>patternMismatch</code></dfn>

   <dd> The value of the field with a <code><a
    href="#pattern">pattern</a></code> attribute doesn't match the pattern.
    If the control is empty, this flag must not be set.

   <dt> <dfn id="valuemissing"><code>valueMissing</code></dfn>

   <dd> The field has the <code><a href="#required0">required</a></code>
    attribute set but has <span><a href="#no-value">no value
    selected</a></span>.

   <dt> <dfn id="customerror"><code>customError</code></dfn>

   <dd> The field was marked invalid from script. See the definition of the
    <a href="#markValid"><code>setCustomValiditiy()</code> method</a>.

   <dt> <dfn id="valid0"><code>valid</code></dfn>

   <dd> Set if all the other flags are not set, and not set if any of the
    other flags are set.
  </dl>

  <p>When the definitions above refer to elements that have an attribute set
   on them, they do not refer to elements on which that attribute is defined
   not to apply. For example, the <code><a
   href="#valuemissing">valueMissing</a></code> flag cannot be set on an
   <code>&lt;input type="button"&gt;</code> element, even if that element has
   the <code><a href="#required0">required</a></code> attribute set, since
   <code><a href="#required0">required</a></code> doesn't apply to buttons.

  <div class="example">
   <p>For example, the following control:</p>

   <pre>&lt;input type="text" name="test" pattern="[a-z]+" maxlength="3" value="abc123"&gt;</pre>

   <p>...would be flagged with both <code><a
    href="#toolong">tooLong</a></code> and <code><a
    href="#patternmismatch">patternMismatch</a></code> when initially
    inserted into the document.</p>
  </div>

  <p>Assistive technologies should use the <code><a
   href="#willvalidate">willValidate</a></code> and <code><a
   href="#validity">validity</a></code> DOM attributes to determine which
   controls are in need of user attention when submission fails due to a
   validity problem.

  <p>The <dfn id="checkvalidity"><code>checkValidity()</code></dfn> method,
   present on several of the form control interfaces, causes an <code><a
   href="#invalid0">invalid</a></code> event to be fired on that control,
   unless the <code>validity.valid</code> flag of the control is set. It
   returns true if the <code>validity.valid</code> flag of the control is
   true, otherwise it returns false. <span class="note">Recall that this is
   automatically done during <a href="#form-submission">form
   submission</a>.</span>

  <p id="markValid">The <dfn
   id="setcustomvalidity"><code>setCustomValidity()</code></dfn> method sets
   and resets the <code><a href="#customerror">customError</a></code> flag on
   the <code><a href="#validity">validity</a></code> attribute. If the
   method's argument is <code class="dom">null</code> or the empty string,
   then the flag is reset (indicating that the control is valid), otherwise
   the given value is recorded and the flag is set (the control is not
   valid). Even form controls that are empty and not required can be marked
   invalid like this, and would abort form submission if so marked. Setting
   this flag is persistent, in that the flag remains set (and the string that
   was passed is remembered) until specifically unset using the same method.
   For instance, resetting the form, changing the control value, or moving
   the element around the document do not affect the value of this flag. The
   string passed to this method should be used by the UA when the UA needs to
   report the control as having a custom error to the user.

  <p>The <dfn id="validationmessage"><code>validationMessage</code></dfn>
   attribute shall be the empty string if the control is valid, and shall
   contain a suitably localised message that the UA would be giving the user
   if the form was submitted, if the control is invalid. If the only error
   with the form control is a custom error, then the string returned should
   be, or contain, the string that was passed to the <code><a
   href="#setcustomvalidity">setCustomValidity()</a></code> method.

  <p>On the <code><a href="#htmloutputelement">HTMLOutputElement</a></code>,
   <code><a href="#htmlbuttonelement">HTMLButtonElement</a></code>, and
   <code><a href="#htmlfieldsetelement">HTMLFieldsetElement</a></code>
   interfaces, the <code><a href="#willvalidate">willValidate</a></code>
   attribute must return false, the <code><a
   href="#validity">validity</a></code> attribute must return an object with
   all its attributes set to false except the <code><a
   href="#valid0">valid</a></code> flag which must be true, the <code><a
   href="#validationmessage">validationMessage</a></code> attribute must
   return the empty string, the <code><a
   href="#checkvalidity">checkValidity()</a></code> method must return true,
   and the <code><a href="#setcustomvalidity">setCustomValidity()</a></code>
   method must raise a <code>NOT_SUPPORTED_ERR</code> DOM exception.

  <p>The <code><a href="#htmloutputelement">HTMLOutputElement</a></code>,
   <code><a href="#htmlbuttonelement">HTMLButtonElement</a></code>, and
   <code><a href="#htmlfieldsetelement">HTMLFieldsetElement</a></code>
   interfaces implement these attributes and methods so that when iterating
   over the form's <code><a href="#elements">elements</a></code> array,
   authors do not have to ensure that each form element is not an <code><a
   href="#output0">output</a></code> element or a <code>button</code> before
   using them.

  <h3 id="new-dom"><span class="secno">7.8. </span>New DOM attributes for new
   content attributes</h3>

  <p>The new <dfn id="data1" title="dom-data"><code>data</code></dfn>, <dfn
   id="pattern0" title="dom-pattern"><code>pattern</code></dfn>, <dfn
   id="required1" title="dom-required"><code>required</code></dfn>, <dfn
   id="autocomplete0"
   title="dom-autocomplete"><code>autocomplete</code></dfn>, <dfn
   id="autofocus1" title="dom-autofocus"><code>autofocus</code></dfn>, <dfn
   id="inputmode0" title="dom-inputmode"><code>inputmode</code></dfn>, <dfn
   id="min0" title="dom-min"><code>min</code></dfn>, <dfn id="max0"
   title="dom-max"><code>max</code></dfn>, <dfn id="step0"
   title="dom-step"><code>step</code></dfn>, <dfn id="wrap0"
   title="dom-wrap"><code>wrap</code></dfn>, <dfn id="disabled0"
   title="dom-disabled"><code>disabled</code></dfn>, <dfn id="accept2"
   title="dom-accept"><code>accept</code></dfn>, <dfn id="action"
   title="dom-action"><code>action</code></dfn>, <dfn id="enctype"
   title="dom-enctype"><code>enctype</code></dfn>, <dfn id="method"
   title="dom-method"><code>method</code></dfn>, <dfn id="replace0"
   title="dom-replace"><code>replace</code></dfn>, and <dfn id="target"
   title="dom-target"><code>target</code></dfn> DOM attributes must simply
   reflect the current value of their relevant content attribute. If the
   content attribute is not specified or has an invalid value, then the DOM
   attribute reflects the default value.

  <p>The <dfn id="disabled1" title="dom-disabled"><code>disabled</code></dfn>
   attribute of form controls is not affected by the <code><a
   href="#disabled">disabled</a></code> attributes of ancestors. (Thus the
   <code><a href="#disabled">disabled</a></code> attribute of a form control
   can be <code>false</code> even though the control is disabled by a parent
   element.)

  <p>The <dfn id="type" title="dom-type"><code>type</code></dfn> attribute on
   the <code><a href="#htmlbuttonelement">HTMLButtonElement</a></code>
   interface is changed from read-only to read-write. That interface is also
   given the <code>focus()</code> and <code>blur()</code> methods.

  <p>The <dfn id="forms"><code>forms</code></dfn> attribute on most of the
   control interfaces is a live read-only <code>NodeList</code>, which shall
   contain the forms that the control is associated with, as determined by,
   and in the order given by, the <code title="form-attribute"><a
   href="#form0">form</a></code> content attribute, or, if there is no <code
   title="form-attribute"><a href="#form0">form</a></code> attribute, the
   element's ancestors.

  <p>The <dfn id="form1" title="dom-form"><code>form</code></dfn> attribute
   on most of the control interfaces is read-only, and shall return the first
   entry in the <code><a href="#forms">forms</a></code> list, unless that
   list is empty, in which case it returns null.

  <p>The <code><a href="#forms">forms</a></code> and <code
   title="dom-form"><a href="#form1">form</a></code> DOM attributes are live,
   so that adding a form with an ID that was previously listed in a control's
   <code title="form-attribute"><a href="#form0">form</a></code> content
   attribute, for example, will cause that control to be associated with that
   form, and that form to appear in the DOM attributes.

  <p>For <code><a href="#htmloptionelement">HTMLOptionElement</a></code>s,
   <code><a href="#htmllegendelement">HTMLLegendElement</a></code>s, and
   <code><a href="#htmllabelelement">HTMLLabelElement</a></code>s, the
   <code><a href="#forms">forms</a></code> and <code title="dom-form"><a
   href="#form1">form</a></code> DOM attributes shall reflect the attributes
   of their respective <code><a
   href="#htmlselectelement">HTMLSelectElement</a></code>, <code><a
   href="#htmlfieldsetelement">HTMLFieldSetElement</a></code>, or (for
   labels) their associated form control, if they have one, and shall return
   null and empty (respectively) if they don't.

  <h3 id="additions2"><span class="secno">7.9. </span>Additions specific to
   the <code><a href="#htmlinputelement">HTMLInputElement</a></code>
   interface</h3>

  <p>The <dfn id="list0" title="dom-list"><code>list</code></dfn> attribute
   is read-only, and reflects the current state of the <code><a
   href="#list">list</a></code> content attribute. That is, it returns the
   same as <code>getElementById()</code> would if passed the value of the
   <code><a href="#list">list</a></code> attribute, <em>if</em> that element
   is either an (X)HTML <code>select</code> or <code><a
   href="#datalist">datalist</a></code> element.

  <p>The <code>input</code> element's <dfn id="selectedoption"
   title="dom-selectedOption"><code>selectedOption</code></dfn> DOM attribute
   is non-null only if the <code title="dom-list"><a
   href="#list0">datalist</a></code> DOM attribute is non-null and the
   <code>input</code> element's <code>value</code> DOM attribute is equal to
   the value of one of the <code><a href="#list">list</a></code>'s
   <code>option</code> descendants, in which case it points to that
   <code>option</code> element.

  <p>The <dfn id="valueasdate"><code>valueAsDate</code></dfn> attribute
   returns the <code>value</code> DOM attribute, converted to
   <code>DOMTimeStamp</code>. The control's value must be interpreted as
   appropriate for the given <code>type</code>, then converted to a
   <code>DOMTimeStamp</code> as follows:

  <dl>
   <dt><code><a href="#datetime">datetime</a></code>

   <dd>Simply express the given date and time.

   <dt><code><a href="#date">date</a></code>

   <dd>Express the date as 00:00 UTC on that date (the first second of that
    date in UTC).

   <dt><code><a href="#time">time</a></code>

   <dd>Express the time as 1970-01-01 at the given time, assuming the time
    zone is UTC.

   <dt><code><a href="#week">week</a></code>

   <dd>Express the date as 00:00 UTC on the Monday of the given week (the
    first second of that ISO week, in UTC).

   <dt><code><a href="#month">month</a></code>

   <dd>Express the date as 00:00 UTC on the first day of the given month (the
    first second of that month, in UTC).

   <dt>All other types (including <code><a
    href="#datetime-local">datetime-local</a></code>)

   <dd>Return <code>NaN</code> or an equivalent value representing an invalid
    date in the given language binding.
  </dl>

  <p>The <dfn id="valueasnumber"><code>valueAsNumber</code></dfn> attribute
   returns the <code>value</code> DOM attribute, converted to
   <code>float</code>. The control's value must be converted as follows:

  <dl>
   <dt><code><a href="#datetime">datetime</a></code>, <code><a
    href="#date">date</a></code>, <code><a href="#month">month</a></code>,
    <code><a href="#week">week</a></code>, <code><a
    href="#time">time</a></code>

   <dd>Express the date given by the <code><a
    href="#valueasdate">valueAsDate</a></code> attribute in terms of
    milliseconds since 1970-01-01 00:00 UTC.

   <dt><code><a href="#datetime-local">datetime-local</a></code>

   <dd>Interpret the value as described for the type, then express the given
    date and time in terms of milliseconds since 1970-01-01 00:00.

   <dt>All other types

   <dd>Convert the value using algorithms equivalent to those specified in
    ECMA262 sections 9.3.1 ("ToNumber Applied to the String Type") and 8.5
    ("The Number type"). <a href="#refsECMA262">[ECMA262]</a>
  </dl>

  <p>Two new methods, <dfn id="stepup"><code>stepUp()</code></dfn> and <dfn
   id="stepdown"><code>stepDown()</code></dfn>, enable authors to write code
   that increases and decreases (respectively) the value of the control in
   integral increments of the given <code><a href="#step">step</a></code>
   value. The argument specifies the number of steps by which to increase or
   decrease the value. If the control's value is invalid or empty, if the
   <code><a href="#step">step</a></code> attribute has the value
   <code>any</code>, or if the control is not a date-related, time-related,
   or numeric type, then the methods shall raise an
   <code>INVALID_STATE_ERR</code> exception. If a particular invocation of
   the method would invalidate the value (for example, if
   <code>stepUp(1)</code> is called when the control's value is less than
   <code><a href="#step">step</a></code> from <code><a
   href="#max">max</a></code>), then the method shall raise an
   <code>INVALID_MODIFICATION_ERR</code> exception. If the argument passed is
   zero, then the method shall raise an <code>INDEX_SIZE_ERR</code>
   exception.

  <p>Setting a control's <code>value</code> DOM attribute dynamically in such
   a way that it makes the control invalid because the value doesn't conform
   to the syntax required by the type given in the <code>type</code>
   attribute must set the control to the value that the control would have
   had if it had never been given an explicit value.

  <p>Setting a control's <code>value</code> DOM attribute dynamically in such
   a way that it makes the control invalid because the value doesn't conform
   to the attributes setting constraints on the value, however, must cause
   the control to be set to the new value, and the control becoming invalid.
   (For example setting the value of a text field to a string that is longer
   than the <code><a href="#maxlength">maxlength</a></code> attribute
   specifies would set the control to that long value, but then prevent
   submission.) If the control cannot be set to that value (for example, a
   range control cannot represent values outside its range) then the value
   must be clamped to the nearest value that can be represented by the
   control.

  <h3 id="the-defaultvalue"><span class="secno">7.10. </span>The
   <code>defaultValue</code> DOM attribute</h3>

  <p>For <code><a href="#htmlinputelement">HTMLInputElement</a></code>
   objects, the <dfn id="defaultvalue0"
   title="dom-input-defaultValue"><code>defaultValue</code></dfn> DOM
   attribute must always mirror the <code>value</code> <span>content
   attribute</span>, both on getting and setting. Setting the
   <code>value</code> content attribute or the <code
   title="dom-input-defaultValue"><a
   href="#defaultvalue0">defaultValue</a></code> DOM attribute must reset the
   <code>value</code> DOM attribute to the new default value <em>unless</em>
   the <code>value</code> DOM attribute for the element has been explicitly
   set by script or via user edits.

  <p>For <code><a href="#htmltextareaelement">HTMLTextareaElement</a></code>
   objects, the <dfn id="defaultvalue1"
   title="dom-textarea-defaultValue"><code>defaultValue</code></dfn> DOM
   attribute must always mirror the <code>textContent</code> DOM attribute,
   both on getting and setting (so setting <code
   title="dom-textarea-defaultValue"><a
   href="#defaultvalue1">defaultValue</a></code> changes the child nodes of
   the <code>textarea</code> element, and changing the child nodes of the
   element changes the <code title="dom-textarea-defaultValue"><a
   href="#defaultvalue1">defaultValue</a></code> DOM attribute). Changing the
   child nodes of the <code>textarea</code> element, the
   <code>textContent</code> DOM attribute, or the <code
   title="dom-textarea-defaultValue"><a
   href="#defaultvalue1">defaultValue</a></code> DOM attribute must not
   affect the <code>value</code> DOM attribute, even if the user has not
   changed the value.

  <h3 id="labels"><span class="secno">7.11. </span>Labels</h3>

  <p>Form controls all have a <dfn id="labels0"
   title="dom-labels"><code>labels</code></dfn> DOM attribute that lists all
   the <code>label</code> elements that refer to the control (either through
   the <code title="">for</code> attribute or via containership), in document
   order.

  <p>Similarly, <code><a
   href="#htmllabelelement">HTMLLabelElement</a></code>s have a <dfn
   id="control" title="dom-control"><code>control</code></dfn> DOM attribute
   that points to the associated element node, if any.

  <p>A label must be listed in the <code title="dom-labels"><a
   href="#labels0">labels</a></code> list of the control to which its <code
   title="dom-control"><a href="#control">control</a></code> attribute
   points, and no other.

  <p class="note">Assistive technologies may use the <code
   title="dom-labels"><a href="#labels0">labels</a></code> attribute to
   determine what label to read out when a control is focused. An assistive
   technology could also wish to determine if the element is in a
   <code>fieldset</code> group. To do so, it should walk up the element's
   <code>parentNode</code> chain to find the <code>fieldset</code> ancestors.

  <h3 id="firing"><span class="secno">7.12. </span>Firing change events</h3>

  <p>The <dfn id="dispatchchange"><code>dispatchChange()</code></dfn> and
   <dfn id="dispatchformchange0"><code>dispatchFormChange()</code></dfn>
   methods must cause <code>change</code> and <code><a
   href="#formchange">formchange</a></code> events to be fired on the
   element. They are intended primarily to be used from <code>oninput</code>
   and <code>onforminput</code> handlers to avoid code duplication:

  <pre>&lt;input oninput="dispatchChange()" onchange="<em>some long algorithm</em>"&gt;</pre>

  <p>The <code>change</code> event fired by the <code><a
   href="#dispatchchange">dispatchChange()</a></code> method must have the
   same default action as when that event is fired by the UA.

  <p class="note">The <code><a
   href="#dispatchformchange0">dispatchFormChange()</a></code> method on form
   controls does not fire the event on <em>all</em> the controls like the
   <code title="form-dispatchFormChange"><a
   href="#dispatchformchange">dispatchFormChange()</a></code> method on the
   <code><a href="#htmlformelement">HTMLFormElement</a></code> interface.

  <h3 id="repetition1"><span class="secno">7.13. </span>Repetition interfaces</h3>

  <p>The <dfn id="repetitionelement0"><code>RepetitionElement</code></dfn>
   interface must be implemented by all elements.

  <p>If the element is a <span><a href="#repetition2">repetition
   template</a></span>, its <dfn
   id="repetitiontype"><code>repetitionType</code></dfn> DOM attribute must
   return <code><a href="#repetitiontemplate">REPETITION_TEMPLATE</a></code>.
   Otherwise, if the element is a <span><a href="#repetition3">repetition
   block</a></span>, it must return <code>REPETITION_BLOCK</code>. Otherwise,
   it is a normal element, and that attribute should return
   <code>REPETITION_NONE</code>.

  <p>Setting <code><a href="#repetitiontype">repetitionType</a></code>
   modifies the <span><code><a href="#repeat">repeat</a></code>
   attribute</span>. The <code><a href="#repeat">repeat</a></code>
   attribute's namespace depends on the element node's namespace; if the
   element is in the <code>http://www.w3.org/1999/xhtml</code> namespace then
   the attribute has no namespace, otherwise the <em>attribute</em> is in
   that namespace. If <code><a
   href="#repetitiontype">repetitionType</a></code> is set to
   <code>REPETITION_NONE</code>, the attribute is removed. If it is set to
   <code><a href="#repetitiontemplate">REPETITION_TEMPLATE</a></code>, the
   attribute is set to "<code><a href="#template">template</a></code>". If
   <code><a href="#repetitiontype">repetitionType</a></code> is set to
   <code>REPETITION_BLOCK</code>, the <code><a
   href="#repeat">repeat</a></code> content attribute is set to the value of
   the <code><a href="#repetitionindex">repetitionIndex</a></code> DOM
   attribute.

  <p>The <dfn id="repetitionindex"><code>repetitionIndex</code></dfn>
   attribute must return the current value of the index of the repetition
   template or block. If the element is a repetition block, setting this
   attribute must update the <code><a href="#repeat">repeat</a></code>
   attribute appropriately (and changing the attribute directly must affect
   the value of the <code><a
   href="#repetitionindex">repetitionIndex</a></code> attribute). Otherwise,
   if the element is a repetition template, setting this attribute changes
   the template's index but does not affect any other aspect of the DOM. If
   the element is a normal element, it must always return zero, and setting
   the attribute must have no effect.

  <p>The <dfn id="repetitiontemplate"><code>repetitionTemplate</code></dfn>
   attribute is null unless the element is a repetition block, in which case
   it points to the block's template. If the block is an <span>orphan
   repetition block</span> then it returns null.

  <p>The <dfn id="repetitionblocks"><code>repetitionBlocks</code></dfn>
   attribute is null unless the element is a repetition template, in which
   case it points to a list of elements (an <code>HTMLCollection</code>,
   although the name of that interface is a misnomer since there is nothing
   HTML-specific about it). The list consists of all the <span>repetition
   blocks</span> that have this element as their template. The list is live.

  <p>The <dfn id="repeatstart"><code>repeatStart</code></dfn>, <dfn
   id="repeatmin"><code>repeatMin</code></dfn>, and <dfn
   id="repeatmax"><code>repeatMax</code></dfn> DOM attribute must reflect the
   values of the <code><a href="#repeat-start">repeat-start</a></code>,
   <code><a href="#repeat-min">repeat-min</a></code>, and <code><a
   href="#repeat-max">repeat-max</a></code> attributes respectively, those
   attributes being in no namespace if the element is in the
   <code>http://www.w3.org/1999/xhtml</code> namespace, and the
   <code>http://www.w3.org/1999/xhtml</code> namespace if the element is in
   another namespace. If those attributes are absent or do not have valid
   values, then the DOM attributes return their default values (1, 0, and the
   largest value that an <code>unsigned long</code> can hold, respectively).
   Setting the DOM attributes sets the relevant content attributes, unless
   the DOM attributes are set to their default values, in which case it
   removes the content attributes.

  <p>The <code><a href="#addrepetitionblock">addRepetitionBlock()</a></code>,
   <code><a
   href="#addrepetitionblockbyindex">addRepetitionBlockByIndex()</a></code>,
   <code><a href="#moverepetitionblock">moveRepetitionBlock()</a></code> and
   <code><a href="#removerepetitionblock">removeRepetitionBlock()</a></code>
   methods are defined in the section on <a href="#repetitionModel">the
   repetition model</a>.

  <p>The <dfn id="htmltemplate"
   title="dom-htmlTemplate"><code>htmlTemplate</code></dfn> DOM attribute on
   the <code><a href="#htmlinputelement">HTMLInputElement</a></code> and
   <code><a href="#htmlbuttonelement">HTMLButtonElement</a></code> interfaces
   represents the repetition template that the <code><a
   href="#template">template</a></code> content attribute refers to. If the
   content attribute points to a non-existent element or an element that is
   not a repetition template, the DOM attribute returns null. This DOM
   attribute is readonly in this version of this specification.

  <h2 id="presentation"><span class="secno">8. </span>Presentation and
   rendering</h2>

  <h3 id="styling-form-controls"><span class="secno">8.1. </span>Styling form
   controls</h3>

  <p>The CSS working group is expected to develop a language designed,
   amongst other things, for the advanced styling of form controls. In the
   meantime, technologies such as <a href="#refsHTC">[HTC]</a> and <a
   href="#refsXBL">[XBL]</a> can be used as guides for what is expected.

  <p>UAs, in the absence of such advanced styling information, may render
   form controls described in this draft as they wish. It is recommended that
   form controls remain faithful to the look and feel of the system's global
   user interface.

  <p class="note">CSS 2.1 explicitly does not define how CSS applies to form
   controls. <a href="#refsCSS21">[CSS21]</a>

  <h3 id="relation"><span class="secno">8.2. </span>Relation to CSS selectors</h3>

  <p>The W3C Selectors and CSS3 UI specifications define a number of
   pseudo-classes for form controls. <a href="#refsSelectors">[SELECTORS]</a>
   <a href="#refsCSS3UI">[CSS3UI]</a> Their relationship to the form controls
   described in this specification is described here.

  <dl>
   <dt>:enabled

   <dd>Matches form control elements or <code>fieldset</code>s that do not
    have the <code><a href="#disabled">disabled</a></code> attribute set and
    that do not have any ancestor <code>fieldset</code> elements with their
    <code><a href="#disabled">disabled</a></code> attribute set, and that are
    not implicitly disabled (e.g. <code><a href="#move-up">move-up</a></code>
    buttons can be implicitly disabled in certain cases).

   <dt>:disabled

   <dd>Matches form control elements or <code>fieldset</code>s that have
    their <code><a href="#disabled">disabled</a></code> attribute set or that
    have any ancestor <code>fieldset</code> elements with <em>their</em>
    <code><a href="#disabled">disabled</a></code> attribute set, or that are
    implicitly disabled (e.g. <code><a href="#move-up">move-up</a></code>
    buttons can be implicitly disabled in certain cases).

   <dt>:checked

   <dd>Matches radio and checkbox form control elements that are
    <code>checked</code>.

   <dt>:indeterminate

   <dd>Matches no HTML form control elements.

   <dt>:default

   <dd>Matches <a href="#enter-submit">the button</a> (if any) that will be
    selected if the user presses the enter key (or some equivalent behaviour
    on less typical systems), as well as <code>input</code> elements of type
    <code><a href="#checkbox">checkbox</a></code> and <code><a
    href="#radio">radio</a></code> whose <code
    title="dom-defaultChecked">defaultChecked</code> DOM attribute is true,
    and <code>option</code> elements whose <code
    title="dom-defaultSelected">defaultSelected</code> DOM attribute is true.

   <dt>:valid

   <dd>Matches form control elements whose <code><a
    href="#validity">validity</a></code> objects have the <code><a
    href="#valid0">valid</a></code> flag set.

   <dt>:invalid

   <dd>Matches form control elements whose <code><a
    href="#validity">validity</a></code> objects have the <code><a
    href="#valid0">valid</a></code> flag cleared (not set).

   <dt>:in-range

   <dd>Matches numeric, date-related, or time-related form control elements
    which have a <code><a href="#min">min</a></code> or <code><a
    href="#max">max</a></code> attribute set and whose <code><a
    href="#validity">validity</a></code> objects have none of the <code><a
    href="#typemismatch">typeMismatch</a></code>, <code><a
    href="#rangeunderflow">rangeUnderflow</a></code>, and <code><a
    href="#rangeoverflow">rangeOverflow</a></code> flags set.

   <dt>:out-of-range

   <dd>Matches numeric, date-related, or time-related form control elements
    which have a <code><a href="#min">min</a></code> or <code><a
    href="#max">max</a></code> attribute set and whose <code><a
    href="#validity">validity</a></code> objects have one or both of the
    <code><a href="#rangeunderflow">rangeUnderflow</a></code> and <code><a
    href="#rangeoverflow">rangeOverflow</a></code> flags set.

   <dt>:required

   <dd>Matches form control elements that have the <code><a
    href="#required0">required</a></code> attribute set.

   <dt>:optional

   <dd>Matches form control elements that do not have the <code><a
    href="#required0">required</a></code> attribute set.

   <dt>:read-only

   <dd>Matches form control elements that have the <code><a
    href="#readonly">readonly</a></code> attribute set, and to which the
    <code><a href="#readonly">readonly</a></code> attribute applies (thus
    radio buttons will never match this, regardless of the value of the
    attribute), as well as elements defined by this specification that are
    not form controls (namely <code>form</code>, <code>label</code>, <code><a
    href="#datalist">datalist</a></code>, <code>option</code>,
    <code>optgroup</code>, and <code>fieldset</code> elements).

   <dt>:read-write

   <dd>Matches form control elements that do not have the <code><a
    href="#readonly">readonly</a></code> attribute set (including <code><a
    href="#password">password</a></code> fields, although technically they
    should be called "writeonly"), or to which the attribute doesn't apply
    (such as radio buttons). A disabled field can still match this
    pseudo-class; the states are orthogonal.
  </dl>

  <p>When the definitions above refer to elements that have an attribute set
   on them, they do not refer to elements on which that attribute is defined
   not to apply. For example, the <code>:read-only</code> attribute cannot
   apply to an <code>&lt;input type="radio"&gt;</code> element, even if that
   element has the <code><a href="#readonly">readonly</a></code> attribute
   set, since <code><a href="#readonly">readonly</a></code> doesn't apply to
   radio buttons.

  <p class="note">These pseudo-classes might also apply to other elements.
   This specification only gives the relationship between these
   pseudo-classes and the elements defined by this specification. For
   example, the <code>:read-only</code> pseudo-class applies to most non-form
   elements in HTML, as well as those given above.

  <p class="note">The definition of the <code>:in-range</code> and
   <code:out-of-range> pseudo-classes given here for HTML form controls does
   not quite match the generic definitions of the pseudo-classes given in
   CSS3 UI. This is intentional as the definitions given in CSS3 UI do not
   map well to the HTML semantics.</code:out-of-range>

  <h3 id="interaction"><span class="secno">8.3. </span>Interaction of the
   form processing model with CSS</h3>

  <p>There is no interaction between the form processing model and CSS. For
   instance, making a control <code>display: none</code> does not have the
   slightest effect on whether the control is submitted or not. (Indeed,
   <code>input</code> elements of type <code><a
   href="#hidden">hidden</a></code> typically have <code>display: none</code>
   applies to them in the UA default stylesheet.)

  <h3 id="interaction0"><span class="secno">8.4. </span>Interaction of the
   form processing model with SMIL</h3>

  <p>There is no interaction between the form processing model and SMIL.
   Specifically, none of the attributes defined in this draft are animatable.

  <h2 class="no-num" id="xhtml-module-def">A. XHTML module definition</h2>

  <p><em>This section is non-normative.</em>

  <p>The Web Forms 2.0 Module provides all of the forms features found in
   HTML 4.0, plus the extensions described above. The form control elements
   and attributes of that the Web Forms 2.0 Module supports are:

  <table class="moduledef" summary="Elements and Attributes for Web Forms 2.0
   Module">
   <thead>
    <tr>
     <th>Elements

     <th>Attributes

     <th>Minimal Content Model

   <tbody>
    <tr>
     <td>form

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      accept (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_ContentTypes">ContentTypes</a></span>),
      accept-charset (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Charsets">Charsets</a></span>),
      action (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_URI">URI</a></span>),
      data (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_URI">URI</a></span>),
      enctype (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_ContentType">ContentType</a></span>),
      method ("get"* | "post" | "put" | "delete"), replace ("document"* |
      "values")

     <td><a href="#form-content-model">Flow*</a>

    <tr>
     <td>input

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      accept (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_ContentTypes">ContentTypes</a></span>),
      accesskey (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Character">Character</a></span>),
      action (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_URI">URI</a></span>),
      alt (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Text">Text</a></span>),
      autocomplete ("on"* | "off"), autofocus ("autofocus"), checked
      ("checked"), disabled ("disabled"), enctype (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_ContentType">ContentType</a></span>),
      form (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_IDREF">IDREF</a></span>),
      inputmode (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>),
      list (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_IDREF">IDREF</a></span>),
      maxlength (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Number">Number</a></span>),
      method ("get" | "post" | "put" | "delete"), min (<span
      class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>),
      max (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>),
      name (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>),
      pattern (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>),
      step (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>),
      readonly ("readonly"), replace ("document" | "values") required
      ("required"), size (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Number">Number</a></span>),
      src (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_URI">URI</a></span>),
      tabindex (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Number">Number</a></span>),
      template (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_IDREF">IDREF</a></span>),
      type ("text"* | "password" | "checkbox" | "radio" | "button" | "submit"
      | "reset" | "add" | "remove" | "move-up" | "move-down" | "file" |
      "hidden" | "image" | "datetime" | "datetime-local" | "date" | "month" |
      "week" | "time" | "number" | "range" | "email" | <!--"tel" |--> "url"),
      value (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>)
      

     <td>EMPTY

    <tr>
     <td>select

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      accesskey (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Character">Character</a></span>),
      autofocus ("autofocus"), data (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_URI">URI</a></span>),
      disabled ("disabled"), form (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_IDREF">IDREF</a></span>),
      multiple ("multiple"), name (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>),
      size (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Number">Number</a></span>),
      tabindex (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Number">Number</a></span>)
      

     <td>(optgroup | option)*

    <tr>
     <td>datalist

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      data (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_URI">URI</a></span>)
      

     <td>(option | Flow)*

    <tr>
     <td>optgroup

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      disabled ("disabled"), label* (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Text">Text</a></span>)
      

     <td>(optgroup | option)*

    <tr>
     <td>option

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      disabled ("disabled"), label (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Text">Text</a></span>),
      selected ("selected"), value (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>)
      

     <td>PCDATA

    <tr>
     <td>textarea

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      accept (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_ContentType">ContentType</a></span>),
      accesskey (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Character">Character</a></span>),
      autofocus ("autofocus"), cols (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Number">Number</a></span>),
      disabled ("disabled"), form (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_IDREF">IDREF</a></span>),
      inputmode (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>),
      maxlength (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Number">Number</a></span>),
      name (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>),
      readonly ("readonly"), required ("required"), rows (<span
      class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Number">Number</a></span>),
      tabindex (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Number">Number</a></span>),
      wrap ("soft"* | "hard")

     <td>PCDATA

    <tr>
     <td>output

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      for (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_IDREFS">IDREFS</a></span>),
      form (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_IDREF">IDREF</a></span>),
      name (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>)
      

     <td>(PCDATA | Inline)*

    <tr>
     <td>button

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      accesskey (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Character">Character</a></span>),
      action (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_URI">URI</a></span>),
      autofocus ("autofocus"), disabled ("disabled"), enctype (<span
      class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_ContentType">ContentType</a></span>),
      form (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_IDREF">IDREF</a></span>),
      method ("get" | "post" | "put" | "delete"), name (<span
      class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>),
      replace ("document" | "values") tabindex (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Number">Number</a></span>),
      template (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_IDREF">IDREF</a></span>),
      type ("button" | "submit"* | "reset" | "add" | "remove" | "move-up" |
      "move-down"), value (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_CDATA">CDATA</a></span>)
      

     <td>(PCDATA | Heading | List | Block - Form | Inline - Formctrl)*

    <tr>
     <td>fieldset

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      disabled ("disabled"), form (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_IDREF">IDREF</a></span>)
      

     <td>(PCDATA | legend | Flow)*

    <tr>
     <td>legend

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      accesskey (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Character">Character</a></span>)
      

     <td>(PCDATA | Inline)*

    <tr>
     <td>label

     <td> <span class="collection"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstract_modules.html#s_common_collection">Common</a></span>,
      accesskey (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_Character">Character</a></span>),
      for (<span class="datatype"><a
      href="http://www.w3.org/TR/xhtml-modularization/abstraction.html#dt_IDREF">IDREF</a></span>)
      

     <td>(PCDATA | Inline - label)*
  </table>

  <p>This module defines two content sets:

  <dl>
   <dt>Form

   <dd><span class="content">form | fieldset | datalist</span>

   <dt>Formctrl

   <dd><span class="content">input | select | textarea | output | button |
    label | datalist</span>
  </dl>

  <p>When this module is used, it adds the <code>Form</code> content set to
   the <code>Block</code> content set and it adds the <code>Formctrl</code>
   content set to the <code>Inline</code> content set as these are defined in
   the Text Module.

  <p>All XHTML elements (all elements in the
   <code>http://www.w3.org/1999/xhtml</code> namespace) may have the
   <span><code><a href="#repeat">repeat</a></code>, <code><a
   href="#repeat-start">repeat-start</a></code>, <code><a
   href="#repeat-min">repeat-min</a></code>, <code><a
   href="#repeat-max">repeat-max</a></code>, and <code><a
   href="#repeat-template">repeat-template</a></code> attributes</span>
   specified. Similarly, the global attributes <code><a
   href="#repeat">repeat</a></code>, <code><a
   href="#repeat-start">repeat-start</a></code>, <code><a
   href="#repeat-min">repeat-min</a></code>, <code><a
   href="#repeat-max">repeat-max</a></code>, and <code><a
   href="#repeat-template">repeat-template</a></code> in the
   <code>http://www.w3.org/1999/xhtml</code> namespace may be specified on
   any non-XHTML element. The <code><a href="#repeat">repeat</a></code>
   attribute must either have the value "<code><a
   href="#template">template</a></code>" or be an integer (an optional '-'
   character followed by one or more decimal digits). The <code><a
   href="#repeat-template">repeat-template</a></code> attribute must be an
   IDREF. The other attributes must have a non-negative integer value (one or
   more digits 0-9).

  <p>The <code>form</code> element may be placed inside XHTML
   <code>head</code> elements when it is empty.

  <p>The <code>oninput</code> attribute is added to all the elements that
   have an <code>onchange</code> attribute in the XHTML Intrinsic Events
   module. The <code>onformchange</code> and <code>onforminput</code>
   attributes are added to all form control elements (including <code><a
   href="#output0">output</a></code>) and the <code>form</code> element. The
   <code>oninvalid</code> attribute is added to all form controls except
   <code><a href="#output0">output</a></code> and <code>button</code>
   elements. The <code>onchange</code> attribute (but not
   <code>oninput</code>) is added to the <code><a
   href="#output0">output</a></code> element.

  <p>When frames and multiple windows are also allowed, the
   <code>target</code> attribute is added to the <code>form</code>,
   <code>input</code> and <code>button</code> elements.

  <p>The Web Forms 2.0 Module is a superset of the Forms and Basic Forms
   modules. These modules may not be used together in a single document type.
   Note that the content models in this module differ from those of the
   XHTML1 Forms module in some subtle ways (for example, the
   <code>select</code> element may be empty).

  <h2 class="no-num" id="summary">B. Attribute summary</h2>

  <p>The <code>input</code> element takes a large number of attributes that
   do not always apply. The following table summarizes which attributes apply
   to which input types.

  <table class="applies">
   <thead>
    <tr>
     <th><code>type</code>

     <th><code><a href="#text">text</a></code>

     <th><code><a href="#password">password</a></code>

     <th><code><a href="#checkbox">checkbox</a></code> <code><a
      href="#radio">radio</a></code>

     <th><code>button</code>

     <th><code><a href="#submit">submit</a></code>

     <th><code>reset</code>

     <th><code><a href="#add">add</a></code>

     <th><code><a href="#remove">remove</a></code> <code><a
      href="#move-up">move-up</a></code> <code><a
      href="#move-down">move-down</a></code>

     <th><code><a href="#file">file</a></code>

     <th><code><a href="#hidden">hidden</a></code>

     <th><code><a href="#image">image</a></code>

     <th><code><a href="#datetime">datetime</a></code> <code><a
      href="#datetime-local">datetime-local</a></code> <code><a
      href="#date">date</a></code> <code><a href="#month">month</a></code>
      <code><a href="#week">week</a></code> <code><a
      href="#time">time</a></code>

     <th><code><a href="#number">number</a></code> <code><a
      href="#range">range</a></code>

     <th><code><a href="#email">email</a></code> <!--<code>tel</code>-->
      <code><a href="#url">url</a></code>

   <tbody>
    <tr>
     <th><code><a href="#accept0">accept</a></code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

    <tr>
     <th><code><a href="#accesskey">accesskey</a></code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

    <tr>
     <th><code>action</code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

    <tr>
     <th><code>alt</code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

    <tr>
     <th><code><a href="#autocomplete">autocomplete</a></code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

    <tr>
     <th><code><a href="#autofocus0">autofocus</a></code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

    <tr>
     <th><code>checked</code>

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

    <tr>
     <th><code><a href="#disabled">disabled</a></code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

    <tr>
     <th><code>enctype</code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

    <tr>
     <th><code>form</code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

    <tr>
     <th><code><a href="#inputmode">inputmode</a></code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

    <tr>
     <th><code><a href="#list">list</a></code>

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

    <tr>
     <th><code><a href="#maxlength">maxlength</a></code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

    <tr>
     <th><code>method</code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

    <tr>
     <th><code><a href="#min">min</a></code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

    <tr>
     <th><code><a href="#max">max</a></code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

    <tr>
     <th><code><a href="#name">name</a></code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

    <tr>
     <th><code><a href="#pattern">pattern</a></code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

    <tr>
     <th><code><a href="#step">step</a></code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

    <tr>
     <th><code><a href="#readonly">readonly</a></code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

    <tr>
     <th><code><a href="#replace">replace</a></code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

    <tr>
     <th><code><a href="#required0">required</a></code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

    <tr class="deprecated">
     <th><code>size</code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

    <tr>
     <th><code>src</code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

    <tr>
     <th><code>tabindex</code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

    <tr>
     <th><code>target</code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

    <tr>
     <th><code><a href="#template">template</a></code>

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

     <td class="no">-

    <tr>
     <th><code>value</code>

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="no">-

     <td class="yes">Yes

     <td class="no">-

     <td class="yes">Yes

     <td class="yes">Yes

     <td class="yes">Yes
  </table>

  <h2 class="no-num" id="c.-deprecated">C. Deprecated features</h2>

  <p>The following features are deprecated by this specification:

  <ul>
   <li><a href="#size-deprecated">The <code>size</code> attribute on the
    <code>input</code> element.</a>
  </ul>

  <p>Documents must not use deprecated features. User agents should support
   deprecated features.

  <h2 class="no-num" id="d.-requirements">D. Requirements for declaring
   interoperability</h2>

  <p>The <a href="http://www.whatwg.org/charter">WHAT working group
   charter</a> requires that for this specification to be considered
   interoperably implemented, the tests for each <em>feature</em> must be
   passed by two implementations. The features of this specification are, for
   the purpose of testing interoperability:

  <ul>
   <li>Each subsection of the <em><a href="#extend-form-controls">Extensions
    to form control elements</a></em> section.

   <li>The <em><a href="#repeatingFormControls">The repetition model for
    repeating form controls</a></em> section.

   <li>Each subsection of the <em><a href="#forms-events-model">The forms
    event model</a></em> section.

   <li>The <em><a href="#form-submission">Form submission</a></em> section.

   <li>Each subsection of the <em><a href="#fetching-data">Fetching data from
    external resources</a></em> section.

   <li>Each subsection of the <em><a href="#dom">Extensions to the HTML Level
    2 DOM interfaces</a></em> section.
  </ul>

  <h2 class="no-num" id="references">References</h2>

  <p>All references are normative unless marked "Informative".

  <dl>
   <dt id="refsCHARMOD">[CHARMOD]

   <dd><cite><a
    href="http://www.w3.org/TR/2005/REC-charmod-20050215/">Character Model
    for the World Wide Web 1.0</a></cite>, M. D&uuml;rst, F. Yergeau, R.
    Ishida, M. Wolf, T. Texin. W3C, February 2005. The latest version of the
    Character Model specification is available at <a
    href="http://www.w3.org/TR/charmod/">http://www.w3.org/TR/charmod/</a>

   <dt id="refsCSJSR">[CSJSR]

   <dd><cite><a
    href="http://devedge.netscape.com/library/manuals/2000/javascript/1.3/reference/index.html">Client-Side
    JavaScript Reference</a></cite> (1.3). Netscape Communications
    Corporation, May 1999. The Client-Side JavaScript Reference (1.3) is
    available at
    http://devedge.netscape.com/library/manuals/2000/javascript/1.3/reference/index.html

   <dt id="refsCSS21">[CSS21]

   <dd><cite><a href="http://www.w3.org/TR/2004/CR-CSS21-20040225/">CSS 2.1
    Specification</a></cite>, B. Bos, T. &Ccedil;elik, I. Hickson, H. Lie.
    W3C, September 2003. The latest version of the CSS 2.1 specification is
    available at <a
    href="http://www.w3.org/TR/CSS21">http://www.w3.org/TR/CSS21</a>

   <dt id="refsCSS3CONTENT">[CSS3CONTENT]

   <dd><cite><a
    href="http://www.w3.org/TR/2003/WD-css3-content-20030514">CSS3 Generated
    and Replaced Content Module</a></cite>, I. Hickson. W3C, May 2003. The
    latest version of the CSS3 Generated and Replaced Content module is
    available at <a
    href="http://www.w3.org/TR/css3-content">http://www.w3.org/TR/css3-content</a>

   <dt id="refsCSS3UI">[CSS3UI]

   <dd><cite><a href="http://www.w3.org/TR/2004/CR-css3-ui-20040511/">CSS3
    Basic User Interface Module</a></cite>, T. &Ccedil;elik. W3C, May 2004.
    The latest version of the CSS3 UI module is available at <a
    href="http://www.w3.org/TR/css3-ui">http://www.w3.org/TR/css3-ui</a>

   <dt id="refsDOM2HTML">[DOM2HTML]

   <dd><cite><a
    href="http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109">Document
    Object Model (DOM) Level 2 HTML Specification</a></cite>, J. Stenback, P.
    Le H&eacute;garet, A. Le Hors. W3C, January 2003. The latest version of
    the DOM Level 2 HTML specification is available at <a
    href="http://www.w3.org/TR/DOM-Level-2-HTML/">http://www.w3.org/TR/DOM-Level-2-HTML/</a>

   <dt id="refsDOM3CORE">[DOM3CORE]

   <dd><cite><a
    href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/">Document
    Object Model (DOM) Level 3 Core Specification</a></cite>, A. Le Hors, P.
    Le H&eacute;garet, L. Wood, G. Nicol, J. Robie, M. Champion, S. Byrne.
    W3C, November 2003. The latest version of the DOM Level 3 Core
    specification is available at <a
    href="http://www.w3.org/TR/DOM-Level-3-Core/">http://www.w3.org/TR/DOM-Level-3-Core/</a>

   <dt id="refsDOM3EVENTS">[DOM3EVENTS]

   <dd><cite><a
    href="http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/">Document
    Object Model (DOM) Level 3 Events Specification</a></cite>, P. Le
    H&eacute;garet, T. Pixley. W3C, November 2003. (Note: Despite its
    non-normative status on the W3C Recommendation track, this specification
    should be considered normative for the purposes of conformance.) The
    latest version of the DOM Level 3 Events specification is available at <a
    href="http://www.w3.org/TR/DOM-Level-3-Events/">http://www.w3.org/TR/DOM-Level-3-Events/</a>

   <dt id="refsECMA262">[ECMA262]

   <dd><cite><a
    href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript
    Language Specification</a></cite>, Third Edition. ECMA, December 1999.
    This version of the ECMAScript Language is available at
    http://www.ecma-international.org/publications/standards/Ecma-262.htm

   <dt id="refsHTC">[HTC]

   <dd>(Informative) <cite><a
    href="http://www.w3.org/TR/1998/NOTE-HTMLComponents-19981023">HTML
    Components</a></cite>, Chris Wilson. Microsoft, September 1998. The HTML
    Components submission is available at
    http://www.w3.org/TR/1998/NOTE-HTMLComponents-19981023

   <dt id="refsHTML4">[HTML4]

   <dd><cite><a href="http://www.w3.org/TR/1999/REC-html401-19991224">HTML
    4.01 Specification</a></cite>, D. Raggett, A. Le Hors, I. Jacobs. W3C,
    December 1999. The latest version of the HTML4 specification is available
    at <a href="http://www.w3.org/TR/html4">http://www.w3.org/TR/html4</a>

   <dt id="refsISO8601">[ISO8601]

   <dd><cite><a
    href="http://www.iso.ch/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=40874&amp;ICS1=1&amp;ICS2=140&amp;ICS3=30">ISO8601:2004
    Data elements and interchange formats -- Information interchange --
    Representation of dates and times</a></cite>. ISO, December 2004. ISO
    8601 is available for purchase at <a
    href="http://www.iso.ch/">http://www.iso.ch/</a>

   <dt id="refsRFC959">[RFC959]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc959">File Transfer Protocol
    (FTP)</a></cite>, J. Postel, J. Reynolds. IETF, October 1985. RFC 959 is
    available at http://www.ietf.org/rfc/rfc959

   <dt id="refsRFC1738">[RFC1738]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc1738">Uniform Resource
    Locators (URL)</a></cite>, T. Berners-Lee, L. Masinter, M. McCahill.
    IETF, December 1994. RFC 1738 is available at
    http://www.ietf.org/rfc/rfc1738

   <dt id="refsRFC1866">[RFC1866]

   <dd>(Informative) <cite><a
    href="http://www.ietf.org/rfc/rfc1866">Hypertext Markup Language -
    2.0</a></cite>, T. Berners-Lee, D. Connolly. IETF, November 1995. RFC
    1866 is available at http://www.ietf.org/rfc/rfc1866

   <dt id="refsRFC2045">[RFC2045]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc2045">Multipurpose Internet
    Mail Extensions (MIME) Part One: Format of Internet Message
    Bodies</a></cite>, N. Freed, N. Borenstein. IETF, November 1996. RFC 2045
    is available at http://www.ietf.org/rfc/rfc2045

   <dt id="refsRFC2046">[RFC2046]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc2046">Multipurpose Internet
    Mail Extensions (MIME) Part Two: Media Types</a></cite>, N. Freed, N.
    Borenstein. IETF, November 1996. RFC 2046 is available at
    http://www.ietf.org/rfc/rfc2046

   <dt id="refsRFC2119">[RFC2119]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc2119">Key words for use in
    RFCs to Indicate Requirement Levels</a></cite>, S. Bradner. IETF, March
    1997. RFC 2119 is available at http://www.ietf.org/rfc/rfc2119

   <dt id="refsRFC2368">[RFC2368]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc2368">The mailto URL
    scheme</a></cite>, P. Hoffman, L. Masinter, J. Zawinski. IETF, July 1998.
    RFC 2368 is available at http://www.ietf.org/rfc/rfc2368

   <dt id="refsRFC2397">[RFC2397]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc2397">The "data" URL
    scheme</a></cite>, L. Masinter. IETF, August 1998. RFC 2397 is available
    at http://www.ietf.org/rfc/rfc2397

   <dt id="refsRFC2388">[RFC2388]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc2388">Returning Values from
    Forms: multipart/form-data</a></cite>, L. Masinter. IETF, August 1998.
    RFC 2388 is available at http://www.ietf.org/rfc/rfc2388

   <dt id="refsRFC3986">[RFC3986]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc3986">Uniform Resource
    Identifier (URI): Generic Syntax</a></cite>, T. Berners-Lee, R. Fielding,
    L. Masinter. IETF, January 2005. RFC 3986 is available at
    http://www.ietf.org/rfc/rfc3986

   <dt id="refsRFC3987">[RFC3987]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc3987">Internationalized
    Resource Identifiers (IRIs)</a></cite>, M. Duerst, M. Suignard. IETF,
    January 2005. RFC 3987 is available at http://www.ietf.org/rfc/rfc3987

   <dt id="refsRFC2616">[RFC2616]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc2616">Hypertext Transfer
    Protocol -- HTTP/1.1</a></cite>, R. Fielding, J. Gettys, J. Mogul, H.
    Frystyk, L. Masinter, P. Leach, T. Berners-Lee. IETF, June 1999. RFC 2616
    is available at http://www.ietf.org/rfc/rfc2616</dd>
   <!--
   <dt id="refsRFC2806">[RFC2806]</dt>
   <dd><cite><a href="http://www.ietf.org/rfc/rfc2806">URLs for Telephone Calls</a></cite>, A. Vaha-Sipila. IETF, April 2000. RFC 2806 is available at http://www.ietf.org/rfc/rfc2806</dd>
-->

   <dt id="refsRFC2822">[RFC2822]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc2822">Internet Message
    Format</a></cite>, P. Resnick. IETF, April 2001. RFC 2822 is available at
    http://www.ietf.org/rfc/rfc2822

   <dt id="refsRFC3023">[RFC3023]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc3023">XML Media
    Types</a></cite>, M. Murata, S. St.Laurent, D. Kohn. IETF, January 2001.
    RFC 3023 is available at http://www.ietf.org/rfc/rfc3023

   <dt id="refsRFC3106">[RFC3106]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc3106">ECML v1.1: Field
    Specifications for E-Commerce</a></cite>, D. Eastlake, T Goldstein. IETF,
    April 2001. RFC 3106 is available at http://www.ietf.org/rfc/rfc3106

   <dt id="refsRFC3490">[RFC3490]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc3490">Internationalizing
    Domain Names in Applications (IDNA)</a></cite>, P. Faltstrom, P. Hoffman,
    A. Costello. IETF, March 2003. RFC 3490 is available at
    http://www.ietf.org/rfc/rfc3490

   <dt id="refsRFC3875">[RFC3875]

   <dd><cite><a href="http://www.ietf.org/rfc/rfc3875">The Common Gateway
    Interface (CGI) Version 1.1</a></cite>, D. Robinson, K. Coar. IETF,
    October 2004. RFC 3875 is available at http://www.ietf.org/rfc/rfc3875

   <dt id="refsSelectors">[SELECTORS]

   <dd><cite><a
    href="http://www.w3.org/TR/2001/CR-css3-selectors-20011113/">Selectors</a></cite>,
    D. Glazman, T. &Ccedil;elik, I. Hickson, P. Linss, J. Williams. W3C,
    November 2001. The latest version of the Selectors specification is
    available at <a
    href="http://www.w3.org/TR/css3-selectors">http://www.w3.org/TR/css3-selectors</a>

   <dt id="refsUNICODE">[UNICODE]

   <dd><cite><a href="http://www.unicode.org/versions/Unicode4.1.0/">The
    Unicode Standard, Version 4.1</a></cite>, The Unicode Consortium. Boston,
    MA, Addison-Wesley, March 2005. ISBN 0-321-18578-1, as amended by <a
    href="http://www.unicode.org/versions/Unicode4.0.1/">Unicode 4.0.1</a>
    and <a href="http://www.unicode.org/versions/Unicode4.1.0/">Unicode
    4.1.0</a>. The latest version of the Unicode specification is available
    at <a
    href="http://www.unicode.org/versions/">http://www.unicode.org/versions/</a>

   <dt id="refsXBL">[XBL]

   <dd>(Informative) <cite><a
    href="http://www.w3.org/TR/2001/NOTE-xbl-20010223/">XML Binding
    Language</a></cite>, David Hyatt. Mozilla, February 2001. The XBL
    submission is available at http://www.w3.org/TR/2001/NOTE-xbl-20010223/

   <dt id="refsXForms">[XForms]

   <dd><cite><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/">XForms
    1.0</a></cite>, M. Dubinko, L. Klotz, R. Merrick, T. Raman. W3C, October
    2003. The latest version of the XForms specification is available at <a
    href="http://www.w3.org/TR/xforms">http://www.w3.org/TR/xforms</a>

   <dt id="refsXHTML1">[XHTML1]

   <dd><cite><a href="http://www.w3.org/TR/xhtml11/">XHTML&trade; 1.1 -
    Module-based XHTML</a></cite>, M. Altheim, S. McCarron. W3C, May 2001.
    The latest version of the XHTML 1.1 specification is available at <a
    href="http://www.w3.org/TR/xhtml11">http://www.w3.org/TR/xhtml11</a>

   <dt id="refsXML">[XML]

   <dd><cite><a href="http://www.w3.org/TR/2004/REC-xml-20040204/">Extensible
    Markup Language (XML) 1.0 (Third Edition)</a></cite>, T Bray, J Paoli, C.
    M. Sperberg-McQueen, E. Maler, F. Yergeau. W3C, Feburary 2004. The latest
    version of the XML specification is available at <a
    href="http://www.w3.org/TR/REC-xml/">http://www.w3.org/TR/REC-xml/</a>
  </dl>

  <h2 class="no-num" id="acknowledgements">Acknowledgements</h2>

  <p>This work is the direct result of discussion on the WHATWG public
   mailing list.

  <p>Thanks to Alan Plum, Allan Clements, Alexander J. Vincent, Andrew
   Clover, Andrew Smith, Andy Heydon, Anne van Kesteren, Anthony Boyd, Ave
   Wrigley, Bert Bos, Bill McCoy, Bj&ouml;rn H&ouml;hrmann, Boris Zbarsky,
   Brad Fults, Brendan Eich, Brian Korver, Brian Ryner, Brian Wilson, C.
   Williams, Chris Morris, Christian Biesinger, Christian Schmidt,
   Christopher Aillon, Craig Cockburn, Csaba Gabor, Daniel Bratell, Daniel
   Brooks, Dave Hodder, David Baron, David E. Cleary, David Hyatt, David
   Matja, Dean Edwards, dolphinling, Doron Rosenberg, Edmund Lai, Edward
   Welbourne, Eira Monstad, Eric Rescorla, fantasai, Gytis Jakutonis,
   H&aring;kon Wium Lie, Hallvord Reiar Michaelsen Steen, Henri Sivonen, Ian
   Bicking, James Graham, Jason Kersey, Jason Lustig, Jens Lindstr&ouml;m,
   Jim Ley, Joe Gregorio, John Keiser, Johnny Stenback, Jon Ferraiolo, Jonas
   Sicking, Jonny Axelsson, Jorunn Danielsen Newth, Jukka K. Korpela, Justin
   Sinclair, Lachlan Hunt, Laurens Holst, Maciej Stachowiak, Mark Birbeck,
   Mark Nottingham, Mark Schenk, Mark Wilton-Jones, Martijn Wargers, Martin
   Honnen, Martin Kutschker, Matt Wright, Matthew Mastracci, Matthew Thomas,
   Mattias Waldau, Max Romantschuk, Menno van Slooten, Micah Dubinko, Michael
   A. Nachbaur, Michael Daskalov, Michael Enright, Mike Shaver, Mikko
   Rantalainen, Neil Rashbrook, Olav Junker Kj&#xE6;r, Olli Pettay, Paul
   Norman, Peter Stark, Peter-Paul Koch, Rene Stach, Rich Doughty, Rigo
   Wenning, Sander van Lambalgen, Sebastian Schnitzenbaumer, Shanti Rao,
   Sigbj&oslash;rn Vik, Simon Montagu, Simon Pieters, Stuart Ballard,
   Subramanian Peruvemba, Susan Borgrink, <span lang="tr">Tantek
   &Ccedil;elik</span>, Ted Mielczarek, Tom Pike, voracity, Will Levine, and
   Wladimir Palant for their comments, both large and small. Thanks to the
   W3C QA Working Group for providing useful guidelines for specification
   authors. Thanks also to the Slashdot, Mozillazine, and My Opera
   communities for some ideas, and to the #mozilla crew, the #opera crew, and
   the #mrt crew for their ideas and support.

  <p>The editor would like to convey very special thanks to Malcolm Rowe and
   Matthew Raymond for their help fielding comments in the WHATWG mailing
   list.</p>
  <!-- XXX For future versions:

 * In the document.forms[0] array, how are radio buttons handled?
   document.forms[0].group[0].checked ?
   + see: http://bugzilla.mozilla.org/show_bug.cgi?id=232421
 * "HTML" icon on the diagram needs to be labelled "HTML or XHTML with
   WebForms" or some such. [or not, if we make this HTML5]
 * RFC 2119 terms to be marked.
 * trim function in JS for strings to remove spaces
 * date checking functions in JS (.isValidDate?)
 * A fairly common situation for web authors is to have two lists, where
   the contents of the second depends on the value of the first. Is there
   any way we could extend the current model to include this functionality?
 * edit field "inner" captions
 * quick-searchable select
 * fallback that will only appear in non-webforms clients (e.g. for
   formats for date fields)
 * include/exclude selectors (two multi-select columns with arrows to
   move selected items) and that sort of thing.
   http://slashdot.org/comments.pl?sid=110240&cid=9357022
 * disclosure triangles or the [+] expand/collapse widget.
   http://slashdot.org/comments.pl?sid=110240&cid=9359006
   (->web apps?)
 * Oh, and forms need a standardized Help widget/icon. I know I can
   turn my cursor into a question mark, but I'm looking for something
   simple and pervasive. Maybe you can wrap fields in a help tag, just
   as you do for fieldsets. And in that help tag, attributes are
   available that allow for a nice, formatted, clean, full help text
   popup/area/thing.
   http://slashdot.org/comments.pl?sid=110240&cid=9359006
 * Validating only part of a form. - Anja Lehmann
 * Reminder to add a way to expose access keys in buttons, i.e.
   Sub&mit where & signifies the m is the access key to use. Possibly
   automatic? <input accesskey="m" value="Submit"> browser would be
   smart enough to underline the first instance of the access key if
   it exists (case insensitive)? - kerz
   [or deprecate the lot (->web apps)]
 * option.text should do the same as option.textContent
 * select.options.add(), .remove() should exist (and forward to the select)
 * select.add()'s second argument should also be allowed to be an integer (negative means append)
   + see: http://bugzilla.mozilla.org/show_bug.cgi?id=240304
          http://junkyard.damowmow.com/138
 * Need an attribute that says "the children of this element are in
   their own tabbing universe, tabindex should be relative to each
   other, not to the document"
   -> web apps?
 * Make optgroups selectable if they have a value.
 * Make select widgets have multiple columns
   or ->web apps with list view
 * Repetition blocks should be able to specify what template they are
   from.
 * Required as a group (one of the following must be available):
   + I propose something like the following:
       <input type="text" group="contact" name="voicephone"> Voice phone
       <input type="text" group="contact" name="fax"> Fax
       <input type="text" group="contact" name="mobile"> Mobile phone
       <input type="text" group="contact" name="email"> Email
     If the user fills out none of the form fields in the "contact"
     group, an error message is shown and the form is not submitted.
     - Peter-Paul Koch
 * Use the sample widgets:
      <li><img alt="A text field with editable sections for each
      value, with a button to pop up a dialog showing a calendar or
      clock." src="sample-datetime-ui-2"></li>
      <li><img alt="A calendar grid with a clock in the upper right
      hand corner." src="sample-datetime-ui-3"></li>
 * formatting of number fields, text fields, etc, so that when the
   field is not focused, the value is displayed differently. Seems
   like this would also be useful e.g. for <output> or something so
   you can display localised dates, etc.
 * update text/html RFC
 * type="emails"
 * password and confirm password: can we have a way to do client-side
   validation of this?
 * <input type="search">
   http://weblogs.mozillazine.org/hyatt/archives/2004_07.html#005890
 * Would be nice to say how to handle duplicate IDs once and for all
   instead of spreading it all over the spec.
 * being able to select date range (from day x to day y)
 * ways of visualizing a linefeed in a <textarea> so it looks different
   from wrapping text
 * all login systems have
     1. enter username and password
     2. create new account
     3. lost password
   some way of integrating this into one system, since it's so common
 * way of identifying different sorts of mailadresses
     a) mailing-list
     b) person
     c) department in a company ("support", "marketing" and such)
     d) general mail (like "info", "mail", "contact" and such)
     e) other sorts of groupings
   (or ->web apps; this is talking about in mailto: links, I think)
 * hotswapping login identities like in windows xp
     you are logged in on operamail.com, and you want to check the mail
     of another user. somehow, combined with the wand or whatever,
     the browser will remember the login page, and it can re-submit it
     without having to load the initial page (saving time)
 * gaining access to filesystem on another computer, to be able to
   work automagically with that filesystem (opening, saving, copying,
   moving, deleting, changing file attributes), just like you would on
   a local filesystem or thru a shell.
   (->web apps if anything related to HTML5 at all)
 * more control over visualisation of tooltips
     1. linebreaks
     2. lists
     3. other things (but keep it simple, don't let people run off)
   (->web apps)
 * provide different measuring systems, like having the html indicate
   fluid in both fluid ounces and liters, and the browser can display
   one or the other based on regional settings in the browser or ui,
   display conversions in a tooltip, or let the user decide which
   format to display.
 * indicate "x days ago" or "y days into the future" rather than date
 * input control for anniversaries
 * some kind of format element that gives a region-specific format on
   a WF2 browser:
      <label for="dday">
         Date: <timeformat type="date">(format: dd-mm-yyyy)</timeformat>
      </label>
      <input type="date" id="dday">
   In a legacy browser, the label would be "Date: (format:
   dd-mm-yyyy)". On a WF2 browser, however, you might see "Date:
   (format: yyyy-mm-dd)" if your region uses the "yyyy-mm-dd" format.
   This can be useful for international users who may be using a
   browser in an Internet cafe or something and is not be used to the
   native formats.
 * define nntp: and urn: submission schemes (urn:?!)
 * only submit fields that have changed
 * have a way of marking the first option of a <select> as the default
   but have it not satisfy a new required="" attribute on <select> so
   that you can have selects that require a valid value.
 * Dave Raggett inadvertently suggested there should be a way to submit
   canvas elements.
 * type="time" value="now"
 * Alternative to the move-up/move-down buttons suggested by mpt:
   |
   | Furthermore, perhaps the "move-up" and "move-down" buttons could
   | be replaced by a single "move" control. This could appear as a
   | grippy (e.g. a square of raised bumps) next to a row, so it could
   | be dragged with the mouse to move the row up or down. And on
   | platforms (or in accessibility situations) where focusing it was
   | appropriate, it could be focused so a row could be moved up or
   | down with the arrow keys.
   | 
   | Sample rendering (magnified):
   | 
   | - -  - -  - - - - - - - - - - - - .   ,- -.   ,- -.   o o o o
   |                                   |  | _ _ | | _|_ |  o o o o
   |                                   |  |     | |  |  |  o o o o
   | -  - -  - - - - - - - - - - - - - '   "- -"   "- -"   o o o o
   | 
   | This would be more direct manipulation than move-up and move-down
   | buttons would be. More importantly, if you were wanting to move a
   | row more than one place with the mouse, dragging a grippy once
   | would be much more convenient than clicking a "Move Up"/"Move
   | Down" button several times, since the latter button would
   | annoyingly jump away every time you clicked it.
 * Should "mixed fractional number" be used instead of "fractional"?
 * Terse BNF to define the allowed values of the various attributes
   instead of, or in addition to, the prose. [or not, it wouldn't be terse]
 * the input element and textarea element current selection
 * way to handle having controls be required in one form and not another
   http://listserver.dreamhost.com/pipermail/whatwg-whatwg.org/2004-August/002148.html
   maybe: required="form2" form="form1 form2 form3" ?
 * image.click(2, 5); and a way to detect where on the image the click
   was.
 * add something to type="number" to support basic currency and unit
   formatting of input
 * add something like <date>, <time>, and <number> so that dates, times,
   and numbers can be auto-formatted. -> web apps
 * <fieldset enabled-if-checked="myCheckboxOrRadioButton">
   ...to allow sections to only be enabled if a radio button makes it
   relevant, for instance.
 * Yan Morin proposed a multi-column dropdown <select> or <datalist>:
     _________________
    |_New_York______|V|_________________  <- input  with a table link and a down arrow
    |_City__________|_State_|_Country_|_| <- header of the table
    | Montreal      |  QC   | Canada  |A| <- top arrow of the scroll
    |>New York     <|  NY   | US      | | <- selected row
    | Washington    |  DC   | US      |X| <- cursor scroll
    | San Francisco |  CA   | US      | |
    |_Toronto_______|__ON___|_Canada__|V| <- bottom arrow of the scroll

 * A way to include in the submission a list of which form controls
   were changed from their default value.
 * Add for="" attribute to <input type="password"> so that you can
   link usernames and passwords. (Jonas Sicking)
 * Stripping whitespace?
 * Value for unchecked checkbox?
 * Maximum height/width or required ratio for image uploads? - Leons Petrazickis
 * A way to specify the default button - Michael Gratton 
 * <fieldset readonly>?
-->
