
Examples to add:

   Type a multiple of three:
   <input type="number"
    oninput="
      setCustomValidity(value % 3 == 0 ? ''
        : 'The number provided is not a multiple of three')"
    oninvalid="
    if (event.target.validity &amp; event.target.form.ERROR_TYPE_MISMATCH) {
      alert('You must enter a multiple of three.');
      event.target.focus();
      return false; /* abort error handling, we dealt with it */
    }
    return true; /* let UA deal with error */
   ">

  If the author is willing to use the same name for all the repeated
  fields (i.e. not use the substitution feature) then it could work
  like this (assuming the fields you want to total are called
  "amount"):

   <output onforminput="
     value = 0;
     for (var index = 0; index < amount.length; ++index)
       if (amount[index].validity == 0)
         value += amount[index].value;
   ">


  How to use replace="values" in a backcompat way. (using the form
  action as opposed to the button action, using the name on the
  button, etc)

  Postal code lookup example

  example of client side validation of esoteric conditions

  > Could you provide a complete example form data file for one of the
  > previously provided form examples?

 * How do you detect a WebForms UA?




    function Man(x, floor) {
      this.x = x;
      this.legWidth = 50;
      this.legHeight = 100;
      this.bodyHeight = 100;
      this.neckHeight = 20;
      this.headRadius = 50;
      this.armHeight = 80;
      this.armWidth = 50;
      this.eyeRadius = 5;
      this.eyeXOffset = 20;
      this.eyeYOffset = 15;

      this.paint = function (context) {
        context.save();
        context.lineWidth = 2;
        context.strokeStyle = 'black';
        context.beginPath();
        context.moveTo(this.x - this.legWidth, floor);
        context.lineTo(this.x, floor - this.legHeight);
        context.lineTo(this.x + this.legWidth, floor);
        var neckY = floor - this.legHeight - this.bodyHeight;
        context.moveTo(this.x - this.armWidth, neckY + this.armHeight);
        context.lineTo(this.x, neckY);
        context.lineTo(this.x + this.armWidth, neckY + this.armHeight);
        context.moveTo(this.x, floor - this.legHeight);
        context.lineTo(this.x, neckY);
        var headHeight = neckY - this.neckHeight - this.headRadius;
        context.arc(this.x, headHeight, this.headRadius, Math.PI/2, 5*Math.PI/2, false);
        context.stroke();
        context.beginPath();
        context.fillStyle = 'black';
        context.arc(this.x - this.eyeXOffset, headHeight - this.eyeYOffset,
                    this.eyeRadius, 0, 2*Math.PI, false);
        context.arc(this.x + this.eyeXOffset, headHeight - this.eyeYOffset,
                    this.eyeRadius, 0, 2*Math.PI, false);
        context.arc(this.x + this.eyeXOffset, headHeight - this.eyeYOffset,
                    this.eyeRadius, 0, 2*Math.PI, false);
        context.fill();
        context.restore();
      };
    }

    var context = document.getElementsByTagName('canvas')[0].getContext('2d');
    var man = new Man(400, 400);
    man.paint(context);
