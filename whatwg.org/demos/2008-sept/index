<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
 <head>
  <title>Web Hypertext Application Technology Working Group Demos from September 2008</title>
  <link rel="stylesheet" media="all" href="/style/tabbed-pages">
  <link rel="icon" href="/images/icon">
 </head>
 <body>
  <h1>
   <span class="the">The</span>
   <strong class="what">Web Hypertext Application Technology</strong>
   <span class="wg">Working Group</span>
  </h1>
  <ul class="navigation">
   <li><a href="/" rel="home">Home</a></li>
   <li><a href="/news/">News</a></li>
   <li class="this"><strong>Demos</strong></li>
   <li><a href="/specs/">Specifications</a></li>
   <li><a href="/charter">Charter</a></li>
   <li><a href="/mailing-list">Mailing List</a></li>
  </ul>
  <h2>HTML 5 demos from September 2008</h2>
  <p><iframe width="560" height="315" src="https://www.youtube.com/embed/xIxDJof7xxQ" frameborder="0" allowfullscreen></iframe></p>
  <p>The demos and segments of this talk are:</p>
  <ol>
   <li> <a href="video/video.html"><code>&lt;video></code></a> (00:35)
   <li> <a href="gadget-host/host.html"><code>postMessage()</code></a> (05:40)
   <li> <a href="editor/editor.html"><code>localStorage</code></a> (15:20)
   <li> <a href="wizard/step1.html"><code>sessionStorage</code></a> (21:00)
   <li> <a href="dnd/dnd.html">Drag and Drop API</a> (29:05)
   <li> <a href="hashchange/hashchange.html"><code>onhashchange</code></a> (37:30)
   <li> <a href="widgets/">Form Controls</a> (40:50)
   <li> <a href="color/color.html"><code>&lt;canvas></code></a> (56:55)
   <li> <a href="http://html5.validator.nu/">Validation</a> (1:07:20)
   <li> Questions and Answers (1:09:35)
  </ol>
  <p>The notes were:</p>
  <pre>
HTML5 DEMOS
===========

This is a series of demos intended for showing implementations of
HTML5 in (non-final) browsers available in September 2008.

Configuration:
 - Open Terminal in Presentation mode
 - Hide dock
 - Open Opera, Firefox, Safari, VMWare with IE, Chrome
 - Clear all their caches, form autofill, history, download history.


1. &lt;video&gt;

   Scenario: Embedding a video

     &lt;video src="firefox.ogg" controls&gt;&lt;/video&gt;

   To make it autoplay:

     &lt;video src="firefox.ogg" controls autoplay&gt;&lt;/video&gt;

   Remove controls and add script:

     &lt;script&gt; var video = document.getElementsByTagName('video')[0]; &lt;/script&gt;
     &lt;p&gt;
      &lt;input type=button value="&amp;#x25FC;" onclick="video.pause();"&gt;
      &lt;input type=button value="&amp;#x25B6;" onclick="video.play();"&gt;
     &lt;/p&gt;

   Replace buttons with one button:

     &lt;input type=button value="&amp;#x2588; &amp;#x2588"
            onclick="if (video.paused) video.play(); else video.pause();"&gt;

   Works in Firefox.


2. postMessage()

   Scenario: Gadget from damowmow.com hosted in site on whatwg.org. The
   site knows, or can ask for, the user's nickname, and the gadget
   wants to show the nickname in its UI.

   http://www.whatwg.org/demos/2008-sept/gadget-host/host.html

     &lt;iframe src="http://damowmow.com/playground/demos/gadget/gadget.html"&gt;
     &lt;/iframe&gt;

     &lt;p&gt;
      &lt;label&gt;
       Nick:
       &lt;input type="text" name="nick" onkeyup="updateNick(value)"&gt;
      &lt;/label&gt;
     &lt;/p&gt;

     &lt;script&gt;
      function updateNick(nick) {
        frames[0].postMessage('nick=' + nick,
                    'http://damowmow.com/playground/demos/gadget/gadget.html');
      }
     &lt;/script&gt;

   http://damowmow.com/playground/demos/gadget/gadget.html

     &lt;p&gt;Hello &lt;span id=nick&gt;Sir&lt;/span&gt;!&lt;/p&gt;
     &lt;script&gt;
       addEventListener('message', function (e) {
         if (e.origin == "http://www.whatwg.org" &amp;&amp;
             e.data.substr(0,5) == "nick=")
           document.getElementById('nick').firstChild.data = e.data.substr(5);
       }, false);
     &lt;/script&gt;

   Works in Safari, Firefox.

   Internet Explorer doesn't support DOM Events. But we can work
   around this by adding a shim, so that we can make this work in IE
   too:

     if (!window.addEventListener)
       window.addEventListener = function (n, f, c) {
         attachEvent('on' + n, function () { f(event) });
       };

   Works in IE.


3. localStorage

   Scenario: A text editor that stores the user's files client-side.

   Start with a simple text editor:

     &lt;form name=editor&gt;

      &lt;p&gt;&lt;textarea name=data&gt;&lt;/textarea&gt;&lt;/p&gt;

     &lt;/form&gt;

   Then add Open and Save buttons:

     &lt;p&gt;
      &lt;label&gt;Filename: &lt;input name=filename&gt;&lt;/label&gt;
      &lt;input type=button value="Open" onclick="doOpen()"&gt;
      &lt;input type=button value="Save" onclick="doSave()"&gt;
     &lt;/p&gt;

   Saving:

     &lt;script&gt;

      function doSave() {
        var filename = document.forms.editor.filename.value;
        var data = document.forms.editor.data.value;
        localStorage.setItem('file-' + filename, data);
      }

     &lt;/script&gt;

   Opening:

     function doOpen() {
       var filename = document.forms.editor.filename.value;
       document.forms.editor.data.value = localStorage.getItem('file-' + filename);
     }

   Works in IE and Safari.

   Demo:
     1. filename = first.txt
     2. data = Hello World!
     3. save
     4. open "earlier.txt"
     5. open "first.txt"


4. sessionStorage

   Scenario: Multi-page form that doesn't involve server-side state
   until the last page. Let's say, a kind of madlibs wizard.

   Let's create a form for the first step:

     &lt;form action="step2.html" method=post&gt;
      &lt;p&gt; &lt;label&gt; Noun: &lt;input name=n1&gt; &lt;/label&gt; &lt;/p&gt;
      &lt;p&gt; &lt;input type="submit" value="Next..."&gt;
     &lt;/form&gt;

   But we don't want to rely on the server, so we have to save the data:

     onsubmit="save(n1)"

   We'll put the script in an external file so that each step of the
   wizard can reuse it:

     &lt;script src="script.js"&gt;&lt;/script&gt;

   The script is just:

     function save(element) {
       localStorage.setItem(element.name, element.value);
     }

   Steps 2 and 3 and the final page of the wizard which uses the data
   were prepared earlier, but are basically the same.

   Try it in Safari (face red pepper).

   Now try it in two windows at once (date, ugly, insult; volume, down,
   geezer, then click next on the first, then on the second).

   To fix this we use sessionStorage instead of localStorage. Fix
   script.js and end.html.

   Now try it in two windows again (cheese blue mould; mood up demo).

   Works in IE, Firefox, Safari. (opinion around argument; frown
   upside-down joke)
   

5. Drag and Drop

   Scenario: Dragging icons around.

   I have three images:

     &lt;style&gt;
      img { height: 4em; }
     &lt;/style&gt;
     &lt;p&gt;
      &lt;img src="spam.gif" id=spam alt="Spam"&gt;
      &lt;img src="egg.gif" id=egg alt="Egg"&gt;
      &lt;img src="cat.gif" id=cat alt="Cat"&gt;
     &lt;/p&gt;

   To each image we add:

     ondragstart="drag(this, event)"

   ...with:

     &lt;script&gt;
      function drag(target, e) {
        e.dataTransfer.setData('Text', target.id);
      }
     &lt;/script&gt;

   Now we need somewhere to drag them to:

     &lt;style&gt;
      div { margin: 1em 2em; border: solid black; text-align: center;
            height: 9em; width: 12em; float: left; }
      p { clear: both; margin: 1em 3em; }
     &lt;/style&gt;
     ...
     &lt;div&gt;
      &lt;p&gt;Good&lt;/p&gt;
     &lt;/div&gt;
     &lt;div&gt;
      &lt;p&gt;Bad&lt;/p&gt;
     &lt;/div&gt;
     ...

   To make them drag targets, we add the following to each &lt;div&gt;:   

     ondragenter="return false" ondragover="return false" ondrop="drop(this, event)"

   ...with:

     &lt;script&gt;
      function drop(target, e) {
        target.appendChild(document.getElementById(e.dataTransfer.getData('Text')));
        e.preventDefault();
      }
     &lt;/script&gt;

   Works in IE, Safari, Firefox.


6. onhashchange

   Scenario: Reacting to changes in the fragment identifier so that
   you can use normal links to affect the application view, just like
   scrolling in a document.

     &lt;p&gt;&lt;a href="#a"&gt;A&lt;/a&gt; &lt;a href="#b"&gt;B&lt;/a&gt;&lt;/p&gt;
     &lt;p id="message"&gt;None&lt;/p&gt;

     onload="update()" onhashchange="update()"

     &lt;script&gt;
      function update() {
        if (location.hash) {
          var msg = document.getElementById('message');
          msg.firstChild.data = location.hash.substr(1);
        }
      }
     &lt;/script&gt;

   Works in IE.


7. New widgets

   Scenario: Creating user interfaces more expressive than HTML4
   allowed, without thousands of lines of JavaScript.

   Range control.

     &lt;input type="range"&gt;

     &lt;div&gt;HTML5&lt;/div&gt;

     oninput="document.getElementsByTagName('div')[0].style.fontSize = value + 'px'"&gt;

   Works in Opera, Safari.

   Or you could change the contents:

     &lt;p&gt;HTML5 will be ready in the year &lt;span&gt;&lt;/span&gt;&lt;/p&gt;

     oninput="document.getElementsByTagName('span')[0].textContent = value"&gt;

   Works in Opera, Safari.

   Of course we need to tweak the range to make this work:

     min=2000 max=2050 value=2008

   Works in Opera, Safari.

   Now the script here is kind of a pain, so we've introduced
   something that will make that easier too:

   Wrap:

     &lt;form&gt; ... &lt;/form&gt;

   Replace &lt;span&gt; with:

     &lt;output output=year&gt; ... &lt;/output&gt;

     oninput="year.value = value"&gt;

   Works in Opera.

   Of course if we're picking a date, we should be using a date
   picker, not a range control. HTML5 has that too:

     &lt;input type=date oninput="year.value = value"&gt;

   Works in Opera.

   That shows the whole date selected, but we can pick out the year:

     &lt;input type=date oninput="year.value = valueAsDate.getYear()"&gt;

   The valueAsDate value returns a Date object.

   Works in Opera.

   We also have other controls:

     &lt;p&gt;&lt;label&gt; URL: &lt;input type="url"&gt;&lt;/label&gt;&lt;/p&gt;
     &lt;p&gt;&lt;label&gt; E-mail: &lt;input type="email"&gt;&lt;/label&gt;&lt;/p&gt;

   Works in Opera. (demo URL autocompletion with whatwg.org)

   The controls can be used with CSS:

     &lt;style&gt;
       :invalid { background: red; color: white; }
     &lt;/style&gt;

   Works in Opera. (demo e-mail with user@example.com)

   (Delete those controls.)

   We also have combo-box controls:

     &lt;p&gt;&lt;label&gt; Favorite Color: &lt;input list=colors&gt;&lt;/label&gt;&lt;/p&gt;
     &lt;datalist id=colors&gt;
      &lt;option&gt;Red
      &lt;option&gt;Orange
      &lt;option&gt;Yellow
      &lt;option&gt;Green
      &lt;option&gt;Blue
      &lt;option&gt;Violet
     &lt;/datalist&gt;

   Works in Opera. (demo with selecting Orange then typing Indigo)

   (Delete those controls.)

   You can also mark a control as required, so that when you submit
   the form, if it's not selected, the browser will complain:

     &lt;p&gt;&lt;label&gt; Query: &lt;input name=q required&gt;&lt;/label&gt;&lt;/p&gt;
     &lt;p&gt;&lt;input type=submit&gt;&lt;/p&gt;

   Works in Opera. (demo with selecting Orange then typing Indigo)

   Notice how it is red straight away because it's required but not
   yet filled in, and thus invalid.

   Demo trying to submit without typing a value.

   (Delete the style element, delete the required attribute, switch to
   Safari.)

   Should just be:

     &lt;form&gt;
      &lt;p&gt;&lt;label&gt; Query: &lt;input name=q autofocus&gt;&lt;/label&gt;&lt;/p&gt;
      &lt;p&gt;&lt;input type=submit&gt;&lt;/p&gt;
     &lt;/form&gt;

   Reload, showing that the control isn't focused by default.

   We can autofocus:

     ... autofocus

   Works in Safari. (demo by reloading again)


9. &lt;canvas&gt;

   Scenario: A trippy graphical display.

   Start with a canvas:
   
   &lt;canvas width="800" height="450"&gt;&lt;/canvas&gt;

   Then add script:

   &lt;script&gt;

    var context = document.getElementsByTagName('canvas')[0].getContext('2d');

    context.beginPath();
    context.moveTo(context.canvas.width * Math.random(), context.canvas.height * Math.random());
    context.lineTo(context.canvas.width * Math.random(), context.canvas.height * Math.random());
    context.stroke();

   &lt;/script&gt;

   function line() {
     // current code
   }
   setInterval(line, 50);

   function blank() {
     context.fillStyle = 'rgba(0,0,0,0.1)';
     context.fillRect(0, 0, context.canvas.width, context.canvas.height);
   }
   setInterval(blank, 40);

   context.strokeStyle = 'white';

   context.lineWidth = 5 + Math.random() * 10;

   // remove moveTo()/lineTo()
   var lastX = 0;
   var lastY = 0;
   ...
   context.moveTo(lastX, lastY);
   lastX = context.canvas.width * Math.random();
   lastY = context.canvas.height * Math.random();
   context.bezierCurveTo(context.canvas.width * Math.random(),
                         context.canvas.height * Math.random(),
                         context.canvas.width * Math.random(),
                         context.canvas.height * Math.random(),
                         lastX, lastY);

   var hue = 0;
   ...
   hue = hue + 10*Math.random();
   context.strokeStyle = 'hsl(' + hue + ', 50%, 50%)';

   context.save();
   context.translate(context.canvas.width/2, context.canvas.height/2);
   context.scale(0.9, 0.9);
   context.translate(-context.canvas.width/2, -context.canvas.height/2);
   ...
   context.restore();

   Works in Safari, Opera, Chrome, Firefox.

   context.shadowColor = 'white';
   context.shadowBlur = 10;

   Works in Safari.


10. Validation

   HTML5 also drops all the presentational attributes and tightens a
   lot of things up that HTML4 left vague.

   Google has started using HTML5 on some pages, for example:

     http://www.google.com/privacy

   Show View Source in Firefox, zoomed in. Show DOCTYPE. Show &lt;meta
   charset&gt;. Click Privacy Policy, show the source again.

   There is a validator available if you want to validate documents.

     http://html5.validator.nu/

   Validate the privacy policy.

</pre>
 </body>
</html>
