<tt>
On&nbsp;Fri,&nbsp;Sep&nbsp;4,&nbsp;2009&nbsp;at&nbsp;4:02&nbsp;PM,&nbsp;Chris&nbsp;Jones&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:cjones@mozilla.com&quot;&gt;cjones@mozilla.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
<br>
I&#39;d&nbsp;like&nbsp;to&nbsp;propose&nbsp;that&nbsp;HTML5&nbsp;specify&nbsp;different&nbsp;schemes&nbsp;than&nbsp;a&nbsp;conceptual&nbsp;global&nbsp;storage&nbsp;mutex&nbsp;to&nbsp;provide&nbsp;consistency&nbsp;guarantees&nbsp;for&nbsp;localStorage&nbsp;and&nbsp;cookies.&lt;br&gt;<br>
&lt;br&gt;<br>
Cookies&nbsp;would&nbsp;be&nbsp;protected&nbsp;according&nbsp;to&nbsp;Benjamin&nbsp;Smedberg&#39;s&nbsp;post&nbsp;in&nbsp;the&nbsp;&quot;[whatwg]&nbsp;Storage&nbsp;mutex&nbsp;and&nbsp;cookies&nbsp;can&nbsp;lead&nbsp;to&nbsp;browser&nbsp;deadlock&quot;&nbsp;thread.&nbsp; Roughly,&nbsp;this&nbsp;proposal&nbsp;would&nbsp;give&nbsp;scripts&nbsp;a&nbsp;consistent&nbsp;view&nbsp;of&nbsp;document.cookie&nbsp;until&nbsp;they&nbsp;completed.&nbsp; AIUI&nbsp;this&nbsp;is&nbsp;stronger&nbsp;consistency&nbsp;than&nbsp;Google&nbsp;Chrome&nbsp;provides&nbsp;today,&nbsp;and&nbsp;anecdotal&nbsp;evidence&nbsp;suggests&nbsp;even&nbsp;their&nbsp;weaker&nbsp;consistency&nbsp;hasn&#39;t&nbsp;&quot;broken&nbsp;the&nbsp;web.&quot;&lt;br&gt;<br>
<br>
&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;To&nbsp;be&nbsp;fair,&nbsp;IE&nbsp;is&nbsp;in&nbsp;the&nbsp;same&nbsp;boat...which&nbsp;makes&nbsp;this&nbsp;argument&nbsp;even&nbsp;stronger,&nbsp;I&nbsp;think.&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
<br>
localStorage&nbsp;would&nbsp;be&nbsp;changed&nbsp;in&nbsp;a&nbsp;non-backwards-compatible&nbsp;way.&nbsp; I&nbsp;believe&nbsp;that&nbsp;web&nbsp;apps&nbsp;can&nbsp;be&nbsp;partitioned&nbsp;into&nbsp;two&nbsp;classes:&nbsp;those&nbsp;that&nbsp;have&nbsp;planned&nbsp;for&nbsp;running&nbsp;concurrently&nbsp;(single-event-loop&nbsp;or&nbsp;not)&nbsp;in&nbsp;multiple&nbsp;&quot;browsing&nbsp;contexts&quot;,&nbsp;and&nbsp;those&nbsp;that&nbsp;haven&#39;t.&nbsp; I&nbsp;further&nbsp;posit&nbsp;that&nbsp;the&nbsp;second&nbsp;class&nbsp;would&nbsp;break&nbsp;when&nbsp;run&nbsp;concurrently&nbsp;in&nbsp;multiple&nbsp;contexts&nbsp;regardless&nbsp;of&nbsp;multiple&nbsp;event&nbsp;loops,&nbsp;and&nbsp;thus&nbsp;regardless&nbsp;of&nbsp;the&nbsp;storage&nbsp;mutex.&nbsp; Even&nbsp;in&nbsp;the&nbsp;single-event-loop&nbsp;world,&nbsp;sites&nbsp;not&nbsp;prepared&nbsp;to&nbsp;be&nbsp;loaded&nbsp;in&nbsp;multiple&nbsp;tabs&nbsp;can&nbsp;stomp&nbsp;each&nbsp;other&#39;s&nbsp;data&nbsp;even&nbsp;though&nbsp;script&nbsp;execution&nbsp;is&nbsp;atomic.&nbsp; (I&nbsp;wouldn&#39;t&nbsp;dare&nbsp;use&nbsp;my&nbsp;bank&#39;s&nbsp;website&nbsp;in&nbsp;two&nbsp;tabs&nbsp;at&nbsp;the&nbsp;same&nbsp;time&nbsp;in&nbsp;a&nbsp;single-event-loop&nbsp;browser.)&nbsp; In&nbsp;other&nbsp;words,&nbsp;storage&nbsp;mutex&nbsp;can&#39;t&nbsp;help&nbsp;the&nbsp;second&nbsp;class&nbsp;of&nbsp;sites.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
(I&nbsp;also&nbsp;believe&nbsp;that&nbsp;there&#39;s&nbsp;a&nbsp;very&nbsp;large,&nbsp;third&nbsp;class&nbsp;of&nbsp;pages&nbsp;that&nbsp;work&nbsp;&quot;accidentally&quot;&nbsp;when&nbsp;run&nbsp;concurrently&nbsp;in&nbsp;multiple&nbsp;contexts,&nbsp;even&nbsp;though&nbsp;they&nbsp;don&#39;t&nbsp;plan&nbsp;for&nbsp;that.&nbsp; This&nbsp;is&nbsp;likely&nbsp;because&nbsp;they&nbsp;don&#39;t&nbsp;keep&nbsp;quasi-persistent&nbsp;data&nbsp;on&nbsp;the&nbsp;client&nbsp;side.)&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
Based&nbsp;on&nbsp;that,&nbsp;I&nbsp;believe&nbsp;localStorage&nbsp;should&nbsp;be&nbsp;designed&nbsp;with&nbsp;the&nbsp;first&nbsp;class&nbsp;of&nbsp;web&nbsp;apps&nbsp;(those&nbsp;that&nbsp;have&nbsp;considered&nbsp;data&nbsp;consistency&nbsp;across&nbsp;multiple&nbsp;concurrent&nbsp;contexts)&nbsp;in&nbsp;mind,&nbsp;rather&nbsp;than&nbsp;the&nbsp;second&nbsp;class.&nbsp; Is&nbsp;a&nbsp;conceptual&nbsp;global&nbsp;storage&nbsp;mutex&nbsp;the&nbsp;best&nbsp;way&nbsp;for,&nbsp;say,&nbsp;gmail&nbsp;to&nbsp;guarantee&nbsp;consistency&nbsp;of&nbsp;its&nbsp;e-mail/contacts&nbsp;database?&nbsp; I&nbsp;don&#39;t&nbsp;believe&nbsp;so:&nbsp;I&nbsp;think&nbsp;that&nbsp;a&nbsp;transactional&nbsp;localStorage&nbsp;is&nbsp;preferable.&nbsp;Transactional&nbsp;localStorage&nbsp;is&nbsp;easier&nbsp;for&nbsp;browser&nbsp;vendors&nbsp;to&nbsp;implement&nbsp;and&nbsp;should&nbsp;result&nbsp;in&nbsp;better&nbsp;performance&nbsp;for&nbsp;web&nbsp;apps&nbsp;in&nbsp;multi-process&nbsp;UAs.&nbsp; It&#39;s&nbsp;more&nbsp;of&nbsp;a&nbsp;burden&nbsp;on&nbsp;web&nbsp;app&nbsp;authors&nbsp;than&nbsp;the&nbsp;hidden&nbsp;storage&nbsp;mutex,&nbsp;but&nbsp;I&nbsp;think&nbsp;the&nbsp;benefits&nbsp;outweigh&nbsp;the&nbsp;cost.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
I&nbsp;propose&nbsp;adding&nbsp;the&nbsp;functions&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; window.localStorage.beginTransaction()&lt;br&gt;<br>
&nbsp; window.localStorage.commitTransaction()&lt;br&gt;<br>
or&lt;br&gt;<br>
&nbsp; window.beginTransaction()&lt;br&gt;<br>
&nbsp; window.commitTransaction()&lt;br&gt;<br>
&lt;br&gt;<br>
(The&nbsp;latter&nbsp;might&nbsp;be&nbsp;preferable&nbsp;if&nbsp;we&nbsp;later&nbsp;decide&nbsp;to&nbsp;add&nbsp;more&nbsp;resources&nbsp;with&nbsp;transactional&nbsp;semantics.)&lt;br&gt;<br>
&lt;br&gt;<br>
localStorage.getItem(),.&nbsp;setItem(),&nbsp;.removeItem(),&nbsp;and&nbsp;.clear()&nbsp;would&nbsp;remain&nbsp;specified&nbsp;as&nbsp;they&nbsp;are&nbsp;today.&nbsp; beginTransaction()&nbsp;would&nbsp;do&nbsp;just&nbsp;that,&nbsp;open&nbsp;a&nbsp;transaction.&nbsp; Calling&nbsp;localStorage.*()&nbsp;outside&nbsp;of&nbsp;an&nbsp;open&nbsp;transaction&nbsp;would&nbsp;cause&nbsp;a&nbsp;script&nbsp;exception&nbsp;to&nbsp;be&nbsp;thrown;&nbsp;this&nbsp;would&nbsp;unfortunately&nbsp;break&nbsp;all&nbsp;current&nbsp;clients&nbsp;of&nbsp;localStorage.&nbsp; There&nbsp;might&nbsp;be&nbsp;cleverer&nbsp;ways&nbsp;to&nbsp;mitigate&nbsp;this&nbsp;breakage&nbsp;by&nbsp;a&nbsp;UA&nbsp;pretending&nbsp;not&nbsp;to&nbsp;support&nbsp;localStorage&nbsp;until&nbsp;a&nbsp;script&nbsp;called&nbsp;beginTransaction().&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
yieldForStorageUpdates()&nbsp;would&nbsp;no&nbsp;longer&nbsp;be&nbsp;meaningful&nbsp;and&nbsp;should&nbsp;be&nbsp;removed.&lt;br&gt;<br>
&lt;br&gt;<br>
A&nbsp;transaction&nbsp;would&nbsp;successfully&nbsp;&quot;commit&quot;,&nbsp;atomically&nbsp;applying&nbsp;its&nbsp;modifications&nbsp;to&nbsp;localStorage,&nbsp;if&nbsp;localStorage&nbsp;was&nbsp;not&nbsp;modified&nbsp;between&nbsp;beginTransaction()&nbsp;and&nbsp;commitTransaction().&nbsp; Note&nbsp;that&nbsp;a&nbsp;transaction&nbsp;consisting&nbsp;entirely&nbsp;of&nbsp;getItem()&nbsp;could&nbsp;fail&nbsp;just&nbsp;as&nbsp;those&nbsp;actually&nbsp;modifying&nbsp;localStorage.&nbsp; If&nbsp;a&nbsp;transaction&nbsp;failed,&nbsp;the&nbsp;UA&nbsp;would&nbsp;throw&nbsp;a&nbsp;TransactionFailed&nbsp;exception&nbsp;to&nbsp;script.&nbsp; The&nbsp;UA&nbsp;would&nbsp;be&nbsp;allowed&nbsp;to&nbsp;throw&nbsp;this&nbsp;exception&nbsp;at&nbsp;any&nbsp;time&nbsp;between&nbsp;beginTransaction()&nbsp;and&nbsp;commitTransaction().&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
There&nbsp;are&nbsp;numerous&nbsp;ways&nbsp;to&nbsp;implement&nbsp;transactional&nbsp;semantics.&nbsp;Single-event-loop&nbsp;UAs&nbsp;could&nbsp;implement&nbsp;beginTransaction()&nbsp;and&nbsp;commitTransaction()&nbsp;as&nbsp;no-ops.&nbsp; Multi-event-loop&nbsp;UAs&nbsp;could&nbsp;reuse&nbsp;the&nbsp;global&nbsp;storage&nbsp;mutex&nbsp;if&nbsp;they&nbsp;had&nbsp;already&nbsp;implemented&nbsp;that&nbsp;(beginTransaction()&nbsp;==&nbsp;lock,&nbsp;commitTransaction()&nbsp;==&nbsp;unlock).&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
Some&nbsp;edge&nbsp;cases:&lt;br&gt;<br>
&lt;br&gt;<br>
 *&nbsp;calling&nbsp;commitTransaction()&nbsp;without&nbsp;beginTransaction()&nbsp;would&nbsp;throw&nbsp;an&nbsp;exception&lt;br&gt;<br>
&lt;br&gt;<br>
 *&nbsp;transactions&nbsp;would&nbsp;not&nbsp;be&nbsp;allowed&nbsp;to&nbsp;be&nbsp;nested,&nbsp;even&nbsp;on&nbsp;different&nbsp;localStorage&nbsp;DBs.&nbsp; E.g.&nbsp;if&nbsp;site&nbsp;A&#39;s&nbsp;script&nbsp;begins&nbsp;a&nbsp;transaction&nbsp;on&nbsp;A.localStorage,&nbsp;and&nbsp;calls&nbsp;into&nbsp;site&nbsp;B&#39;s&nbsp;script&nbsp;embedded&nbsp;in&nbsp;an&nbsp;iframe&nbsp;which&nbsp;begins&nbsp;a&nbsp;transaction&nbsp;on&nbsp;B.localStorage,&nbsp;an&nbsp;exception&nbsp;would&nbsp;be&nbsp;thrown.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
 *&nbsp;transactions&nbsp;*could*&nbsp;be&nbsp;spread&nbsp;across&nbsp;script&nbsp;executions,&nbsp;alert()&nbsp;dialogs,&nbsp;sync&nbsp;XHR,&nbsp;or&nbsp;anywhere&nbsp;else&nbsp;the&nbsp;current&nbsp;HTML5&nbsp;spec&nbsp;requires&nbsp;the&nbsp;storage&nbsp;mutex&nbsp;be&nbsp;released.&nbsp; Note&nbsp;that&nbsp;UAs&nbsp;wishing&nbsp;to&nbsp;forbid&nbsp;that&nbsp;behavior&nbsp;could&nbsp;simply&nbsp;throw&nbsp;a&nbsp;TransactionFailed&nbsp;exception&nbsp;where&nbsp;the&nbsp;storage&nbsp;mutex&nbsp;would&nbsp;have&nbsp;been&nbsp;released&nbsp;in&nbsp;the&nbsp;current&nbsp;spec.&nbsp; Or&nbsp;this&nbsp;could&nbsp;be&nbsp;made&nbsp;illegal&nbsp;by&nbsp;the&nbsp;spec.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
 *&nbsp;it&#39;s&nbsp;not&nbsp;clear&nbsp;to&nbsp;me&nbsp;how&nbsp;to&nbsp;handle&nbsp;async&nbsp;XHRs&nbsp;and&nbsp;Worker&nbsp;messages&nbsp;sent&nbsp;from&nbsp;within&nbsp;a&nbsp;failed&nbsp;transaction.&nbsp; They&nbsp;could&nbsp;be&nbsp;specified&nbsp;to&nbsp;be&nbsp;sent&nbsp;or&nbsp;not&nbsp;and&nbsp;either&nbsp;behavior&nbsp;implemented&nbsp;easily.&nbsp; My&nbsp;gut&nbsp;tells&nbsp;me&nbsp;that&nbsp;they&nbsp;*should*&nbsp;be&nbsp;sent&nbsp;regardless.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
Feedback&nbsp;very&nbsp;much&nbsp;desired.&lt;br&gt;<br>
&lt;br&gt;<br>
Cheers,&lt;br&gt;<br>
Chris&lt;br&gt;<br>
&lt;br&gt;<br>
Addendum:&nbsp;I&nbsp;think&nbsp;that&nbsp;a&nbsp;past&nbsp;argument&nbsp;against&nbsp;a&nbsp;transactional&nbsp;approach&nbsp;was&nbsp;that&nbsp;scripts&nbsp;can&nbsp;cause&nbsp;side&nbsp;effects&nbsp;during&nbsp;transactions&nbsp;that&nbsp;can&#39;t&nbsp;be&nbsp;(easily,&nbsp;performantly)&nbsp;rolled&nbsp;back.&nbsp; This&nbsp;is&nbsp;true,&nbsp;and&nbsp;troubling&nbsp;in&nbsp;that&nbsp;it&nbsp;deviates&nbsp;from&nbsp;SQL&nbsp;semantics,&nbsp;but&nbsp;because&nbsp;this&nbsp;proposal&nbsp;is&nbsp;designed&nbsp;for&nbsp;the&nbsp;first&nbsp;class&nbsp;of&nbsp;web&nbsp;apps&nbsp;I&nbsp;don&#39;t&nbsp;believe&nbsp;it&#39;s&nbsp;a&nbsp;compelling&nbsp;argument.&nbsp; Further,&nbsp;a&nbsp;script&nbsp;can&nbsp;only&nbsp;corrupt&nbsp;its&nbsp;browsing-context-local&nbsp;state&nbsp;by&nbsp;mishandling&nbsp;failed&nbsp;transactions.&nbsp; Using&nbsp;gmail&nbsp;as&nbsp;a&nbsp;convenient&nbsp;example,&nbsp;if&nbsp;a&nbsp;transaction&nbsp;failed&nbsp;but&nbsp;gmail&nbsp;wasn&#39;t&nbsp;prepared&nbsp;to&nbsp;handle&nbsp;the&nbsp;failure,&nbsp;that&nbsp;particular&nbsp;gmail&nbsp;instance&nbsp;would&nbsp;just&nbsp;break.&nbsp; No&nbsp;e-mails&nbsp;or&nbsp;contacts&nbsp;would&nbsp;be&nbsp;corrupted,&nbsp;and&nbsp;the&nbsp;user&nbsp;could&nbsp;reload&nbsp;gmail&nbsp;and&nbsp;regain&nbsp;full&nbsp;functionality.&nbsp; Servers&nbsp;should&nbsp;already&nbsp;be&nbsp;prepared&nbsp;to&nbsp;deal&nbsp;with&nbsp;clients&nbsp;behaving&nbsp;unpredictably.&lt;br&gt;<br>
<br>
<br>
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;Very&nbsp;interesting.&nbsp; Some&nbsp;of&nbsp;the&nbsp;details&nbsp;I&#39;m&nbsp;not&nbsp;sure&nbsp;about,&nbsp;but&nbsp;I&nbsp;think&nbsp;this&nbsp;is&nbsp;much&nbsp;better&nbsp;than&nbsp;what&nbsp;already&nbsp;exists.&nbsp; Enough&nbsp;better&nbsp;that&nbsp;I&nbsp;think&nbsp;it&#39;s&nbsp;worth&nbsp;breaking&nbsp;backwards compatibility.&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;mostly&nbsp;agree&nbsp;with&nbsp;your&nbsp;assertions&nbsp;about&nbsp;the&nbsp;type&nbsp;of&nbsp;developer&nbsp;who&#39;s&nbsp;using&nbsp;localStorage.&nbsp; It&nbsp;sure&nbsp;would&nbsp;be&nbsp;nice&nbsp;if&nbsp;we&nbsp;could&nbsp;give&nbsp;developers&nbsp;powerful&nbsp;APIs&nbsp;and&nbsp;keep&nbsp;them&nbsp;simple&nbsp;and&nbsp;make&nbsp;it&nbsp;possible&nbsp;to&nbsp;implement&nbsp;them&nbsp;in&nbsp;a&nbsp;performant&nbsp;manner.&nbsp; Unfortunately,&nbsp;I&nbsp;think&nbsp;the&nbsp;current&nbsp;design&nbsp;cannot&nbsp;be&nbsp;changed&nbsp;to&nbsp;meet&nbsp;&quot;possible&nbsp;to&nbsp;implement&nbsp;in&nbsp;a&nbsp;performant&nbsp;manner&quot;&nbsp;without&nbsp;breaking&nbsp;backwards compatibility.&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Part&nbsp;of&nbsp;me&nbsp;thinks&nbsp;that&nbsp;this&nbsp;API&nbsp;should&nbsp;match&nbsp;the&nbsp;WebDatabase&nbsp;API&nbsp;more.&nbsp; For&nbsp;example,&nbsp;you&#39;d&nbsp;call&nbsp;a&nbsp;function&nbsp;with&nbsp;a&nbsp;callback.&nbsp; That&nbsp;callback&nbsp;would&nbsp;be&nbsp;given&nbsp;the&nbsp;localStorage&nbsp;object&nbsp;which&nbsp;it&#39;d&nbsp;use&nbsp;to&nbsp;do manipulations.&nbsp; Etc.&nbsp; But&nbsp;part&nbsp;of&nbsp;me&nbsp;like&nbsp;what&nbsp;you&#39;re&nbsp;suggesting&nbsp;here.&nbsp; I&nbsp;actually&nbsp;think&nbsp;the&nbsp;idea&nbsp;of&nbsp;throwing&nbsp;an&nbsp;exception&nbsp;whenever&nbsp;there&#39;s&nbsp;a&nbsp;serialization&nbsp;problem&nbsp;could&nbsp;be&nbsp;very&nbsp;compelling,&nbsp;and&nbsp;could&nbsp;keep&nbsp;the&nbsp;door&nbsp;wide&nbsp;open&nbsp;for&nbsp;future&nbsp;performance&nbsp;enhancements.&nbsp; It&#39;s&nbsp;even&nbsp;possible&nbsp;that&nbsp;javascript&nbsp;engines&nbsp;could&nbsp;embed&nbsp;elements&nbsp;of&nbsp;software&nbsp;transactional&nbsp;memory&nbsp;in&nbsp;the&nbsp;future&nbsp;to&nbsp;eliminate&nbsp;the&nbsp;need&nbsp;to&nbsp;make&nbsp;such&nbsp;calls.&nbsp; That&nbsp;seems&nbsp;really&nbsp;exciting.&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It&nbsp;might&nbsp;also&nbsp;be&nbsp;possible&nbsp;to&nbsp;combine&nbsp;the&nbsp;2&nbsp;ideas:&nbsp;you&nbsp;call&nbsp;a&nbsp;function&nbsp;with&nbsp;your&nbsp;callback&nbsp;and&nbsp;the&nbsp;callback&nbsp;is&nbsp;given&nbsp;a&nbsp;localStorage&nbsp;object&nbsp;which&nbsp;is&nbsp;only&nbsp;valid&nbsp;within&nbsp;the&nbsp;callback,&nbsp;but&nbsp;an&nbsp;exception&nbsp;can&nbsp;be&nbsp;thrown&nbsp;when&nbsp;there&#39;s&nbsp;a&nbsp;problem&nbsp;with&nbsp;the&nbsp;transaction.&nbsp; Of&nbsp;course,&nbsp;the benefit to&nbsp;explicitly&nbsp;starting&nbsp;and&nbsp;ending&nbsp;a&nbsp;transaction&nbsp;is&nbsp;that&nbsp;it&nbsp;can&nbsp;span&nbsp;setTimeouts,&nbsp;event&nbsp;handlers,&nbsp;etc.&nbsp; On&nbsp;the&nbsp;other&nbsp;hand,&nbsp;I&nbsp;wonder&nbsp;if&nbsp;the&nbsp;cases&nbsp;where&nbsp;an&nbsp;app&nbsp;would&nbsp;do&nbsp;this&nbsp;and&nbsp;still&nbsp;be&nbsp;able&nbsp;to&nbsp;recover&nbsp;from&nbsp;a&nbsp;transaction&nbsp;failure&nbsp;would&nbsp;be&nbsp;limited.&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Another&nbsp;thing&nbsp;we&nbsp;might&nbsp;want&nbsp;to&nbsp;consider&nbsp;is&nbsp;making&nbsp;transactions&nbsp;optional.&nbsp; This&nbsp;would&nbsp;satisfy&nbsp;group&nbsp;1&nbsp;and&nbsp;2,&nbsp;but&nbsp;would&nbsp;put&nbsp;the&nbsp;group&nbsp;3&nbsp;you&nbsp;mentioned&nbsp;at&nbsp;more&nbsp;risk.&nbsp; In&nbsp;other&nbsp;words,&nbsp;not&nbsp;calling&nbsp;beginTransaction&nbsp;would&nbsp;not&nbsp;be&nbsp;fatal.&nbsp; It&nbsp;would&nbsp;just&nbsp;mean&nbsp;localStorage&nbsp;works&nbsp;as&nbsp;currently&nbsp;spec&#39;ed.&nbsp; But,&nbsp;doing&nbsp;it&nbsp;within&nbsp;a&nbsp;transaction&nbsp;(be&nbsp;it&nbsp;a&nbsp;callback&nbsp;or&nbsp;within&nbsp;___Transaction&nbsp;calls)&nbsp;would&nbsp;give&nbsp;you&nbsp;additional guarantees.&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Note&nbsp;that&nbsp;if&nbsp;we&nbsp;do&nbsp;decide&nbsp;to&nbsp;break&nbsp;backwards compatibility,&nbsp;there&nbsp;are&nbsp;some&nbsp;other&nbsp;things&nbsp;we&nbsp;should&nbsp;consider...but&nbsp;I&nbsp;won&#39;t&nbsp;bring&nbsp;those&nbsp;up&nbsp;unless&nbsp;we&nbsp;do&nbsp;decide&nbsp;to&nbsp;move&nbsp;in&nbsp;this&nbsp;direction.&lt;/div&gt;&lt;div&gt;&lt;br&gt;<br>
<br>
&lt;/div&gt;&lt;div&gt;Btw,&nbsp;I&nbsp;want&nbsp;to&nbsp;make&nbsp;it&nbsp;clear&nbsp;that&nbsp;I&nbsp;take&nbsp;the&nbsp;idea&nbsp;of&nbsp;breaking compatibility VERY&nbsp;seriously.&nbsp; I&nbsp;know&nbsp;LocalStorage&nbsp;is&nbsp;fairly&nbsp;well&nbsp;adopted&nbsp;and&nbsp;that&nbsp;changing&nbsp;this&nbsp;would&nbsp;be&nbsp;pretty&nbsp;major.&nbsp; But&nbsp;having&nbsp;a&nbsp;cross-event-loop,&nbsp;synchronous&nbsp;API&nbsp;is&nbsp;really&nbsp;a&nbsp;terrible&nbsp;idea.&nbsp; And&nbsp;changing&nbsp;it&nbsp;now&nbsp;will&nbsp;be&nbsp;easier&nbsp;than&nbsp;changing&nbsp;it&nbsp;later.&lt;/div&gt;<br>
<br>

</tt>
