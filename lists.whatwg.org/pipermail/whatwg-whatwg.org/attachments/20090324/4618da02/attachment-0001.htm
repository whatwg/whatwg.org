<tt>
On&nbsp;Tue,&nbsp;Mar&nbsp;24,&nbsp;2009&nbsp;at&nbsp;10:11&nbsp;PM,&nbsp;Ian&nbsp;Hickson&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&amp;lt;ian@hixie.ch&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;<br>
<br>
 <br>
-&nbsp;extended&nbsp;the&nbsp;implicit&nbsp;lock&nbsp;mechanism&nbsp;that&nbsp;we&nbsp;had&nbsp;for&nbsp;storage&nbsp;to&nbsp;also&lt;br&gt;<br>
&nbsp; &nbsp;cover&nbsp;document.cookie,&nbsp;and&nbsp;made&nbsp;the&nbsp;language&nbsp;more&nbsp;explicit&nbsp;about&nbsp;how&lt;br&gt;<br>
&nbsp; &nbsp;it&nbsp;works.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;That&amp;#39;s&nbsp;basically&nbsp;good.&nbsp;It&amp;#39;s&nbsp;possible&nbsp;that&nbsp;people&nbsp;might&nbsp;want&nbsp;to&nbsp;implement&nbsp;something&nbsp;that&amp;#39;s&nbsp;equivalent&nbsp;to&nbsp;the&nbsp;storage&nbsp;mutex&nbsp;in&nbsp;observable&nbsp;behaviour,&nbsp;but&nbsp;allows&nbsp;more&nbsp;parallelism,&nbsp;such&nbsp;as&nbsp;speculative&nbsp;execution&nbsp;or&nbsp;finer-grained&nbsp;locking&nbsp;when&nbsp;the&nbsp;implementation&nbsp;can&nbsp;prove&nbsp;it&amp;#39;s&nbsp;safe.&nbsp;I&nbsp;assume&nbsp;implementors&nbsp;of&nbsp;HTML5&nbsp;already&nbsp;understand&nbsp;that&nbsp;that&amp;#39;s&nbsp;allowed.&lt;br&gt;<br>
<br>
&lt;br&gt;&lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;-&nbsp;added&nbsp;navigator.releaseLock().&lt;br&gt;<br>
&lt;div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;This&nbsp;name&nbsp;could&nbsp;be&nbsp;confusing&nbsp;to&nbsp;developers,&nbsp;because&nbsp;there&nbsp;is&nbsp;no&nbsp;corresponding&nbsp;explicit&nbsp;acquireLock(),&nbsp;which&nbsp;there&nbsp;usually&nbsp;is&nbsp;in&nbsp;an&nbsp;API&nbsp;that&nbsp;exposes&nbsp;releaseLock().&lt;br&gt;&lt;br&gt;navigator.allowInterruption()&nbsp;maybe?&lt;br&gt;<br>
<br>
&lt;br&gt;&lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;On&nbsp;Sat,&nbsp;21&nbsp;Mar&nbsp;2009,&nbsp;Jonas&nbsp;Sicking&nbsp;wrote:&lt;br&gt;&lt;div&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;As&nbsp;a&nbsp;side&nbsp;note,&nbsp;if&nbsp;we&nbsp;do&nbsp;go&nbsp;with&nbsp;this&nbsp;async&nbsp;lock&nbsp;acquiring,&nbsp;we&nbsp;could&nbsp;add&lt;br&gt;<br>
&amp;gt;&nbsp;an&nbsp;API&nbsp;like:&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;getLockedFeatures(callback,&nbsp;&amp;#39;localStore&amp;#39;,&nbsp;&amp;#39;cookie&amp;#39;);&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;This&nbsp;would&nbsp;be&nbsp;an&nbsp;asynchronously&nbsp;grab&nbsp;locks&nbsp;to&nbsp;multiple&nbsp;features&nbsp;and&nbsp;only&lt;br&gt;<br>
&amp;gt;&nbsp;call&nbsp;the&nbsp;callback&nbsp;once&nbsp;all&nbsp;of&nbsp;them&nbsp;have&nbsp;been&nbsp;acquired.&nbsp;This&nbsp;would&nbsp;allow&lt;br&gt;<br>
&amp;gt;&nbsp;computations&nbsp;across&nbsp;data&nbsp;from&nbsp;multiple&nbsp;locations&nbsp;guaranteed&nbsp;to&nbsp;be&nbsp;in&lt;br&gt;<br>
&amp;gt;&nbsp;sync.&nbsp;The&nbsp;implementation&nbsp;would&nbsp;be&nbsp;responsible&nbsp;for&nbsp;grabbing&nbsp;the&nbsp;locks&nbsp;in&lt;br&gt;<br>
&amp;gt;&nbsp;a&nbsp;consistent&nbsp;order&nbsp;to&nbsp;prevent&nbsp;deadlocks.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;Why&nbsp;would&nbsp;we&nbsp;want&nbsp;more&nbsp;than&nbsp;one&nbsp;lock?&nbsp;Is&nbsp;the&nbsp;potential&nbsp;performance&nbsp;gain&lt;br&gt;<br>
worth&nbsp;the&nbsp;complexity?&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;problem&nbsp;with&nbsp;going&nbsp;with&nbsp;an&nbsp;async&nbsp;approach&nbsp;is&nbsp;that&nbsp;it&nbsp;means&nbsp;changing&lt;br&gt;<br>
the&nbsp;API,&nbsp;which&nbsp;is&nbsp;something&nbsp;we&nbsp;can&amp;#39;t&nbsp;really&nbsp;do&nbsp;for&nbsp;cookie&nbsp;(and&nbsp;don&amp;#39;t&lt;br&gt;<br>
really&nbsp;want&nbsp;to&nbsp;do&nbsp;for&nbsp;localStorage,&nbsp;since&nbsp;IE8&nbsp;has&nbsp;shipped&nbsp;it.)&nbsp;We&nbsp;we&nbsp;are&lt;br&gt;<br>
going&nbsp;to&nbsp;need&nbsp;a&nbsp;synchronous&nbsp;locking&nbsp;mechanism&nbsp;anyway.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;It&nbsp;would&nbsp;be&nbsp;possible&nbsp;to&nbsp;use&nbsp;something&nbsp;like&nbsp;getLockedFeatures&nbsp;for&nbsp;workers&nbsp;while&nbsp;using&nbsp;implicit&nbsp;locking&nbsp;for&nbsp;the&nbsp;main&nbsp;thread.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;<br>
<br>
On&nbsp;Mon,&nbsp;23&nbsp;Mar&nbsp;2009,&nbsp;Robert&nbsp;O&amp;#39;Callahan&nbsp;wrote:&lt;br&gt;&lt;div&gt;<br>
&amp;gt;&nbsp;It&nbsp;has&nbsp;to&nbsp;be&nbsp;resolved&nbsp;in&nbsp;a&nbsp;way&nbsp;that&nbsp;doesn&amp;#39;t&nbsp;expose&nbsp;asynchronous&nbsp;cookie&lt;br&gt;<br>
&amp;gt;&nbsp;or&nbsp;localStorage&nbsp;changes&nbsp;to&nbsp;Web&nbsp;developers.&nbsp;There&nbsp;is&nbsp;abundant&nbsp;evidence&lt;br&gt;<br>
&amp;gt;&nbsp;that&nbsp;race&nbsp;conditions&nbsp;and&nbsp;synchronization&nbsp;are&nbsp;too&nbsp;hard&nbsp;for&nbsp;developers&nbsp;to&lt;br&gt;<br>
&amp;gt;&nbsp;deal&nbsp;with.&nbsp;The&nbsp;spec&nbsp;should&nbsp;forbid&nbsp;asynchronously&nbsp;visible&nbsp;changes&nbsp;to&lt;br&gt;<br>
&amp;gt;&nbsp;cookies&nbsp;or&nbsp;localStorage.&nbsp;In&nbsp;fact,&nbsp;it&nbsp;should&nbsp;probably&nbsp;simply&nbsp;say&nbsp;that&nbsp;all&lt;br&gt;<br>
&amp;gt;&nbsp;script&nbsp;execution&nbsp;is&nbsp;serializable:&nbsp;always&nbsp;equivalent&nbsp;to&nbsp;some&nbsp;execution&lt;br&gt;<br>
&amp;gt;&nbsp;you&nbsp;could&nbsp;get&nbsp;with&nbsp;a&nbsp;single-threaded&nbsp;browser&nbsp;that&nbsp;runs&nbsp;all&nbsp;scripts&nbsp;to&lt;br&gt;<br>
&amp;gt;&nbsp;completion.&nbsp;Allowance&nbsp;could&nbsp;be&nbsp;made&nbsp;for&nbsp;explicit&nbsp;yield&nbsp;points&nbsp;if&nbsp;we&nbsp;need&lt;br&gt;<br>
&amp;gt;&nbsp;to,&nbsp;e.g.&nbsp;alert().&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;Generally&nbsp;speaking&nbsp;I&nbsp;have&nbsp;tried&nbsp;to&nbsp;maintain&nbsp;this&nbsp;invariant,&nbsp;but&nbsp;I&nbsp;have&lt;br&gt;<br>
failed&nbsp;with&nbsp;cookies,&nbsp;and&nbsp;with&nbsp;localStorage&nbsp;in&nbsp;workers.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;Now,&nbsp;with&nbsp;the&nbsp;storage&nbsp;mutex,&nbsp;are&nbsp;there&nbsp;any&nbsp;cases&nbsp;you&nbsp;know&nbsp;of&nbsp;where&nbsp;serializability&nbsp;fails?&nbsp;If&nbsp;there&nbsp;are,&nbsp;it&nbsp;may&nbsp;be&nbsp;worth&nbsp;noting&nbsp;them&nbsp;in&nbsp;the&nbsp;spec.&nbsp;If&nbsp;there&nbsp;aren&amp;#39;t,&nbsp;why&nbsp;not&nbsp;simply&nbsp;write&nbsp;serializability&nbsp;into&nbsp;the&nbsp;spec?&lt;br&gt;<br>
<br>
&lt;br&gt;&lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;User&nbsp;agents&nbsp;that&nbsp;share&nbsp;event&nbsp;loops&nbsp;between&nbsp;origins&nbsp;can&amp;#39;t&nbsp;actually&nbsp;have&nbsp;any&lt;br&gt;<br>
<br>
<br>
more&nbsp;than&nbsp;one&nbsp;lock&nbsp;total.&nbsp;Consider&nbsp;a&nbsp;case&nbsp;where&nbsp;there&nbsp;are&nbsp;three&nbsp;windows&lt;br&gt;<br>
from&nbsp;three&nbsp;different&nbsp;origins,&nbsp;A,&nbsp;B,&nbsp;and&nbsp;C,&nbsp;where&nbsp;C&nbsp;contains&nbsp;a&nbsp;couple&nbsp;of&lt;br&gt;<br>
&amp;lt;iframe&amp;gt;s,&nbsp;and&nbsp;where&nbsp;A,&nbsp;B,&nbsp;and&nbsp;C&nbsp;are&nbsp;independent,&nbsp;but&nbsp;C&nbsp;share&nbsp;an&nbsp;event&lt;br&gt;<br>
loop&nbsp;with&nbsp;whatever&nbsp;content&nbsp;is&nbsp;in&nbsp;its&nbsp;iframes.&nbsp;(This&nbsp;is&nbsp;the&nbsp;situation&lt;br&gt;<br>
Chrome&nbsp;and&nbsp;IE&nbsp;are&nbsp;in,&nbsp;as&nbsp;I&nbsp;understand&nbsp;it,&nbsp;with&nbsp;event&nbsp;loops&nbsp;being&lt;br&gt;<br>
per-window&nbsp;not&nbsp;per-origin,&nbsp;and&nbsp;it&nbsp;may&nbsp;be&nbsp;required&nbsp;because&nbsp;access&nbsp;to&nbsp;the&lt;br&gt;<br>
frames[]&nbsp;hierarchy&nbsp;is&nbsp;synchronous.)&nbsp;Now,&nbsp;assume&nbsp;A&nbsp;and&nbsp;B&nbsp;have&nbsp;both&nbsp;obtained&lt;br&gt;<br>
their&nbsp;respective&nbsp;locks,&nbsp;and&nbsp;are&nbsp;busy&nbsp;doing&nbsp;some&nbsp;long&nbsp;script.&nbsp;C&nbsp;is&nbsp;free&nbsp;to&lt;br&gt;<br>
run&nbsp;more&nbsp;tasks&nbsp;from&nbsp;its&nbsp;event&nbsp;loop,&nbsp;which&nbsp;could&nbsp;include&nbsp;navigating&nbsp;one&lt;br&gt;<br>
iframe&nbsp;to&nbsp;a&nbsp;page&nbsp;on&nbsp;either&nbsp;A&nbsp;and&nbsp;the&nbsp;other&nbsp;iframe&nbsp;to&nbsp;a&nbsp;page&nbsp;on&nbsp;B,&nbsp;meaning&lt;br&gt;<br>
that&nbsp;the&nbsp;event&nbsp;loop&nbsp;of&nbsp;C&nbsp;is&nbsp;now&nbsp;beholden&nbsp;to&nbsp;two&nbsp;locks.&nbsp;If&nbsp;there&nbsp;is&nbsp;any&lt;br&gt;<br>
manner&nbsp;in&nbsp;which&nbsp;to&nbsp;synchronously&nbsp;cause&nbsp;another&nbsp;origin&nbsp;to&nbsp;run&nbsp;script,&nbsp;this&lt;br&gt;<br>
now&nbsp;means&nbsp;that&nbsp;C&nbsp;can&nbsp;attempt&nbsp;to&nbsp;obtain&nbsp;both&nbsp;locks;&nbsp;if&nbsp;we&nbsp;now&nbsp;imagine&lt;br&gt;<br>
another&nbsp;window&nbsp;just&nbsp;like&nbsp;C&nbsp;that&nbsp;instead&nbsp;obtains&nbsp;the&nbsp;locks&nbsp;in&nbsp;the&nbsp;reverse&lt;br&gt;<br>
order,&nbsp;we&nbsp;get&nbsp;deadlock.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;Interesting&nbsp;example!&lt;br&gt;&lt;br&gt;When&nbsp;two&nbsp;sets&nbsp;of&nbsp;unrelated&nbsp;browser&nbsp;contexts&nbsp;become&nbsp;related&nbsp;(e.g.,&nbsp;C&nbsp;loads&nbsp;A&nbsp;into&nbsp;an&nbsp;iframe),&nbsp;I&nbsp;imagined&nbsp;you&nbsp;would&nbsp;join&nbsp;A&amp;#39;s&nbsp;lock&nbsp;and&nbsp;C&amp;#39;s&nbsp;lock&nbsp;into&nbsp;a&nbsp;single&nbsp;lock&nbsp;covering&nbsp;the&nbsp;new&nbsp;set&nbsp;of&nbsp;related&nbsp;browser&nbsp;contexts,&nbsp;which&nbsp;is&nbsp;safe&nbsp;to&nbsp;do&nbsp;if&nbsp;at&nbsp;most&nbsp;one&nbsp;of&nbsp;those&nbsp;locks&nbsp;is&nbsp;currently&nbsp;held.&nbsp;When&nbsp;this&nbsp;happens&nbsp;due&nbsp;to&nbsp;a&nbsp;document&nbsp;being&nbsp;created&nbsp;with&nbsp;origin&nbsp;A&nbsp;in&nbsp;C&amp;#39;s&nbsp;iframe,&nbsp;it&nbsp;happens&nbsp;asynchronously&nbsp;in&nbsp;C,&nbsp;right?&nbsp;So&nbsp;at&nbsp;that&nbsp;point&nbsp;C&amp;#39;s&nbsp;lock&nbsp;is&nbsp;not&nbsp;held&nbsp;by&nbsp;currently&nbsp;running&nbsp;script&nbsp;in&nbsp;C&nbsp;(although&nbsp;it&nbsp;might&nbsp;be&nbsp;held&nbsp;by&nbsp;code&nbsp;in&nbsp;another&nbsp;domain&nbsp;which&nbsp;is&nbsp;already&nbsp;related&nbsp;to&nbsp;C),&nbsp;and&nbsp;we&nbsp;can&nbsp;block&nbsp;the&nbsp;join&nbsp;operation&nbsp;in&nbsp;C&nbsp;until&nbsp;one&nbsp;of&nbsp;the&nbsp;two&nbsp;locks&nbsp;is&nbsp;released.&lt;br&gt;<br>
&lt;br&gt;Then&nbsp;in&nbsp;your&nbsp;example,&nbsp;suppose&nbsp;C&nbsp;loads&nbsp;A&amp;#39;s&nbsp;document&nbsp;first.&nbsp;Then&nbsp;C&amp;#39;s&nbsp;lock&nbsp;and&nbsp;A&amp;#39;s&nbsp;lock&nbsp;are&nbsp;joined&nbsp;to&nbsp;make&nbsp;a&nbsp;CA-lock.&nbsp;Then&nbsp;suppose&nbsp;D&nbsp;(&amp;quot;another&nbsp;window&nbsp;just&nbsp;like&nbsp;C&amp;quot;)&nbsp;loads&nbsp;B&amp;#39;s&nbsp;document;&nbsp;D&amp;#39;s&nbsp;lock&nbsp;and&nbsp;B&amp;#39;s&nbsp;lock&nbsp;are&nbsp;merged&nbsp;to&nbsp;make&nbsp;the&nbsp;DB-lock.&nbsp;Now&nbsp;suppose&nbsp;C&nbsp;loads&nbsp;B.&nbsp;The&nbsp;two&nbsp;remaining&nbsp;locks&nbsp;are&nbsp;merged&nbsp;to&nbsp;form&nbsp;a&nbsp;single&nbsp;CADB-lock.&nbsp;No&nbsp;deadlock&nbsp;is&nbsp;possible.&lt;br&gt;<br>
&lt;br&gt;&lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;If&nbsp;it&nbsp;can&nbsp;be&nbsp;shown&nbsp;that&nbsp;it&nbsp;is&nbsp;not&nbsp;ever&nbsp;possible&nbsp;for&nbsp;script&nbsp;in&nbsp;one&nbsp;origin&lt;br&gt;<br>
to&nbsp;synchronously&nbsp;invoke&nbsp;script&nbsp;in&nbsp;another&nbsp;origin,&nbsp;then&nbsp;I&nbsp;guess&nbsp;we&nbsp;could&lt;br&gt;<br>
have&nbsp;per-origin&nbsp;locks&nbsp;instead&nbsp;of&nbsp;a&nbsp;single&nbsp;lock.&lt;br&gt;<br>
&lt;div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;I&amp;#39;m&nbsp;not&nbsp;sure&nbsp;why&nbsp;synchronous&nbsp;invocation&nbsp;across&nbsp;origins&nbsp;matters.&nbsp;I&nbsp;think&nbsp;what&nbsp;matters&nbsp;here&nbsp;is&nbsp;whether&nbsp;there&amp;#39;s&nbsp;a&nbsp;synchronous&nbsp;operation&nbsp;that&nbsp;can&nbsp;cause&nbsp;two&nbsp;browsing&nbsp;contexts&nbsp;to&nbsp;become&nbsp;related&nbsp;that&nbsp;previously&nbsp;weren&amp;#39;t.&nbsp;If&nbsp;there&nbsp;is,&nbsp;then&nbsp;the&nbsp;above&nbsp;approach&nbsp;would&nbsp;break&nbsp;down;&nbsp;a&nbsp;script&nbsp;in&nbsp;A&nbsp;could&nbsp;get&nbsp;A&amp;#39;s&nbsp;lock&nbsp;and&nbsp;then&nbsp;attempt&nbsp;to&nbsp;join&nbsp;with&nbsp;C,&nbsp;while&nbsp;a&nbsp;script&nbsp;in&nbsp;C&nbsp;could&nbsp;get&nbsp;C&amp;#39;s&nbsp;lock&nbsp;and&nbsp;then&nbsp;attempt&nbsp;to&nbsp;join&nbsp;with&nbsp;A.&nbsp;I&nbsp;can&amp;#39;t&nbsp;think&nbsp;of&nbsp;such&nbsp;a&nbsp;case&nbsp;though.&lt;br&gt;<br>
&lt;br&nbsp;clear=&quot;all&quot;&gt;&lt;/div&gt;Rob&lt;br&gt;--&nbsp;&lt;br&gt;&amp;quot;He&nbsp;was&nbsp;pierced&nbsp;for&nbsp;our&nbsp;transgressions,&nbsp;he&nbsp;was&nbsp;crushed&nbsp;for&nbsp;our&nbsp;iniquities;&nbsp;the&nbsp;punishment&nbsp;that&nbsp;brought&nbsp;us&nbsp;peace&nbsp;was&nbsp;upon&nbsp;him,&nbsp;and&nbsp;by&nbsp;his&nbsp;wounds&nbsp;we&nbsp;are&nbsp;healed.&nbsp;We&nbsp;all,&nbsp;like&nbsp;sheep,&nbsp;have&nbsp;gone&nbsp;astray,&nbsp;each&nbsp;of&nbsp;us&nbsp;has&nbsp;turned&nbsp;to&nbsp;his&nbsp;own&nbsp;way;&nbsp;and&nbsp;the&nbsp;LORD&nbsp;has&nbsp;laid&nbsp;on&nbsp;him&nbsp;the&nbsp;iniquity&nbsp;of&nbsp;us&nbsp;all.&amp;quot;&nbsp;[Isaiah&nbsp;53:5-6]&lt;br&gt;<br>
<br>
<br>

</tt>
