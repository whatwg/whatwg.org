<tt>
I&nbsp;see,&nbsp;thanks&nbsp;for&nbsp;the&nbsp;details!&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This&nbsp;makes&nbsp;sense&nbsp;-&nbsp;you&nbsp;let&nbsp;the&nbsp;worker&nbsp;run&nbsp;unrestricted&nbsp;(ports&nbsp;still&nbsp;send&nbsp;messages,&nbsp;sync&nbsp;API&nbsp;work)&nbsp;until&nbsp;it&nbsp;exits&nbsp;JS&nbsp;code.&nbsp;It&nbsp;is&nbsp;one&nbsp;of&nbsp;two&nbsp;possibilities&nbsp;I&nbsp;though&nbsp;of&nbsp;as&nbsp;well&nbsp;(run&nbsp;unrestricted&nbsp;while&nbsp;in&nbsp;JS&nbsp;or&nbsp;immediate&nbsp;termination).&lt;div&gt;<br>
&lt;br&gt;&lt;/div&gt;&lt;div&gt;BTW,&nbsp;the&nbsp;current&nbsp;Worker&nbsp;spec&nbsp;and&nbsp;WebKit&nbsp;do&nbsp;not&nbsp;have&nbsp;&amp;#39;onclose&amp;#39;.&nbsp;I&amp;#39;m&nbsp;curious&nbsp;if&nbsp;FF&nbsp;plans&nbsp;to&nbsp;keep&nbsp;it.&nbsp;I&amp;#39;ve&nbsp;tried&nbsp;to&nbsp;find&nbsp;relevant&nbsp;discussion&nbsp;on&nbsp;exact&nbsp;reasons&nbsp;it&nbsp;was&nbsp;removed&nbsp;but&nbsp;it&nbsp;hides&nbsp;from&nbsp;me...&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Dmitry&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Wed,&nbsp;Mar&nbsp;31,&nbsp;2010&nbsp;at&nbsp;10:03&nbsp;AM,&nbsp;ben&nbsp;turner&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&amp;lt;&lt;a&nbsp;href=&quot;mailto:bent.mozilla@gmail.com&quot;&gt;bent.mozilla@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;Hi,&lt;br&gt;<br>
&lt;br&gt;<br>
When&nbsp;implementing&nbsp;the&nbsp;close()&nbsp;function&nbsp;for&nbsp;Firefox&nbsp;we&nbsp;chose&nbsp;to&nbsp;set&nbsp;the&lt;br&gt;<br>
closing&nbsp;flag&nbsp;and&nbsp;clear&nbsp;pending&nbsp;events&nbsp;only.&nbsp;As&nbsp;the&nbsp;worker&nbsp;script&nbsp;is&lt;br&gt;<br>
calling&nbsp;close()&nbsp;on&nbsp;itself&nbsp;we&nbsp;figured&nbsp;that&nbsp;the&nbsp;worker&nbsp;should&nbsp;retain&lt;br&gt;<br>
maximum&nbsp;functionality&nbsp;until&nbsp;it&nbsp;has&nbsp;finished&nbsp;execution&nbsp;(otherwise&nbsp;it&lt;br&gt;<br>
could&nbsp;just&nbsp;not&nbsp;call&nbsp;close()&nbsp;and&nbsp;rely&nbsp;on&nbsp;some&nbsp;kind&nbsp;of&nbsp;postMessage()&nbsp;and&lt;br&gt;<br>
terminate()&nbsp;combo).&nbsp;Therefore&nbsp;we&nbsp;do&nbsp;not&nbsp;enforce&nbsp;any&nbsp;timeout&nbsp;for&nbsp;the&lt;br&gt;<br>
currently&nbsp;executing&nbsp;script&nbsp;and&nbsp;we&nbsp;continue&nbsp;to&nbsp;allow&nbsp;postMessage()&lt;br&gt;<br>
calls&nbsp;and&nbsp;synchronous&nbsp;XHR&nbsp;to&nbsp;proceed.&nbsp;Since&nbsp;the&nbsp;closing&nbsp;flag&nbsp;is&nbsp;set&nbsp;in&lt;br&gt;<br>
response&nbsp;to&nbsp;close()&nbsp;the&nbsp;worker&nbsp;is&nbsp;guaranteed&nbsp;to&nbsp;finish&nbsp;as&nbsp;soon&nbsp;as&nbsp;the&lt;br&gt;<br>
currently&nbsp;running&nbsp;script&nbsp;finishes.&nbsp;We&nbsp;always&nbsp;enforce&nbsp;a&nbsp;timeout&nbsp;for&nbsp;any&lt;br&gt;<br>
code&nbsp;that&nbsp;runs&nbsp;in&nbsp;response&nbsp;to&nbsp;the&nbsp;close&nbsp;event&nbsp;that&nbsp;gets&nbsp;fired&nbsp;after&lt;br&gt;<br>
the&nbsp;current&nbsp;script&nbsp;finishes,&nbsp;though.&lt;br&gt;<br>
&lt;br&gt;<br>
If&nbsp;the&nbsp;code&nbsp;that&nbsp;calls&nbsp;close()&nbsp;never&nbsp;returns&nbsp;(like&nbsp;the&nbsp;while(1)&nbsp;{&nbsp;}&lt;br&gt;<br>
example&nbsp;above)&nbsp;then&nbsp;the&nbsp;worker&nbsp;will&nbsp;never&nbsp;finish,&nbsp;as&nbsp;pointed&nbsp;out&lt;br&gt;<br>
above,&nbsp;but&nbsp;that&amp;#39;s&nbsp;no&nbsp;different&nbsp;than&nbsp;having&nbsp;a&nbsp;worker&nbsp;script&nbsp;that&lt;br&gt;<br>
consists&nbsp;only&nbsp;of&nbsp;a&nbsp;while(1)&nbsp;{&nbsp;}&nbsp;loop&nbsp;and&nbsp;we&nbsp;don&amp;#39;t&nbsp;think&nbsp;it&amp;#39;s&nbsp;important&lt;br&gt;<br>
to&nbsp;prevent.&nbsp;If&nbsp;a&nbsp;worker&nbsp;script&nbsp;is&nbsp;written&nbsp;in&nbsp;this&nbsp;way&nbsp;then&nbsp;a&lt;br&gt;<br>
terminate()&nbsp;call&nbsp;is&nbsp;still&nbsp;a&nbsp;valid&nbsp;solution.&lt;br&gt;<br>
&lt;br&gt;<br>
Also,&nbsp;since&nbsp;we&nbsp;try&nbsp;to&nbsp;retain&nbsp;maximum&nbsp;functionality&nbsp;after&nbsp;close()&nbsp;we&lt;br&gt;<br>
also&nbsp;allow&nbsp;errors&nbsp;to&nbsp;propagate&nbsp;as&nbsp;shown&nbsp;above.&lt;br&gt;<br>
&lt;br&gt;<br>
If&nbsp;anyone&nbsp;is&nbsp;curious&nbsp;the&nbsp;basic&nbsp;strategy&nbsp;we&nbsp;use&nbsp;in&nbsp;response&nbsp;to&nbsp;close&lt;br&gt;<br>
functions&nbsp;(like&nbsp;close(),&nbsp;terminate(),&nbsp;and&nbsp;for&nbsp;UA-generated&nbsp;events&nbsp;like&lt;br&gt;<br>
when&nbsp;the&nbsp;main&nbsp;worker&nbsp;object&nbsp;is&nbsp;GC&amp;#39;d)&nbsp;can&nbsp;be&nbsp;found&nbsp;in&nbsp;the&nbsp;following&lt;br&gt;<br>
table:&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;http://mxr.mozilla.org/mozilla-central/source/dom/src/threads/nsDOMWorker.h#202&quot;&nbsp;target=&quot;_blank&quot;&gt;http://mxr.mozilla.org/mozilla-central/source/dom/src/threads/nsDOMWorker.h#202&lt;/a&gt;&lt;br&gt;<br>
&lt;font&nbsp;color=&quot;#888888&quot;&gt;&lt;br&gt;<br>
-Ben&lt;br&gt;<br>
&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;&lt;br&gt;<br>
On&nbsp;Tue,&nbsp;Mar&nbsp;30,&nbsp;2010&nbsp;at&nbsp;6:38&nbsp;PM,&nbsp;Dmitry&nbsp;Titov&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:dimich@chromium.org&quot;&gt;dimich@chromium.org&lt;/a&gt;&amp;gt;&nbsp;wrote:&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;On&nbsp;Tue,&nbsp;Mar&nbsp;30,&nbsp;2010&nbsp;at&nbsp;5:58&nbsp;PM,&nbsp;Drew&nbsp;Wilson&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:atwilson@google.com&quot;&gt;atwilson@google.com&lt;/a&gt;&amp;gt;&nbsp;wrote:&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;I&amp;#39;ll&nbsp;note&nbsp;that&nbsp;the&nbsp;spec&nbsp;gives&nbsp;the&nbsp;UA&nbsp;an&nbsp;significant&nbsp;amount&nbsp;of&nbsp;latitude&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;about&nbsp;its&nbsp;behavior&nbsp;after&nbsp;close()&nbsp;is&nbsp;called:&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;User&nbsp;agents&nbsp;may&nbsp;invoke&nbsp;the&nbsp;&amp;quot;kill&nbsp;a&nbsp;worker&amp;quot;&nbsp;processing&nbsp;model&nbsp;on&nbsp;a&nbsp;worker&nbsp;at&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;any&nbsp;time,&nbsp;e.g.&nbsp;in&nbsp;response&nbsp;to&nbsp;user&nbsp;requests,&nbsp;in&nbsp;response&nbsp;to&nbsp;CPU&nbsp;quota&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;management,&nbsp;or&nbsp;when&nbsp;a&nbsp;worker&nbsp;stops&nbsp;being&nbsp;an active&nbsp;needed&nbsp;worker if&nbsp;the&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;worker&nbsp;continues&nbsp;executing&nbsp;even&nbsp;after&nbsp;its closing flag&nbsp;was&nbsp;set&nbsp;to&nbsp;true.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;Essentially,&nbsp;UAs&nbsp;can&nbsp;kill&nbsp;a&nbsp;worker&nbsp;at&nbsp;any&nbsp;time,&nbsp;and&nbsp;since&nbsp;the&nbsp;&amp;quot;kill&nbsp;a&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;worker&amp;quot;&nbsp;algorithm&nbsp;allows&nbsp;UAs&nbsp;to&nbsp;abort&nbsp;the&nbsp;script&nbsp;after&nbsp;a&nbsp;user-agent-defined&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;amount&nbsp;of&nbsp;time&nbsp;(including&nbsp;zero),&nbsp;it&nbsp;seems&nbsp;like&nbsp;almost&nbsp;any&nbsp;behavior&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;post-close&nbsp;is&nbsp;compliant.&nbsp;This&nbsp;seems&nbsp;like&nbsp;a&nbsp;guaranteed&nbsp;source&nbsp;of&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;cross-browser&nbsp;incompatibilities.&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;Yes,&nbsp;and&nbsp;this,&nbsp;after&nbsp;many&nbsp;hours&nbsp;of&nbsp;troubles,&nbsp;may&nbsp;eventually&nbsp;crystallize&nbsp;into&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;quot;don&amp;#39;t&nbsp;have&nbsp;any&nbsp;code&nbsp;after&nbsp;close()&nbsp;in&nbsp;your&nbsp;worker&nbsp;code&amp;quot;&nbsp;rule-of-thumb&nbsp;for&lt;br&gt;<br>
&amp;gt;&nbsp;web&nbsp;developers.&nbsp;Which&nbsp;is&nbsp;basically&nbsp;a&nbsp;bad&nbsp;thing...&lt;br&gt;<br>
&amp;gt;&nbsp;This&nbsp;is&nbsp;why&nbsp;it&nbsp;could&nbsp;be&nbsp;better&nbsp;to&nbsp;specify&nbsp;explicitly&nbsp;that&nbsp;either&nbsp;execution&lt;br&gt;<br>
&amp;gt;&nbsp;is&nbsp;immediately&nbsp;terminated&nbsp;or&nbsp;it&nbsp;runs&nbsp;until&nbsp;JS&nbsp;exits&nbsp;with&nbsp;full&nbsp;functionality&lt;br&gt;<br>
&amp;gt;&nbsp;of&nbsp;the&nbsp;worker,&nbsp;not&nbsp;in&nbsp;a&nbsp;special&nbsp;almost-closed&nbsp;mode.&nbsp;Having&nbsp;a&nbsp;timeout&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;I&amp;#39;ve&nbsp;always&nbsp;operated&nbsp;under&nbsp;the&nbsp;impression&nbsp;that&nbsp;the&nbsp;intent&nbsp;of&nbsp;the&nbsp;spec&nbsp;is&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;to&nbsp;allow&nbsp;pending&nbsp;worker&nbsp;operations&nbsp;to&nbsp;complete,&nbsp;but&nbsp;still&nbsp;give&nbsp;UAs&nbsp;the&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;ability&nbsp;to&nbsp;abort&nbsp;scripts&nbsp;that&nbsp;don&amp;#39;t&nbsp;exit&nbsp;in&nbsp;a&nbsp;timely&nbsp;manner&nbsp;(so&nbsp;close()&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;should&nbsp;not&nbsp;immediately&nbsp;abort&nbsp;the&nbsp;script),&nbsp;but&nbsp;I&nbsp;don&amp;#39;t&nbsp;see&nbsp;anything&nbsp;in&nbsp;the&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;spec&nbsp;regarding&nbsp;this.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;For&nbsp;#2&nbsp;below,&nbsp;I&nbsp;believe&nbsp;that&nbsp;exceptions&nbsp;in&nbsp;worker&nbsp;context&nbsp;should&nbsp;*always*&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;be&nbsp;reported,&nbsp;regardless&nbsp;of&nbsp;closing&nbsp;state.&nbsp;Section&nbsp;4.6&nbsp;(Runtime&nbsp;script&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;errors)&nbsp;makes&nbsp;no&nbsp;mention&nbsp;of&nbsp;tying&nbsp;this&nbsp;behavior&nbsp;to&nbsp;the&nbsp;closing&nbsp;flag.&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;This&nbsp;applies&nbsp;as&nbsp;long&nbsp;as&nbsp;the&nbsp;browser&nbsp;still&nbsp;executes&nbsp;the&nbsp;code&nbsp;after&nbsp;close().&lt;br&gt;<br>
&amp;gt;&nbsp;In&nbsp;WebKit&nbsp;V8&nbsp;case,&nbsp;we&nbsp;terminate&nbsp;execution&nbsp;almost&nbsp;instantly,&nbsp;so&nbsp;we&nbsp;don&amp;#39;t&nbsp;even&lt;br&gt;<br>
&amp;gt;&nbsp;run&nbsp;the&nbsp;code&nbsp;that&nbsp;causes&nbsp;an&nbsp;error&nbsp;:-)&nbsp;If&nbsp;we&nbsp;are&nbsp;not&nbsp;to&nbsp;terminate&nbsp;execution&lt;br&gt;<br>
&amp;gt;&nbsp;instantly,&nbsp;then&nbsp;it&amp;#39;d&nbsp;be&nbsp;nice&nbsp;to&nbsp;say&nbsp;the&nbsp;script&nbsp;runs&nbsp;until&nbsp;it&nbsp;ends&nbsp;(or&nbsp;parent&lt;br&gt;<br>
&amp;gt;&nbsp;document&nbsp;closes,&nbsp;which&nbsp;actually&nbsp;terminates&nbsp;the&nbsp;script&nbsp;forcefully),&nbsp;and&nbsp;not&lt;br&gt;<br>
&amp;gt;&nbsp;have&nbsp;a&nbsp;requirement&nbsp;to&nbsp;stop&nbsp;the&nbsp;queue&nbsp;or&nbsp;disconnect&nbsp;ports,&nbsp;as&nbsp;to&nbsp;not&nbsp;create&nbsp;a&lt;br&gt;<br>
&amp;gt;&nbsp;whole&nbsp;new&nbsp;&amp;#39;mode&nbsp;of&nbsp;worker&nbsp;execution&amp;#39;&nbsp;which&nbsp;needs&nbsp;to&nbsp;have&nbsp;a&nbsp;spec&nbsp;on&nbsp;its&nbsp;own&lt;br&gt;<br>
&amp;gt;&nbsp;since&nbsp;all&nbsp;other&nbsp;features&nbsp;will&nbsp;need&nbsp;to&nbsp;be&nbsp;mentions&nbsp;(like&nbsp;sync&nbsp;APIs).&lt;br&gt;<br>
&amp;gt;&nbsp;It&amp;#39;s&nbsp;not&nbsp;clear&nbsp;why&nbsp;a&nbsp;fixed&nbsp;timeout&nbsp;would&nbsp;be&nbsp;useful.&nbsp;It&nbsp;would&nbsp;create&nbsp;some&lt;br&gt;<br>
&amp;gt;&nbsp;randomness&nbsp;in&nbsp;what&nbsp;a&nbsp;worker&nbsp;can&nbsp;still&nbsp;do&nbsp;after calling close().&nbsp;I&nbsp;think&nbsp;web&lt;br&gt;<br>
&amp;gt;&nbsp;developers&nbsp;would&nbsp;then&nbsp;rather&nbsp;do&nbsp;those&nbsp;things&nbsp;before&nbsp;calling&nbsp;close(),&nbsp;to&lt;br&gt;<br>
&amp;gt;&nbsp;avoid&nbsp;random&nbsp;results.&lt;br&gt;<br>
&amp;gt;&nbsp;But&nbsp;if&nbsp;we&nbsp;say&nbsp;close()&nbsp;lets&nbsp;script&nbsp;run&nbsp;until&nbsp;completion&nbsp;(but&nbsp;prevents&nbsp;further&lt;br&gt;<br>
&amp;gt;&nbsp;messages/events&nbsp;from&nbsp;dispatching),&nbsp;then&nbsp;perhaps&nbsp;we&nbsp;don&amp;#39;t&nbsp;need&nbsp;it&nbsp;at&nbsp;all&nbsp;-&lt;br&gt;<br>
&amp;gt;&nbsp;there&nbsp;is&nbsp;nothing&nbsp;then&nbsp;that&nbsp;script&nbsp;in&nbsp;the&nbsp;worker&nbsp;can&nbsp;not&nbsp;do&nbsp;to&nbsp;the&nbsp;same&lt;br&gt;<br>
&amp;gt;&nbsp;effect&nbsp;(unregister&nbsp;onmessage,&nbsp;clear&nbsp;timers&nbsp;etc).&lt;br&gt;<br>
&amp;gt;&nbsp;That&nbsp;means&nbsp;letting&nbsp;worker&nbsp;to&nbsp;call&nbsp;close()&nbsp;on&nbsp;itself&nbsp;only&nbsp;makes&nbsp;additional&lt;br&gt;<br>
&amp;gt;&nbsp;sense&nbsp;if&nbsp;it&nbsp;is&nbsp;specified&nbsp;as&nbsp;immediate&nbsp;termination.&nbsp;It&nbsp;could&nbsp;be&nbsp;useful&nbsp;and&nbsp;it&lt;br&gt;<br>
&amp;gt;&nbsp;can&nbsp;be&nbsp;specified&nbsp;in&nbsp;deterministic&nbsp;manner.&lt;br&gt;<br>
&amp;gt;&nbsp;On&nbsp;a&nbsp;separate&nbsp;note,&nbsp;I&nbsp;agree&nbsp;with&nbsp;giving&nbsp;workers&nbsp;some&nbsp;time&nbsp;before&nbsp;terminating&lt;br&gt;<br>
&amp;gt;&nbsp;them&nbsp;in&nbsp;case&nbsp;the&nbsp;parent&nbsp;page&nbsp;closes&nbsp;-&nbsp;but&nbsp;this&nbsp;is&nbsp;the&nbsp;case&nbsp;when&nbsp;forces&lt;br&gt;<br>
&amp;gt;&nbsp;outside&nbsp;and&nbsp;async&nbsp;to&nbsp;the&nbsp;worker&nbsp;need&nbsp;to&nbsp;close&nbsp;it.&nbsp;I&nbsp;think&lt;br&gt;<br>
&amp;gt;&nbsp;it&amp;#39;s different when&nbsp;worker&amp;#39;s&nbsp;own&nbsp;script&nbsp;wants&nbsp;to&nbsp;terminate&nbsp;-&nbsp;it&nbsp;could&nbsp;do&nbsp;its&lt;br&gt;<br>
&amp;gt;&nbsp;last&nbsp;wishes&nbsp;before&nbsp;calling&nbsp;close()&nbsp;as&nbsp;well.&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;-atw&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;On&nbsp;Tue,&nbsp;Mar&nbsp;30,&nbsp;2010&nbsp;at&nbsp;4:44&nbsp;PM,&nbsp;Dmitry&nbsp;Titov&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:dimich@chromium.org&quot;&gt;dimich@chromium.org&lt;/a&gt;&amp;gt;&nbsp;wrote:&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;Hi!&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;Trying&nbsp;to&nbsp;fix&nbsp;some&nbsp;bugs&nbsp;for&nbsp;Workers,&nbsp;I&amp;#39;ve&nbsp;got&nbsp;some&nbsp;questions&nbsp;about&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;close()&nbsp;method&nbsp;on&nbsp;WorkerGlobalScope.&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;In&nbsp;particular,&nbsp;the&nbsp;spec&nbsp;seems&nbsp;to&nbsp;imply&nbsp;that&nbsp;after calling close()&nbsp;inside&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;the&nbsp;worker,&nbsp;the&nbsp;JS&nbsp;does&nbsp;not&nbsp;get&nbsp;terminated&nbsp;right&nbsp;away,&nbsp;but&nbsp;rather&nbsp;continue&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;to&nbsp;execute,&nbsp;while&nbsp;an&nbsp;internal&nbsp;&amp;#39;closing&amp;#39;&nbsp;flag&nbsp;is&nbsp;set&nbsp;and&nbsp;a&nbsp;message&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;queue associated with&nbsp;the&nbsp;worker&nbsp;discards&nbsp;all&nbsp;the&nbsp;tasks,&nbsp;existing&nbsp;and&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;future.&nbsp;Also,&nbsp;all&nbsp;ports&nbsp;are&nbsp;immediately&nbsp;disentangled.&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;This&nbsp;seems&nbsp;to&nbsp;leave&nbsp;some&nbsp;questions&nbsp;without&nbsp;explicit&nbsp;answer,&nbsp;with&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;differences&nbsp;in&nbsp;current&nbsp;implementations:&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;1.&nbsp;Does&nbsp;this&nbsp;code&nbsp;in&nbsp;a worker continues&nbsp;looping&nbsp;until&nbsp;the&nbsp;parent&nbsp;page&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;unloads:&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp; ...&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp; close();&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp; while(true)&nbsp;{}&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;WebKit&nbsp;V8&nbsp;terminates,&nbsp;WebKit&nbsp;JCS&nbsp;terminates&nbsp;after&nbsp;a&nbsp;timeout,&nbsp;FF&nbsp;does&nbsp;not&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;terminate.&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;2.&nbsp;Do&nbsp;the&nbsp;errors&nbsp;propagate&nbsp;back&nbsp;to&nbsp;Worker&nbsp;object&nbsp;after&nbsp;close()?&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;...&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;close();&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;nonExistingFunction();&nbsp; &amp;lt;&amp;lt;--&nbsp;throws,&nbsp;if&nbsp;not&nbsp;processed&nbsp;locally,&nbsp;posts&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;error&nbsp;info&nbsp;to&nbsp;the&nbsp;Worker&nbsp;object.&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;In&nbsp;WebKit&nbsp;and&nbsp;FF&nbsp;errors&nbsp;propagate,&nbsp;although&nbsp;it&nbsp;does&nbsp;not&nbsp;seem&nbsp;consistent&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;while&nbsp;worker&nbsp;closed&nbsp;all&nbsp;the&nbsp;ports&nbsp;and&nbsp;is&nbsp;in&nbsp;a&nbsp;dormant&nbsp;state.&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;3.&nbsp;Should&nbsp;synchronous&nbsp;operations&nbsp;work&nbsp;after&nbsp;close()?&nbsp;Asynchronous&nbsp;ones&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;perhaps&nbsp;should&nbsp;not,&nbsp;because&nbsp;of&nbsp;the&nbsp;event&nbsp;loop&nbsp;queue&nbsp;which&nbsp;is&nbsp;stopped...&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;...&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;close();&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;xhr.open(&amp;quot;GET&amp;quot;,&nbsp;&amp;quot;&lt;a&nbsp;href=&quot;http://foo.com&quot;&nbsp;target=&quot;_blank&quot;&gt;foo.com&lt;/a&gt;&amp;quot;,&nbsp;false);&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;xhr.send();&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;WebKit:&nbsp;does&nbsp;not&nbsp;work&nbsp;(mostly),&nbsp;FF&nbsp;-&nbsp;does&nbsp;work.&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;Perhaps&nbsp;it&nbsp;would&nbsp;be&nbsp;simpler&nbsp;to&nbsp;either&nbsp;say&nbsp;nothing&nbsp;is&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;executed/posted/fired&nbsp;after&nbsp;close()&nbsp;(immediate&nbsp;termination),&nbsp;or&nbsp;to&nbsp;enable&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;worker&nbsp;run&nbsp;unimpeded&nbsp;(with&nbsp;ports&nbsp;open,&nbsp;etc)&nbsp;until&nbsp;it&nbsp;naturally&nbsp;yields&nbsp;from&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;JS.&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;Any&nbsp;opinions?&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;Thanks,&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&nbsp;Dmitry&lt;br&gt;<br>
&amp;gt;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;<br>

</tt>
