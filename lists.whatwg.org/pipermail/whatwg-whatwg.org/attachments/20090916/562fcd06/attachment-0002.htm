<tt>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Wed,&nbsp;Sep&nbsp;16,&nbsp;2009&nbsp;at&nbsp;11:34&nbsp;AM,&nbsp;Michael&nbsp;Nordman&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:michaeln@google.com&quot;&gt;michaeln@google.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
&lt;br&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;div&nbsp;class=&quot;im&quot;&gt;On&nbsp;Wed,&nbsp;Sep&nbsp;16,&nbsp;2009&nbsp;at&nbsp;11:24&nbsp;AM,&nbsp;James&nbsp;Robinson&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:jamesr@google.com&quot;&nbsp;target=&quot;_blank&quot;&gt;jamesr@google.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
<br>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;div&gt;On&nbsp;Wed,&nbsp;Sep&nbsp;16,&nbsp;2009&nbsp;at&nbsp;10:53&nbsp;AM,&nbsp;Michael&nbsp;Nordman&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:michaeln@google.com&quot;&nbsp;target=&quot;_blank&quot;&gt;michaeln@google.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
<br>
<br>
&lt;br&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;div&gt;On&nbsp;Wed,&nbsp;Sep&nbsp;16,&nbsp;2009&nbsp;at&nbsp;9:58&nbsp;AM,&nbsp;Drew&nbsp;Wilson&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:atwilson@google.com&quot;&nbsp;target=&quot;_blank&quot;&gt;atwilson@google.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
<br>
<br>
<br>
Jeremy,&nbsp;what&#39;s&nbsp;the&nbsp;use&nbsp;case&nbsp;here&nbsp;-&nbsp;do&nbsp;developers&nbsp;want&nbsp;workers&nbsp;to&nbsp;have&nbsp;access&nbsp;to&nbsp;shared&nbsp;local&nbsp;storage&nbsp;with&nbsp;pages?&nbsp;Or&nbsp;do&nbsp;they&nbsp;just&nbsp;want&nbsp;workers&nbsp;to&nbsp;have&nbsp;access&nbsp;to&nbsp;their&nbsp;own&nbsp;non-shared&nbsp;local&nbsp;storage?&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Because&nbsp;we&nbsp;could&nbsp;just&nbsp;give&nbsp;workers&nbsp;their&nbsp;own&nbsp;separate&nbsp;WorkerLocalStorage&nbsp;and&nbsp;let&nbsp;them&nbsp;have&nbsp;at&nbsp;it.&nbsp;A&nbsp;worker&nbsp;could&nbsp;block&nbsp;all&nbsp;the&nbsp;other&nbsp;accesses&nbsp;to&nbsp;WorkerLocalStorage&nbsp;within&nbsp;that&nbsp;domain,&nbsp;but&nbsp;so&nbsp;be&nbsp;it&nbsp;-&nbsp;it&nbsp;wouldn&#39;t&nbsp;affect&nbsp;page&nbsp;access,&nbsp;and&nbsp;we&nbsp;already&nbsp;had&nbsp;that&nbsp;issue&nbsp;with&nbsp;the&nbsp;(now&nbsp;removed?)&nbsp;synchronous&nbsp;SQL&nbsp;API.&lt;br&gt;<br>
<br>
<br>
<br>
<br>
&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;think&nbsp;a&nbsp;much&nbsp;better&nbsp;case&nbsp;can&nbsp;be&nbsp;made&nbsp;for&nbsp;WorkerLocalStorage&nbsp;than&nbsp;for&nbsp;&quot;give&nbsp;workers&nbsp;access&nbsp;to&nbsp;page&nbsp;LocalStorage&quot;,&nbsp;and&nbsp;the&nbsp;design&nbsp;issues&nbsp;are&nbsp;much&nbsp;simpler.&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;<br>
<br>
<br>
Putting&nbsp;workers&nbsp;in&nbsp;their&nbsp;own&nbsp;storage&nbsp;silo&nbsp;doesn&#39;t&nbsp;really&nbsp;make&nbsp;much&nbsp;sense?&nbsp;Sure&nbsp;it&nbsp;may&nbsp;be simpler&nbsp;for&nbsp;browser&nbsp;vendors,&nbsp;but&nbsp;does&nbsp;that&nbsp;make&nbsp;life&nbsp;simpler&nbsp; for&nbsp;app&nbsp;developers,&nbsp;or&nbsp;just&nbsp;have&nbsp;them&nbsp;scratching&nbsp;their&nbsp;heads&nbsp;about&nbsp;how&nbsp;to&nbsp;read/write&nbsp;the&nbsp;same&nbsp;data&nbsp;set&nbsp;from&nbsp;either&nbsp;flavor&nbsp;of&nbsp;context&nbsp;in&nbsp;their&nbsp;application?&lt;/div&gt;<br>
<br>
<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;see&nbsp;no&nbsp;rhyme&nbsp;or&nbsp;reason&nbsp;for&nbsp;the&nbsp;arbitrary&nbsp;barrier&nbsp;except&nbsp;for&nbsp;browser&nbsp;vendors&nbsp;to&nbsp;work&nbsp;around&nbsp;the&nbsp;awkward&nbsp;implict&nbsp;locks&nbsp;on&nbsp;LocalStorage&nbsp;(the&nbsp;source&nbsp;of&nbsp;much grief).&nbsp;Consider&nbsp;this...&nbsp;would&nbsp;it&nbsp;make&nbsp;sense&nbsp;to&nbsp;cordon&nbsp;off&nbsp;the&nbsp;databases&nbsp;workers&nbsp;vs&nbsp;pages&nbsp;can&nbsp;see?&nbsp;I&nbsp;would&nbsp;think&nbsp;not,&nbsp;and&nbsp;i&nbsp;would&nbsp;hope&nbsp;others&nbsp;agree.&lt;/div&gt;<br>
<br>
<br>
&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;The&nbsp;difference&nbsp;is&nbsp;that&nbsp;the&nbsp;database&nbsp;interface&nbsp;is&nbsp;purely&nbsp;asynchronous&nbsp;whereas&nbsp;storage&nbsp;is&nbsp;synchronous.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Sure...&nbsp;we&#39;re&nbsp;talking&nbsp;about&nbsp;adding&nbsp;an&nbsp;async&nbsp;api&nbsp;that&nbsp;allows&nbsp;worker&nbsp;to&nbsp;access&nbsp;a&nbsp;local&nbsp;storage&nbsp;repository...&nbsp;should&nbsp;such&nbsp;a&nbsp;thing&nbsp;exist,&nbsp;why&nbsp;should&nbsp;it&nbsp;not&nbsp;provide&nbsp;access&nbsp;to&nbsp;the&nbsp;same&nbsp;repository&nbsp;as&nbsp;seen&nbsp;by&nbsp;pages?&lt;/div&gt;<br>
&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Not&nbsp;quite&nbsp;-&nbsp;Jeremy&nbsp;proposed&nbsp;giving&nbsp;workers&nbsp;access&nbsp;to&nbsp;a&nbsp;synchronous&nbsp;API&nbsp;(localStorage.*)&nbsp;but&nbsp;to&nbsp;only&nbsp;allow&nbsp;it&nbsp;to&nbsp;be&nbsp;called&nbsp;within&nbsp;the&nbsp;context&nbsp;of&nbsp;a&nbsp;callback&nbsp;that&nbsp;the&nbsp;UA&nbsp;can&nbsp;run&nbsp;when&nbsp;it&nbsp;chooses.&nbsp; It&#39;s&nbsp;another&nbsp;way&nbsp;to&nbsp;approach&nbsp;the&nbsp;implicit&nbsp;locking&nbsp;since&nbsp;a&nbsp;UA&nbsp;would&nbsp;have&nbsp;to,&nbsp;in&nbsp;effect,&nbsp;hold&nbsp;the&nbsp;storage&nbsp;mutex&nbsp;for&nbsp;the&nbsp;duration&nbsp;of&nbsp;the&nbsp;callback.&nbsp; The&nbsp;page&#39;s&nbsp;context&nbsp;could&nbsp;still&nbsp;be&nbsp;blocked&nbsp;for&nbsp;an&nbsp;indefinite&nbsp;amount&nbsp;of&nbsp;time&nbsp;by&nbsp;a&nbsp;worker&nbsp;thread.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Drew&nbsp;suggested&nbsp;isolating&nbsp;the&nbsp;worker&#39;s&nbsp;access&nbsp;to&nbsp;a&nbsp;separate&nbsp;storage&nbsp;&#39;arena&#39;&nbsp;so&nbsp;that&nbsp;there&nbsp;wouldn&#39;t&nbsp;be&nbsp;shared,&nbsp;synchronous&nbsp;access&nbsp;between&nbsp;the&nbsp;page&nbsp;context&nbsp;and&nbsp;a&nbsp;worker&nbsp;context.&nbsp; This&nbsp;way&nbsp;the&nbsp;synchronous&nbsp;Storage&nbsp;API&nbsp;can&nbsp;be&nbsp;used&nbsp;essentially&nbsp;unchanged&nbsp;without&nbsp;having&nbsp;to&nbsp;deal&nbsp;with&nbsp;the&nbsp;more&nbsp;nasty&nbsp;parts&nbsp;of&nbsp;synchronization.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-&nbsp;James&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If&nbsp;multiple&nbsp;threads&nbsp;have&nbsp;synchronous&nbsp;access&nbsp;to&nbsp;the&nbsp;same&nbsp;shared&nbsp;resource&nbsp;then&nbsp;there&nbsp;has&nbsp;to&nbsp;be&nbsp;a&nbsp;consistency&nbsp;model.&nbsp; ECMAScript&nbsp;does&nbsp;not&nbsp;provide&nbsp;for&nbsp;one&nbsp;so&nbsp;it&nbsp;has&nbsp;to&nbsp;be&nbsp;done&nbsp;at&nbsp;a&nbsp;higher&nbsp;level.&nbsp; Since&nbsp;there&nbsp;was&nbsp;not&nbsp;a&nbsp;solution&nbsp;in&nbsp;the&nbsp;first&nbsp;versions&nbsp;that&nbsp;shipped,&nbsp;the&nbsp;awkward&nbsp;implicit&nbsp;locks&nbsp;you&nbsp;mention&nbsp;were&nbsp;suggested&nbsp;as&nbsp;a&nbsp;workaround.&nbsp; However&nbsp;it&#39;s&nbsp;far&nbsp;from&nbsp;clear&nbsp;that&nbsp;these&nbsp;solve&nbsp;the&nbsp;problem&nbsp;and&nbsp;are&nbsp;implementable.&nbsp; It&nbsp;seems&nbsp;like&nbsp;the&nbsp;only&nbsp;logical&nbsp;continuation&nbsp;of&nbsp;this&nbsp;path&nbsp;would&nbsp;be&nbsp;to&nbsp;add&nbsp;explicit,&nbsp;blocking&nbsp;synchronization&nbsp;primitives&nbsp;for&nbsp;developers&nbsp;to&nbsp;deal&nbsp;with&nbsp;-&nbsp;which&nbsp;I&nbsp;think&nbsp;everyone&nbsp;agrees&nbsp;would&nbsp;be&nbsp;a&nbsp;terrible&nbsp;idea.&nbsp; If&nbsp;you&#39;re&nbsp;worried&nbsp;about&nbsp;developers&nbsp;scratching&nbsp;their&nbsp;heads&nbsp;about&nbsp;how&nbsp;to&nbsp;pass&nbsp;data&nbsp;between&nbsp;workers&nbsp;just&nbsp;think&nbsp;about&nbsp;happens-before&nbsp;relationships&nbsp;and&nbsp;multi-threaded&nbsp;memory&nbsp;models.&lt;/div&gt;<br>
<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In&nbsp;a&nbsp;hypothetical&nbsp;world&nbsp;without&nbsp;synchronous&nbsp;access&nbsp;to&nbsp;LocalStorage/cookies&nbsp;from&nbsp;workers,&nbsp;there&nbsp;is&nbsp;no&nbsp;shared&nbsp;memory&nbsp;between&nbsp;threads&nbsp;except&nbsp;via&nbsp;message&nbsp;passing.&nbsp; This&nbsp;can&nbsp;seem&nbsp;a&nbsp;bit&nbsp;tricky&nbsp;for&nbsp;developers&nbsp;but&nbsp;is&nbsp;very&nbsp;easy&nbsp;to&nbsp;reason&nbsp;about&nbsp;and&nbsp;prove&nbsp;correctness&nbsp;and&nbsp;the&nbsp;absence&nbsp;of&nbsp;deadlocks.&lt;/div&gt;<br>
<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;font&nbsp;color=&quot;#888888&quot;&gt;&lt;div&gt;-&nbsp;James&lt;/div&gt;&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt; &lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;<br>
<br>
&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-atw&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;<br>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Tue,&nbsp;Sep&nbsp;15,&nbsp;2009&nbsp;at&nbsp;8:27&nbsp;PM,&nbsp;Jonas&nbsp;Sicking&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;jonas@sicking.cc&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
<br>
<br>
<br>
<br>
&lt;div&gt;On&nbsp;Tue,&nbsp;Sep&nbsp;15,&nbsp;2009&nbsp;at&nbsp;6:56&nbsp;PM,&nbsp;Jeremy&nbsp;Orlow&nbsp;&lt;&lt;a&nbsp;href=&quot;mailto:jorlow@chromium.org&quot;&nbsp;target=&quot;_blank&quot;&gt;jorlow@chromium.org&lt;/a&gt;&gt;&nbsp;wrote:&lt;br&gt;<br>
&gt;&nbsp;One&nbsp;possible&nbsp;solution&nbsp;is&nbsp;to add&nbsp;an&nbsp;asynchronous&nbsp;callback&nbsp;interface&nbsp;for&lt;br&gt;<br>
&gt;&nbsp;LocalStorage&nbsp;into&nbsp;workers.&nbsp; For&nbsp;example:&lt;br&gt;<br>
&gt;&nbsp;function&nbsp;myCallback(localStorage)&nbsp;{&lt;br&gt;<br>
&gt;&nbsp;  localStorage.accountBalance&nbsp;=&nbsp;localStorage.accountBalance&nbsp;+&nbsp;100;&lt;br&gt;<br>
&gt;&nbsp;}&lt;br&gt;<br>
&gt;&nbsp;executeLocalStorageCallback(myCallback);&nbsp; //&nbsp;TODO:&nbsp;Make&nbsp;this&nbsp;name&nbsp;better&lt;br&gt;<br>
&gt;&nbsp; :-)&lt;br&gt;<br>
&gt;&nbsp;The&nbsp;interface&nbsp;is&nbsp;simple.&nbsp; You&nbsp;can&nbsp;only&nbsp;access&nbsp;localStorage&nbsp;via&nbsp;a&nbsp;callback.&lt;br&gt;<br>
&gt;&nbsp; Any&nbsp;use&nbsp;outside&nbsp;of&nbsp;the&nbsp;callback&nbsp;is&nbsp;illegal&nbsp;and&nbsp;would&nbsp;raise&nbsp;an&nbsp;exception.&lt;br&gt;<br>
&gt;&nbsp; The&nbsp;callback&nbsp;would&nbsp;acquire&nbsp;the&nbsp;storage&nbsp;mutex&nbsp;during&nbsp;execution,&nbsp;but&nbsp;the&lt;br&gt;<br>
&gt;&nbsp;worker&#39;s&nbsp;execution&nbsp;would&nbsp;not&nbsp;block&nbsp;during&nbsp;this&nbsp;time.&nbsp; Of&nbsp;course,&nbsp;it&#39;s&nbsp;still&lt;br&gt;<br>
&gt;&nbsp;possible&nbsp;for&nbsp;a&nbsp;poorly&nbsp;behaving&nbsp;worker&nbsp;to&nbsp;do&nbsp;large&nbsp;amounts&nbsp;of computation in&lt;br&gt;<br>
&gt;&nbsp;the&nbsp;callback,&nbsp;but&nbsp;hopefully&nbsp;the&nbsp;fact&nbsp;they&#39;re&nbsp;executing&nbsp;in&nbsp;a&nbsp;callback&nbsp;makes&lt;br&gt;<br>
&gt;&nbsp;the&nbsp;developer&nbsp;more&nbsp;aware&nbsp;of&nbsp;the&nbsp;problem.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;First&nbsp;off,&nbsp;I&nbsp;agree&nbsp;that&nbsp;not&nbsp;having&nbsp;localStorage&nbsp;in&nbsp;workers&nbsp;is&nbsp;a&nbsp;big&lt;br&gt;<br>
problem&nbsp;that&nbsp;we&nbsp;need&nbsp;to&nbsp;address.&lt;br&gt;<br>
&lt;br&gt;<br>
If&nbsp;I&nbsp;were&nbsp;designing&nbsp;the&nbsp;localStorage&nbsp;interface&nbsp;today&nbsp;I&nbsp;would&nbsp;use&nbsp;the&lt;br&gt;<br>
above&nbsp;interface&nbsp;that&nbsp;you&nbsp;suggest.&nbsp;Grabbing&nbsp;localStorage&nbsp;can&nbsp;only&nbsp;be&lt;br&gt;<br>
done&nbsp;asynchronously,&nbsp;and&nbsp;while&nbsp;you&#39;re&nbsp;using&nbsp;it,&nbsp;no&nbsp;one&nbsp;else&nbsp;can&nbsp;get&nbsp;a&lt;br&gt;<br>
reference&nbsp;to&nbsp;it.&nbsp;This&nbsp;way&nbsp;there&nbsp;are&nbsp;no&nbsp;race&nbsp;conditions,&nbsp;but&nbsp;also&nbsp;no&lt;br&gt;<br>
way&nbsp;for&nbsp;anyone&nbsp;to&nbsp;have&nbsp;to&nbsp;lock.&lt;br&gt;<br>
&lt;br&gt;<br>
So&nbsp;one&nbsp;solution&nbsp;is&nbsp;to&nbsp;do&nbsp;that&nbsp;in&nbsp;parallel&nbsp;to&nbsp;the&nbsp;current&nbsp;localStorage&lt;br&gt;<br>
interface.&nbsp;Let&#39;s&nbsp;say&nbsp;we&nbsp;introduce&nbsp;a&nbsp;&#39;clientStorage&#39;&nbsp;object.&nbsp;You&nbsp;can&lt;br&gt;<br>
only&nbsp;get&nbsp;a&nbsp;reference&nbsp;to&nbsp;it&nbsp;using&nbsp;a&nbsp;&#39;getClientStorage&#39;&nbsp;function.&nbsp;This&lt;br&gt;<br>
function&nbsp;is&nbsp;available&nbsp;both&nbsp;to&nbsp;workers&nbsp;and&nbsp;windows.&nbsp;The&nbsp;storage&nbsp;is&lt;br&gt;<br>
separate&nbsp;from&nbsp;localStorage&nbsp;so&nbsp;no&nbsp;need&nbsp;to&nbsp;worry&nbsp;about&nbsp;the&nbsp;&#39;storage&lt;br&gt;<br>
mutex&#39;.&lt;br&gt;<br>
&lt;br&gt;<br>
There&nbsp;is&nbsp;of&nbsp;course&nbsp;a&nbsp;risk&nbsp;that&nbsp;a&nbsp;worker&nbsp;grabs&nbsp;on&nbsp;to&nbsp;the&nbsp;clientStorage&lt;br&gt;<br>
and&nbsp;holds&nbsp;it&nbsp;indefinitely.&nbsp;This&nbsp;would&nbsp;result&nbsp;in&nbsp;the&nbsp;main&nbsp;window&nbsp;(or&lt;br&gt;<br>
another&nbsp;worker)&nbsp;never&nbsp;getting&nbsp;a&nbsp;reference&nbsp;to&nbsp;it.&nbsp;However&nbsp;it&nbsp;doesn&#39;t&lt;br&gt;<br>
affect&nbsp;responsiveness&nbsp;of&nbsp;that&nbsp;window,&nbsp;it&#39;s&nbsp;just&nbsp;that&nbsp;the&nbsp;callback&nbsp;will&lt;br&gt;<br>
never&nbsp;happen.&nbsp;While&nbsp;that&#39;s&nbsp;not&nbsp;ideal,&nbsp;it&nbsp;seems&nbsp;like&nbsp;a&nbsp;smaller&nbsp;problem&lt;br&gt;<br>
than&nbsp;any&nbsp;other&nbsp;solution&nbsp;that&nbsp;I&nbsp;can&nbsp;think&nbsp;of.&nbsp;And&nbsp;the&nbsp;WebDatabase&lt;br&gt;<br>
interfaces&nbsp;are&nbsp;suffering&nbsp;from&nbsp;the&nbsp;same&nbsp;problem&nbsp;if&nbsp;I&nbsp;understand&nbsp;things&lt;br&gt;<br>
correctly.&lt;br&gt;<br>
&lt;br&gt;<br>
There&#39;s&nbsp;a&nbsp;couple&nbsp;of&nbsp;other&nbsp;interesting&nbsp;things&nbsp;we&nbsp;could&nbsp;expose&nbsp;on&nbsp;top&nbsp;of&nbsp;this:&lt;br&gt;<br>
&lt;br&gt;<br>
First,&nbsp;a&nbsp;synchronous&nbsp;API&nbsp;for&nbsp;workers.&nbsp;We&nbsp;could&nbsp;allow&nbsp;workers&nbsp;to&lt;br&gt;<br>
synchronously&nbsp;get&nbsp;a&nbsp;reference&nbsp;to&nbsp;clientStorage.&nbsp;If&nbsp;someone&nbsp;is&lt;br&gt;<br>
currently&nbsp;using&nbsp;clientStorage&nbsp;then&nbsp;the&nbsp;worker&nbsp;blocks&nbsp;until&nbsp;the&nbsp;storage&lt;br&gt;<br>
becomes&nbsp;available.&nbsp;We&nbsp;could&nbsp;either&nbsp;use&nbsp;a&nbsp;callback&nbsp;as&nbsp;the&nbsp;above,&nbsp;which&lt;br&gt;<br>
blocks&nbsp;until&nbsp;the&nbsp;clientStorage&nbsp;is&nbsp;acquired&nbsp;and&nbsp;only&nbsp;holds&nbsp;the&nbsp;storage&lt;br&gt;<br>
until&nbsp;the&nbsp;callback&nbsp;exists.&nbsp;Or&nbsp;we&nbsp;could&nbsp;expose&nbsp;clientStorage&nbsp;as&nbsp;a&lt;br&gt;<br>
property&nbsp;which&nbsp;holds&nbsp;the&nbsp;storage&nbsp;until&nbsp;control&nbsp;is&nbsp;returned&nbsp;to&nbsp;the&lt;br&gt;<br>
worker&nbsp;eventloop,&nbsp;or&nbsp;until&nbsp;some&nbsp;explicit&nbsp;release&nbsp;API&nbsp;is&nbsp;called.&nbsp;The&lt;br&gt;<br>
latter&nbsp;would&nbsp;be&nbsp;how&nbsp;localStorage&nbsp;is&nbsp;now&nbsp;defined,&nbsp;with&nbsp;the&nbsp;important&lt;br&gt;<br>
difference&nbsp;that&nbsp;localStorage&nbsp;exposes&nbsp;the&nbsp;synchronous&nbsp;API&nbsp;to&nbsp;windows.&lt;br&gt;<br>
&lt;br&gt;<br>
Second,&nbsp;allow&nbsp;several&nbsp;named&nbsp;storage&nbsp;areas.&nbsp;We&nbsp;could&nbsp;add&nbsp;an&nbsp;API&nbsp;like&lt;br&gt;<br>
getNamedClientStorage(name,&nbsp;callback).&nbsp;This&nbsp;would&nbsp;allow&nbsp;two&nbsp;different&lt;br&gt;<br>
workers&nbsp;to&nbsp;simultaneously&nbsp;store&nbsp;things&nbsp;in&nbsp;a&nbsp;storage&nbsp;areas,&nbsp;as&nbsp;long&nbsp;as&lt;br&gt;<br>
they&nbsp;don&#39;t&nbsp;need&nbsp;to&nbsp;use&nbsp;the&nbsp;*same*&nbsp;storage&nbsp;area.&nbsp;It&nbsp;would&nbsp;also&nbsp;allow&nbsp;a&lt;br&gt;<br>
worker&nbsp;and&nbsp;the&nbsp;main&nbsp;window&nbsp;to&nbsp;simultaneously&nbsp;use&nbsp;separate&nbsp;storage&lt;br&gt;<br>
areas.&lt;br&gt;<br>
&lt;br&gt;<br>
However&nbsp;we&nbsp;need&nbsp;to&nbsp;be&nbsp;careful&nbsp;if&nbsp;we&nbsp;add&nbsp;both&nbsp;above&nbsp;features.&nbsp;We&nbsp;can&#39;t&lt;br&gt;<br>
allow&nbsp;a&nbsp;worker&nbsp;to&nbsp;grab&nbsp;multiple&nbsp;storage&nbsp;areas&nbsp;at&nbsp;the&nbsp;same&nbsp;time&nbsp;since&lt;br&gt;<br>
that&nbsp;could&nbsp;cause&nbsp;deadlocks.&nbsp;However&nbsp;with&nbsp;proper&nbsp;APIs&nbsp;I&nbsp;believe&nbsp;we&nbsp;can&lt;br&gt;<br>
avoid&nbsp;that.&lt;br&gt;<br>
&lt;font&nbsp;color=&quot;#888888&quot;&gt;&lt;br&gt;<br>
/&nbsp;Jonas&lt;br&gt;<br>
&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;<br>
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;<br>
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;<br>
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;<br>
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;<br>

</tt>
