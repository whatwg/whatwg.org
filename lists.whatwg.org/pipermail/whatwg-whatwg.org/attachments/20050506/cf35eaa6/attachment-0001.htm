<tt>
On&nbsp;5/4/05,&nbsp;&lt;b&nbsp;class=&quot;gmail_sendername&quot;&gt;Ian&nbsp;Hickson&lt;/b&gt;&nbsp;&lt;&lt;a&nbsp;href=&quot;mailto:ian@hixie.ch&quot;&gt;ian@hixie.ch&lt;/a&gt;&gt;&nbsp;wrote:&lt;div&gt;&lt;span&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;/span&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;padding-left:&nbsp;1ex;&quot;&gt;<br>
As&nbsp;far&nbsp;as&nbsp;editing&nbsp;goes,&nbsp;contentEditable=&quot;&quot;&nbsp;is&nbsp;the&nbsp;way&nbsp;we're&nbsp;going&nbsp;at&nbsp;the&lt;br&gt;moment,&nbsp;I&nbsp;think.&nbsp;Focusable&nbsp;is&nbsp;probably&nbsp;going&nbsp;to&nbsp;be&nbsp;tabindex=&quot;&quot;.&lt;br&gt;Selectable&nbsp;hasn't&nbsp;yet&nbsp;been&nbsp;discussed&nbsp;(I&nbsp;could&nbsp;be&nbsp;convinced&nbsp;that&nbsp;that&nbsp;is<br>
&lt;br&gt;presentational,&nbsp;actually).&nbsp;Draggable&nbsp;is&nbsp;clearly&nbsp;not&nbsp;presentational;&nbsp;my&lt;br&gt;current&nbsp;thinking&nbsp;is&nbsp;something&nbsp;like&nbsp;contentDraggable=&quot;&quot;&nbsp;or&nbsp;something.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;<br>
I&nbsp;don't&nbsp;really&nbsp;see&nbsp;a&nbsp;case&nbsp;outside&nbsp;the&nbsp;datagrid&nbsp;dragging&nbsp;(which&nbsp;is<br>
handled&nbsp;elsewhere)&nbsp;where&nbsp;there&nbsp;would&nbsp;be&nbsp;a&nbsp;need&nbsp;to&nbsp;specify&nbsp;an&nbsp;element&nbsp;as<br>
draggable&nbsp;or&nbsp;as&nbsp;a&nbsp;drag&nbsp;target&nbsp;without&nbsp;scripting&nbsp;in&nbsp;drag&nbsp;behavior.&nbsp;In<br>
light&nbsp;of&nbsp;this,&nbsp;I&nbsp;don't&nbsp;see&nbsp;any&nbsp;reason&nbsp;to&nbsp;pollute&nbsp;the&nbsp;HTML&nbsp;namespace<br>
with&nbsp;more&nbsp;attributes&nbsp;(contentDraggable)&nbsp;when&nbsp;this&nbsp;will&nbsp;necessarily&nbsp;be&nbsp;a<br>
scripted&nbsp;event&nbsp;anyway.&nbsp;Please&nbsp;feel&nbsp;free&nbsp;to&nbsp;point&nbsp;out&nbsp;cases&nbsp;where<br>
another&nbsp;HTML&nbsp;attribute&nbsp;would&nbsp;have&nbsp;an&nbsp;advantage&nbsp;over&nbsp;a&nbsp;DOM&nbsp;property&nbsp;that<br>
could&nbsp;be&nbsp;set&nbsp;directly&nbsp;via&nbsp;script.&lt;br&gt;<br>
&lt;br&gt;<br>
As&nbsp;for&nbsp;the&nbsp;dragging&nbsp;event&nbsp;model&nbsp;for&nbsp;a&nbsp;single&nbsp;DOM&nbsp;element,&nbsp;I&nbsp;think&nbsp;the<br>
events&nbsp;outlined&nbsp;in&nbsp;the&nbsp;current&nbsp;draft&nbsp;of&nbsp;the&nbsp;spec&nbsp;are&nbsp;a&nbsp;good&nbsp;start.&nbsp;In<br>
addition,&nbsp;however,&nbsp;it&nbsp;would&nbsp;be&nbsp;nice&nbsp;to&nbsp;add&nbsp;some&nbsp;presentational&nbsp;niceties<br>
via&nbsp;CSS&nbsp;pseudo-classes.&lt;br&gt;<br>
&lt;br&gt;<br>
:draggable&nbsp;=&nbsp;DOM&nbsp;element&nbsp;that&nbsp;has&nbsp;.draggable=true&nbsp;(or&nbsp;whatever&nbsp;is&nbsp;decided&nbsp;on)&lt;br&gt;<br>
:dragging&nbsp;=&nbsp;DOM&nbsp;element&nbsp;that&nbsp;is&nbsp;being&nbsp;dragged&nbsp;(perhaps&nbsp;opacity:&nbsp;0.5)&lt;br&gt;<br>
:dragging:droppable&nbsp;=&nbsp;DOM&nbsp;element&nbsp;that&nbsp;is&nbsp;being&nbsp;dragged&nbsp;and&nbsp;can&nbsp;be&nbsp;dropped&nbsp;over&nbsp;its&nbsp;current&nbsp;location&lt;br&gt;<br>
:dragtarget&nbsp;/&nbsp;?&nbsp;=&nbsp;container&nbsp;that&nbsp;allows&nbsp;for&nbsp;the&nbsp;current&nbsp;dragging&nbsp;element&nbsp;to&nbsp;be&nbsp;dropped&nbsp;upon&nbsp;it&nbsp;(border:&nbsp;2px&nbsp;dotted&nbsp;red)&lt;br&gt;<br>
:dragged&nbsp;=&nbsp;the&nbsp;original&nbsp;DOM&nbsp;element&nbsp;that&nbsp;was&nbsp;dragged,&nbsp;in&nbsp;its&nbsp;original<br>
position&nbsp;(it&nbsp;would&nbsp;be&nbsp;up&nbsp;to&nbsp;script&nbsp;to&nbsp;determine&nbsp;whether&nbsp;or&nbsp;not&nbsp;to<br>
remove&nbsp;it&nbsp;or&nbsp;whatever&nbsp;else)&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;think&nbsp;something&nbsp;along&nbsp;these&nbsp;lines&nbsp;is&nbsp;invaluable&nbsp;to&nbsp;a&nbsp;rich&nbsp;GUI&nbsp;interface.&lt;br&gt;<br>
&lt;br&gt;<br>
Drag&nbsp;groups&nbsp;could&nbsp;be&nbsp;specified&nbsp;by&nbsp;a&nbsp;simple&nbsp;NodeList&nbsp;that&nbsp;would&nbsp;be&nbsp;defined&nbsp;at&nbsp;dragstart.&lt;br&gt;<br>
&lt;br&gt;<br>
e.g.&lt;br&gt;<br>
&nbsp;&nbsp;var&nbsp;elDrag&nbsp;=&nbsp;document.getElementById(&quot;mydragelement&quot;);&lt;br&gt;<br>
&nbsp;&nbsp;var&nbsp;myNodeList&nbsp;=&nbsp;[];&lt;br&gt;<br>
&nbsp;&nbsp;myNodeList.push(document.getElementById(&quot;dragfriend1&quot;));&lt;br&gt;<br>
&nbsp;&nbsp;myNodeList.push(document.getElementById(&quot;dragfriend2&quot;));&lt;br&gt;<br>
&nbsp;&nbsp;//&nbsp;or&nbsp;just&nbsp;as&nbsp;easily:&nbsp;var&nbsp;myNodeList&nbsp;=&nbsp;document.getElementsByTagName(&quot;LI&quot;);&lt;br&gt;<br>
&nbsp;&nbsp;elDrag.addEventListener(&quot;dragstart&quot;,&nbsp;function(e)&nbsp;{&nbsp;e.dragNodes.appendChildren(myNodeList);&nbsp;return&nbsp;true;&nbsp;},&nbsp;false);&lt;br&gt;<br>
&lt;br&gt;<br>
For&nbsp;the&nbsp;droppable&nbsp;model,&nbsp;it&nbsp;makes&nbsp;sense&nbsp;to&nbsp;have&nbsp;the&nbsp;drag&nbsp;target&nbsp;element&nbsp;specify&nbsp;either&nbsp;Elements&nbsp;or&nbsp;NodeLists&nbsp;that&nbsp;are&nbsp;droppable.&lt;br&gt;<br>
&lt;br&gt;<br>
e.g.&lt;br&gt;<br>
&nbsp;&nbsp;var&nbsp;elDragTarget&nbsp;=&nbsp;document.getElementById(&quot;mydragtarget&quot;);&lt;br&gt;<br>
&nbsp;&nbsp;elDragTarget.addDroppable(elDrag);&lt;br&gt;<br>
&nbsp;&nbsp;elDragTarget.addDroppable(myNodeList);&lt;br&gt;<br>
&lt;br&gt;<br>
Then&nbsp;the&nbsp;question&nbsp;comes&nbsp;about&nbsp;dragging&nbsp;a&nbsp;group&nbsp;of&nbsp;elements&nbsp;to&nbsp;a&nbsp;drag<br>
target&nbsp;which&nbsp;only&nbsp;has&nbsp;*some*&nbsp;of&nbsp;the&nbsp;dragged&nbsp;elements&nbsp;in&nbsp;its&nbsp;droppable<br>
list.&nbsp;Without&nbsp;thinking&nbsp;about&nbsp;it&nbsp;too&nbsp;much,&nbsp;I&nbsp;think&nbsp;this&nbsp;could&nbsp;be&nbsp;handled<br>
when&nbsp;the&nbsp;elements&nbsp;are&nbsp;dropped&nbsp;as&nbsp;such:&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp;&nbsp;elDrag.addEventListener(&quot;dragend&quot;,&nbsp;function(e)&nbsp;{&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;go&nbsp;through&nbsp;each&nbsp;dropped&nbsp;element&nbsp;and&nbsp;check&nbsp;if&nbsp;it's&nbsp;droppable&nbsp;on&nbsp;the&nbsp;drag&nbsp;target&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;i=0;&nbsp;i&nbsp;&lt;&nbsp;e.dragNodes.length;&nbsp;i++)&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(<br>
!dragTarget.isDroppable(e.dragNodes[i])&nbsp;)&nbsp;alert(&quot;Unabled&nbsp;to&nbsp;drag<br>
&quot;+e.dragNodes[i].id+&quot;&nbsp;to&nbsp;&quot;+dragTarget.id);&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;of&nbsp;course&nbsp;something&nbsp;more&nbsp;graceful&nbsp;than&nbsp;an&nbsp;alert&nbsp;could&nbsp;be&nbsp;done&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;&lt;br&gt;<br>
&nbsp;&nbsp;},&nbsp;false);&lt;br&gt;<br>
&lt;br&gt;<br>
Anyway,&nbsp;most&nbsp;of&nbsp;it&nbsp;is&nbsp;food&nbsp;for&nbsp;thought.&lt;br&gt;<br>
&lt;br&gt;<br>
--&nbsp;&lt;br&gt;<br>
<br>
Brad&nbsp;Fults&lt;br&gt;<br>
<br>
NeatBox&nbsp;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;<br>

</tt>
