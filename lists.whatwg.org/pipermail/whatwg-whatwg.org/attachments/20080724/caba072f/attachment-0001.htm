<tt>
&lt;!DOCTYPE&nbsp;html&nbsp;PUBLIC&nbsp;&quot;-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN&quot;&gt;<br>
&lt;html&gt;<br>
&lt;head&gt;<br>
&nbsp;&nbsp;&lt;meta&nbsp;content=&quot;text/html;charset=ISO-8859-1&quot;&nbsp;http-equiv=&quot;Content-Type&quot;&gt;<br>
&lt;/head&gt;<br>
&lt;body&nbsp;bgcolor=&quot;#ffffff&quot;&nbsp;text=&quot;#000000&quot;&gt;<br>
&lt;br&gt;<br>
&lt;span&nbsp;style=&quot;white-space:&nbsp;pre;&quot;&gt;&gt;&gt;&nbsp;&lt;br&gt;<br>
&gt;&gt;&nbsp;3.)&nbsp;If&nbsp;the&nbsp;resulting&nbsp;absolute&nbsp;URL&nbsp;has&nbsp;a&nbsp;&lt;port&gt;<br>
component,&nbsp;then&nbsp;let&lt;br&gt;<br>
&gt;&gt;&nbsp;port&nbsp;be&nbsp;that&nbsp;component's&nbsp;value;&nbsp;otherwise,&nbsp;if&nbsp;secure&nbsp;is&nbsp;false,<br>
let&lt;br&gt;<br>
&gt;&gt;&nbsp;port&nbsp;be&nbsp;81,&nbsp;otherwise&nbsp;let&nbsp;port&nbsp;be&nbsp;815.&lt;br&gt;<br>
&gt;&gt;&nbsp;&lt;/span&gt;&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;found&nbsp;this&nbsp;in&nbsp;rfc2817&nbsp;section&nbsp;1:&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;The&nbsp;historical&nbsp;practice&nbsp;of&nbsp;deploying&nbsp;HTTP&nbsp;over&nbsp;SSL3&nbsp;[3]&nbsp;has&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;distinguished&nbsp;the&nbsp;combination&nbsp;from&nbsp;HTTP&nbsp;alone&nbsp;by&nbsp;a&nbsp;unique&nbsp;URI&nbsp;scheme&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;and&nbsp;the&nbsp;TCP&nbsp;port&nbsp;number.&nbsp;The&nbsp;scheme&nbsp;'http'&nbsp;meant&nbsp;the&nbsp;HTTP&nbsp;protocol&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;alone&nbsp;on&nbsp;port&nbsp;80,&nbsp;while&nbsp;'https'&nbsp;meant&nbsp;the&nbsp;HTTP&nbsp;protocol&nbsp;over&nbsp;SSL&nbsp;on&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;port&nbsp;443.&nbsp;&nbsp;Parallel&nbsp;well-known&nbsp;port&nbsp;numbers&nbsp;have&nbsp;similarly&nbsp;been&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;requested&nbsp;--&nbsp;and&nbsp;in&nbsp;some&nbsp;cases,&nbsp;granted&nbsp;--&nbsp;to&nbsp;distinguish&nbsp;between&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;secured&nbsp;and&nbsp;unsecured&nbsp;use&nbsp;of&nbsp;other&nbsp;application&nbsp;protocols&nbsp;(e.g.&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;snews,&nbsp;ftps).&nbsp;This&nbsp;approach&nbsp;effectively&nbsp;halves&nbsp;the&nbsp;number&nbsp;of&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;available&nbsp;well&nbsp;known&nbsp;ports.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;At&nbsp;the&nbsp;Washington&nbsp;DC&nbsp;IETF&nbsp;meeting&nbsp;in&nbsp;December&nbsp;1997,&nbsp;the&nbsp;Applications&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;Area&nbsp;Directors&nbsp;and&nbsp;the&nbsp;IESG&nbsp;reaffirmed&nbsp;that&nbsp;the&nbsp;practice&nbsp;of&nbsp;issuing&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;parallel&nbsp;&quot;secure&quot;&nbsp;port&nbsp;numbers&nbsp;should&nbsp;be&nbsp;deprecated.&nbsp;The&nbsp;HTTP/1.1&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;Upgrade&nbsp;mechanism&nbsp;can&nbsp;apply&nbsp;Transport&nbsp;Layer&nbsp;Security&nbsp;[6]&nbsp;to&nbsp;an&nbsp;open&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;HTTP&nbsp;connection.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;believe&nbsp;we&nbsp;should&nbsp;rule&nbsp;out&nbsp;both&nbsp;new&nbsp;ports&nbsp;in&nbsp;favour&nbsp;of&nbsp;upgrading&nbsp;a<br>
port&nbsp;80&nbsp;connection&nbsp;to&nbsp;a&nbsp;WebSocket;&nbsp;however&nbsp;according&nbsp;to&nbsp;the&nbsp;same<br>
document&nbsp;the&nbsp;WebSockets&nbsp;proposal&nbsp;does&nbsp;not&nbsp;follow&nbsp;the&nbsp;expected<br>
client-side&nbsp;behaviour&nbsp;for&nbsp;doing&nbsp;so:&lt;br&gt;<br>
&lt;br&gt;<br>
3.2&nbsp;Mandatory&nbsp;Upgrade&lt;br&gt;<br>
If&nbsp;an&nbsp;unsecured&nbsp;response&nbsp;would&nbsp;be&nbsp;unacceptable,&nbsp;a&nbsp;client&nbsp;MUST&nbsp;send&nbsp;an<br>
OPTIONS&nbsp;request&nbsp;first&nbsp;to&nbsp;complete&nbsp;the&nbsp;switch&nbsp;to&nbsp;TLS/1.0&nbsp;(if&nbsp;possible).&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OPTIONS&nbsp;*&nbsp;HTTP/1.1&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Host:&nbsp;example.bank.com&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Upgrade:&nbsp;TLS/1.0&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection:&nbsp;Upgrade&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
Nor&nbsp;does&nbsp;the&nbsp;WebSocket&nbsp;server&nbsp;supply&nbsp;a&nbsp;valid&nbsp;response:&lt;br&gt;<br>
&lt;br&gt;<br>
3.3&nbsp;Server&nbsp;Acceptance&nbsp;of&nbsp;Upgrade&nbsp;Request&lt;br&gt;<br>
As&nbsp;specified&nbsp;in&nbsp;HTTP/1.1&nbsp;[1],&nbsp;if&nbsp;the&nbsp;server&nbsp;is&nbsp;prepared&nbsp;to&nbsp;initiate&nbsp;the<br>
TLS&nbsp;handshake,&nbsp;it&nbsp;MUST&nbsp;send&nbsp;the&nbsp;intermediate&nbsp;&quot;101&nbsp;Switching&nbsp;Protocol&quot;<br>
and&nbsp;MUST&nbsp;include&nbsp;an&nbsp;Upgrade&nbsp;response&nbsp;header&nbsp;specifying&nbsp;the&nbsp;tokens&nbsp;of<br>
the&nbsp;protocol&nbsp;stack&nbsp;it&nbsp;is&nbsp;switching&nbsp;to:&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTTP/1.1&nbsp;101&nbsp;Switching&nbsp;Protocols&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Upgrade:&nbsp;TLS/1.0,&nbsp;HTTP/1.1&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection:&nbsp;Upgrade&lt;br&gt;<br>
&lt;br&gt;<br>
Obviously&nbsp;this&nbsp;is&nbsp;referring&nbsp;to&nbsp;TLS&nbsp;however&nbsp;WebSockets&nbsp;is&nbsp;also&nbsp;a<br>
protocol&nbsp;switch&nbsp;and&nbsp;should&nbsp;therefore&nbsp;follow&nbsp;the&nbsp;same&nbsp;rules.&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;understand&nbsp;the&nbsp;reluctance&nbsp;to&nbsp;use&nbsp;a&nbsp;true&nbsp;HTTP&nbsp;handshake&nbsp;(hence&nbsp;the<br>
ws://&nbsp;scheme&nbsp;and&nbsp;alternate&nbsp;ports)&nbsp;however&nbsp;I&nbsp;think&nbsp;the&nbsp;claims&nbsp;of&nbsp;added<br>
complexity&nbsp;on&nbsp;the&nbsp;server&nbsp;end&nbsp;are&nbsp;exaggerated&nbsp;(I&nbsp;say&nbsp;this&nbsp;as&nbsp;somebody<br>
who&nbsp;has&nbsp;written&nbsp;a&nbsp;basic&nbsp;standalone&nbsp;webserver).&nbsp;It&nbsp;seems&nbsp;to&nbsp;me&nbsp;we're<br>
only&nbsp;looking&nbsp;at&nbsp;required&nbsp;support&nbsp;for:&lt;br&gt;<br>
&lt;br&gt;<br>
*&nbsp;Validating&nbsp;and&nbsp;parsing&nbsp;HTTP&nbsp;headers&nbsp;(that&nbsp;doesn't&nbsp;mean&nbsp;they&nbsp;are&nbsp;all<br>
understood&nbsp;or&nbsp;implemented,&nbsp;simply&nbsp;collected&nbsp;into&nbsp;a&nbsp;native<br>
structure/object/array)&lt;br&gt;<br>
*&nbsp;Handling&nbsp;(or&nbsp;simply&nbsp;pattern-matching)&nbsp;the&nbsp;Version,&nbsp;Upgrade&nbsp;and<br>
Connection&nbsp;headers&lt;br&gt;<br>
*&nbsp;Adding&nbsp;a&nbsp;Content-Length&nbsp;header&nbsp;before&nbsp;each&nbsp;message&nbsp;sent&nbsp;to&nbsp;the&nbsp;client<br>
and/or&nbsp;&quot;chunk&nbsp;encoding&quot;&nbsp;variable-length&nbsp;messages&lt;br&gt;<br>
*&nbsp;Sending&nbsp;and&nbsp;respecting&nbsp;the&nbsp;&quot;connection&nbsp;close&quot;&nbsp;message&lt;br&gt;<br>
*&nbsp;Sending&nbsp;&quot;not&nbsp;implemented&quot;,&nbsp;&quot;not&nbsp;authorised&quot;&nbsp;and&nbsp;error&nbsp;status&nbsp;messages<br>
as&nbsp;needed.&lt;br&gt;<br>
&lt;br&gt;<br>
Currently&nbsp;WebSockets&nbsp;requires&nbsp;practically&nbsp;all&nbsp;of&nbsp;these&nbsp;features&nbsp;as<br>
well,&nbsp;except&nbsp;that&nbsp;it&nbsp;implements&nbsp;them&nbsp;in&nbsp;non-standard&nbsp;fashion&nbsp;-<br>
effectively&nbsp;making&nbsp;asyncronous&nbsp;delivery&nbsp;via&nbsp;existing&nbsp;infrastructure<br>
(ie:&nbsp;CGI)&nbsp;a&nbsp;potentially&nbsp;more&nbsp;difficult&nbsp;and&nbsp;error-prone&nbsp;affair.&nbsp;In&nbsp;fact<br>
as&nbsp;it&nbsp;stands&nbsp;I&nbsp;would&nbsp;say&nbsp;the&nbsp;current&nbsp;proposal&nbsp;rules&nbsp;out&nbsp;both&nbsp;CGI&nbsp;and<br>
proxy&nbsp;support&nbsp;entirely&nbsp;since&nbsp;it&nbsp;cannot&nbsp;handle&nbsp;the&nbsp;addition&nbsp;of&nbsp;otherwise<br>
valid&nbsp;HTTP&nbsp;headers&nbsp;(such&nbsp;as&nbsp;Expires,&nbsp;X-Forwarded-For&nbsp;or&nbsp;Date)&nbsp;in&nbsp;the<br>
first&nbsp;85&nbsp;bytes.&lt;br&gt;<br>
&lt;br&gt;<br>
Shannon&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/body&gt;<br>
&lt;/html&gt;<br>

</tt>
