<tt>
Does&nbsp;ECMAScript&nbsp;currently&nbsp;have&nbsp;a&nbsp;built-in&nbsp;function&nbsp;for&nbsp;encoding&nbsp;&amp;&nbsp;decoding&nbsp;base-64?&nbsp; We&nbsp;might&nbsp;want&nbsp;a&nbsp;built-in&nbsp;base-64&nbsp;encoder&nbsp;/&nbsp;decoder&nbsp;if&nbsp;we&nbsp;are&nbsp;implementing&nbsp;this&nbsp;base64-encoded&nbsp;entities.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-&nbsp;Ryosuke&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Wed,&nbsp;Aug&nbsp;25,&nbsp;2010&nbsp;at&nbsp;1:50&nbsp;PM,&nbsp;Adam&nbsp;Barth&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:w3c@adambarth.com&quot;&gt;w3c@adambarth.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
<br>
==&nbsp;Summary&nbsp;==&lt;br&gt;<br>
&lt;br&gt;<br>
HTML&nbsp;should&nbsp;support&nbsp;Base64-encoded&nbsp;entities&nbsp;to&nbsp;make&nbsp;it&nbsp;easier&nbsp;for&lt;br&gt;<br>
authors&nbsp;to&nbsp;include&nbsp;untrusted&nbsp;content&nbsp;in&nbsp;their&nbsp;documents&nbsp;without&lt;br&gt;<br>
risking&nbsp;XSS.&nbsp; For&nbsp;example,&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;%SFRNTDUncyA8Y2FudmFzPiBlbGVtZW50IGlzIGF3ZXNvbWUuCg==;&lt;br&gt;<br>
&lt;br&gt;<br>
would&nbsp;decode&nbsp;to&nbsp;&quot;HTML5&#39;s&nbsp;&lt;canvas&gt;&nbsp;element&nbsp;is&nbsp;awesome.&quot;&nbsp; Notice&nbsp;that&lt;br&gt;<br>
the&nbsp;&lt;&nbsp;and&nbsp;&gt;&nbsp;characters&nbsp;get&nbsp;emitted&nbsp;by&nbsp;the&nbsp;parser&nbsp;as&nbsp;character&nbsp;tokens.&lt;br&gt;<br>
That&nbsp;means&nbsp;they&nbsp;can&#39;t&nbsp;be&nbsp;used&nbsp;by&nbsp;an&nbsp;attacker&nbsp;for&nbsp;XSS.&nbsp; These&nbsp;entities&lt;br&gt;<br>
can&nbsp;be&nbsp;used&nbsp;safely&nbsp;both&nbsp;in&nbsp;intertag&nbsp;content&nbsp;as&nbsp;well&nbsp;as&nbsp;in&nbsp;attribute&lt;br&gt;<br>
values.&lt;br&gt;<br>
&lt;br&gt;<br>
==&nbsp;Use&nbsp;Case&nbsp;==&lt;br&gt;<br>
&lt;br&gt;<br>
Authors&nbsp;often&nbsp;combine&nbsp;trusted&nbsp;and&nbsp;untrusted&nbsp;text&nbsp;into&nbsp;HTML&nbsp;documents.&lt;br&gt;<br>
If&nbsp;done&nbsp;naively,&nbsp;an&nbsp;attacker&nbsp;can&nbsp;supply&nbsp;HTML&nbsp;markup,&nbsp;including&nbsp;script,&lt;br&gt;<br>
in&nbsp;the&nbsp;untrusted&nbsp;script,&nbsp;resulting&nbsp;in&nbsp;a&nbsp;cross-site&nbsp;script&nbsp;attack.&lt;br&gt;<br>
Authors&nbsp;want&nbsp;a&nbsp;way&nbsp;to&nbsp;include&nbsp;untrusted&nbsp;content&nbsp;safely&nbsp;in&nbsp;HTML&lt;br&gt;<br>
documents&nbsp;without&nbsp;risking&nbsp;XSS.&lt;br&gt;<br>
&lt;br&gt;<br>
==&nbsp;Workarounds&nbsp;==&lt;br&gt;<br>
&lt;br&gt;<br>
Currently,&nbsp;authors&nbsp;must&nbsp;carefully&nbsp;escape&nbsp;all&nbsp;untrusted&nbsp;content&nbsp;to&lt;br&gt;<br>
prevent&nbsp;an&nbsp;attacker&nbsp;from&nbsp;injecting&nbsp;HTML.&nbsp; Unfortunately,&nbsp;authors&nbsp;often&lt;br&gt;<br>
apply&nbsp;the&nbsp;incorrect&nbsp;escaping&nbsp;or&nbsp;forget&nbsp;to&nbsp;escape&nbsp;entirely,&nbsp;resulting&lt;br&gt;<br>
in&nbsp;security&nbsp;vulnerabilities.&nbsp; Escaping&nbsp;content&nbsp;in&nbsp;HTML&nbsp;is&nbsp;tricky&lt;br&gt;<br>
because&nbsp;authors&nbsp;need&nbsp;to&nbsp;use&nbsp;different&nbsp;escaping&nbsp;rules&nbsp;for&nbsp;different&lt;br&gt;<br>
contexts.&nbsp; For&nbsp;example,&nbsp;PHP&#39;s&nbsp;htmlspecialchars&nbsp;isn&#39;t&nbsp;sufficient&nbsp;in&nbsp;the&lt;br&gt;<br>
following&nbsp;contexts:&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;img&nbsp;alt=&lt;?php&nbsp;echo&nbsp;htmlspecialchars($name)&nbsp;?&gt;&nbsp;src=&quot;...&quot;&gt;&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;script&gt;&lt;br&gt;<br>
elmt.innerHTML&nbsp;=&nbsp;&#39;Hi&nbsp;there&nbsp;&lt;?php&nbsp;echo&nbsp;htmlspecialchars($name)&nbsp;?&gt;.&#39;;&lt;br&gt;<br>
&lt;/script&gt;&lt;br&gt;<br>
&lt;br&gt;<br>
Some&nbsp;framework&nbsp;convert&nbsp;untrusted&nbsp;content&nbsp;to&nbsp;a&nbsp;series&nbsp;of&nbsp;hex&nbsp;entities,&lt;br&gt;<br>
but&nbsp;that&nbsp;greatly&nbsp;increases&nbsp;the&nbsp;length&nbsp;of&nbsp;the&nbsp;content.&lt;br&gt;<br>
&lt;br&gt;<br>
==&nbsp;Proposal&nbsp;==&lt;br&gt;<br>
&lt;br&gt;<br>
We&nbsp;should&nbsp;add&nbsp;a&nbsp;new&nbsp;kind&nbsp;of&nbsp;HTML&nbsp;entity&nbsp;that&nbsp;authors&nbsp;can&nbsp;use&nbsp;to&lt;br&gt;<br>
include&nbsp;untrusted&nbsp;content.&nbsp; In&nbsp;particular,&nbsp;authors&nbsp;should&nbsp;be&nbsp;able&nbsp;to&lt;br&gt;<br>
supply&nbsp;untrusted&nbsp;content&nbsp;in&nbsp;base64,&nbsp;which&nbsp;nicely&nbsp;avoids&nbsp;any&nbsp;scary&lt;br&gt;<br>
characters.&nbsp; We&nbsp;can&nbsp;avoid&nbsp;clashes&nbsp;with&nbsp;existing&nbsp;or&nbsp;future&nbsp;entities&nbsp;by&lt;br&gt;<br>
using&nbsp;a&nbsp;new&nbsp;character&nbsp;after&nbsp;the&nbsp;&amp;&nbsp;escape&nbsp;character.&nbsp; In&nbsp;particular,&nbsp;we&lt;br&gt;<br>
could&nbsp;use&nbsp;the&nbsp;%&nbsp;character:&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;%SFRNTDUncyA8Y2FudmFzPiBlbGVtZW50IGlzIGF3ZXNvbWUuCg==;&lt;br&gt;<br>
&lt;br&gt;<br>
Authors&nbsp;could&nbsp;then&nbsp;supply&nbsp;untrusted&nbsp;content&nbsp;as&nbsp;follows:&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;img&nbsp;alt=&lt;?php&nbsp;echo&nbsp;htmlescape($name)&nbsp;?&gt;&nbsp;src=&quot;...&quot;&gt;&lt;br&gt;<br>
&lt;br&gt;<br>
where&nbsp;htmlescape&nbsp;is&nbsp;defined&nbsp;as&nbsp;follows:&lt;br&gt;<br>
&lt;br&gt;<br>
function&nbsp;htmlescape($text)&nbsp;{&lt;br&gt;<br>
&nbsp; return&nbsp;&quot;&amp;%&quot;.base64_encode($text).&quot;;&quot;;&lt;br&gt;<br>
}&lt;br&gt;<br>
&lt;font&nbsp;color=&quot;#888888&quot;&gt;&lt;br&gt;<br>
Adam&lt;br&gt;<br>
&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;<br>

</tt>
