<tt>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Tue,&nbsp;Feb&nbsp;16,&nbsp;2010&nbsp;at&nbsp;2:25&nbsp;PM,&nbsp;Stefan&nbsp;Haustein&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:haustein@google.com&quot;&gt;haustein@google.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;On&nbsp;Tue,&nbsp;Feb&nbsp;16,&nbsp;2010&nbsp;at&nbsp;6:22&nbsp;PM,&nbsp;Chris&nbsp;Marrin&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:cmarrin@apple.com&quot;&nbsp;target=&quot;_blank&quot;&gt;cmarrin@apple.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;<br>
&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;&lt;div&gt;&lt;div&gt;We&#39;ve&nbsp;been&nbsp;getting&nbsp;pretty&nbsp;good&nbsp;traction&nbsp;on&nbsp;Vlad&#39;s&nbsp;ArrayBuffers&nbsp;proposal,&nbsp;which&nbsp;was&nbsp;taken&nbsp;from&nbsp;the&nbsp;WebGL&nbsp;spec.&nbsp;Our&nbsp;current&nbsp;plan&nbsp;is&nbsp;to&nbsp;change&nbsp;the&nbsp;names&nbsp;in&nbsp;the&nbsp;browsers&nbsp;(WebKit,&nbsp;Chrome&nbsp;and&nbsp;Mozilla)&nbsp;to&nbsp;the&nbsp;&quot;non-WebGL&nbsp;specific&quot;&nbsp;names&nbsp;Vlad&nbsp;proposes&nbsp;in&nbsp;his&nbsp;spec.&nbsp;We&#39;d&nbsp;really&nbsp;like&nbsp;this&nbsp;to&nbsp;be&nbsp;the&nbsp;&quot;one&nbsp;true&nbsp;binary&nbsp;data&nbsp;access&quot;&nbsp;mechanism&nbsp;for&nbsp;HTML.&nbsp;We&#39;re&nbsp;talking&nbsp;to&nbsp;the&nbsp;File&nbsp;API&nbsp;guys&nbsp;about&nbsp;this&nbsp;and&nbsp;I&nbsp;think&nbsp;this&nbsp;API&nbsp;can&nbsp;be&nbsp;adapted&nbsp;in&nbsp;all&nbsp;the&nbsp;other&nbsp;places&nbsp;as&nbsp;well.&lt;/div&gt;<br>
&lt;/div&gt;<br>
<br>
&lt;br&gt;<br>
As&nbsp;far&nbsp;as&nbsp;performance&nbsp;goes,&nbsp;can&nbsp;you&nbsp;point&nbsp;me&nbsp;at&nbsp;some&nbsp;quantitative&nbsp;data?&nbsp;When&nbsp;you&nbsp;say&nbsp;it&#39;s&nbsp;an&nbsp;&quot;orders-of-magnitude&quot;&nbsp;bottleneck,&nbsp;what&nbsp;are&nbsp;you&nbsp;comparing&nbsp;it&nbsp;to?&nbsp;The&nbsp;API&nbsp;is&nbsp;very&nbsp;new&nbsp;and&nbsp;we&nbsp;certainly&nbsp;want&nbsp;to&nbsp;improve&nbsp;it&nbsp;for&nbsp;the&nbsp;various&nbsp;purposes&nbsp;it&nbsp;can&nbsp;be&nbsp;put&nbsp;to.&nbsp;We&#39;ve&nbsp;even&nbsp;talked&nbsp;about&nbsp;optimizations&nbsp;inside&nbsp;the&nbsp;JS&nbsp;implementations&nbsp;to&nbsp;improve&nbsp;access&nbsp;performance.&lt;br&gt;<br>
<br>
&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;If&nbsp;we&nbsp;can&nbsp;get&nbsp;a&nbsp;webgl&nbsp;buffer&nbsp;from&nbsp;an&nbsp;XHR&nbsp;response&nbsp;(which&nbsp;would&nbsp;be&nbsp;a&nbsp;*huge*&nbsp;improvement),&nbsp;we&#39;d&nbsp;still&nbsp;need&nbsp;to&nbsp;parse&nbsp;the&nbsp;binary&nbsp;data&nbsp;when&nbsp;decoding&nbsp;JPEG&nbsp;headers,&nbsp;protocol&nbsp;buffers&nbsp;etc. &lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Constructing&nbsp;ints&nbsp;/&nbsp;longs&nbsp;from&nbsp;bytes&nbsp;in&nbsp;Javascript&nbsp;will&nbsp;probably&nbsp;be&nbsp;slow,&nbsp;so&nbsp;in&nbsp;addition&nbsp;to&nbsp;the&nbsp;typed&nbsp;arrays,&nbsp;we&#39;d&nbsp;love&nbsp;to&nbsp;have&nbsp;some&nbsp;kind&nbsp;of&nbsp;access&nbsp;that&nbsp;would&nbsp;be&nbsp;similar&nbsp;to&nbsp;Java&#39;s&nbsp;DataInput&nbsp;(+DataOutput,&nbsp;see&nbsp;&lt;a&nbsp;href=&quot;http://java.sun.com/j2se/1.4.2/docs/api/java/io/DataInput.html&quot;&nbsp;target=&quot;_blank&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/api/java/io/DataInput.html&lt;/a&gt;&nbsp;),&nbsp;but&nbsp;with&nbsp;endianess&nbsp;support....&lt;/div&gt;<br>
&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Agreed&nbsp;with&nbsp;Stefan&#39;s&nbsp;point,&nbsp;although&nbsp;technically&nbsp;you&nbsp;could&nbsp;implement&nbsp;getByte(),&nbsp;getShort(),&nbsp;et&nbsp;al&nbsp;with&nbsp;a&nbsp;bunch&nbsp;of&nbsp;TypedArray&nbsp;views&nbsp;onto&nbsp;a&nbsp;single&nbsp;ArrayBuffer.&nbsp;But&nbsp;this&nbsp;is&nbsp;really,&nbsp;really&nbsp;ugly,&nbsp;because&nbsp;in&nbsp;the&nbsp;general&nbsp;case&nbsp;you&#39;d&nbsp;need&nbsp;4&nbsp;ByteArrays,&nbsp;2&nbsp;ShortArrays,&nbsp;etc.&nbsp;to&nbsp;deal&nbsp;with&nbsp;arbitrary&nbsp;offsets.&nbsp;It&nbsp;would&nbsp;be&nbsp;much&nbsp;cleaner&nbsp;(and&nbsp;probably&nbsp;a&nbsp;bit&nbsp;more&nbsp;efficient)&nbsp;to&nbsp;implement&nbsp;these&nbsp;getters&nbsp;directly&nbsp;in&nbsp;C++.&nbsp;This&nbsp;is&nbsp;pretty&nbsp;closely&nbsp;analogous&nbsp;to&nbsp;Java&#39;s&nbsp;nio.ByteBuffer&nbsp;interface,&nbsp;though&nbsp;I&nbsp;think&nbsp;it&nbsp;would&nbsp;be&nbsp;better&nbsp;to&nbsp;hoist&nbsp;it&nbsp;out&nbsp;into&nbsp;a&nbsp;separate&nbsp;interface.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As&nbsp;for&nbsp;quantitative&nbsp;data,&nbsp;I&#39;m&nbsp;working&nbsp;on&nbsp;getting&nbsp;some&nbsp;together&nbsp;right&nbsp;now.&nbsp;What&nbsp;I&#39;d&nbsp;like&nbsp;to&nbsp;do&nbsp;(roughly)&nbsp;is&nbsp;to&nbsp;define&nbsp;a&nbsp;mesh&nbsp;format&nbsp;that&nbsp;looks&nbsp;very&nbsp;roughly&nbsp;like&nbsp;this:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Mesh&nbsp;{&lt;/div&gt;<br>
&lt;div&gt;  int&nbsp;nVerts;&lt;/div&gt;&lt;div&gt;  float[]&nbsp;verts;&nbsp;//&nbsp;nVerts&nbsp;*&nbsp;3&lt;/div&gt;&lt;div&gt;  int&nbsp;nFaces;&lt;/div&gt;&lt;div&gt;  int[]&nbsp;triIndices;&nbsp;//&nbsp;Maybe&nbsp;in&nbsp;strips&lt;/div&gt;&lt;div&gt;  //&nbsp;etc&nbsp;for&nbsp;materials&nbsp;and&nbsp;the&nbsp;like&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And&nbsp;implement&nbsp;the&nbsp;fastest&nbsp;Javascript/JSON/whatever&nbsp;implementation&nbsp;for&nbsp;getting&nbsp;one&nbsp;over&nbsp;XHR&nbsp;and&nbsp;loading&nbsp;it&nbsp;into&nbsp;WebGL.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;then&nbsp;plan&nbsp;on&nbsp;doing&nbsp;the&nbsp;equivalent&nbsp;with&nbsp;TypedArrays&nbsp;coming&nbsp;directly&nbsp;from&nbsp;XHR&nbsp;into&nbsp;WebGL&nbsp;without&nbsp;Javascript&nbsp;having&nbsp;to&nbsp;touch&nbsp;every&nbsp;element.&nbsp;I&#39;ve&nbsp;hacked&nbsp;the&nbsp;WebGLArrays&nbsp;into&nbsp;TypedArrays,&nbsp;and&nbsp;implemented&nbsp;{&nbsp;ByteBuffer&nbsp;XMLHttpRequest.resultBuffer&nbsp;}&nbsp;in&nbsp;my&nbsp;local&nbsp;WebKit,&nbsp;which&nbsp;I&nbsp;can&nbsp;then&nbsp;use&nbsp;to&nbsp;compare&nbsp;performance.&nbsp;I&nbsp;strongly&nbsp;suspect&nbsp;that&nbsp;the&nbsp;latter&nbsp;will&nbsp;be&nbsp;enormously&nbsp;faster,&nbsp;but&nbsp;could&nbsp;be&nbsp;proven&nbsp;wrong.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Note&nbsp;that&nbsp;to&nbsp;get&nbsp;reasonable&nbsp;performance&nbsp;in&nbsp;js,&nbsp;without&nbsp;TypedArray,&nbsp;you&nbsp;pretty&nbsp;much&nbsp;*have*&nbsp;to&nbsp;switch&nbsp;to&nbsp;a&nbsp;text&nbsp;format&nbsp;like&nbsp;JSON.&nbsp;You&nbsp;can&nbsp;implement&nbsp;(and&nbsp;we&nbsp;have)&nbsp;parsing&nbsp;of&nbsp;an&nbsp;arbitrary&nbsp;binary&nbsp;data&nbsp;structure&nbsp;in&nbsp;js,&nbsp;but&nbsp;it&#39;s&nbsp;just&nbsp;freakishly&nbsp;slow&nbsp;and&nbsp;memory-inefficient.&lt;/div&gt;<br>
&lt;/div&gt;<br>

</tt>
