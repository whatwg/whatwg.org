<tt>
FYI:&nbsp;as&nbsp;of&nbsp;now,&nbsp;WebKit&nbsp;Workers&nbsp;&#39;close()&#39;&nbsp;behavior&nbsp;is&nbsp;following&nbsp;the&nbsp;results&nbsp;of&nbsp;this&nbsp;thread&nbsp;and&nbsp;is&nbsp;compatible&nbsp;with&nbsp;FF&nbsp;(except&nbsp;we&nbsp;don&#39;t&nbsp;implement&nbsp;close&nbsp;event,&nbsp;as&nbsp;mentioned&nbsp;here).&lt;br&gt;&lt;br&gt;&lt;div&gt;Thanks&nbsp;for&nbsp;clarifications!&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Dmitry&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Fri,&nbsp;Apr&nbsp;16,&nbsp;2010&nbsp;at&nbsp;6:06&nbsp;PM,&nbsp;Ian&nbsp;Hickson&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:ian@hixie.ch&quot;&gt;ian@hixie.ch&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
On&nbsp;Tue,&nbsp;30&nbsp;Mar&nbsp;2010,&nbsp;Jonas&nbsp;Sicking&nbsp;wrote:&lt;br&gt;<br>
&gt;&nbsp;&gt;&lt;br&gt;<br>
&gt;&nbsp;&gt;&nbsp;My&nbsp;understanding&nbsp;was&nbsp;that&nbsp;relying&nbsp;on&nbsp;exceptions&nbsp;for&nbsp;non-exceptional&lt;br&gt;<br>
&gt;&nbsp;&gt;&nbsp;cases&nbsp;is&nbsp;bad&nbsp;API&nbsp;design.&nbsp;Why&nbsp;would&nbsp;it&nbsp;be&nbsp;ok&nbsp;here?&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;I&nbsp;think&nbsp;fallback&nbsp;is&nbsp;to&nbsp;be&nbsp;considered&nbsp;an&nbsp;exceptional&nbsp;case.&nbsp;Especially&nbsp;as&lt;br&gt;<br>
&gt;&nbsp;time&nbsp;goes&nbsp;on&nbsp;and&nbsp;more&nbsp;browsers&nbsp;implement&nbsp;support&nbsp;for&nbsp;the&nbsp;new&nbsp;type.&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;&gt;&nbsp;The&nbsp;question&nbsp;is,&nbsp;what&nbsp;are&nbsp;the&nbsp;actual&nbsp;concrete&nbsp;cases&nbsp;where&nbsp;people&nbsp;will&lt;br&gt;<br>
&gt;&nbsp;&gt;&nbsp;be&nbsp;sending&nbsp;DOM&nbsp;nodes?&nbsp;Without&nbsp;concrete&nbsp;cases,&nbsp;it&#39;s&nbsp;easy&nbsp;to&nbsp;construct&lt;br&gt;<br>
&gt;&nbsp;&gt;&nbsp;artificial&nbsp;cases&nbsp;that&nbsp;prove&nbsp;this&nbsp;to&nbsp;be&nbsp;better&nbsp;one&nbsp;way&nbsp;or&nbsp;the&nbsp;other.&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;Say&nbsp;sending&nbsp;a&nbsp;DOM&nbsp;that&nbsp;the&nbsp;user&nbsp;has&nbsp;edited&nbsp;(using&nbsp;contentEditable)&nbsp;which&lt;br&gt;<br>
&gt;&nbsp;the&nbsp;worker&nbsp;will&nbsp;convert&nbsp;into&nbsp;a&nbsp;ODF&nbsp;document&nbsp;and&nbsp;send&nbsp;to&nbsp;the&nbsp;server.&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;&gt;&gt;&nbsp;Personally,&nbsp;I&nbsp;think&nbsp;throwing&nbsp;an&nbsp;exception&nbsp;fits&nbsp;in&nbsp;with&nbsp;the&nbsp;spec&#39;s&nbsp;use&lt;br&gt;<br>
&gt;&nbsp;&gt;&gt;&nbsp;of&nbsp;them&nbsp;elsewhere&nbsp;(i.e.,&nbsp;cross-document&nbsp;and&nbsp;web&nbsp;workers.)&lt;br&gt;<br>
&gt;&nbsp;&gt;&lt;br&gt;<br>
&gt;&nbsp;&gt;&nbsp;Where&nbsp;do&nbsp;we&nbsp;use&nbsp;exceptions&nbsp;for&nbsp;extension&nbsp;points&nbsp;in&nbsp;a&nbsp;similar&nbsp;way?&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;For&nbsp;circular&nbsp;object&nbsp;graphs&nbsp;in&nbsp;the&nbsp;very&nbsp;same&nbsp;algorithms.&lt;br&gt;<br>
&lt;br&gt;<br>
On&nbsp;Thu,&nbsp;1&nbsp;Apr&nbsp;2010,&nbsp;Simon&nbsp;Pieters&nbsp;wrote:&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;It&nbsp;does&nbsp;matter&nbsp;because&nbsp;if&nbsp;you&nbsp;send&nbsp;null,&nbsp;the&nbsp;worker&nbsp;has&nbsp;to&nbsp;respond&nbsp;that&lt;br&gt;<br>
&gt;&nbsp;it&nbsp;got&nbsp;null&nbsp;so&nbsp;the&nbsp;script&nbsp;can&nbsp;do&nbsp;what&nbsp;it&nbsp;wants&nbsp;on&nbsp;the&nbsp;main&nbsp;thread,&nbsp;which&lt;br&gt;<br>
&gt;&nbsp;makes&nbsp;the&nbsp;operation&nbsp;async&nbsp;and&nbsp;means&nbsp;the&nbsp;worker&nbsp;script&nbsp;needs&nbsp;logic&nbsp;for&lt;br&gt;<br>
&gt;&nbsp;the&nbsp;non-supported&nbsp;case.&nbsp;It&#39;s&nbsp;more&nbsp;convenient&nbsp;to&nbsp;catch&nbsp;an&nbsp;exception&nbsp;and&lt;br&gt;<br>
&gt;&nbsp;do&nbsp;what&nbsp;you&nbsp;want&nbsp;directly,&nbsp;and&nbsp;have&nbsp;the&nbsp;worker&nbsp;script&nbsp;only&nbsp;care&nbsp;about&lt;br&gt;<br>
&gt;&nbsp;the&nbsp;supported&nbsp;case.&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;This&nbsp;is&nbsp;actually&nbsp;the&nbsp;exact&nbsp;same&nbsp;problem&nbsp;as&nbsp;what&nbsp;we&nbsp;have&nbsp;now,&nbsp;moving&nbsp;from&lt;br&gt;<br>
&gt;&nbsp;string&nbsp;based&nbsp;to&nbsp;structured&nbsp;clone.&nbsp;In&nbsp;order&nbsp;to&nbsp;test&nbsp;structured&nbsp;clone&lt;br&gt;<br>
&gt;&nbsp;support,&nbsp;you&nbsp;have&nbsp;to&nbsp;send&nbsp;a&nbsp;message&nbsp;back&nbsp;and&nbsp;forth.&nbsp;I&nbsp;think&nbsp;it&nbsp;would&lt;br&gt;<br>
&gt;&nbsp;have&nbsp;been&nbsp;better&nbsp;if&nbsp;non-strings&nbsp;threw&nbsp;an&nbsp;exception&nbsp;from&nbsp;the&nbsp;start,&nbsp;but&lt;br&gt;<br>
&gt;&nbsp;it&#39;s&nbsp;too&nbsp;late&nbsp;to&nbsp;change&nbsp;it&nbsp;now.&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;A&nbsp;use&nbsp;case&nbsp;I&nbsp;had&nbsp;with&nbsp;structured&nbsp;clone&nbsp;is&nbsp;posting&nbsp;three&nbsp;ImageData&lt;br&gt;<br>
&gt;&nbsp;objects&nbsp;where&nbsp;the&nbsp;worker&nbsp;compares&nbsp;the&nbsp;pixels&nbsp;of&nbsp;two&nbsp;of&nbsp;them&nbsp;and&nbsp;puts&nbsp;the&lt;br&gt;<br>
&gt;&nbsp;difference&nbsp;on&nbsp;the&nbsp;third&nbsp;and&nbsp;posts&nbsp;that&nbsp;one&nbsp;back.&nbsp;I&nbsp;do&nbsp;it&nbsp;in&nbsp;a&nbsp;worker&lt;br&gt;<br>
&gt;&nbsp;because&nbsp;it&#39;s&nbsp;a&nbsp;heavy&nbsp;operation&nbsp;for&nbsp;big&nbsp;images&nbsp;and&nbsp;I&nbsp;needed&nbsp;to&nbsp;keep&nbsp;the&lt;br&gt;<br>
&gt;&nbsp;timing&nbsp;correct&nbsp;for&nbsp;events&nbsp;in&nbsp;the&nbsp;main&nbsp;thread.&nbsp;If&nbsp;workers&nbsp;isn&#39;t&lt;br&gt;<br>
&gt;&nbsp;supported,&nbsp;I&nbsp;did&nbsp;the&nbsp;operation&nbsp;later&nbsp;when&nbsp;the&nbsp;timing&nbsp;of&nbsp;events&nbsp;didn&#39;t&lt;br&gt;<br>
&gt;&nbsp;matter.&nbsp;I&nbsp;didn&#39;t&nbsp;make&nbsp;it&nbsp;detect&nbsp;support&nbsp;for&nbsp;workers&nbsp;but&nbsp;lack&nbsp;of&lt;br&gt;<br>
&gt;&nbsp;structured&nbsp;clone&nbsp;because&nbsp;it&nbsp;seemed&nbsp;too&nbsp;annoying&nbsp;to&nbsp;implement.&lt;br&gt;<br>
&lt;br&gt;<br>
Fair&nbsp;enough.&nbsp;I&#39;ve&nbsp;changed&nbsp;the&nbsp;cloning&nbsp;mechanism&nbsp;to&nbsp;throw&nbsp;an&nbsp;exception&lt;br&gt;<br>
instead&nbsp;of&nbsp;nulling&nbsp;host&nbsp;objects.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
On&nbsp;Tue,&nbsp;30&nbsp;Mar&nbsp;2010,&nbsp;Dmitry&nbsp;Titov&nbsp;wrote:&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;[...]&nbsp;close()&nbsp;method&nbsp;on&nbsp;WorkerGlobalScope.&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;In&nbsp;particular,&nbsp;the&nbsp;spec&nbsp;seems&nbsp;to&nbsp;imply&nbsp;that&nbsp;after&nbsp;calling&nbsp;close()&nbsp;inside&lt;br&gt;<br>
&gt;&nbsp;the&nbsp;worker,&nbsp;the&nbsp;JS&nbsp;does&nbsp;not&nbsp;get&nbsp;terminated&nbsp;right&nbsp;away,&nbsp;but&nbsp;rather&lt;br&gt;<br>
&gt;&nbsp;continues&nbsp;to&nbsp;execute,&nbsp;while&nbsp;an&nbsp;internal&nbsp;&#39;closing&#39;&nbsp;flag&nbsp;is&nbsp;set&nbsp;and&nbsp;a&lt;br&gt;<br>
&gt;&nbsp;message&nbsp;queue&nbsp;associated&nbsp;with&nbsp;the&nbsp;worker&nbsp;discards&nbsp;all&nbsp;the&nbsp;tasks,&lt;br&gt;<br>
&gt;&nbsp;existing&nbsp;and&nbsp;future.&nbsp;Also,&nbsp;all&nbsp;ports&nbsp;are&nbsp;immediately&nbsp;disentangled.&lt;br&gt;<br>
&lt;br&gt;<br>
I&#39;ve&nbsp;changed&nbsp;the&nbsp;spec&nbsp;based&nbsp;no&nbsp;the&nbsp;feedback&nbsp;below&nbsp;so&nbsp;that&nbsp;the&nbsp;ports&nbsp;are&nbsp;no&lt;br&gt;<br>
longer&nbsp;disentangled&nbsp;upon&nbsp;calling&nbsp;close().&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&gt;&nbsp;This&nbsp;seems&nbsp;to&nbsp;leave&nbsp;some&nbsp;questions&nbsp;without&nbsp;explicit&nbsp;answer,&nbsp;with&lt;br&gt;<br>
&gt;&nbsp;differences&nbsp;in&nbsp;current&nbsp;implementations:&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;1.&nbsp;Does&nbsp;this&nbsp;code&nbsp;in&nbsp;a&nbsp;worker&nbsp;continues&nbsp;looping&nbsp;until&nbsp;the&nbsp;parent&nbsp;page&lt;br&gt;<br>
&gt;&nbsp;unloads:&lt;br&gt;<br>
&gt;&nbsp; ...&lt;br&gt;<br>
&gt;&nbsp; close();&lt;br&gt;<br>
&gt;&nbsp; while(true)&nbsp;{}&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;WebKit&nbsp;V8&nbsp;terminates,&nbsp;WebKit&nbsp;JCS&nbsp;terminates&nbsp;after&nbsp;a&nbsp;timeout,&nbsp;FF&nbsp;does&nbsp;not&lt;br&gt;<br>
&gt;&nbsp;terminate.&lt;br&gt;<br>
&lt;br&gt;<br>
FF&nbsp;is&nbsp;correct.&nbsp;The&nbsp;WebKits&nbsp;are&nbsp;not&nbsp;non-conforming,&nbsp;though,&nbsp;since&nbsp;you&#39;re&lt;br&gt;<br>
basically&nbsp;allowed&nbsp;to&nbsp;kill&nbsp;workers&nbsp;whenver.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&gt;&nbsp;2.&nbsp;Do&nbsp;the&nbsp;errors&nbsp;propagate&nbsp;back&nbsp;to&nbsp;Worker&nbsp;object&nbsp;after&nbsp;close()?&lt;br&gt;<br>
&gt;&nbsp;...&lt;br&gt;<br>
&gt;&nbsp;close();&lt;br&gt;<br>
&gt;&nbsp;nonExistingFunction();&nbsp; &lt;&lt;--&nbsp;throws,&nbsp;if&nbsp;not&nbsp;processed&nbsp;locally,&nbsp;posts&nbsp;error&lt;br&gt;<br>
&gt;&nbsp;info&nbsp;to&nbsp;the&nbsp;Worker&nbsp;object.&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;In&nbsp;WebKit&nbsp;and&nbsp;FF&nbsp;errors&nbsp;propagate,&nbsp;although&nbsp;it&nbsp;does&nbsp;not&nbsp;seem&nbsp;consistent&lt;br&gt;<br>
&gt;&nbsp;while&nbsp;worker&nbsp;closed&nbsp;all&nbsp;the&nbsp;ports&nbsp;and&nbsp;is&nbsp;in&nbsp;a&nbsp;dormant&nbsp;state.&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;spec&nbsp;seems&nbsp;clear&nbsp;that&nbsp;close()&nbsp;has&nbsp;no&nbsp;effect&nbsp;on&nbsp;error&nbsp;propagation.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&gt;&nbsp;3.&nbsp;Should&nbsp;synchronous&nbsp;operations&nbsp;work&nbsp;after&nbsp;close()?&nbsp;Asynchronous&nbsp;ones&lt;br&gt;<br>
&gt;&nbsp;perhaps&nbsp;should&nbsp;not,&nbsp;because&nbsp;of&nbsp;the&nbsp;event&nbsp;loop&nbsp;queue&nbsp;which&nbsp;is&nbsp;stopped...&lt;br&gt;<br>
&gt;&nbsp;...&lt;br&gt;<br>
&gt;&nbsp;close();&lt;br&gt;<br>
&gt;&nbsp;xhr.open(&quot;GET&quot;,&nbsp;&quot;&lt;a&nbsp;href=&quot;http://foo.com&quot;&nbsp;target=&quot;_blank&quot;&gt;foo.com&lt;/a&gt;&quot;,&nbsp;*false*);&lt;br&gt;<br>
&gt;&nbsp;xhr.send();&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;WebKit:&nbsp;does&nbsp;not&nbsp;work&nbsp;(mostly),&nbsp;FF&nbsp;-&nbsp;does&nbsp;work.&lt;br&gt;<br>
&lt;br&gt;<br>
Anything&nbsp;depending&nbsp;on&nbsp;tasks&nbsp;doesn&#39;t&nbsp;work.&nbsp;Sync&nbsp;XHR&nbsp;doesn&#39;t&nbsp;seem&nbsp;to&nbsp;use&nbsp;the&lt;br&gt;<br>
event&nbsp;loop&nbsp;mechanism,&nbsp;so&nbsp;it&#39;s&nbsp;ok.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&gt;&nbsp;Perhaps&nbsp;it&nbsp;would&nbsp;be&nbsp;simpler&nbsp;to&nbsp;either&nbsp;say&nbsp;nothing&nbsp;is&nbsp;executed/posted/fired&lt;br&gt;<br>
&gt;&nbsp;after&nbsp;close()&nbsp;(immediate&nbsp;termination),&nbsp;or&nbsp;to&nbsp;enable&nbsp;worker&nbsp;run&nbsp;unimpeded&lt;br&gt;<br>
&gt;&nbsp;(with&nbsp;ports&nbsp;open,&nbsp;etc)&nbsp;until&nbsp;it&nbsp;naturally&nbsp;yields&nbsp;from&nbsp;JS.&lt;br&gt;<br>
&lt;br&gt;<br>
I&#39;ve&nbsp;gone&nbsp;with&nbsp;the&nbsp;latter.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
On&nbsp;Tue,&nbsp;30&nbsp;Mar&nbsp;2010,&nbsp;Drew&nbsp;Wilson&nbsp;wrote:&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;I&#39;ll&nbsp;note&nbsp;that&nbsp;the&nbsp;spec&nbsp;gives&nbsp;the&nbsp;UA&nbsp;an&nbsp;significant&nbsp;amount&nbsp;of&nbsp;latitude&lt;br&gt;<br>
&gt;&nbsp;about&nbsp;its&nbsp;behavior&nbsp;after&nbsp;close()&nbsp;is&nbsp;called:&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;User&nbsp;agents&nbsp;may&nbsp;invoke&nbsp;the&nbsp;&quot;kill&nbsp;a&nbsp;worker&nbsp;&lt;#kill-a-worker&gt;&quot;&nbsp;processing&lt;br&gt;<br>
&gt;&nbsp;model&nbsp;on&nbsp;a&nbsp;worker&nbsp;at&nbsp;any&nbsp;time,&nbsp;e.g.&nbsp;in&nbsp;response&nbsp;to&nbsp;user&nbsp;requests,&nbsp;in&lt;br&gt;<br>
&gt;&nbsp;response&nbsp;to&nbsp;CPU&nbsp;quota&nbsp;management,&nbsp;or&nbsp;when&nbsp;a&nbsp;worker&nbsp;stops&nbsp;being&nbsp;an&nbsp;active&lt;br&gt;<br>
&gt;&nbsp;needed&nbsp;worker&lt;#active-needed-worker&gt;&nbsp;if&nbsp;the&nbsp;worker&nbsp;continues&nbsp;executing&lt;br&gt;<br>
&gt;&nbsp;even&nbsp;after&nbsp;its&nbsp;closing&lt;#dom-workerglobalscope-closing&gt;&nbsp;flag&nbsp;was&nbsp;set&nbsp;to&lt;br&gt;<br>
&gt;&nbsp;true.&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;Essentially,&nbsp;UAs&nbsp;can&nbsp;kill&nbsp;a&nbsp;worker&nbsp;at&nbsp;any&nbsp;time,&nbsp;and&nbsp;since&nbsp;the&nbsp;&quot;kill&nbsp;a&lt;br&gt;<br>
&gt;&nbsp;worker&quot;&nbsp;algorithm&nbsp;allows&nbsp;UAs&nbsp;to&nbsp;abort&nbsp;the&nbsp;script&nbsp;after&nbsp;a&lt;br&gt;<br>
&gt;&nbsp;user-agent-defined&nbsp;amount&nbsp;of&nbsp;time&nbsp;(including&nbsp;zero),&nbsp;it&nbsp;seems&nbsp;like&nbsp;almost&lt;br&gt;<br>
&gt;&nbsp;any&nbsp;behavior&nbsp;post-close&nbsp;is&nbsp;compliant.&nbsp;This&nbsp;seems&nbsp;like&nbsp;a&nbsp;guaranteed&lt;br&gt;<br>
&gt;&nbsp;source&nbsp;of&nbsp;cross-browser&nbsp;incompatibilities.&lt;br&gt;<br>
&lt;br&gt;<br>
It&nbsp;also&nbsp;allows&nbsp;killing&nbsp;scripts&nbsp;pre-close.&nbsp;We&nbsp;don&#39;t&nbsp;really&nbsp;have&nbsp;much&nbsp;choice&lt;br&gt;<br>
here;&nbsp;browsers&nbsp;need&nbsp;to&nbsp;be&nbsp;able&nbsp;to&nbsp;terminate&nbsp;any&nbsp;malware&nbsp;or&nbsp;runaway&lt;br&gt;<br>
process&nbsp;at&nbsp;their&nbsp;whim,&nbsp;basically.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&gt;&nbsp;I&#39;ve&nbsp;always&nbsp;operated&nbsp;under&nbsp;the&nbsp;impression&nbsp;that&nbsp;the&nbsp;intent&nbsp;of&nbsp;the&nbsp;spec&nbsp;is&lt;br&gt;<br>
&gt;&nbsp;to&nbsp;allow&nbsp;pending&nbsp;worker&nbsp;operations&nbsp;to&nbsp;complete,&nbsp;but&nbsp;still&nbsp;give&nbsp;UAs&nbsp;the&lt;br&gt;<br>
&gt;&nbsp;ability&nbsp;to&nbsp;abort&nbsp;scripts&nbsp;that&nbsp;don&#39;t&nbsp;exit&nbsp;in&nbsp;a&nbsp;timely&nbsp;manner&nbsp;(so&nbsp;close()&lt;br&gt;<br>
&gt;&nbsp;should&nbsp;not&nbsp;immediately&nbsp;abort&nbsp;the&nbsp;script),&nbsp;but&nbsp;I&nbsp;don&#39;t&nbsp;see&nbsp;anything&nbsp;in&lt;br&gt;<br>
&gt;&nbsp;the&nbsp;spec&nbsp;regarding&nbsp;this.&lt;br&gt;<br>
&lt;br&gt;<br>
This&nbsp;is&nbsp;what&nbsp;the&nbsp;spec&nbsp;now&nbsp;requires,&nbsp;modulo&nbsp;UAs&nbsp;being&nbsp;allowed&nbsp;to&nbsp;bail&nbsp;on&lt;br&gt;<br>
worker&nbsp;scripts&nbsp;at&nbsp;any&nbsp;time.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&gt;&nbsp;For&nbsp;#2&nbsp;[above],&nbsp;I&nbsp;believe&nbsp;that&nbsp;exceptions&nbsp;in&nbsp;worker&nbsp;context&nbsp;should&lt;br&gt;<br>
&gt;&nbsp;*always*&nbsp;be&nbsp;reported,&nbsp;regardless&nbsp;of&nbsp;closing&nbsp;state.&nbsp;Section&nbsp;4.6&nbsp;(Runtime&lt;br&gt;<br>
&gt;&nbsp;script&nbsp;errors)&nbsp;makes&nbsp;no&nbsp;mention&nbsp;of&nbsp;tying&nbsp;this&nbsp;behavior&nbsp;to&nbsp;the&nbsp;closing&lt;br&gt;<br>
&gt;&nbsp;flag.&lt;br&gt;<br>
&lt;br&gt;<br>
Indeed.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
On&nbsp;Tue,&nbsp;30&nbsp;Mar&nbsp;2010,&nbsp;Dmitry&nbsp;Titov&nbsp;wrote:&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;But&nbsp;if&nbsp;we&nbsp;say&nbsp;close()&nbsp;lets&nbsp;script&nbsp;run&nbsp;until&nbsp;completion&nbsp;(but&nbsp;prevents&lt;br&gt;<br>
&gt;&nbsp;further&nbsp;messages/events&nbsp;from&nbsp;dispatching),&nbsp;then&nbsp;perhaps&nbsp;we&nbsp;don&#39;t&nbsp;need&nbsp;it&lt;br&gt;<br>
&gt;&nbsp;at&nbsp;all&nbsp;-&nbsp;there&nbsp;is&nbsp;nothing&nbsp;then&nbsp;that&nbsp;script&nbsp;in&nbsp;the&nbsp;worker&nbsp;can&nbsp;not&nbsp;do&nbsp;to&lt;br&gt;<br>
&gt;&nbsp;the&nbsp;same&nbsp;effect&nbsp;(unregister&nbsp;onmessage,&nbsp;clear&nbsp;timers&nbsp;etc).&lt;br&gt;<br>
&lt;br&gt;<br>
It&nbsp;can&nbsp;be&nbsp;a&nbsp;lot&nbsp;harder&nbsp;to&nbsp;actually&nbsp;find&nbsp;all&nbsp;the&nbsp;various&nbsp;things&nbsp;that&nbsp;are&lt;br&gt;<br>
keeping&nbsp;a&nbsp;worker&nbsp;alive&nbsp;than&nbsp;just&nbsp;to&nbsp;call&nbsp;close().&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&gt;&nbsp;That&nbsp;means&nbsp;letting&nbsp;worker&nbsp;to&nbsp;call&nbsp;close()&nbsp;on&nbsp;itself&nbsp;only&nbsp;makes&lt;br&gt;<br>
&gt;&nbsp;additional&nbsp;sense&nbsp;if&nbsp;it&nbsp;is&nbsp;specified&nbsp;as&nbsp;immediate&nbsp;termination.&nbsp;It&nbsp;could&lt;br&gt;<br>
&gt;&nbsp;be&nbsp;useful&nbsp;and&nbsp;it&nbsp;can&nbsp;be&nbsp;specified&nbsp;in&nbsp;deterministic&nbsp;manner.&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;agree&nbsp;that&nbsp;immediate&nbsp;termination&nbsp;might&nbsp;also&nbsp;be&nbsp;useful,&nbsp;but&nbsp;if&nbsp;that&#39;s&lt;br&gt;<br>
what&nbsp;you&nbsp;want,&nbsp;just&nbsp;don&#39;t&nbsp;do&nbsp;anything&nbsp;after&nbsp;calling&nbsp;close().&nbsp;:-)&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
On&nbsp;Thu,&nbsp;1&nbsp;Apr&nbsp;2010,&nbsp;Jonas&nbsp;Sicking&nbsp;wrote:&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;The&nbsp;one&nbsp;thing&nbsp;that&nbsp;we&nbsp;do&nbsp;and&nbsp;that&nbsp;is&nbsp;somewhat&nbsp;iffy&nbsp;is&nbsp;the&nbsp;close&nbsp;event.&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;close&nbsp;event&nbsp;is&nbsp;no&nbsp;longer&nbsp;in&nbsp;the&nbsp;spec,&nbsp;so&nbsp;at&nbsp;this&nbsp;point&nbsp;it&#39;s&nbsp;a&nbsp;Firefox&lt;br&gt;<br>
proprietary&nbsp;feature.&nbsp;:-)&nbsp;We&nbsp;removed&nbsp;it&nbsp;to&nbsp;prevent&nbsp;exposing&nbsp;GC&nbsp;behaviour,&lt;br&gt;<br>
because&nbsp;otherwise&nbsp;if&nbsp;pages&nbsp;start&nbsp;depending&nbsp;on&nbsp;one&nbsp;particular&nbsp;behaviour,&lt;br&gt;<br>
we&#39;ll&nbsp;have&nbsp;accidentally&nbsp;forced&nbsp;the&nbsp;GC&nbsp;rules&nbsp;into&nbsp;the&nbsp;platform,&nbsp;which&lt;br&gt;<br>
seems&nbsp;like&nbsp;an&nbsp;incredibly&nbsp;bad&nbsp;idea.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&gt;&nbsp;[...]&nbsp;it&nbsp;exposes&nbsp;GC&nbsp;behavior.&nbsp;This&nbsp;is&nbsp;very&nbsp;unfortunate&nbsp;indeed&nbsp;and&lt;br&gt;<br>
&gt;&nbsp;because&nbsp;of&nbsp;it&nbsp;I&nbsp;feel&nbsp;that&nbsp;our&nbsp;implementation&nbsp;is&nbsp;somewhat&nbsp;experimental.&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;would&nbsp;recommend&nbsp;dropping&nbsp;the&nbsp;&#39;close&#39;&nbsp;event&nbsp;for&nbsp;this&nbsp;reason.&lt;br&gt;<br>
&lt;font&nbsp;color=&quot;#888888&quot;&gt;&lt;br&gt;<br>
--&lt;br&gt;<br>
Ian&nbsp;Hickson&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;U+1047E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\._.,--....,&#39;``.&nbsp; &nbsp; fL&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;http://ln.hixie.ch/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://ln.hixie.ch/&lt;/a&gt;&nbsp; &nbsp; &nbsp; &nbsp;U+263A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /,&nbsp; &nbsp;_..&nbsp;\&nbsp; &nbsp;_\&nbsp; ;`._&nbsp;,.&lt;br&gt;<br>
Things&nbsp;that&nbsp;are&nbsp;impossible&nbsp;just&nbsp;take&nbsp;longer.&nbsp; &nbsp;`._.-(,_..&#39;--(,_..&#39;`-.;.&#39;&lt;br&gt;<br>
&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;<br>

</tt>
