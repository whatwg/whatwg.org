<tt>
On&nbsp;Sat,&nbsp;Aug&nbsp;8,&nbsp;2009&nbsp;at&nbsp;10:46&nbsp;PM,&nbsp;Adam&nbsp;Barth&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&amp;lt;&lt;a&nbsp;href=&quot;mailto:whatwg@adambarth.com&quot;&gt;whatwg@adambarth.com&lt;/a&gt;&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
In&nbsp;IRC,&nbsp;Ian&nbsp;asked&nbsp;me&nbsp;to&nbsp;investigate&nbsp;a&nbsp;security&nbsp;issue&nbsp;involving&lt;br&gt;<br>
redirects&nbsp;and&nbsp;the&nbsp;websocket&nbsp;protocol.&nbsp; In&nbsp;particular,&nbsp;he&amp;#39;s&nbsp;worried&lt;br&gt;<br>
about&nbsp;the&nbsp;following&nbsp;scenario:&lt;br&gt;<br>
&lt;br&gt;<br>
1)&nbsp;A&nbsp;trustworthy&nbsp;web&nbsp;site,&nbsp;&lt;a&nbsp;href=&quot;http://example.com&quot;&nbsp;target=&quot;_blank&quot;&gt;example.com&lt;/a&gt;,&nbsp;wants&nbsp;to&nbsp;send&nbsp;the&nbsp;string&lt;br&gt;<br>
&amp;quot;DELETE&amp;quot;&nbsp;over&nbsp;a&nbsp;web&nbsp;socket&nbsp;an&nbsp;malicious&nbsp;server,&nbsp;&lt;a&nbsp;href=&quot;http://attacker.com&quot;&nbsp;target=&quot;_blank&quot;&gt;attacker.com&lt;/a&gt;.&lt;br&gt;<br>
2)&nbsp;A&nbsp;victim&nbsp;server&nbsp;behind&nbsp;a&nbsp;firewall,&nbsp;&lt;a&nbsp;href=&quot;http://corp.victim.com&quot;&nbsp;target=&quot;_blank&quot;&gt;corp.victim.com&lt;/a&gt;,&nbsp;deletes&nbsp;an&nbsp;item&lt;br&gt;<br>
specified&nbsp;by&nbsp;a&nbsp;path&nbsp;when&nbsp;it&nbsp;receives&nbsp;the&nbsp;string&nbsp;&amp;quot;DELETE&amp;quot;&nbsp;over&nbsp;a&nbsp;web&lt;br&gt;<br>
socket&nbsp;that:&lt;br&gt;<br>
&nbsp; A)&nbsp;comes&nbsp;from&nbsp;a&nbsp;trusted&nbsp;IP&nbsp;address&nbsp;(e.g.,&nbsp;one&nbsp;behind&nbsp;the&nbsp;firewall)&nbsp;and&lt;br&gt;<br>
&nbsp; B)&nbsp;implicates&nbsp;a&nbsp;trust-worthy&nbsp;origin&nbsp;in&nbsp;the&nbsp;Origin&nbsp;header&nbsp;(e.g.,&nbsp;example).&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;attack&nbsp;proceeds&nbsp;as&nbsp;follows:&lt;br&gt;<br>
&lt;br&gt;<br>
1)&nbsp;A&nbsp;user&nbsp;behind&nbsp;the&nbsp;firewall&nbsp;visits&nbsp;&lt;a&nbsp;href=&quot;http://example.com&quot;&nbsp;target=&quot;_blank&quot;&gt;example.com&lt;/a&gt;.&lt;br&gt;<br>
2)&nbsp;&lt;a&nbsp;href=&quot;http://example.com&quot;&nbsp;target=&quot;_blank&quot;&gt;example.com&lt;/a&gt;&nbsp;attempts&nbsp;to&nbsp;establish&nbsp;a&nbsp;websocket&nbsp;with&nbsp;&lt;a&nbsp;href=&quot;http://attacker.com&quot;&nbsp;target=&quot;_blank&quot;&gt;attacker.com&lt;/a&gt;.&lt;br&gt;<br>
3)&nbsp;&lt;a&nbsp;href=&quot;http://attacker.com&quot;&nbsp;target=&quot;_blank&quot;&gt;attacker.com&lt;/a&gt;&nbsp;redirects&nbsp;the&nbsp;socket&nbsp;to&nbsp;&lt;a&nbsp;href=&quot;http://corp.victim.com&quot;&nbsp;target=&quot;_blank&quot;&gt;corp.victim.com&lt;/a&gt;.&lt;br&gt;<br>
4)&nbsp;&lt;a&nbsp;href=&quot;http://example.com&quot;&nbsp;target=&quot;_blank&quot;&gt;example.com&lt;/a&gt;&nbsp;sends&nbsp;the&nbsp;string&nbsp;&amp;quot;DELETE&amp;quot;&nbsp;to&nbsp;&lt;a&nbsp;href=&quot;http://corp.victim.com&quot;&nbsp;target=&quot;_blank&quot;&gt;corp.victim.com&lt;/a&gt;.&lt;br&gt;<br>
5)&nbsp;&lt;a&nbsp;href=&quot;http://corp.victim.com&quot;&nbsp;target=&quot;_blank&quot;&gt;corp.victim.com&lt;/a&gt;&nbsp;delete&nbsp;a&nbsp;file&nbsp;of&nbsp;the&nbsp;attacker&amp;#39;s&nbsp;choice.&lt;br&gt;<br>
&lt;br&gt;<br>
In&nbsp;fact,&nbsp;the&nbsp;situation&nbsp;is&nbsp;worse&nbsp;than&nbsp;the&nbsp;above&nbsp;because&nbsp;the&nbsp;websocket&lt;br&gt;<br>
protocol&nbsp;supports&nbsp;cookies.&nbsp; Instead&nbsp;of&nbsp;relying&nbsp;on&nbsp;a&nbsp;firewall&nbsp;and&nbsp;IP&lt;br&gt;<br>
authentication,&nbsp;the&nbsp;victim&nbsp;server&nbsp;could&nbsp;be&nbsp;on&nbsp;the&nbsp;public&nbsp;Internet&nbsp;and&lt;br&gt;<br>
be&nbsp;relying&nbsp;upon&nbsp;cookie&nbsp;authentication.&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;think&nbsp;there&nbsp;are&nbsp;a&nbsp;number&nbsp;of&nbsp;ways&nbsp;of&nbsp;resolving&nbsp;this&nbsp;issue:&lt;br&gt;<br>
&lt;br&gt;<br>
1)&nbsp;We&nbsp;could&nbsp;use&nbsp;Sec-From&nbsp;instead&nbsp;of&nbsp;Origin&nbsp;because&nbsp;Sec-From&nbsp;implicates&lt;br&gt;<br>
the&nbsp;full&nbsp;redirect&nbsp;chain&nbsp;instead&nbsp;of&nbsp;just&nbsp;the&nbsp;origin&nbsp;that&nbsp;initiated&nbsp;the&lt;br&gt;<br>
request.&nbsp; On&nbsp;IRC,&nbsp;Ian&nbsp;said&nbsp;he&nbsp;doesn&amp;#39;t&nbsp;like&nbsp;this&nbsp;choice&nbsp;because&nbsp;servers&lt;br&gt;<br>
might&nbsp;not&nbsp;validate&nbsp;this&nbsp;header&nbsp;properly.&lt;br&gt;<br>
&lt;br&gt;<br>
2)&nbsp;Instead&nbsp;of&nbsp;handling&nbsp;the&nbsp;redirect&nbsp;inside&nbsp;the&nbsp;websocket&nbsp;protocol,&nbsp;we&lt;br&gt;<br>
can&nbsp;report&nbsp;the&nbsp;redirect&nbsp;back&nbsp;to&nbsp;the&nbsp;web&nbsp;site&nbsp;making&nbsp;the&nbsp;request&nbsp;(in&lt;br&gt;<br>
this&nbsp;case&nbsp;&lt;a&nbsp;href=&quot;http://example.com&quot;&nbsp;target=&quot;_blank&quot;&gt;example.com&lt;/a&gt;).&nbsp; Then&nbsp;the&nbsp;trustworthy&nbsp;web&nbsp;site&nbsp;would&nbsp;then&nbsp;have&lt;br&gt;<br>
the&nbsp;option&nbsp;of&nbsp;following&nbsp;or&nbsp;not&nbsp;following&nbsp;the&nbsp;redirect.&nbsp; If&nbsp;we&nbsp;did&lt;br&gt;<br>
this,&nbsp;we&nbsp;would&nbsp;have&nbsp;to&nbsp;ensure&nbsp;that&nbsp;the&nbsp;redirecting&nbsp;server&nbsp;understands&lt;br&gt;<br>
the&nbsp;websocket&nbsp;protocol&nbsp;(probably&nbsp;by&nbsp;requiring&nbsp;it&nbsp;to&nbsp;send&lt;br&gt;<br>
WebSocket-Origin&nbsp;or&nbsp;some&nbsp;such)&nbsp;to&nbsp;avoid&nbsp;leaking&nbsp;the&nbsp;targets&nbsp;of&lt;br&gt;<br>
already-existing&nbsp;redirects.&nbsp; Also,&nbsp;it&amp;#39;s&nbsp;unclear&nbsp;on&nbsp;what&nbsp;basis&nbsp;the&nbsp;web&lt;br&gt;<br>
site&nbsp;would&nbsp;decide&nbsp;whether&nbsp;to&nbsp;follow&nbsp;the&nbsp;redirect.&lt;br&gt;<br>
&lt;br&gt;<br>
3)&nbsp;We&nbsp;could&nbsp;restrict&nbsp;redirects&nbsp;to&nbsp;the&nbsp;same&nbsp;origin.&nbsp; This&nbsp;has&nbsp;the&lt;br&gt;<br>
disadvantage&nbsp;of&nbsp;not&nbsp;covering&nbsp;the&nbsp;full&nbsp;use&nbsp;case&nbsp;of&nbsp;redirects.&lt;br&gt;<br>
&lt;br&gt;<br>
4)&nbsp;We&nbsp;could&nbsp;remove&nbsp;support&nbsp;for&nbsp;redirects.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;#4.&nbsp; I&nbsp;feel&nbsp;like&nbsp;redirects&nbsp;add&nbsp;unnecessary&nbsp;complexity.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We&amp;#39;re&nbsp;already&nbsp;asking&nbsp;application&nbsp;developers&nbsp;to&nbsp;handle&nbsp;ACKing,&nbsp;keep&nbsp;alives,&nbsp;multi-plexing,&nbsp;connection&nbsp;limiting,&nbsp;authentication,&nbsp;etc&nbsp;themselves.&nbsp; To&nbsp;me,&nbsp;it&nbsp;doesn&amp;#39;t&nbsp;seem&nbsp;like&nbsp;much&nbsp;of&nbsp;an&nbsp;additional&nbsp;burden&nbsp;to&nbsp;ask&nbsp;them&nbsp;to&nbsp;handle&nbsp;redirects.&nbsp; And&nbsp;by&nbsp;keeping&nbsp;the&nbsp;spec&nbsp;simple,&nbsp;I&nbsp;think&nbsp;we&amp;#39;ll&nbsp;increase&nbsp;the&nbsp;chances&nbsp;of&nbsp;quick&nbsp;adoption&nbsp;by&nbsp;UAs,&nbsp;which&nbsp;will&nbsp;speed&nbsp;up&nbsp;the&nbsp;adoption&nbsp;by&nbsp;web&nbsp;apps,&nbsp;which&nbsp;will&nbsp;give&nbsp;us&nbsp;feedback&nbsp;on&nbsp;what&nbsp;features&nbsp;web&nbsp;developers&nbsp;actually&nbsp;want&nbsp;much&nbsp;quicker.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;J&lt;/div&gt;&lt;/div&gt;<br>

</tt>
