<tt>
Mark,&nbsp;I&nbsp;won&#39;t&nbsp;pretend&nbsp;to&nbsp;completely&nbsp;understand&nbsp;the&nbsp;use&nbsp;cases&nbsp;you&#39;re&nbsp;describing&nbsp;as&nbsp;I&#39;m&nbsp;not&nbsp;familiar&nbsp;with&nbsp;the&nbsp;prior&nbsp;work&nbsp;you&#39;ve&nbsp;cited.&nbsp;But&nbsp;my&nbsp;understanding&nbsp;of&nbsp;the&nbsp;postMessage()&nbsp;API&nbsp;is&nbsp;that&nbsp;they&nbsp;are&nbsp;primarily&nbsp;useful&nbsp;for&nbsp;handing&nbsp;off&nbsp;ports&nbsp;to&nbsp;new&nbsp;owners&nbsp;-&nbsp;your&nbsp;idea&nbsp;of&nbsp;a&nbsp;pass-by-copy&nbsp;serialization&nbsp;of&nbsp;a&nbsp;proxy&nbsp;object&nbsp;implies&nbsp;that&nbsp;there&#39;s&nbsp;some&nbsp;way&nbsp;to&nbsp;copy&nbsp;the&nbsp;message&nbsp;port,&nbsp;and&nbsp;pass&nbsp;that&nbsp;along&nbsp;with&nbsp;the&nbsp;proxy&nbsp;to&nbsp;the&nbsp;new&nbsp;owner,&nbsp;which&nbsp;I&nbsp;don&#39;t&nbsp;think&nbsp;is&nbsp;possible&nbsp;in&nbsp;general&nbsp;(you&nbsp;can&nbsp;create&nbsp;a&nbsp;new&nbsp;port&nbsp;as&nbsp;part&nbsp;of&nbsp;a&nbsp;MessageChannel,&nbsp;but&nbsp;you&nbsp;can&#39;t&nbsp;really&nbsp;duplicate&nbsp;an&nbsp;existing&nbsp;port).&lt;br&gt;<br>
&lt;br&gt;I&nbsp;may&nbsp;be&nbsp;misunderstanding&nbsp;the&nbsp;use&nbsp;case&nbsp;that&#39;s&nbsp;driving&nbsp;your&nbsp;proposal,&nbsp;though.&lt;br&gt;&lt;br&gt;-atw&lt;br&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Tue,&nbsp;Mar&nbsp;10,&nbsp;2009&nbsp;at&nbsp;7:01&nbsp;PM,&nbsp;Mark&nbsp;S.&nbsp;Miller&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:erights@google.com&quot;&gt;erights@google.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;padding-left:&nbsp;1ex;&quot;&gt;&lt;div&nbsp;class=&quot;im&quot;&gt;Message&nbsp;2&nbsp;of&nbsp;2,&nbsp;from&lt;br&gt;<br>
&lt;/div&gt;&lt;&lt;a&nbsp;href=&quot;http://lists.w3.org/Archives/Public/public-html-comments/2009Mar/0002.html&quot;&nbsp;target=&quot;_blank&quot;&gt;http://lists.w3.org/Archives/Public/public-html-comments/2009Mar/0002.html&lt;/a&gt;&gt;:&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
To&nbsp;be&nbsp;concrete&nbsp;about&nbsp;it,&nbsp;I&nbsp;am&nbsp;a&nbsp;member&nbsp;of&nbsp;the&nbsp;Caja&nbsp;team,&nbsp;which&nbsp;is&nbsp;building&lt;br&gt;<br>
an&nbsp;object-capability&nbsp;subset&nbsp;of&nbsp;JavaScript&nbsp;by&nbsp;translation&nbsp;to&nbsp;JavaScript.&lt;br&gt;<br>
Currently,&nbsp;Caja&nbsp;brings&nbsp;object-capabilities&nbsp;only&nbsp;to&nbsp;intra-frame&nbsp;programming,&lt;br&gt;<br>
but&nbsp;we&#39;d&nbsp;like&nbsp;to&nbsp;extend&nbsp;to&nbsp;inter-frame,&nbsp;inter-worker,&nbsp;and&nbsp;distributed&lt;br&gt;<br>
programming&nbsp;as&nbsp;well.&nbsp;Caja&nbsp;derives&nbsp;for&nbsp;earlier&nbsp;work&nbsp;on&nbsp;E,&nbsp;a&nbsp;distributed&lt;br&gt;<br>
persistent&nbsp;object-capability&nbsp;programming&nbsp;language&nbsp;based&nbsp;on&nbsp;communicating&lt;br&gt;<br>
event&nbsp;loops&nbsp;with&nbsp;promises.&nbsp;We&nbsp;are&nbsp;currently&nbsp;discussing&nbsp;this&nbsp;concurrency&lt;br&gt;<br>
model&nbsp;on&nbsp;the&nbsp;serverjs&nbsp;list&nbsp;as&nbsp;a&nbsp;proposed&nbsp;concurrency&nbsp;model&nbsp;for&nbsp;server&nbsp;side&lt;br&gt;<br>
JavaScript.&lt;br&gt;<br>
&lt;br&gt;<br>
What&nbsp;Caja&nbsp;does&nbsp;for&nbsp;JavaScript,&nbsp;Joe-E&nbsp;does&nbsp;for&nbsp;Java.&nbsp;Tyler&nbsp;Close&#39;s&nbsp;ref_send&lt;br&gt;<br>
API&nbsp;adapts&nbsp;E&#39;s&nbsp;distribution&nbsp;and&nbsp;concurrency&nbsp;model,&nbsp;and&nbsp;has&nbsp;Joe-E&nbsp;and&nbsp;Caja&lt;br&gt;<br>
compatible&nbsp;implementations&nbsp;&lt;&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;http://waterken.sourceforge.net/javadoc/org/ref_send/package-summary.html&quot;&nbsp;target=&quot;_blank&quot;&gt;http://waterken.sourceforge.net/javadoc/org/ref_send/package-summary.html&lt;/a&gt;&gt;&nbsp;&lt;&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;https://vsci.hpl.hp.com/-/bang/#s=6ysjn2sjvwl35p&quot;&nbsp;target=&quot;_blank&quot;&gt;https://vsci.hpl.hp.com/-/bang/#s=6ysjn2sjvwl35p&lt;/a&gt;&gt;.&nbsp;Tyler&#39;s&nbsp;Waterken&nbsp;web&lt;br&gt;<br>
server&nbsp;implements&nbsp;ref_send&nbsp;for&nbsp;server&nbsp;side&nbsp;persistent&nbsp;Joe-E&nbsp;apps.&nbsp;So&lt;br&gt;<br>
ref_send&nbsp;currently&nbsp;works&nbsp;fine&nbsp;within&nbsp;a&nbsp;browser&nbsp;frame,&nbsp;between&nbsp;a&nbsp;browser&lt;br&gt;<br>
frame&nbsp;and&nbsp;a&nbsp;server,&nbsp;or&nbsp;between&nbsp;servers.&nbsp;For&nbsp;all&nbsp;the&nbsp;distributed&nbsp;cases,&nbsp;this&lt;br&gt;<br>
works&nbsp;by&nbsp;serializing&nbsp;data&nbsp;to&nbsp;JSON&nbsp;and&nbsp;translating&nbsp;capabilities&nbsp;(object&lt;br&gt;<br>
references)&nbsp;into&nbsp;URLs.&lt;br&gt;<br>
&lt;br&gt;<br>
But&nbsp;a&nbsp;URL&nbsp;cannot&nbsp;be&nbsp;redeemed&nbsp;for&nbsp;an&nbsp;HTML5&nbsp;MessagePort&lt;br&gt;<br>
or&nbsp;any&nbsp;other&nbsp;access&nbsp;to&nbsp;frame&nbsp;or&nbsp;worker&nbsp;within&nbsp;a&nbsp;browser.&nbsp;Were&nbsp;postMessage&lt;br&gt;<br>
generalized&nbsp;to&nbsp;allow&nbsp;a&nbsp;list&nbsp;of&nbsp;MessagePorts,&nbsp;the&nbsp;capability&nbsp;transmission&lt;br&gt;<br>
portion&nbsp;of&nbsp;ref_send&nbsp;would&nbsp;have&nbsp;a&nbsp;trivial&nbsp;and&nbsp;safe&nbsp;direct&nbsp;mapping&nbsp;onto&lt;br&gt;<br>
inter-frame&nbsp;messages.&nbsp;The&nbsp;only&nbsp;non-obvious&nbsp;part&nbsp;is&nbsp;how&nbsp;to&nbsp;map&nbsp;the&nbsp;promise&lt;br&gt;<br>
for&nbsp;the&nbsp;result&nbsp;of&nbsp;an&nbsp;asynchronous&nbsp;message.&nbsp;But&nbsp;the&nbsp;answer&nbsp;seems&nbsp;simple:&lt;br&gt;<br>
create&nbsp;another&nbsp;MessagePort&nbsp;pair&nbsp;to&nbsp;represent&nbsp;that&nbsp;promise,&nbsp;and&nbsp;send&nbsp;along&lt;br&gt;<br>
with&nbsp;the&nbsp;message&nbsp;the&nbsp;port&nbsp;to&nbsp;be&nbsp;used&nbsp;as&nbsp;the&nbsp;receive&nbsp;side&nbsp;of&nbsp;that&nbsp;pair.&nbsp;I&lt;br&gt;<br>
suspect&nbsp;that&nbsp;many&nbsp;other&nbsp;similar&nbsp;plans&nbsp;would&nbsp;also&nbsp;be&nbsp;enabled&nbsp;by&nbsp;this&nbsp;proposed&lt;br&gt;<br>
enhancement&nbsp;to&nbsp;postMessage.&lt;br&gt;<br>
&lt;br&gt;<br>
Does&nbsp;this&nbsp;make&nbsp;sense?&nbsp;Does&nbsp;it&nbsp;violate&nbsp;some&nbsp;design&nbsp;constraints&nbsp;I&nbsp;might&nbsp;not&lt;br&gt;<br>
know?&nbsp;Is&nbsp;it&nbsp;a&nbsp;good&nbsp;idea?&lt;br&gt;<br>
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;<br>

</tt>
