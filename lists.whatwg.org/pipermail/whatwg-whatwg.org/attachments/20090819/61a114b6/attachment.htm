<tt>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Tue,&nbsp;Aug&nbsp;18,&nbsp;2009&nbsp;at&nbsp;5:04&nbsp;PM,&nbsp;Justin&nbsp;Lebar&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&amp;lt;&lt;a&nbsp;href=&quot;mailto:justin.lebar@gmail.com&quot;&gt;justin.lebar@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
<br>
I&amp;#39;m&nbsp;in&nbsp;the&nbsp;process&nbsp;of&nbsp;implementing&nbsp;the&nbsp;HTML5&nbsp;History&nbsp;API&lt;br&gt;<br>
(History.pushState(),&nbsp;History.clearState(),&nbsp;and&nbsp;the&nbsp;PopState&nbsp;event)&nbsp;in&lt;br&gt;<br>
Firefox.&nbsp; I&amp;#39;d&nbsp;like&nbsp;to&nbsp;discuss&nbsp;whether&nbsp;the&nbsp;API&nbsp;might&nbsp;benefit&nbsp;from&nbsp;some&lt;br&gt;<br>
changes.&nbsp; To&nbsp;my&nbsp;knowledge,&nbsp;no&nbsp;other&nbsp;browser&nbsp;implements&nbsp;this&nbsp;API,&nbsp;so&lt;br&gt;<br>
I&amp;#39;m&nbsp;assuming&nbsp;we&nbsp;have&nbsp;freedom&nbsp;to&nbsp;make&nbsp;large&nbsp;alterations&nbsp;to&nbsp;it.&lt;br&gt;<br>
&lt;br&gt;<br>
My&nbsp;basic&nbsp;proposal&nbsp;is&nbsp;that&nbsp;History.pushState()&nbsp;be&nbsp;split&nbsp;into&nbsp;a&nbsp;function&lt;br&gt;<br>
for&nbsp;creating&nbsp;new&nbsp;history&nbsp;entries&nbsp;and&nbsp;functions&nbsp;or&nbsp;a&nbsp;property&nbsp;for&lt;br&gt;<br>
getting/setting&nbsp;an&nbsp;object&nbsp;associated&nbsp;with&nbsp;that&nbsp;entry.&lt;br&gt;<br>
&lt;br&gt;<br>
In&nbsp;its&nbsp;current&nbsp;form,&nbsp;the&nbsp;History&nbsp;API&nbsp;allows&nbsp;us&nbsp;to&nbsp;identify&nbsp;session&lt;br&gt;<br>
history&nbsp;entries&nbsp;by&nbsp;way&nbsp;of&nbsp;an&nbsp;arbitrary&nbsp;object,&nbsp;which&nbsp;we&nbsp;pass&nbsp;as&nbsp;the&lt;br&gt;<br>
first&nbsp;argument&nbsp;to&nbsp;pushState()&nbsp;and&nbsp;which&nbsp;we&nbsp;receive&nbsp;as&nbsp;part&nbsp;of&nbsp;the&lt;br&gt;<br>
PopState&nbsp;event&nbsp;when&nbsp;that&nbsp;history&nbsp;entry&nbsp;is&nbsp;activated.&nbsp; If&nbsp;the&nbsp;page&nbsp;gets&lt;br&gt;<br>
a&nbsp;null&nbsp;popstate,&nbsp;it&amp;#39;s&nbsp;supposed&nbsp;to&nbsp;use&nbsp;the&nbsp;URL&nbsp;to&nbsp;decide&nbsp;what&nbsp;state&nbsp;to&lt;br&gt;<br>
display.&lt;br&gt;<br>
&lt;br&gt;<br>
Notably&nbsp;unsupported&nbsp;by&nbsp;this&nbsp;API&nbsp;is&nbsp;support&nbsp;for&nbsp;pages&nbsp;altering&nbsp;their&lt;br&gt;<br>
saved&nbsp;state.&nbsp; For&nbsp;instance,&nbsp;a&nbsp;page&nbsp;might&nbsp;want&nbsp;to&nbsp;save&nbsp;a&nbsp;text&nbsp;box&amp;#39;s&lt;br&gt;<br>
edit&nbsp;history&nbsp;to&nbsp;implement&nbsp;a&nbsp;fancy&nbsp;undo.&nbsp; It&nbsp;could&nbsp;store&nbsp;the&nbsp;edit&lt;br&gt;<br>
history&nbsp;in&nbsp;a&nbsp;cookie&nbsp;or&nbsp;in&nbsp;the&nbsp;session&nbsp;storage,&nbsp;but&nbsp;then&nbsp;if&nbsp;we&nbsp;loaded&lt;br&gt;<br>
the&nbsp;page&nbsp;twice&nbsp;in&nbsp;the&nbsp;same&nbsp;tab,&nbsp;those&nbsp;two&nbsp;instances&nbsp;would&nbsp;step&nbsp;on&nbsp;each&lt;br&gt;<br>
other&nbsp;when&nbsp;we&nbsp;went&nbsp;back&nbsp;and&nbsp;forth&nbsp;between&nbsp;them.&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;page&nbsp;could&nbsp;just&nbsp;store&nbsp;its&nbsp;state&nbsp;in&nbsp;variables&nbsp;in&nbsp;the&nbsp;document,&nbsp;but&lt;br&gt;<br>
then&nbsp;it&nbsp;would&nbsp;loose&nbsp;that&nbsp;state&nbsp;when&nbsp;the&nbsp;browser&nbsp;crashed&nbsp;or&nbsp;was&nbsp;closed,&lt;br&gt;<br>
or&nbsp;when&nbsp;the&nbsp;browser&nbsp;decided&nbsp;to&nbsp;kick&nbsp;the&nbsp;document&nbsp;out&nbsp;of&nbsp;the&nbsp;history.&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;think&nbsp;this&nbsp;page&nbsp;would&nbsp;be&nbsp;better&nbsp;served&nbsp;by&nbsp;a&nbsp;History.setStateObject()&lt;br&gt;<br>
function,&nbsp;which&nbsp;does&nbsp;exactly&nbsp;what&nbsp;the&nbsp;page&nbsp;wants&nbsp;in&nbsp;a&nbsp;simple&nbsp;fashion.&lt;br&gt;<br>
&lt;br&gt;<br>
We&amp;#39;d&nbsp;still&nbsp;keep&nbsp;the&nbsp;history-entry-creating&nbsp;functionality&nbsp;of&lt;br&gt;<br>
History.pushState()&nbsp;in&nbsp;a&nbsp;new&nbsp;History&nbsp;function&nbsp;(I&amp;#39;ll&nbsp;call&nbsp;it&lt;br&gt;<br>
createNewEntry(),&nbsp;but&nbsp;it&nbsp;probably&nbsp;needs&nbsp;a&nbsp;better&nbsp;name),&nbsp;which&nbsp;takes&nbsp;a&lt;br&gt;<br>
title&nbsp;and&nbsp;URL,&nbsp;as&nbsp;pushState()&nbsp;does&nbsp;now.&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;API&nbsp;might&nbsp;be&nbsp;more&nbsp;intuitive&nbsp;if&nbsp;we&nbsp;had&nbsp;a&nbsp;History.stateObject&lt;br&gt;<br>
propery,&nbsp;but&nbsp;I&amp;#39;m&nbsp;concerned&nbsp;that&nbsp;then&nbsp;we&amp;#39;d&nbsp;be&nbsp;promising&nbsp;the&nbsp;page&nbsp;that&lt;br&gt;<br>
we&amp;#39;ll&nbsp;keep&nbsp;around&nbsp;literally&nbsp;any&nbsp;objects&nbsp;it&nbsp;wants,&nbsp;including&nbsp;DOM&lt;br&gt;<br>
objects.&nbsp; In&nbsp;fact,&nbsp;I&amp;#39;d&nbsp;be&nbsp;happy&nbsp;restricting&nbsp;the&nbsp;state&nbsp;object&nbsp;to&nbsp;being&lt;br&gt;<br>
a&nbsp;string.&nbsp; If&nbsp;a&nbsp;page&nbsp;wants&nbsp;to&nbsp;store&nbsp;an&nbsp;object,&nbsp;it&nbsp;can&nbsp;convert&nbsp;it&nbsp;to&lt;br&gt;<br>
JSON,&nbsp;or&nbsp;it&nbsp;can&nbsp;store&nbsp;a&nbsp;GUID&nbsp;as&nbsp;its&nbsp;state&nbsp;string&nbsp;and&nbsp;index&nbsp;into&nbsp;the&lt;br&gt;<br>
session&nbsp;storage.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;really&nbsp;like&nbsp;this&nbsp;idea&nbsp;except&nbsp;for&nbsp;this&nbsp;one&nbsp;part:&nbsp; What&amp;#39;s&nbsp;the&nbsp;problem&nbsp;with&nbsp;allowing&nbsp;DOM&nbsp;objects&nbsp;to&nbsp;be&nbsp;stored?&nbsp; Even&nbsp;if&nbsp;it&nbsp;can&amp;#39;t&nbsp;be&nbsp;open-ended,&nbsp;maybe&nbsp;we&nbsp;can&nbsp;allow&nbsp;any&nbsp;data&nbsp;that&nbsp;can&nbsp;be&nbsp;serialized&nbsp;to&nbsp;be&nbsp;stored&nbsp;there?&nbsp; Just&nbsp;from&nbsp;my&nbsp;playing&nbsp;around&nbsp;with&nbsp;local&nbsp;storage,&nbsp;I&amp;#39;ve&nbsp;found&nbsp;the&nbsp;requirement&nbsp;of&nbsp;serializing&nbsp;everything&nbsp;to&nbsp;a&nbsp;string&nbsp;fairly&nbsp;annoying.&nbsp; I&nbsp;understand&nbsp;why&nbsp;it&amp;#39;s&nbsp;necessary&nbsp;there&nbsp;(even&nbsp;with&nbsp;session&nbsp;storage,&nbsp;there&nbsp;are&nbsp;use&nbsp;cases&nbsp;where&nbsp;you&amp;#39;d&nbsp;need&nbsp;to&nbsp;serialize&nbsp;it&nbsp;to&nbsp;disk)&nbsp;but&nbsp;here&nbsp;it&nbsp;seems&nbsp;like&nbsp;everything&nbsp;can&nbsp;just&nbsp;stay&nbsp;in&nbsp;memory...right?&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Btw,&nbsp;storing&nbsp;a&nbsp;GUID&nbsp;and&nbsp;using&nbsp;session&nbsp;storage&nbsp;really&nbsp;isn&amp;#39;t&nbsp;useful&nbsp;since&nbsp;session&nbsp;storage&nbsp;itself&nbsp;only&nbsp;stores&nbsp;strings.&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
Pages&nbsp;could&nbsp;retrieve&nbsp;the&nbsp;state&nbsp;object&nbsp;just&nbsp;as&nbsp;they&nbsp;do&nbsp;now,&nbsp;in&nbsp;a&lt;br&gt;<br>
PopState&nbsp;event,&nbsp;although&nbsp;we&amp;#39;d&nbsp;probably&nbsp;want&nbsp;to&nbsp;change&nbsp;the&nbsp;name&nbsp;of&nbsp;the&lt;br&gt;<br>
event.&nbsp; We&amp;#39;d&nbsp;probably&nbsp;want&nbsp;to&nbsp;fire&nbsp;PopState&nbsp;on&nbsp;all&nbsp;loads&nbsp;and&nbsp;history&lt;br&gt;<br>
navigations,&nbsp;since&nbsp;any&nbsp;document&nbsp;might&nbsp;have&nbsp;a&nbsp;state&nbsp;to&nbsp;pop,&nbsp;and&nbsp;even&lt;br&gt;<br>
those&nbsp;documents&nbsp;which&nbsp;didn&amp;#39;t&nbsp;call&nbsp;setStateObject()&nbsp;might&nbsp;store&nbsp;state&lt;br&gt;<br>
in&nbsp;their&nbsp;URI&nbsp;which&nbsp;they&nbsp;need&nbsp;to&nbsp;restore&nbsp;when&nbsp;their&nbsp;history&nbsp;entry&nbsp;is&lt;br&gt;<br>
activated.&lt;br&gt;<br>
&lt;br&gt;<br>
Last,&nbsp;I&amp;#39;m&nbsp;not&nbsp;sure&nbsp;that&nbsp;we&nbsp;need&nbsp;the&nbsp;History.clearState()&nbsp;function.&lt;br&gt;<br>
It&amp;#39;s&nbsp;confusing&nbsp;(why&nbsp;do&nbsp;we&nbsp;end&nbsp;up&nbsp;at&nbsp;the&nbsp;last&nbsp;entry&nbsp;for&nbsp;the&nbsp;current&lt;br&gt;<br>
document&nbsp;instead&nbsp;of&nbsp;staying&nbsp;at&nbsp;the&nbsp;current&nbsp;entry?)&nbsp;and&nbsp;I&nbsp;haven&amp;#39;t&nbsp;been&lt;br&gt;<br>
able&nbsp;to&nbsp;come&nbsp;up&nbsp;with&nbsp;a&nbsp;compelling&nbsp;use&nbsp;case.&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;think&nbsp;the&nbsp;main&nbsp;benefit&nbsp;of&nbsp;these&nbsp;changes&nbsp;is&nbsp;added&nbsp;simplicity.&lt;br&gt;<br>
There&amp;#39;s&nbsp;a&nbsp;right&nbsp;and&nbsp;wrong&nbsp;way&nbsp;to&nbsp;use&nbsp;pushState,&nbsp;and&lt;br&gt;<br>
setState/createNewEntry&nbsp;doesn&amp;#39;t&nbsp;require&nbsp;such&nbsp;rules.&nbsp; But&nbsp;additionally,&lt;br&gt;<br>
these&nbsp;changes&nbsp;allow&nbsp;pages&nbsp;flexibility&nbsp;to&nbsp;do&nbsp;things&nbsp;we&nbsp;haven&amp;#39;t&nbsp;yet&lt;br&gt;<br>
thought&nbsp;of.&nbsp; I&nbsp;don&amp;#39;t&nbsp;know&nbsp;what&nbsp;those&nbsp;things&nbsp;might&nbsp;be,&nbsp;but&nbsp;I&nbsp;suspect&lt;br&gt;<br>
they&nbsp;may&nbsp;be&nbsp;pretty&nbsp;cool.&nbsp; :)&lt;br&gt;<br>
&lt;font&nbsp;color=&quot;#888888&quot;&gt;&lt;br&gt;<br>
-Justin&lt;br&gt;<br>
&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;<br>

</tt>
