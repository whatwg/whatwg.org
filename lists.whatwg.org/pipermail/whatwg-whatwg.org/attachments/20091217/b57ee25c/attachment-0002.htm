<tt>
That&nbsp;was&nbsp;my&nbsp;point&nbsp;earlier&nbsp;-&nbsp;for&nbsp;this&nbsp;to&nbsp;work,&nbsp;if&nbsp;you&nbsp;post&nbsp;getX&nbsp;and&nbsp;setX&nbsp;over&nbsp;separately,&nbsp;they&nbsp;need&nbsp;to&nbsp;share&nbsp;a&nbsp;closure&nbsp;otherwise&nbsp;they&nbsp;don&#39;t&nbsp;work. &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Realistically,&nbsp;given&nbsp;Javascript&#39;s&nbsp;dynamic&nbsp;nature,&nbsp;you&nbsp;need&nbsp;to&nbsp;copy&nbsp;everything&nbsp;reachable&nbsp;via&nbsp;the&nbsp;function&#39;s&nbsp;scope&nbsp;chain,&nbsp;and&nbsp;recursively&nbsp;copy&nbsp;everything&nbsp;reachable&nbsp;via&nbsp;any&nbsp;reachable&nbsp;function&#39;s&nbsp;scope&nbsp;chain.&nbsp;In&nbsp;effect,&nbsp;copying&nbsp;a&nbsp;function&nbsp;to&nbsp;worker&nbsp;context&nbsp;means&nbsp;bringing&nbsp;over&nbsp;the&nbsp;entire&nbsp;reachable&nbsp;heap.&nbsp;Anything&nbsp;else&nbsp;you&nbsp;try&nbsp;to&nbsp;do&nbsp;is&nbsp;going&nbsp;to&nbsp;break&nbsp;in&nbsp;subtle&nbsp;ways&nbsp;when&nbsp;something&nbsp;in&nbsp;the&nbsp;source&nbsp;context&#39;s&nbsp;scope&nbsp;chain&nbsp;isn&#39;t&nbsp;in&nbsp;the&nbsp;destination&nbsp;context&#39;s&nbsp;scope&nbsp;chain.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;understand&nbsp;that&nbsp;we&nbsp;might&nbsp;like&nbsp;to&nbsp;treat&nbsp;code&nbsp;running&nbsp;in&nbsp;a&nbsp;worker&nbsp;as&nbsp;if&nbsp;it&nbsp;were&nbsp;running&nbsp;in&nbsp;a&nbsp;same&nbsp;context&nbsp;as&nbsp;the&nbsp;parent&nbsp;page,&nbsp;so&nbsp;you&nbsp;could&nbsp;pass&nbsp;all&nbsp;the&nbsp;same&nbsp;things&nbsp;to&nbsp;it&nbsp;that&nbsp;you&nbsp;could&nbsp;pass&nbsp;to&nbsp;any&nbsp;Javascript&nbsp;function,&nbsp;but&nbsp;the&nbsp;situations&nbsp;are&nbsp;not&nbsp;identical&nbsp;-&nbsp;the&nbsp;only&nbsp;way&nbsp;something&nbsp;like&nbsp;this&nbsp;would&nbsp;be&nbsp;feasible&nbsp;would&nbsp;be&nbsp;by&nbsp;adding&nbsp;limitations&nbsp;(i.e.&nbsp;not&nbsp;copying&nbsp;over&nbsp;the&nbsp;scope&nbsp;chain&nbsp;of&nbsp;a&nbsp;function)&nbsp;that&nbsp;IMO&nbsp;fundamentally&nbsp;break&nbsp;Javascript&nbsp;semantics&nbsp;;&nbsp;once&nbsp;you&nbsp;do&nbsp;that,&nbsp;you&nbsp;might&nbsp;as&nbsp;well&nbsp;just&nbsp;use&nbsp;the&nbsp;existing&nbsp;string&nbsp;+&nbsp;eval()&nbsp;mechanisms.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-atw&lt;br&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Thu,&nbsp;Dec&nbsp;17,&nbsp;2009&nbsp;at&nbsp;2:06&nbsp;AM,&nbsp;Oliver&nbsp;Hunt&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:oliver@apple.com&quot;&gt;oliver@apple.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;On&nbsp;Dec&nbsp;17,&nbsp;2009,&nbsp;at&nbsp;10:03&nbsp;PM,&nbsp;Boris&nbsp;Zbarsky&nbsp;wrote:&lt;br&gt;<br>
&lt;br&gt;<br>
&gt;&nbsp;On&nbsp;12/17/09&nbsp;12:48&nbsp;AM,&nbsp;Boris&nbsp;Zbarsky&nbsp;wrote:&lt;br&gt;<br>
&gt;&gt;&nbsp;It&nbsp;seems&nbsp;very&nbsp;difficult&nbsp;to&nbsp;me&nbsp;to&nbsp;come&nbsp;up&nbsp;with&nbsp;a&nbsp;&quot;function&nbsp;cloning&quot;&lt;br&gt;<br>
&gt;&gt;&nbsp;solution&nbsp;that&nbsp;won&#39;t&nbsp;break&nbsp;in&nbsp;subtle&nbsp;ways&nbsp;when&nbsp;such&nbsp;functions&nbsp;are&nbsp;passed&lt;br&gt;<br>
&gt;&gt;&nbsp;to&nbsp;it...&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;I&nbsp;should&nbsp;clarify&nbsp;this.&nbsp; It&nbsp;seems&nbsp;to&nbsp;me&nbsp;eminently&nbsp;possible&nbsp;to&nbsp;clone&nbsp;functions&nbsp;that&nbsp;only&nbsp;reference&nbsp;local&nbsp;(declared&nbsp;with&nbsp;var)&nbsp;variables&nbsp;and&nbsp;their&nbsp;arguments.&nbsp; And&nbsp;maybe&nbsp;explicit&nbsp;|this|&nbsp;access;&nbsp;not&nbsp;sure.&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;As&nbsp;soon&nbsp;as&nbsp;you&#39;re&nbsp;talking&nbsp;anything&nbsp;else,&nbsp;the&nbsp;situation&nbsp;gets&nbsp;very&nbsp;complicated,&nbsp;it&nbsp;seems&nbsp;to&nbsp;me.&nbsp; That&nbsp;includes&nbsp;implicit&nbsp;property&nbsp;access&nbsp;on&nbsp;the&nbsp;global&nbsp;object.&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;To&nbsp;make&nbsp;that&nbsp;clearer,&nbsp;consider&nbsp;these&nbsp;two&nbsp;functions,&nbsp;defined&nbsp;at&nbsp;global&nbsp;scope:&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp; var&nbsp;x&nbsp;=&nbsp;1;&lt;br&gt;<br>
&gt;&nbsp; function&nbsp;f()&nbsp;{&lt;br&gt;<br>
&gt;&nbsp; &nbsp; return&nbsp;x;&lt;br&gt;<br>
&gt;&nbsp; }&lt;br&gt;<br>
&gt;&nbsp; function&nbsp;g()&nbsp;{&lt;br&gt;<br>
&gt;&nbsp; &nbsp; return&nbsp;Math;&lt;br&gt;<br>
&gt;&nbsp; }&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;If&nbsp;I&nbsp;understand&nbsp;your&nbsp;proposal&nbsp;correctly,&nbsp;passing&nbsp;f&nbsp;to&nbsp;a&nbsp;worker&nbsp;would&nbsp;pass&nbsp;across&nbsp;a&nbsp;function&nbsp;which&nbsp;always&nbsp;returns&nbsp;1.&nbsp; Passing&nbsp;g&nbsp;to&nbsp;a&nbsp;worker&nbsp;would&nbsp;do&nbsp;what?&nbsp; Pass&nbsp;across&nbsp;a&nbsp;function&nbsp;that&nbsp;always&nbsp;returns&nbsp;the&nbsp;Math&nbsp;object&nbsp;from&nbsp;the&nbsp;web&nbsp;page&nbsp;scope?&nbsp; If&nbsp;not,&nbsp;then&nbsp;how&nbsp;is&nbsp;Math&nbsp;different&nbsp;from&nbsp;x,&nbsp;exactly?&nbsp; If&nbsp;yes,&nbsp;then&nbsp;why&nbsp;are&nbsp;we&nbsp;baking&nbsp;anything&nbsp;at&nbsp;all&nbsp;in&nbsp;at&nbsp;pass&nbsp;time?&lt;br&gt;<br>
<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;How&nbsp;is&nbsp;the&nbsp;f()&nbsp;example&nbsp;above&nbsp;affected&nbsp;if&nbsp;x&nbsp;is&nbsp;bound&nbsp;to&nbsp;an&nbsp;object,&nbsp;not&nbsp;to&nbsp;a&nbsp;number?&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;&lt;/div&gt;I&nbsp;think&nbsp;a&nbsp;more&nbsp;interesting&nbsp;case&nbsp;is&nbsp;the&nbsp;relatively&nbsp;common&nbsp;idiom&nbsp;of&nbsp;closures&nbsp;for&nbsp;access&nbsp;protection,&nbsp;eg.&lt;br&gt;<br>
&lt;br&gt;<br>
function&nbsp;MyObject()&nbsp;{&lt;br&gt;<br>
&nbsp; &nbsp; var&nbsp;x;&lt;br&gt;<br>
&nbsp; &nbsp; this.setX&nbsp;=&nbsp;function(_x)&nbsp;{&nbsp;x&nbsp;=&nbsp;_x&nbsp;};&lt;br&gt;<br>
&nbsp; &nbsp; this.getX&nbsp;=&nbsp;function()&nbsp;{&nbsp;return&nbsp;x&nbsp;}&lt;br&gt;<br>
}&lt;br&gt;<br>
&lt;br&gt;<br>
What&nbsp;should&nbsp;worker.postMessage(new&nbsp;MyObject)&nbsp;do&nbsp;if&nbsp;we&nbsp;were&nbsp;to&nbsp;try&nbsp;and&nbsp;serialise&nbsp;the&nbsp;functions?&nbsp;obviously&nbsp;you&nbsp;don&#39;t&nbsp;want&nbsp;them&nbsp;each&nbsp;to&nbsp;have&nbsp;(effectively)&nbsp;separate&nbsp;closures,&nbsp;and&nbsp;you&nbsp;can&#39;t&nbsp;just&nbsp;substitute&nbsp;their&nbsp;containing&nbsp;scope&nbsp;with&nbsp;the&nbsp;global&nbsp;object.&lt;br&gt;<br>
<br>
&lt;br&gt;<br>
&gt;&nbsp;-Boris&lt;br&gt;<br>
&lt;font&nbsp;color=&quot;#888888&quot;&gt;&lt;br&gt;<br>
&lt;br&gt;<br>
--Oliver&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;<br>

</tt>
