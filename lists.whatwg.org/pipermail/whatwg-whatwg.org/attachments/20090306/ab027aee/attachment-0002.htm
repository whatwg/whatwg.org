<tt>
My&nbsp;team&nbsp;at&nbsp;Google&nbsp;is&nbsp;experimenting&nbsp;with&nbsp;supporting&nbsp;persistent&nbsp;SharedWorkers&nbsp;(SharedWorkers&nbsp;whose&nbsp;lifetime&nbsp;is&nbsp;not&nbsp;linked&nbsp;to&nbsp;being&nbsp;entangled&nbsp;with&nbsp;an&nbsp;active&nbsp;browser&nbsp;window).&nbsp;I&#39;ve&nbsp;reviewed&nbsp;some&nbsp;of&nbsp;the&nbsp;mailing&nbsp;list&nbsp;archives,&nbsp;so&nbsp;I&#39;m&nbsp;aware&nbsp;of&nbsp;at&nbsp;least&nbsp;some&nbsp;of&nbsp;the&nbsp;past&nbsp;discussions&nbsp;on&nbsp;this&nbsp;topic&nbsp;-&nbsp;I&nbsp;wanted&nbsp;to&nbsp;give&nbsp;everyone&nbsp;a&nbsp;braindump&nbsp;of&nbsp;some&nbsp;of&nbsp;the&nbsp;ideas/issues&nbsp;we&#39;re&nbsp;kicking&nbsp;around&nbsp;and&nbsp;get&nbsp;some&nbsp;feedback&nbsp;from&nbsp;the&nbsp;community&nbsp;at&nbsp;large&nbsp;before&nbsp;going&nbsp;forward.&lt;br&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;br&gt;&lt;span&nbsp;style=&quot;font-weight:&nbsp;bold;&quot;&gt;-&nbsp;Motivation&lt;/span&gt;:&lt;br&gt;There&nbsp;are&nbsp;a&nbsp;number&nbsp;of&nbsp;use&nbsp;cases&nbsp;where&nbsp;a&nbsp;web&nbsp;application&nbsp;would&nbsp;like&nbsp;to&nbsp;provide&nbsp;long-running&nbsp;services&nbsp;for&nbsp;the&nbsp;user&nbsp;that&nbsp;do&nbsp;not&nbsp;go&nbsp;away&nbsp;when&nbsp;the&nbsp;user&nbsp;closes&nbsp;his&nbsp;browser&nbsp;window.&nbsp;A&nbsp;canonical&nbsp;example&nbsp;of&nbsp;this&nbsp;is&nbsp;calendar&nbsp;notifications&nbsp;-&nbsp;a&nbsp;calendar&nbsp;application&nbsp;might&nbsp;like&nbsp;to&nbsp;have&nbsp;a&nbsp;persistent&nbsp;worker&nbsp;that&nbsp;monitors&nbsp;the&nbsp;user&#39;s&nbsp;calendar&nbsp;events,&nbsp;and&nbsp;displays&nbsp;notifications&nbsp;to&nbsp;the&nbsp;user&nbsp;when&nbsp;he&nbsp;has&nbsp;a&nbsp;meeting.&nbsp;Likewise,&nbsp;a&nbsp;user&nbsp;might&nbsp;want&nbsp;his&nbsp;mail&nbsp;application&nbsp;to&nbsp;display&nbsp;an&nbsp;unobtrusive&nbsp;notification&nbsp;when&nbsp;new&nbsp;mail&nbsp;arrives&nbsp;at&nbsp;the&nbsp;server.&nbsp;These&nbsp;are&nbsp;all&nbsp;use&nbsp;cases&nbsp;that&nbsp;native&nbsp;applications&nbsp;have&nbsp;supported&nbsp;for&nbsp;years,&nbsp;but&nbsp;which&nbsp;web-based&nbsp;applications&nbsp;currently&nbsp;have&nbsp;no&nbsp;way&nbsp;to&nbsp;achieve.&lt;br&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;br&gt;&lt;span&nbsp;style=&quot;font-weight:&nbsp;bold;&quot;&gt;-&nbsp;Persistent&nbsp;worker&nbsp;lifetime:&lt;br&gt;&lt;/span&gt;A&nbsp;persistent&nbsp;worker&nbsp;would&nbsp;never&nbsp;be&nbsp;shutdown&nbsp;by&nbsp;the&nbsp;&quot;closing&nbsp;orphan&nbsp;workers&quot;&nbsp;mechanism,&nbsp;although&nbsp;it&nbsp;could&nbsp;still&nbsp;be&nbsp;killed&nbsp;by&nbsp;the&nbsp;User&nbsp;Agent&nbsp;(infinite&nbsp;loop&nbsp;protection,&nbsp;explicit&nbsp;user&nbsp;management,&nbsp;revocation&nbsp;of&nbsp;permissions)&nbsp;or&nbsp;by&nbsp;the&nbsp;worker&nbsp;explicitly&nbsp;invoking&nbsp;WorkerGlobalScope.close().&nbsp;Once&nbsp;a&nbsp;persistent&nbsp;worker&nbsp;is&nbsp;created,&nbsp;it&nbsp;would&nbsp;be&nbsp;started&nbsp;up&nbsp;on&nbsp;every&nbsp;subsequent&nbsp;invocation&nbsp;of&nbsp;the&nbsp;user&nbsp;agent&nbsp;until&nbsp;it&nbsp;has&nbsp;been&nbsp;killed.&nbsp;The&nbsp;intent&nbsp;is&nbsp;that&nbsp;user&nbsp;agents&nbsp;that&nbsp;have&nbsp;registered&nbsp;persistent&nbsp;workers&nbsp;would&nbsp;launch&nbsp;on&nbsp;startup&nbsp;(i.e.&nbsp;launch&nbsp;when&nbsp;the&nbsp;user&nbsp;logs&nbsp;in&nbsp;to&nbsp;his&nbsp;OS&nbsp;account)&nbsp;to&nbsp;allow&nbsp;persistent&nbsp;workers&nbsp;to&nbsp;always&nbsp;run&nbsp;as&nbsp;long&nbsp;as&nbsp;the&nbsp;user&nbsp;is&nbsp;logged&nbsp;into&nbsp;the&nbsp;machine,&nbsp;although&nbsp;this&nbsp;is&nbsp;not&nbsp;required&nbsp;behavior.&lt;div&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&nbsp;style=&quot;font-weight:&nbsp;bold;&quot;&gt;-&nbsp;Permissions:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Installing&nbsp;a&nbsp;persistent&nbsp;worker&nbsp;is&nbsp;essentially&nbsp;giving&nbsp;a&nbsp;web&nbsp;application&nbsp;a&nbsp;near-permanent&nbsp;footprint&nbsp;on&nbsp;your&nbsp;PC&nbsp;-&nbsp;we&nbsp;need&nbsp;explicit&nbsp;permission&nbsp;from&nbsp;the&nbsp;user,&nbsp;and&nbsp;we&nbsp;need&nbsp;some&nbsp;mechanism&nbsp;in&nbsp;the&nbsp;user&nbsp;agent&nbsp;to&nbsp;revoke&nbsp;this&nbsp;permission.&nbsp;There&nbsp;are&nbsp;a&nbsp;number&nbsp;of&nbsp;examples&nbsp;of&nbsp;similar&nbsp;permission-granting&nbsp;user&nbsp;flows&nbsp;(ActiveX&nbsp;installation,&nbsp;plugin&nbsp;install,&nbsp;gears)&nbsp;which&nbsp;we&nbsp;could&nbsp;use&nbsp;as&nbsp;a&nbsp;model&nbsp;for&nbsp;our&nbsp;&quot;grant/revoke&nbsp;permission&quot;&nbsp;UI.&lt;/div&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The&nbsp;idea&nbsp;is&nbsp;that&nbsp;when&nbsp;an&nbsp;application&nbsp;instantiates&nbsp;a&nbsp;persistent&nbsp;worker&nbsp;for&nbsp;the&nbsp;first&nbsp;time,&nbsp;the&nbsp;user&nbsp;would&nbsp;be&nbsp;prompted&nbsp;to&nbsp;grant&nbsp;permission&nbsp;(the&nbsp;worker&nbsp;thread&nbsp;would&nbsp;not&nbsp;be&nbsp;started&nbsp;until&nbsp;the&nbsp;user&nbsp;granted&nbsp;permission)&nbsp;-&nbsp;in&nbsp;the&nbsp;case&nbsp;that&nbsp;the&nbsp;user&nbsp;does&nbsp;not&nbsp;grant&nbsp;permission,&nbsp;the&nbsp;parent&nbsp;page&nbsp;would&nbsp;have&nbsp;its&nbsp;worker.onerror()&nbsp;handler&nbsp;invoked.&nbsp;Revoking&nbsp;permission&nbsp;would&nbsp;happen&nbsp;on&nbsp;a&nbsp;per-domain&nbsp;basis&nbsp;and&nbsp;would&nbsp;kill&nbsp;all&nbsp;persistent&nbsp;workers&nbsp;for&nbsp;that&nbsp;domain&nbsp;via&nbsp;the&nbsp;existing&nbsp;kill&nbsp;worker&nbsp;mechanism&nbsp;described&nbsp;in&nbsp;the&nbsp;WebWorkers&nbsp;spec.&lt;/div&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We&#39;re&nbsp;not&nbsp;certain&nbsp;whether&nbsp;we&nbsp;need&nbsp;to&nbsp;expose&nbsp;APIs&nbsp;to&nbsp;allow&nbsp;a&nbsp;client&nbsp;to&nbsp;test&nbsp;whether&nbsp;permission&nbsp;has&nbsp;been&nbsp;granted&nbsp;or&nbsp;not&nbsp;(for&nbsp;example,&nbsp;a&nbsp;web&nbsp;application&nbsp;may&nbsp;want&nbsp;to&nbsp;interact&nbsp;with&nbsp;a&nbsp;persistent&nbsp;worker&nbsp;if&nbsp;it&nbsp;exists,&nbsp;but&nbsp;there&nbsp;isn&#39;t&nbsp;currently&nbsp;any&nbsp;way&nbsp;to&nbsp;tell&nbsp;if&nbsp;a&nbsp;worker&nbsp;exists&nbsp;or&nbsp;not&nbsp;without&nbsp;instantiating&nbsp;a&nbsp;worker,&nbsp;which&nbsp;might&nbsp;prompt&nbsp;the&nbsp;user&nbsp;for&nbsp;permissions).&nbsp;Gears&nbsp;had&nbsp;an&nbsp;explicit&nbsp;permissions&nbsp;variable&nbsp;applications&nbsp;could&nbsp;check,&nbsp;which&nbsp;seems&nbsp;valuable&nbsp;-&nbsp;do&nbsp;we&nbsp;do&nbsp;anything&nbsp;similar&nbsp;elsewhere&nbsp;in&nbsp;HTML5&nbsp;that&nbsp;we&nbsp;could&nbsp;use&nbsp;as&nbsp;a&nbsp;model&nbsp;here?&lt;br&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;br&gt;&lt;span&nbsp;style=&quot;font-weight:&nbsp;bold;&quot;&gt;-&nbsp;Changes&nbsp;to&nbsp;worker&nbsp;APIs:&lt;br&gt;&lt;/span&gt;The&nbsp;existing&nbsp;SharedWorker&nbsp;APIs&nbsp;should&nbsp;be&nbsp;sufficient&nbsp;for&nbsp;interacting&nbsp;with&nbsp;the&nbsp;worker&nbsp;-&nbsp;SharedWorkers&nbsp;can&nbsp;already&nbsp;precede/outlive&nbsp;individual&nbsp;browser&nbsp;window&nbsp;instances,&nbsp;so&nbsp;from&nbsp;the&nbsp;standpoint&nbsp;of&nbsp;a&nbsp;given&nbsp;Window&nbsp;they&nbsp;should&nbsp;operate&nbsp;similarly.&lt;br&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;br&gt;An&nbsp;application&nbsp;can&nbsp;create&nbsp;a&nbsp;persistent&nbsp;worker&nbsp;via&nbsp;the&nbsp;PersistentWorker()&nbsp;constructor:&lt;br&gt;&lt;br&gt;   &nbsp;var&nbsp;worker&nbsp;=&nbsp;new&nbsp;PersistentWorker(&#39;worker.js&#39;,&nbsp;&#39;core&#39;);&lt;br&gt;&lt;br&gt;The&nbsp;namespace&nbsp;for&nbsp;PersistentWorkers&nbsp;are&nbsp;identical&nbsp;to&nbsp;those&nbsp;of&nbsp;SharedWorkers&nbsp;-&nbsp;for&nbsp;example,&nbsp;if&nbsp;you&nbsp;already&nbsp;have&nbsp;a&nbsp;PersistentWorker&nbsp;named&nbsp;&#39;core&#39;&nbsp;under&nbsp;a&nbsp;domain&nbsp;and&nbsp;a&nbsp;window&nbsp;tries&nbsp;to&nbsp;create&nbsp;a&nbsp;SharedWorker&nbsp;named&nbsp;&#39;core&#39;,&nbsp;a&nbsp;security&nbsp;exception&nbsp;will&nbsp;be&nbsp;thrown,&nbsp;just&nbsp;as&nbsp;if&nbsp;a&nbsp;different&nbsp;URL&nbsp;had&nbsp;been&nbsp;specified&nbsp;for&nbsp;two&nbsp;identically-named&nbsp;SharedWorkers.&lt;br&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;br&gt;From&nbsp;an&nbsp;entangled&nbsp;Window&#39;s&nbsp;standpoint,&nbsp;the&nbsp;persistent&nbsp;workers&nbsp;appear&nbsp;identical&nbsp;to&nbsp;SharedWorkers&nbsp;-&nbsp;they&nbsp;implement&nbsp;the&nbsp;SharedWorker&nbsp;interface&nbsp;and&nbsp;so&nbsp;expose&nbsp;identical&nbsp;APIs.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&nbsp;style=&quot;font-weight:&nbsp;bold;&quot;&gt;-&nbsp;Worker&nbsp;UI:&lt;/span&gt;&lt;br&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&gt;From&nbsp;the&nbsp;worker&nbsp;standpoint,&nbsp;the&nbsp;main&nbsp;difference&nbsp;between&nbsp;a&nbsp;PersistentWorker&nbsp;and&nbsp;other&nbsp;types&nbsp;of&nbsp;workers&nbsp;is&nbsp;that&nbsp;the&nbsp;normal&nbsp;way&nbsp;of&nbsp;interacting&nbsp;with&nbsp;the&nbsp;user&nbsp;(via&nbsp;an&nbsp;open&nbsp;browser&nbsp;window)&nbsp;is&nbsp;not&nbsp;available,&nbsp;since&nbsp;there&nbsp;may&nbsp;be&nbsp;no&nbsp;windows&nbsp;open&nbsp;to&nbsp;the&nbsp;parent&nbsp;domain.&nbsp;We&nbsp;have&nbsp;yet&nbsp;to&nbsp;enumerate&nbsp;through&nbsp;all&nbsp;of&nbsp;the&nbsp;use&nbsp;cases,&nbsp;but&nbsp;our&nbsp;initial&nbsp;brainstorming&nbsp;came&nbsp;up&nbsp;with&nbsp;a&nbsp;few&nbsp;possible&nbsp;types&nbsp;of&nbsp;desired&nbsp;interactions:&lt;div&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;br&gt;&lt;/div&gt;&lt;div&gt;1)&nbsp;Display&nbsp;an&nbsp;icon&nbsp;in&nbsp;the&nbsp;OS&nbsp;status&nbsp;bar.&nbsp;This&nbsp;would&nbsp;be&nbsp;an&nbsp;unobtrusive&nbsp;way&nbsp;for&nbsp;a&nbsp;given&nbsp;domain&nbsp;to&nbsp;display&nbsp;things&nbsp;like&nbsp;&quot;you&nbsp;have&nbsp;new&nbsp;mail&quot;&nbsp;or&nbsp;even&nbsp;errors&nbsp;like&nbsp;&quot;unable&nbsp;to&nbsp;contact&nbsp;server&quot;.&nbsp;If&nbsp;supplied&nbsp;with&nbsp;an&nbsp;onclick&nbsp;handler,&nbsp;this&nbsp;could&nbsp;also&nbsp;be&nbsp;the&nbsp;footprint&nbsp;for&nbsp;further&nbsp;types&nbsp;of&nbsp;user&nbsp;interaction:&lt;/div&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2)&nbsp;Open&nbsp;a&nbsp;browser&nbsp;window&nbsp;to&nbsp;a&nbsp;specific&nbsp;URL.&nbsp;I&nbsp;can&nbsp;imagine&nbsp;that&nbsp;popup&nbsp;blockers&nbsp;might&nbsp;block&nbsp;these&nbsp;windows&nbsp;except&nbsp;in&nbsp;response&nbsp;to&nbsp;a&nbsp;user&nbsp;action&nbsp;(like&nbsp;a&nbsp;click&nbsp;on&nbsp;the&nbsp;status&nbsp;bar&nbsp;icon). &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;div&gt;<br>
3)&nbsp;Toast&nbsp;(&lt;a&nbsp;href=&quot;http://en.wikipedia.org/wiki/Toast_%28computing%29&quot;&nbsp;target=&quot;_blank&quot;&gt;http://en.wikipedia.org/wiki/Toast_(computing)&lt;/a&gt;)&nbsp;-&nbsp;behavior&nbsp;is&nbsp;similar&nbsp;to&nbsp;the&nbsp;showNotification()&nbsp;API&nbsp;that&nbsp;was&nbsp;previously&nbsp;in&nbsp;HTML5.&lt;/div&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;<br>
&lt;div&gt;To&nbsp;enable&nbsp;these&nbsp;interactions,&nbsp;we&#39;d&nbsp;add&nbsp;something&nbsp;like&nbsp;the&nbsp;following&nbsp;new&nbsp;APIs&nbsp;to&nbsp;the&nbsp;global&nbsp;scope&nbsp;for&nbsp;persistent&nbsp;workers:&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;void&nbsp;open(url,&nbsp;&lt;span&nbsp;style=&quot;font-style:&nbsp;italic;&quot;&gt;optional &lt;/span&gt;target,&nbsp;&lt;span&nbsp;style=&quot;font-style:&nbsp;italic;&quot;&gt;optional &lt;/span&gt;feature,&nbsp;&lt;span&nbsp;style=&quot;font-style:&nbsp;italic;&quot;&gt;optional &lt;/span&gt;replace)&nbsp;-&nbsp;opens&nbsp;a&nbsp;browser&nbsp;window,&nbsp;just&nbsp;like&nbsp;the&nbsp;window.open()&nbsp;API&nbsp;which&nbsp;is&nbsp;available&nbsp;from&nbsp;page&nbsp;context&lt;/div&gt;<br>
<br>
<br>
<br>
<br>
&lt;br&gt;&lt;/div&gt;&lt;div&gt;showNotification(url)&nbsp;-&nbsp;displays&nbsp;the&nbsp;HTML&nbsp;at&nbsp;the&nbsp;passed&nbsp;URL&nbsp;to&nbsp;the&nbsp;user<br>
via&nbsp;a&nbsp;toast&nbsp;popup.&nbsp;user&nbsp;agents&nbsp;may&nbsp;put&nbsp;restrictions&nbsp;on&nbsp;the&nbsp;size&nbsp;of&nbsp;the<br>
resulting&nbsp;window.&nbsp;The&nbsp;original&nbsp;HTML5&nbsp;showNotification()&nbsp;API&nbsp;was&nbsp;much<br>
more&nbsp;limited&nbsp;(a&nbsp;few&nbsp;lines&nbsp;of&nbsp;unstyled&nbsp;text,&nbsp;an&nbsp;icon,&nbsp;and&nbsp;an&nbsp;onclick<br>
handler)&nbsp;-&nbsp;Dmitry&nbsp;Titov&nbsp;makes&nbsp;the&nbsp;case&nbsp;for&nbsp;full-HTML&nbsp;notifications<br>
here: &lt;a&nbsp;href=&quot;http://docs.google.com/Doc?id=dhg4xn62_28f8cwvzf8&quot;&nbsp;target=&quot;_blank&quot;&gt;http://docs.google.com/Doc?id=dhg4xn62_28f8cwvzf8&lt;/a&gt; -<br>
I&nbsp;have&nbsp;some&nbsp;concerns&nbsp;about&nbsp;phishing&nbsp;(since&nbsp;there&#39;s&nbsp;not&nbsp;necessarily&nbsp;any<br>
indication&nbsp;about&nbsp;the&nbsp;source&nbsp;of&nbsp;a&nbsp;given&nbsp;notification),&nbsp;so&nbsp;that&nbsp;may<br>
impact&nbsp;our&nbsp;implementation.&lt;br&gt;&lt;br&gt;void&nbsp;setStatus(imageUrl,&nbsp;&lt;span&nbsp;style=&quot;font-style:&nbsp;italic;&quot;&gt;optional&nbsp;&lt;/span&gt;statusText,&nbsp;&lt;span&nbsp;style=&quot;font-style:&nbsp;italic;&quot;&gt;optional&lt;/span&gt; onClick)&nbsp;-&nbsp;sets&nbsp;the&nbsp;status&nbsp;bar&nbsp;icon&nbsp;for&nbsp;this&nbsp;worker&nbsp;(possibly&nbsp;limited&nbsp;to&nbsp;one-per-domain?)&nbsp;with&nbsp;the&nbsp;specified&nbsp;hover&nbsp;text,&nbsp;and&nbsp;a&nbsp;callback&nbsp;which&nbsp;will&nbsp;be&nbsp;invoked&nbsp;if&nbsp;the&nbsp;user&nbsp;clicks&nbsp;on&nbsp;the&nbsp;icon.&nbsp;Not&nbsp;all&nbsp;platforms&nbsp;have&nbsp;status&nbsp;bars&nbsp;(for&nbsp;example,&nbsp;some&nbsp;Linux&nbsp;window&nbsp;managers&nbsp;may&nbsp;not),&nbsp;so&nbsp;on&nbsp;those&nbsp;platforms&nbsp;this&nbsp;might&nbsp;not&nbsp;do&nbsp;anything.&nbsp;User&nbsp;Agents&nbsp;might&nbsp;also&nbsp;just&nbsp;have&nbsp;a&nbsp;single&nbsp;status&nbsp;bar&nbsp;icon&nbsp;for&nbsp;the&nbsp;browser,&nbsp;which&nbsp;when&nbsp;clicked&nbsp;on&nbsp;displays&nbsp;a&nbsp;window&nbsp;with&nbsp;the&nbsp;status/status&nbsp;text&nbsp;for&nbsp;all&nbsp;workers&nbsp;(rather&nbsp;than&nbsp;lots&nbsp;of&nbsp;separate&nbsp;icons).&nbsp;&lt;br&gt;<br>
<br>
<br>
<br>
<br>
&lt;/div&gt;<br>
<br>
<br>
&lt;div&gt;&lt;br&gt;Anyhow,&nbsp;the&nbsp;ideas&nbsp;we&nbsp;have&nbsp;for&nbsp;UI/APIs&nbsp;are&nbsp;still&nbsp;pretty&nbsp;rough&nbsp;-&nbsp;we&#39;ll&nbsp;need&nbsp;to&nbsp;create&nbsp;some&nbsp;mocks&nbsp;and&nbsp;try&nbsp;them&nbsp;out&nbsp;to&nbsp;see&nbsp;what&nbsp;really&nbsp;works.&lt;br&gt;&lt;br&gt;&lt;b&gt;-&nbsp;Inter-worker&nbsp;communication&lt;/b&gt;&lt;br&gt;There&nbsp;isn&#39;t&nbsp;currently&nbsp;any&nbsp;way&nbsp;for&nbsp;workers&nbsp;(persistent&nbsp;or&nbsp;otherwise)&nbsp;to&nbsp;talk&nbsp;to&nbsp;one&nbsp;another&nbsp;without&nbsp;the&nbsp;intervention&nbsp;of&nbsp;a&nbsp;window,&nbsp;even&nbsp;when&nbsp;those&nbsp;workers&nbsp;exist&nbsp;under&nbsp;the&nbsp;same&nbsp;domain.&nbsp;Additionally,&nbsp;there&#39;s&nbsp;no&nbsp;good&nbsp;way&nbsp;for&nbsp;workers&nbsp;under&nbsp;different&nbsp;domains&nbsp;to&nbsp;talk&nbsp;to&nbsp;one&nbsp;another&nbsp;(a&nbsp;window&nbsp;can&nbsp;use&nbsp;the&nbsp;cross-domain&nbsp;messaging&nbsp;functionality&nbsp;to&nbsp;talk&nbsp;to&nbsp;other&nbsp;domains,&nbsp;but&nbsp;there&#39;s&nbsp;no&nbsp;analog&nbsp;for&nbsp;this&nbsp;for&nbsp;workers).&lt;br&gt;<br>
<br>
<br>
<br>
&lt;br&gt;This&nbsp;makes&nbsp;it&nbsp;hard&nbsp;for&nbsp;workers&nbsp;cooperatively&nbsp;running&nbsp;under&nbsp;different&nbsp;subdomains&nbsp;to&nbsp;share&nbsp;resources&nbsp;(authentication&nbsp;info,&nbsp;connections&nbsp;to&nbsp;the&nbsp;server,&nbsp;aggregated&nbsp;status&nbsp;messages,&nbsp;etc).&nbsp;We&nbsp;already&nbsp;have&nbsp;the&nbsp;idea&nbsp;of&nbsp;message&nbsp;events&nbsp;having&nbsp;an&nbsp;origin&nbsp;attribute&nbsp;which&nbsp;allows&nbsp;recipient&nbsp;windows&nbsp;to&nbsp;accept/ignore&nbsp;messages&nbsp;from&nbsp;other&nbsp;domains,&nbsp;but&nbsp;no&nbsp;way&nbsp;for&nbsp;workers&nbsp;to&nbsp;get&nbsp;ports&nbsp;connecting&nbsp;them&nbsp;to&nbsp;other&nbsp;workers,&nbsp;other&nbsp;than&nbsp;by&nbsp;having&nbsp;them&nbsp;delegated&nbsp;explicitly&nbsp;by&nbsp;windows.&nbsp;Have&nbsp;there&nbsp;been&nbsp;any&nbsp;past&nbsp;discussions&nbsp;about&nbsp;inter-worker&nbsp;communication?&lt;br&gt;<br>
<br>
<br>
<br>
&lt;br&gt;Internally&nbsp;we&#39;ve&nbsp;discussed&nbsp;things&nbsp;like&nbsp;a&nbsp;cross-domain&nbsp;findWorker()&nbsp;API,&nbsp;or&nbsp;just&nbsp;a&nbsp;cross-domain&nbsp;postMessage()&nbsp;API,&nbsp;both&nbsp;of&nbsp;which&nbsp;would&nbsp;allow&nbsp;specifying&nbsp;a&nbsp;destination&nbsp;worker&nbsp;by&nbsp;domain&nbsp;+&nbsp;name,&nbsp;but&nbsp;these&nbsp;seem&nbsp;like&nbsp;flawed/cumbersome&nbsp;solutions.&lt;br&gt;<br>
<br>
<br>
<br>
<br>
&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;b&gt;-&nbsp;Error&nbsp;Handling/Edge&nbsp;cases:&lt;/b&gt;&lt;br&gt;There&nbsp;are&nbsp;a&nbsp;few&nbsp;places&nbsp;where&nbsp;we&nbsp;need&nbsp;to&nbsp;deal&nbsp;with&nbsp;errors&nbsp;(particularly&nbsp;network&nbsp;errors):&lt;br&gt;&lt;br&gt;1)&nbsp;Persistent&nbsp;worker&nbsp;is&nbsp;launched&nbsp;by&nbsp;the&nbsp;user&nbsp;agent&nbsp;at&nbsp;startup,&nbsp;but&nbsp;we&nbsp;can&#39;t&nbsp;load&nbsp;the&nbsp;code&nbsp;(possibly&nbsp;due&nbsp;to&nbsp;a&nbsp;network&nbsp;error).&nbsp;There&#39;s&nbsp;no&nbsp;application&nbsp;to&nbsp;report&nbsp;the&nbsp;error&nbsp;to.&nbsp;In&nbsp;the&nbsp;case&nbsp;of&nbsp;network&nbsp;error,&nbsp;it&nbsp;seems&nbsp;like&nbsp;the&nbsp;user&nbsp;agent&nbsp;may&nbsp;want&nbsp;to&nbsp;retry&nbsp;(I&nbsp;can&nbsp;imagine&nbsp;that&nbsp;the&nbsp;browser&nbsp;might&nbsp;start&nbsp;up&nbsp;while&nbsp;the&nbsp;OS&nbsp;is&nbsp;still&nbsp;negotiating&nbsp;for&nbsp;a&nbsp;wireless&nbsp;IP&nbsp;during&nbsp;OS&nbsp;initialization).&nbsp;&lt;br&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;br&gt;2)&nbsp;Worker&nbsp;wants&nbsp;to&nbsp;display&nbsp;a&nbsp;status&nbsp;icon,&nbsp;but&nbsp;the&nbsp;network&nbsp;is&nbsp;down&nbsp;so&nbsp;the&nbsp;browser&nbsp;can&#39;t&nbsp;fetch&nbsp;the&nbsp;URL.&nbsp;One&nbsp;suggestion&nbsp;would&nbsp;be&nbsp;for&nbsp;workers&nbsp;to&nbsp;use&nbsp;data&nbsp;URIs&nbsp;for&nbsp;their&nbsp;status&nbsp;icons.&nbsp;Failing&nbsp;that,&nbsp;the&nbsp;user&nbsp;agent&nbsp;could&nbsp;display&nbsp;a&nbsp;generic&nbsp;icon.&nbsp;Similar&nbsp;issues&nbsp;exist&nbsp;for&nbsp;showNotification()&nbsp;as&nbsp;well,&nbsp;if&nbsp;we&nbsp;allow&nbsp;full&nbsp;HTML&nbsp;in&nbsp;notification&nbsp;popups.&lt;br&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;br&gt;3)&nbsp;Should&nbsp;persistent&nbsp;workers&nbsp;be&nbsp;locked&nbsp;into&nbsp;a&nbsp;single&nbsp;URL&nbsp;forever?&nbsp;Currently&nbsp;it&#39;s&nbsp;an&nbsp;error&nbsp;to&nbsp;try&nbsp;to&nbsp;create&nbsp;a&nbsp;shared&nbsp;worker&nbsp;with&nbsp;a&nbsp;different&nbsp;URL&nbsp;when&nbsp;there&nbsp;is&nbsp;already&nbsp;a&nbsp;SharedWorker&nbsp;running&nbsp;-&nbsp;this&nbsp;problem&nbsp;is&nbsp;compounded&nbsp;for&nbsp;persistent&nbsp;workers,&nbsp;because&nbsp;the&nbsp;workers&nbsp;essentially&nbsp;never&nbsp;exit&nbsp;so&nbsp;are&nbsp;stuck&nbsp;with&nbsp;using&nbsp;the&nbsp;same&nbsp;URL&nbsp;forever.&nbsp;Perhaps&nbsp;it&nbsp;makes&nbsp;sense&nbsp;to&nbsp;make&nbsp;WorkerGlobalScope.location&nbsp;writeable,&nbsp;to&nbsp;allow&nbsp;workers&nbsp;to&nbsp;control&nbsp;their&nbsp;own&nbsp;source?&lt;br&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks&nbsp;in&nbsp;advance&nbsp;for&nbsp;your&nbsp;feedback&nbsp;on&nbsp;our&nbsp;approach&nbsp;-&nbsp;it&nbsp;seems&nbsp;like&nbsp;having&nbsp;persistent&nbsp;workers&nbsp;can&nbsp;enable&nbsp;some&nbsp;really&nbsp;cool&nbsp;application&nbsp;functionality&nbsp;that&nbsp;you&nbsp;can&#39;t&nbsp;really&nbsp;get&nbsp;any&nbsp;other&nbsp;way.&lt;br&gt;&lt;br&gt;-atw&lt;br&gt;<br>
<br>
&lt;/div&gt;&lt;div&gt;<br>
&lt;div&gt;<br>
<br>
&lt;br&gt;<br>
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;<br>

</tt>
