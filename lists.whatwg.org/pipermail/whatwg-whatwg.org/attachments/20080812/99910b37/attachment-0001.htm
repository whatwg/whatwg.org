<tt>
&lt;!DOCTYPE&nbsp;html&nbsp;PUBLIC&nbsp;&quot;-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN&quot;&gt;<br>
&lt;html&gt;<br>
&lt;head&gt;<br>
&lt;/head&gt;<br>
&lt;body&nbsp;bgcolor=&quot;#ffffff&quot;&nbsp;text=&quot;#000000&quot;&gt;<br>
A&nbsp;few&nbsp;questions&nbsp;and&nbsp;thoughts&nbsp;on&nbsp;the&nbsp;WebWorkers&nbsp;proposal:&lt;br&gt;<br>
&lt;br&gt;<br>
If&nbsp;a&nbsp;WebWorker&nbsp;object&nbsp;is&nbsp;assigned&nbsp;to&nbsp;local&nbsp;variable&nbsp;inside&nbsp;a&nbsp;&nbsp;complex<br>
script&nbsp;then&nbsp;it&nbsp;cannot&nbsp;be&nbsp;seen&nbsp;or&nbsp;stopped&nbsp;by&nbsp;the&nbsp;calling&nbsp;page.&nbsp;Should<br>
the&nbsp;specification&nbsp;offer&nbsp;document.workers&nbsp;or&nbsp;getAllWorkers()&nbsp;as&nbsp;a&nbsp;means<br>
to&nbsp;iterate&nbsp;over&nbsp;all&nbsp;workers&nbsp;regardless&nbsp;of&nbsp;where&nbsp;they&nbsp;were&nbsp;created?&lt;br&gt;<br>
&nbsp;&lt;br&gt;<br>
Is&nbsp;it&nbsp;wise&nbsp;to&nbsp;give&nbsp;a&nbsp;web&nbsp;application&nbsp;more&nbsp;processing&nbsp;power<br>
than&nbsp;a&nbsp;single&nbsp;CPU&nbsp;core&nbsp;(or&nbsp;HT&nbsp;thread)&nbsp;can&nbsp;provide?&nbsp;What&nbsp;stops&nbsp;a&nbsp;web<br>
page&nbsp;hogging&nbsp;ALL<br>
cores&nbsp;(deliberately&nbsp;or&nbsp;not)&nbsp;and&nbsp;leaving&nbsp;no&nbsp;resources&nbsp;for&nbsp;the&nbsp;UI&nbsp;mouse<br>
or&nbsp;key&nbsp;actions&nbsp;required&nbsp;to&nbsp;close&nbsp;the&nbsp;page?&nbsp;(This&nbsp;is&nbsp;not&nbsp;a&nbsp;contrived<br>
example,&nbsp;I&nbsp;have&nbsp;seen&nbsp;both&nbsp;Internet&nbsp;Explorer&nbsp;on&nbsp;Win32&nbsp;and&nbsp;Flash&nbsp;on&nbsp;Linux<br>
consume&nbsp;100%&nbsp;CPU&nbsp;on&nbsp;several&nbsp;occasions).&nbsp;I&nbsp;know&nbsp;it's&nbsp;a&nbsp;&quot;vendor&nbsp;issue&quot;<br>
but&nbsp;should&nbsp;the&nbsp;spec&nbsp;at&nbsp;least&nbsp;recommend&nbsp;UAs&nbsp;leave&nbsp;the&nbsp;last&nbsp;CPU/core&nbsp;free<br>
for&nbsp;OS&nbsp;tasks?&lt;br&gt;<br>
&lt;br&gt;<br>
Can&nbsp;anybody&nbsp;point&nbsp;me&nbsp;to&nbsp;an&nbsp;existing&nbsp;Javascript-based&nbsp;web&nbsp;service&nbsp;that<br>
needs&nbsp;more&nbsp;client&nbsp;processing&nbsp;power&nbsp;than&nbsp;a&nbsp;single&nbsp;P4&nbsp;core?&lt;br&gt;<br>
&lt;br&gt;<br>
Shouldn't&nbsp;an&nbsp;application&nbsp;that&nbsp;requires&nbsp;so<br>
much&nbsp;grunt&nbsp;really&nbsp;be&nbsp;written&nbsp;in&nbsp;Java&nbsp;or&nbsp;C&nbsp;as&nbsp;an&nbsp;applet,&nbsp;plug-in&nbsp;or<br>
standalone<br>
application?&nbsp;&lt;br&gt;<br>
&lt;br&gt;<br>
If&nbsp;an&nbsp;application&nbsp;did&nbsp;require&nbsp;that&nbsp;much&nbsp;computation&nbsp;isn't&nbsp;it&nbsp;also<br>
likely&nbsp;to&nbsp;need&nbsp;a&nbsp;more&nbsp;efficient&nbsp;inter-&quot;thread&quot;&nbsp;messaging&nbsp;protocol&nbsp;than<br>
passing&nbsp;Unicode&nbsp;strings&nbsp;through&nbsp;MessagePorts?&nbsp;At&nbsp;the&nbsp;very&nbsp;least<br>
wouldn't&nbsp;it&nbsp;usually&nbsp;require&nbsp;the&nbsp;passing&nbsp;of&nbsp;binary&nbsp;data,&nbsp;complex&nbsp;objects<br>
or&nbsp;arrays&nbsp;between&nbsp;workers&nbsp;without&nbsp;the&nbsp;additional&nbsp;overhead&nbsp;of&nbsp;a&nbsp;string<br>
encode/decode?&lt;br&gt;<br>
&lt;br&gt;<br>
Is&nbsp;the&nbsp;resistance&nbsp;to&nbsp;adding&nbsp;threads&nbsp;to&nbsp;Javascript&nbsp;an&nbsp;issue&nbsp;with&nbsp;the<br>
language&nbsp;itself,&nbsp;or&nbsp;a&nbsp;matter&nbsp;of&nbsp;current&nbsp;interpreters&nbsp;being<br>
non-threadsafe?&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;draft&nbsp;spec&nbsp;says&nbsp;&quot;protected&quot;&nbsp;workers&nbsp;are&nbsp;allowed&nbsp;to&nbsp;live&nbsp;for&nbsp;a<br>
&quot;user-agent-defined&nbsp;amount&nbsp;of&nbsp;time&quot;&nbsp;after&nbsp;a&nbsp;page&nbsp;or&nbsp;browser&nbsp;is&nbsp;closed.<br>
I'm&nbsp;not&nbsp;really&nbsp;sure&nbsp;what&nbsp;possible&nbsp;value&nbsp;this&nbsp;could&nbsp;have&nbsp;since&nbsp;as&nbsp;an<br>
author&nbsp;we&nbsp;won't&nbsp;know&nbsp;whether&nbsp;the&nbsp;UA&nbsp;allows&nbsp;_any_&nbsp;time&nbsp;and&nbsp;if&nbsp;so&nbsp;whether<br>
that&nbsp;time&nbsp;will&nbsp;be&nbsp;enough&nbsp;to&nbsp;complete&nbsp;our&nbsp;cleanup&nbsp;(given&nbsp;a&nbsp;vast<br>
discrepancy&nbsp;in&nbsp;operations-per-second&nbsp;across&nbsp;UAs&nbsp;and&nbsp;client&nbsp;PCs).&nbsp;If&nbsp;our<br>
cleanup&nbsp;can&nbsp;be&nbsp;arbitrarily&nbsp;cancelled&nbsp;then&nbsp;isn't&nbsp;it&nbsp;likely&nbsp;that&nbsp;we&nbsp;might<br>
actually&nbsp;leave&nbsp;the&nbsp;client&nbsp;or&nbsp;server&nbsp;in&nbsp;a&nbsp;worse&nbsp;state&nbsp;than&nbsp;if&nbsp;we&nbsp;hadn't<br>
tried&nbsp;at&nbsp;all?&nbsp;Won't&nbsp;this&nbsp;cause&nbsp;difficult-to-trace&nbsp;sporadic&nbsp;bugs&nbsp;caused<br>
by&nbsp;browser&nbsp;differences&nbsp;in&nbsp;what&nbsp;could&nbsp;be&nbsp;a&nbsp;rare&nbsp;event&nbsp;(a&nbsp;close&nbsp;during<br>
operation&nbsp;Y&nbsp;instead&nbsp;of&nbsp;during&nbsp;X)?&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;just&nbsp;don't&nbsp;see&nbsp;any&nbsp;common&nbsp;cases&nbsp;where&nbsp;you'd&nbsp;_need_<br>
multiple&nbsp;OS&nbsp;threads&nbsp;but&nbsp;still&nbsp;be&nbsp;willing&nbsp;to&nbsp;accept&nbsp;Javascripts'&nbsp;poor<br>
performance,&nbsp;Webworkers&nbsp;limited&nbsp;API,&nbsp;and&nbsp;MessagePorts'&nbsp;limited&nbsp;IO.&nbsp;The<br>
only&nbsp;things&nbsp;I&nbsp;can&nbsp;think&nbsp;of&nbsp;are&nbsp;new&nbsp;user&nbsp;annoyances&nbsp;(like&nbsp;delaying<br>
browser&nbsp;shutdown&nbsp;and&nbsp;hogging&nbsp;the&nbsp;CPU).&nbsp;Sure&nbsp;UA's&nbsp;might&nbsp;let&nbsp;us&nbsp;disable<br>
these&nbsp;things&nbsp;but&nbsp;then&nbsp;some&nbsp;pages&nbsp;won't&nbsp;work.&nbsp;&lt;a<br>
&nbsp;href=&quot;http://stuff.gsnedders.com/spec-gen/webworkers.html&quot;&gt;The&nbsp;Working<br>
Draft&lt;/a&gt;<br>
lists&nbsp;a&nbsp;few&nbsp;examples,&nbsp;most&nbsp;of&nbsp;which&nbsp;appear&nbsp;to&nbsp;use&nbsp;non-blocking&nbsp;network<br>
IO&nbsp;and&nbsp;callbacks&nbsp;anyway.&nbsp;Other&nbsp;examples&nbsp;rely&nbsp;on&nbsp;the&nbsp;ability&nbsp;for&nbsp;workers<br>
to&nbsp;outlive&nbsp;the&nbsp;lifetime&nbsp;of&nbsp;the&nbsp;calling&nbsp;page&nbsp;(which&nbsp;is&nbsp;pretty<br>
contentious).&nbsp;The&nbsp;one&nbsp;remaining&nbsp;example&nbsp;is&nbsp;a&nbsp;contrived&nbsp;mathematical<br>
exercise.&nbsp;Is&nbsp;the&nbsp;scientific&nbsp;world&nbsp;really&nbsp;crying&nbsp;out&nbsp;for&nbsp;complex<br>
theorems&nbsp;to&nbsp;be&nbsp;solved&nbsp;in&nbsp;web&nbsp;browsers?&nbsp;What&nbsp;real-world&nbsp;use&nbsp;cases&nbsp;is<br>
WebWorkers&nbsp;supposed&nbsp;to&nbsp;solve?&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;would&nbsp;like&nbsp;to&nbsp;see&nbsp;WebWorkers&nbsp;happen&nbsp;but&nbsp;as&nbsp;an&nbsp;author&nbsp;and&nbsp;a&nbsp;user&nbsp;I<br>
have&nbsp;serious&nbsp;concerns&nbsp;about&nbsp;using&nbsp;it&nbsp;in&nbsp;its&nbsp;current&nbsp;form.&nbsp;Is&nbsp;it&nbsp;really<br>
worth&nbsp;implementing&nbsp;or&nbsp;should&nbsp;more&nbsp;attention&nbsp;be&nbsp;paid&nbsp;to&nbsp;fixing<br>
non-thread-safe&nbsp;practices&nbsp;in&nbsp;the&nbsp;specification&nbsp;so&nbsp;future&nbsp;UAs&nbsp;can&nbsp;better<br>
manage&nbsp;threading&nbsp;internally&nbsp;(ie:&nbsp;video,&nbsp;IO,&nbsp;sockets,&nbsp;JS&nbsp;all&nbsp;running&nbsp;on<br>
seperate&nbsp;threads&nbsp;or&nbsp;even&nbsp;sets&nbsp;of&nbsp;threads&nbsp;per&nbsp;open&nbsp;tab/window)?&nbsp;&lt;br&gt;<br>
&lt;br&gt;<br>
Shannon&lt;br&gt;<br>
&lt;/body&gt;<br>
&lt;/html&gt;<br>

</tt>
