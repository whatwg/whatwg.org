<tt>
&lt;!DOCTYPE&nbsp;HTML&nbsp;PUBLIC&nbsp;&quot;-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN&quot;&gt;<br>
&lt;html&gt;<br>
&lt;head&gt;<br>
&nbsp;&nbsp;&lt;meta&nbsp;content=&quot;text/html;&nbsp;charset=UTF-8&quot;&nbsp;http-equiv=&quot;Content-Type&quot;&gt;<br>
&lt;/head&gt;<br>
&lt;body&nbsp;bgcolor=&quot;#ffffff&quot;&nbsp;text=&quot;#000000&quot;&gt;<br>
On&nbsp;11/21/10&nbsp;10:51&nbsp;PM,&nbsp;Robert&nbsp;O'Callahan&nbsp;wrote:<br>
&lt;blockquote<br>
&nbsp;cite=&quot;mid:AANLkTikv7ZN2Af+aTNcz=ZwkRG7fRKbfyqx+XqB7oqFE@mail.gmail.com&quot;<br>
&nbsp;type=&quot;cite&quot;&gt;On&nbsp;Mon,&nbsp;Nov&nbsp;22,&nbsp;2010&nbsp;at&nbsp;6:22&nbsp;PM,&nbsp;Charles&nbsp;Pritchard&nbsp;&lt;span<br>
&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;moz-do-not-send=&quot;true&quot;&nbsp;href=&quot;mailto:chuck@jumis.com&quot;&gt;chuck@jumis.com&lt;/a&gt;&gt;&lt;/span&gt;<br>
wrote:&lt;br&gt;<br>
&nbsp;&nbsp;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;<br>
&nbsp;&nbsp;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;<br>
&nbsp;style=&quot;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;padding-left:&nbsp;1ex;&quot;&gt;I've<br>
a&nbsp;deep&nbsp;and&nbsp;detailed&nbsp;understanding&nbsp;of&nbsp;the&nbsp;SVG,&nbsp;HTML,&nbsp;DOM&nbsp;and&nbsp;CSS&nbsp;specs.&lt;br&gt;<br>
&nbsp;&nbsp;&lt;/blockquote&gt;<br>
&nbsp;&nbsp;&lt;div&gt;&lt;br&gt;<br>
Just&nbsp;out&nbsp;of&nbsp;interest,&nbsp;why&nbsp;aren't&nbsp;you&nbsp;using&nbsp;SVG?&lt;br&gt;<br>
&nbsp;&nbsp;&lt;/div&gt;<br>
&nbsp;&nbsp;&lt;/div&gt;<br>
&lt;/blockquote&gt;<br>
Many&nbsp;thanks&nbsp;for&nbsp;the&nbsp;SVG&nbsp;Filter&nbsp;Effect&nbsp;CSS&nbsp;extension.&lt;br&gt;<br>
I'd&nbsp;like&nbsp;to&nbsp;see&nbsp;that&nbsp;catch&nbsp;on&nbsp;with&nbsp;other&nbsp;vendors.&lt;br&gt;<br>
&lt;br&gt;<br>
Implementations&nbsp;of&nbsp;SVG&nbsp;are&nbsp;uneven&nbsp;and/or&nbsp;slow:&lt;br&gt;<br>
&lt;br&gt;<br>
Example:&nbsp;SVG&nbsp;Filter&nbsp;Effect&nbsp;+&nbsp;with&nbsp;an&nbsp;animated&nbsp;rotate&nbsp;in&nbsp;FF&nbsp;3&nbsp;(excuse&nbsp;me<br>
if&nbsp;this&nbsp;is&nbsp;dated)&lt;br&gt;<br>
was&nbsp;quite&nbsp;slow,&nbsp;though&nbsp;the&nbsp;SVG&nbsp;FE&nbsp;implementation&nbsp;is&nbsp;faster&nbsp;than<br>
CanvasPixelArray.&lt;br&gt;<br>
It's&nbsp;also&nbsp;tricky,&nbsp;getting&nbsp;SVG&nbsp;FE&nbsp;turned&nbsp;on&nbsp;(for&nbsp;me&nbsp;anyway),&nbsp;with&nbsp;the<br>
xhtml&nbsp;mime&nbsp;requirements.&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;don't&nbsp;fault&nbsp;anyone&nbsp;in&nbsp;this.&nbsp;SVG&nbsp;is&nbsp;a&nbsp;large,&nbsp;complex&nbsp;spec.&nbsp;A&nbsp;lot&nbsp;of<br>
work&nbsp;goes&nbsp;into&nbsp;SVG&nbsp;clients.&lt;br&gt;<br>
With&nbsp;Canvas,&nbsp;we&nbsp;have&nbsp;fine&nbsp;control&nbsp;over&nbsp;performance&nbsp;and&nbsp;memory&nbsp;usage.<br>
Much&nbsp;of&nbsp;those&nbsp;options&lt;br&gt;<br>
have&nbsp;analogs&nbsp;in&nbsp;SVG&nbsp;[like&nbsp;freezing&nbsp;composition&nbsp;between&nbsp;layers],&nbsp;and<br>
when&nbsp;we&nbsp;do&nbsp;target&nbsp;an&nbsp;SVG-strict&nbsp;profile,&lt;br&gt;<br>
we'll&nbsp;exploit&nbsp;those&nbsp;options.&lt;br&gt;<br>
&lt;br&gt;<br>
For&nbsp;both&nbsp;performance&nbsp;and&nbsp;compatibility&nbsp;reasons,&nbsp;we've&nbsp;had&nbsp;to&nbsp;write&nbsp;low<br>
level&nbsp;code&nbsp;anyway.&lt;br&gt;<br>
Actual&nbsp;display&nbsp;calls&nbsp;(be&nbsp;they&nbsp;SVG-able&nbsp;or&nbsp;not)&nbsp;are&nbsp;a&nbsp;relatively&nbsp;small<br>
part&nbsp;of&nbsp;our&nbsp;app.&lt;br&gt;<br>
&lt;br&gt;<br>
I'm&nbsp;currently&nbsp;focused&nbsp;on&nbsp;interchangeability&nbsp;of&nbsp;our&nbsp;HTML&nbsp;and&nbsp;Canvas<br>
profiles.&lt;br&gt;<br>
Many&nbsp;SVG&nbsp;features&nbsp;are&nbsp;available&nbsp;via&nbsp;CSS&nbsp;now:&nbsp;paint&nbsp;servers&nbsp;and<br>
gradients,&lt;br&gt;<br>
rounded&nbsp;rectangles,&nbsp;some&nbsp;text&nbsp;effects.&lt;br&gt;<br>
&lt;br&gt;<br>
Because&nbsp;of&nbsp;that,&nbsp;we're&nbsp;focused&nbsp;on&nbsp;HTML.&lt;br&gt;<br>
SVG&nbsp;FE&nbsp;is&nbsp;definitely&nbsp;in&nbsp;our&nbsp;code&nbsp;base&nbsp;as&nbsp;a&nbsp;rendering&nbsp;option.&lt;br&gt;<br>
We&nbsp;store&nbsp;our&nbsp;iconography&nbsp;in&nbsp;SVG,&nbsp;and&nbsp;some&nbsp;basic&nbsp;glyphs.&lt;br&gt;<br>
We&nbsp;use&nbsp;canvas&nbsp;to&nbsp;render&nbsp;the&nbsp;glyphs,&nbsp;and&nbsp;we&nbsp;pre-render&nbsp;our&nbsp;iconography<br>
into&nbsp;png.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;blockquote<br>
&nbsp;cite=&quot;mid:AANLkTikv7ZN2Af+aTNcz=ZwkRG7fRKbfyqx+XqB7oqFE@mail.gmail.com&quot;<br>
&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;<br>
&nbsp;&nbsp;&lt;div&gt;I&nbsp;understand&nbsp;the&nbsp;need&nbsp;to&nbsp;make&nbsp;canvas&nbsp;backing&nbsp;store&nbsp;pixels&nbsp;map&nbsp;to<br>
device&nbsp;pixels&nbsp;when&nbsp;possible.&nbsp;Suppose&nbsp;that,&nbsp;on&nbsp;clearing&nbsp;the&nbsp;canvas&nbsp;(e.g.<br>
by&nbsp;setting&nbsp;the&nbsp;width&nbsp;or&nbsp;height&nbsp;attribute),&nbsp;the&nbsp;browser&nbsp;automatically<br>
set&nbsp;the&nbsp;canvas&nbsp;backing&nbsp;store&nbsp;density&nbsp;so&nbsp;that&nbsp;canvas&nbsp;backing&nbsp;store<br>
pixels&nbsp;map&nbsp;to&nbsp;device&nbsp;pixels&nbsp;(taking&nbsp;into&nbsp;account&nbsp;the&nbsp;current&nbsp;zoom<br>
settings).&nbsp;Suppose&nbsp;further&nbsp;that&nbsp;browsers&nbsp;fired&nbsp;the&nbsp;'resize'&nbsp;event&nbsp;when<br>
they&nbsp;zoom&nbsp;in&nbsp;a&nbsp;way&nbsp;that&nbsp;changes&nbsp;the&nbsp;window&nbsp;size&nbsp;(as&nbsp;they&nbsp;should,&nbsp;even<br>
if&nbsp;they&nbsp;currently&nbsp;don't).&nbsp;Then&nbsp;on&nbsp;'resize'&nbsp;you&nbsp;could&nbsp;clear&nbsp;your&nbsp;canvas<br>
and&nbsp;redraw&nbsp;it,&nbsp;and&nbsp;automatically&nbsp;get&nbsp;a&nbsp;canvas&nbsp;backing&nbsp;store&nbsp;with&nbsp;the<br>
right&nbsp;resolution&nbsp;with&nbsp;no&nbsp;further&nbsp;code&nbsp;changes.&nbsp;Would&nbsp;that&nbsp;address&nbsp;your<br>
use&nbsp;case?&lt;br&gt;<br>
&nbsp;&nbsp;&lt;/div&gt;<br>
&nbsp;&nbsp;&lt;/div&gt;<br>
&lt;/blockquote&gt;<br>
I&nbsp;appreciate&nbsp;your&nbsp;understanding,&nbsp;and&nbsp;your&nbsp;brainstorming.&lt;br&gt;<br>
&lt;br&gt;<br>
We&nbsp;currently&nbsp;use&nbsp;downsampled&nbsp;images&nbsp;within&nbsp;our&nbsp;application,&nbsp;and&nbsp;this<br>
proposal&nbsp;would&nbsp;override&nbsp;them&nbsp;We&nbsp;use&nbsp;them&nbsp;where&nbsp;filter&nbsp;effects&nbsp;are&nbsp;live,<br>
and&nbsp;are&nbsp;too&nbsp;expensive&nbsp;for&nbsp;the&nbsp;host&nbsp;to&nbsp;process&nbsp;quickly.&nbsp;Sampling&nbsp;is&nbsp;also<br>
useful&nbsp;as&nbsp;a&nbsp;memory&nbsp;management&nbsp;technique.&nbsp;On&nbsp;a&nbsp;resource&nbsp;constrained<br>
device,&nbsp;for&nbsp;whatever&nbsp;reason,&nbsp;it&nbsp;can&nbsp;make&nbsp;sense&nbsp;to&nbsp;draw&nbsp;the&nbsp;canvas&nbsp;at&nbsp;a<br>
smaller&nbsp;size,&nbsp;even&nbsp;though&nbsp;upscaling&nbsp;is&nbsp;noticable.&lt;br&gt;<br>
&lt;br&gt;<br>
With&nbsp;a&nbsp;complex&nbsp;gui&nbsp;/&nbsp;canvas&nbsp;drawing,&nbsp;redrawing&nbsp;the&nbsp;image&nbsp;may&nbsp;take&nbsp;some<br>
time.&nbsp;During&nbsp;zoom&nbsp;events,&nbsp;I&nbsp;can&nbsp;use&nbsp;a&nbsp;setTimeout&nbsp;to&nbsp;wait&nbsp;for&nbsp;the<br>
browser&nbsp;to&nbsp;settle&nbsp;before&nbsp;redrawing&nbsp;at&nbsp;higher&nbsp;resolution.&nbsp;CSS&nbsp;automates<br>
everything&nbsp;for&nbsp;me.&nbsp;It&nbsp;works&nbsp;wonderfully.&lt;br&gt;<br>
&lt;br&gt;<br>
Generally,&nbsp;with&nbsp;Canvas,&nbsp;things&nbsp;should&nbsp;not&nbsp;be&nbsp;automated.&nbsp;It's&nbsp;the&nbsp;CSS<br>
that's&nbsp;automated.&lt;br&gt;<br>
Think&nbsp;of&nbsp;CSS&nbsp;as&nbsp;sending&nbsp;GPU&nbsp;instructions,&nbsp;and&nbsp;Canvas&nbsp;as&nbsp;simply&nbsp;updating<br>
a&nbsp;texture&nbsp;within&nbsp;the&nbsp;GPU.&lt;br&gt;<br>
&lt;br&gt;<br>
AFAIK,&nbsp;it&nbsp;is&nbsp;standard&nbsp;in&nbsp;practice,&nbsp;to&nbsp;send&nbsp;a&nbsp;resize&nbsp;event,&nbsp;as&nbsp;the&nbsp;page<br>
layout&nbsp;does&nbsp;change&nbsp;(innerWidth&nbsp;changes).&nbsp;I'd&nbsp;like&nbsp;to&nbsp;see&nbsp;this&nbsp;mentioned<br>
in&nbsp;a&nbsp;standards&nbsp;document.&nbsp;I&nbsp;think&nbsp;we&nbsp;all&nbsp;agree&nbsp;that&nbsp;'zoom'&nbsp;should&nbsp;send&nbsp;a<br>
resize&nbsp;event,&nbsp;and&nbsp;currently&nbsp;does.&lt;br&gt;<br>
&lt;br&gt;<br>
For&nbsp;ease&nbsp;of&nbsp;use,&nbsp;it's&nbsp;as&nbsp;easy&nbsp;in&nbsp;canvas&nbsp;as&nbsp;it&nbsp;is&nbsp;in&nbsp;CSS&nbsp;to&nbsp;handle<br>
scaling:&lt;br&gt;<br>
&lt;br&gt;<br>
myDrawFunc&nbsp;=&nbsp;function()&nbsp;{&lt;br&gt;<br>
 ctx.save();&lt;br&gt;<br>
 ctx.scale(dpiScale,dpiScale);&lt;br&gt;<br>
 runMyRepainterCommands();&lt;br&gt;<br>
 ctx.restore();&lt;br&gt;<br>
}&lt;br&gt;<br>
window.onresize&nbsp;=&nbsp;myDrawFunc;&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;was&nbsp;able&nbsp;to&nbsp;support&nbsp;resolution&nbsp;scaling&nbsp;on&nbsp;a&nbsp;complex&nbsp;application&nbsp;with<br>
less&nbsp;than&nbsp;an&nbsp;hour&nbsp;of&nbsp;work.&nbsp;It&nbsp;took&nbsp;me&nbsp;longer&nbsp;to&nbsp;test&nbsp;compatibility<br>
between&nbsp;browsers,&lt;br&gt;<br>
for&nbsp;the&nbsp;hacks&nbsp;I&nbsp;used&nbsp;to&nbsp;try&nbsp;and&nbsp;get&nbsp;the&nbsp;DPI&nbsp;Scale&nbsp;values.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/body&gt;<br>
&lt;/html&gt;<br>

</tt>
