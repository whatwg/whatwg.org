<tt>
&lt;div&nbsp;dir=&quot;ltr&quot;&gt;On&nbsp;Thu,&nbsp;Aug&nbsp;14,&nbsp;2008&nbsp;at&nbsp;10:06&nbsp;PM,&nbsp;Shannon&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&amp;lt;&lt;a&nbsp;href=&quot;mailto:shannon@arc.net.au&quot;&gt;shannon@arc.net.au&lt;/a&gt;&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;padding-left:&nbsp;1ex;&quot;&gt;<br>
<br>
<br>
<br>
&nbsp;&nbsp;<br>
<br>
&lt;div&nbsp;bgcolor=&quot;#ffffff&quot;&nbsp;text=&quot;#000000&quot;&gt;On&nbsp;second&nbsp;thoughts&nbsp;I&nbsp;withdraw&nbsp;these&nbsp;claims.&nbsp;I&nbsp;don&amp;#39;t&nbsp;have&nbsp;the&nbsp;statistics<br>
to&nbsp;know&nbsp;one&nbsp;way&nbsp;or&nbsp;the&nbsp;other&nbsp;why&nbsp;&amp;quot;portable&nbsp;threads&amp;quot;&nbsp;are&nbsp;more&nbsp;prevalent<br>
than&nbsp;&amp;quot;share&nbsp;nothing&amp;quot;&nbsp;ones.&nbsp;There&nbsp;may&nbsp;be&nbsp;many&nbsp;reasons&nbsp;but&nbsp;latencies<br>
probably&nbsp;isn&amp;#39;t&nbsp;one&nbsp;of&nbsp;them.&nbsp;It&nbsp;could&nbsp;just&nbsp;be&nbsp;fashion&nbsp;or&nbsp;convenience.&lt;br&gt;<br>
&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&amp;nbsp;&lt;br&gt;Excuse&nbsp;my&nbsp;rant:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;Shared-memory&nbsp;threads&nbsp;and&nbsp;locks&nbsp;are&nbsp;a&nbsp;relatively&nbsp;easy&nbsp;model&nbsp;to&nbsp;implement,&nbsp;they&nbsp;*appear*&nbsp;to&nbsp;be&nbsp;a&nbsp;straightforward&nbsp;extension&nbsp;to&nbsp;existing&nbsp;platforms&nbsp;and&nbsp;programming&nbsp;languages,&nbsp;and&nbsp;they&nbsp;don&amp;#39;t&nbsp;require&nbsp;much&nbsp;implementation&nbsp;wizardry&nbsp;to&nbsp;provide&nbsp;good&nbsp;performance&nbsp;in&nbsp;simple&nbsp;apps&nbsp;written&nbsp;by&nbsp;really&nbsp;smart&nbsp;people.&nbsp;So&nbsp;they&amp;#39;re&nbsp;the&nbsp;natural&nbsp;concurrency&nbsp;extension&nbsp;that&nbsp;everyone&nbsp;adds&nbsp;to&nbsp;their&nbsp;platform&nbsp;first.&nbsp;Then&nbsp;people&nbsp;build&nbsp;really&nbsp;complicated&nbsp;apps&nbsp;that&nbsp;don&amp;#39;t&nbsp;scale&nbsp;well&nbsp;and&nbsp;have&nbsp;strange&nbsp;problems&nbsp;with&nbsp;intermittent&nbsp;race&nbsp;conditions&nbsp;and&nbsp;deadlocks&nbsp;and&nbsp;everyone&nbsp;wishes&nbsp;they&nbsp;had&nbsp;a&nbsp;better&nbsp;model,&nbsp;but&nbsp;by&nbsp;then&nbsp;it&amp;#39;s&nbsp;too&nbsp;late.&lt;br&gt;<br>
&lt;br&gt;This&nbsp;isn&amp;#39;t&nbsp;the&nbsp;right&nbsp;forum&nbsp;to&nbsp;have&nbsp;a&nbsp;big&nbsp;discussion&nbsp;about&nbsp;concurrent&nbsp;programming&nbsp;models.&nbsp;But&nbsp;for&nbsp;the&nbsp;record,&nbsp;here&nbsp;are&nbsp;some&nbsp;of&nbsp;the&nbsp;problems&nbsp;with&nbsp;the&nbsp;shared-memory,&nbsp;threads-and-locks&nbsp;model:&lt;br&gt;&lt;br&gt;1)&nbsp;Choosing&nbsp;the&nbsp;scope&nbsp;of&nbsp;locks&nbsp;in&nbsp;time&nbsp;(when&nbsp;you&nbsp;lock&nbsp;and&nbsp;for&nbsp;how&nbsp;long)&nbsp;and&nbsp;space&nbsp;(how&nbsp;much&nbsp;data&nbsp;is&nbsp;covered&nbsp;by&nbsp;each&nbsp;lock)&nbsp;is&nbsp;hard.&nbsp;Mistakes&nbsp;in&nbsp;one&nbsp;direction&nbsp;lead&nbsp;to&nbsp;race&nbsp;conditions&nbsp;where&nbsp;unexpected&nbsp;thread&nbsp;interleavings&nbsp;produce&nbsp;errors,&nbsp;and&nbsp;these&nbsp;are&nbsp;basically&nbsp;impossible&nbsp;to&nbsp;test&nbsp;for.&nbsp;Mistakes&nbsp;in&nbsp;another&nbsp;direction&nbsp;lead&nbsp;to&nbsp;deadlocks&nbsp;which&nbsp;are&nbsp;also&nbsp;very&nbsp;difficult&nbsp;to&nbsp;test&nbsp;for.&nbsp;There&nbsp;are&nbsp;tools&nbsp;that&nbsp;can&nbsp;help&nbsp;detect&nbsp;potential&nbsp;errors&nbsp;but&nbsp;they&amp;#39;re&nbsp;no&nbsp;panacea&nbsp;(I&nbsp;did&nbsp;research&nbsp;in&nbsp;this&nbsp;area&nbsp;at&nbsp;IBM).&lt;br&gt;<br>
&lt;br&gt;2)&nbsp;Locks&nbsp;actually&nbsp;scale&nbsp;poorly.&nbsp;It&amp;#39;s&nbsp;very&nbsp;hard&nbsp;to&nbsp;achieve&nbsp;high&nbsp;levels&nbsp;of&nbsp;parallelism&nbsp;because&nbsp;you&nbsp;keep&nbsp;hitting&nbsp;lock&nbsp;contention&nbsp;and&nbsp;have&nbsp;to&nbsp;refine&nbsp;lock&nbsp;granularity&nbsp;and&nbsp;then&nbsp;implement&nbsp;various&nbsp;esoteric&nbsp;optimizations&nbsp;to&nbsp;eliminate&nbsp;false&nbsp;sharing&nbsp;etc.&lt;br&gt;<br>
&lt;br&gt;3)&nbsp;It&amp;#39;s&nbsp;really&nbsp;hard&nbsp;to&nbsp;do&nbsp;basic&nbsp;stuff&nbsp;well.&nbsp;Maurice&nbsp;Herlihy&nbsp;uses&nbsp;an&nbsp;example&nbsp;of&nbsp;implementing&nbsp;a&nbsp;double-ended&nbsp;queue&nbsp;with&nbsp;concurrent&nbsp;access&nbsp;to&nbsp;both&nbsp;ends;&nbsp;getting&nbsp;it&nbsp;to&nbsp;work&nbsp;correctly&nbsp;for&nbsp;lengths&nbsp;0,&nbsp;1,&nbsp;and&nbsp;&amp;gt;&nbsp;1&nbsp;is&nbsp;rocket&nbsp;science.&lt;br&gt;<br>
&lt;br&gt;4)&nbsp;Threads&nbsp;and&nbsp;locks&nbsp;just&nbsp;don&amp;#39;t&nbsp;support&nbsp;compositional&nbsp;reasoning&nbsp;about&nbsp;programs.&nbsp;To&nbsp;avoid&nbsp;deadlocks&nbsp;and&nbsp;races&nbsp;you&nbsp;have&nbsp;to&nbsp;expose&nbsp;a&nbsp;lot&nbsp;of&nbsp;information&nbsp;about&nbsp;the&nbsp;internals&nbsp;of&nbsp;functions&nbsp;---&nbsp;what&nbsp;locks&nbsp;they&nbsp;might&nbsp;take,&nbsp;what&nbsp;they&nbsp;might&nbsp;wait&nbsp;for,&nbsp;and&nbsp;what&nbsp;data&nbsp;they&nbsp;might&nbsp;access.&nbsp;For&nbsp;specific&nbsp;domains&nbsp;like&nbsp;OS&nbsp;kernels&nbsp;you&nbsp;can&nbsp;impose&nbsp;rigid&nbsp;rules&nbsp;across&nbsp;the&nbsp;code&nbsp;and&nbsp;get&nbsp;away&nbsp;with&nbsp;it.&nbsp;For&nbsp;more&nbsp;complex&nbsp;apps,&nbsp;especially&nbsp;ones&nbsp;with&nbsp;dynamic&nbsp;extensiblity,&nbsp;that&nbsp;doesn&amp;#39;t&nbsp;work&nbsp;well.&nbsp;Especially&nbsp;when&nbsp;not&nbsp;everyone&nbsp;on&nbsp;your&nbsp;team&nbsp;is&nbsp;a&nbsp;genius.&lt;br&gt;<br>
&lt;br&gt;Shared-nothing&nbsp;message&nbsp;passing&nbsp;systems&nbsp;like&nbsp;Workers&nbsp;have&nbsp;problems&nbsp;too&nbsp;and&nbsp;won&amp;#39;t&nbsp;be&nbsp;a&nbsp;good&nbsp;fit&nbsp;for&nbsp;some&nbsp;applications,&nbsp;but&nbsp;for&nbsp;the&nbsp;applications&nbsp;that&nbsp;fit,&nbsp;they&nbsp;avoid&nbsp;a&nbsp;lot&nbsp;of&nbsp;problems,&nbsp;and&nbsp;they&amp;#39;re&nbsp;really&nbsp;easy&nbsp;to&nbsp;implement.&lt;br&gt;<br>
&lt;br&gt;There&nbsp;are&nbsp;other&nbsp;models,&nbsp;like&nbsp;replacing&nbsp;locks&nbsp;with&nbsp;a&nbsp;notion&nbsp;of&nbsp;atomic&nbsp;code&nbsp;blocks&nbsp;---&nbsp;gets&nbsp;rid&nbsp;of&nbsp;many&nbsp;problems,&nbsp;but&nbsp;a&nbsp;much&nbsp;harder&nbsp;model&nbsp;to&nbsp;implement&nbsp;efficiently&nbsp;so&nbsp;you&nbsp;don&amp;#39;t&nbsp;see&nbsp;it&nbsp;in&nbsp;production&nbsp;systems&nbsp;yet.&nbsp;A&nbsp;related&nbsp;popular&nbsp;idea&nbsp;is&nbsp;adding&nbsp;transactions&nbsp;and&nbsp;transactional&nbsp;memory&nbsp;to&nbsp;the&nbsp;programming&nbsp;language,&nbsp;but&nbsp;again,&nbsp;hard&nbsp;to&nbsp;implement&nbsp;well.&lt;br&gt;<br>
&lt;br&gt;So&nbsp;for&nbsp;the&nbsp;programming&nbsp;model&nbsp;problem,&nbsp;we&nbsp;don&amp;#39;t&nbsp;know&nbsp;what&nbsp;the&nbsp;right&nbsp;answer&nbsp;is&nbsp;for&nbsp;all&nbsp;applications,&nbsp;but&nbsp;we&nbsp;do&nbsp;know&nbsp;that&nbsp;threads&nbsp;and&nbsp;locks&nbsp;are&nbsp;the&nbsp;wrong&nbsp;answer.&lt;br&gt;&lt;br&nbsp;clear=&quot;all&quot;&gt;Rob&lt;br&gt;--&nbsp;&lt;br&gt;&amp;quot;He&nbsp;was&nbsp;pierced&nbsp;for&nbsp;our&nbsp;transgressions,&nbsp;he&nbsp;was&nbsp;crushed&nbsp;for&nbsp;our&nbsp;iniquities;&nbsp;the&nbsp;punishment&nbsp;that&nbsp;brought&nbsp;us&nbsp;peace&nbsp;was&nbsp;upon&nbsp;him,&nbsp;and&nbsp;by&nbsp;his&nbsp;wounds&nbsp;we&nbsp;are&nbsp;healed.&nbsp;We&nbsp;all,&nbsp;like&nbsp;sheep,&nbsp;have&nbsp;gone&nbsp;astray,&nbsp;each&nbsp;of&nbsp;us&nbsp;has&nbsp;turned&nbsp;to&nbsp;his&nbsp;own&nbsp;way;&nbsp;and&nbsp;the&nbsp;LORD&nbsp;has&nbsp;laid&nbsp;on&nbsp;him&nbsp;the&nbsp;iniquity&nbsp;of&nbsp;us&nbsp;all.&amp;quot;&nbsp;[Isaiah&nbsp;53:5-6]&lt;br&gt;<br>
<br>
&lt;/div&gt;<br>

</tt>
