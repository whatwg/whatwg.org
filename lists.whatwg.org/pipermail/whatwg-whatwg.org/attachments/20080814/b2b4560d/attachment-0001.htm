<tt>
&lt;!DOCTYPE&nbsp;html&nbsp;PUBLIC&nbsp;&quot;-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN&quot;&gt;<br>
&lt;html&gt;<br>
&lt;head&gt;<br>
&nbsp;&nbsp;&lt;meta&nbsp;content=&quot;text/html;charset=ISO-8859-1&quot;&nbsp;http-equiv=&quot;Content-Type&quot;&gt;<br>
&lt;/head&gt;<br>
&lt;body&nbsp;bgcolor=&quot;#ffffff&quot;&nbsp;text=&quot;#000000&quot;&gt;<br>
Aaron&nbsp;Boodman&nbsp;wrote:&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;blockquote<br>
&nbsp;cite=&quot;mid:278fd46c0808131303l4ac3f585sdba18de36213b829@mail.gmail.com&quot;<br>
&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;<br>
There&nbsp;are&nbsp;a&nbsp;bunch&nbsp;of&nbsp;examples&nbsp;that&nbsp;Ian&nbsp;has&nbsp;kindly&nbsp;written&nbsp;at&nbsp;the&nbsp;very<br>
top&nbsp;of&nbsp;the&nbsp;document.&nbsp;What&nbsp;was&nbsp;unhelpful&nbsp;about&nbsp;them?<br>
<br>
&nbsp;&nbsp;&lt;/pre&gt;<br>
&lt;/blockquote&gt;<br>
After&nbsp;reading&nbsp;this&nbsp;I&nbsp;went&nbsp;back&nbsp;to&nbsp;look&nbsp;for&nbsp;them.&nbsp;What&nbsp;happened<br>
originally&nbsp;was&nbsp;that&nbsp;I&nbsp;followed&nbsp;one&nbsp;of&nbsp;the&nbsp;links&nbsp;and&nbsp;seeing&nbsp;only&nbsp;a<br>
single&nbsp;line&nbsp;of&nbsp;text&nbsp;and&nbsp;minimal&nbsp;worker&nbsp;activation&nbsp;code&nbsp;assumed&nbsp;wrongly<br>
that&nbsp;the&nbsp;demo&nbsp;was&nbsp;a&nbsp;placeholder&nbsp;for&nbsp;code&nbsp;to&nbsp;be&nbsp;added&nbsp;later.&nbsp;This&nbsp;made<br>
sense&nbsp;to&nbsp;me&nbsp;at&nbsp;the&nbsp;time&nbsp;because&nbsp;the&nbsp;spec&nbsp;is&nbsp;still&nbsp;draft&nbsp;and&nbsp;no&nbsp;browsers<br>
implement&nbsp;workers&nbsp;(so&nbsp;a&nbsp;demo&nbsp;wouldn't&nbsp;work&nbsp;anyway).&nbsp;It&nbsp;didn't&nbsp;occur&nbsp;to<br>
me&nbsp;at&nbsp;the&nbsp;time&nbsp;to&nbsp;manually&nbsp;type&nbsp;the&nbsp;address&nbsp;of&nbsp;the&nbsp;worker.js&nbsp;file&nbsp;into<br>
the&nbsp;browser&nbsp;to&nbsp;retrieve&nbsp;the&nbsp;actual&nbsp;worker&nbsp;implementation&nbsp;(probably<br>
because&nbsp;it&nbsp;was&nbsp;4am).&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;blockquote<br>
&nbsp;cite=&quot;mid:278fd46c0808131303l4ac3f585sdba18de36213b829@mail.gmail.com&quot;<br>
&nbsp;type=&quot;cite&quot;&gt;&lt;!----&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;You're&nbsp;right&nbsp;that&nbsp;if&nbsp;you&nbsp;try&nbsp;to&nbsp;use&nbsp;workers&nbsp;like&nbsp;threads,&nbsp;you&nbsp;end&nbsp;up<br>
with&nbsp;threads.&nbsp;A&nbsp;more&nbsp;message-passing&nbsp;style&nbsp;implementation&nbsp;is&nbsp;easier.<br>
In&nbsp;particular&nbsp;you&nbsp;would&nbsp;not&nbsp;want&nbsp;to&nbsp;allow&nbsp;the&nbsp;worker&nbsp;to&nbsp;'get'&nbsp;and<br>
'set'&nbsp;individual&nbsp;variables,&nbsp;but&nbsp;pass&nbsp;it&nbsp;messages&nbsp;about&nbsp;work&nbsp;you&nbsp;would<br>
like&nbsp;it&nbsp;to&nbsp;perform,&nbsp;and&nbsp;have&nbsp;it&nbsp;pass&nbsp;back&nbsp;messages&nbsp;about&nbsp;the&nbsp;result.<br>
This&nbsp;is&nbsp;less&nbsp;flexible&nbsp;than&nbsp;threading&nbsp;but&nbsp;easier&nbsp;to&nbsp;reason&nbsp;about.<br>
&nbsp;&nbsp;&lt;/pre&gt;<br>
&lt;/blockquote&gt;<br>
&lt;blockquote<br>
&nbsp;cite=&quot;mid:278fd46c0808131303l4ac3f585sdba18de36213b829@mail.gmail.com&quot;<br>
&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;Regardless&nbsp;of&nbsp;the&nbsp;kind&nbsp;of&nbsp;Getters/Setters/Managers/Whatever&nbsp;paradigm&nbsp;you&nbsp;use<br>
in&nbsp;your&nbsp;main&nbsp;thread&nbsp;you&nbsp;can&nbsp;never&nbsp;escape&nbsp;the&nbsp;possibility&nbsp;that&nbsp;2&nbsp;workers<br>
might&nbsp;want&nbsp;exclusive&nbsp;access&nbsp;to&nbsp;an&nbsp;essential&nbsp;global&nbsp;object&nbsp;(ie,&nbsp;DOM&nbsp;node&nbsp;or<br>
global&nbsp;setting).&nbsp;So&nbsp;far&nbsp;I&nbsp;have&nbsp;not&nbsp;found&nbsp;any&nbsp;real-world&nbsp;programming&nbsp;language<br>
or&nbsp;hardware&nbsp;that&nbsp;can&nbsp;do&nbsp;this&nbsp;without&nbsp;some&nbsp;kind&nbsp;of&nbsp;side-effect&nbsp;or&nbsp;programming<br>
construct&nbsp;(ie,&nbsp;locks,&nbsp;mutexes,&nbsp;semaphores,&nbsp;etc...).&nbsp;What&nbsp;WebWorkers&nbsp;is<br>
really&nbsp;doing&nbsp;is&nbsp;requiring&nbsp;the&nbsp;author&nbsp;to&nbsp;write&nbsp;their&nbsp;own.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;/blockquote&gt;<br>
&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;&lt;!----&gt;<br>
You&nbsp;are&nbsp;thinking&nbsp;about&nbsp;this&nbsp;wrong.&nbsp;Don't&nbsp;try&nbsp;to&nbsp;give&nbsp;two&nbsp;chunks&nbsp;of<br>
your&nbsp;program&nbsp;concurrent&nbsp;access&nbsp;to&nbsp;shared&nbsp;state;&nbsp;that&nbsp;is&nbsp;impossible.<br>
Instead&nbsp;realize&nbsp;there&nbsp;is&nbsp;no&nbsp;shared&nbsp;state&nbsp;and&nbsp;factor&nbsp;your&nbsp;program&nbsp;into<br>
two&nbsp;pieces&nbsp;--&nbsp;one&nbsp;to&nbsp;do&nbsp;the&nbsp;heavy&nbsp;lifting&nbsp;and&nbsp;one&nbsp;to&nbsp;manipulate&nbsp;the<br>
UI.&nbsp;Then&nbsp;create&nbsp;a&nbsp;protocol&nbsp;for&nbsp;them&nbsp;to&nbsp;communicate&nbsp;with&nbsp;message<br>
passing.<br>
&nbsp;&nbsp;&lt;/pre&gt;<br>
&lt;/blockquote&gt;<br>
&lt;br&gt;<br>
I&nbsp;understand&nbsp;this&nbsp;and&nbsp;I&nbsp;probably&nbsp;confused&nbsp;things&nbsp;by&nbsp;writing&nbsp;such&nbsp;a<br>
naive&nbsp;example.&nbsp;The&nbsp;point&nbsp;was&nbsp;lost&nbsp;in&nbsp;the&nbsp;resulting&nbsp;fuss&nbsp;about&nbsp;the<br>
implementation&nbsp;details.&nbsp;The&nbsp;point&nbsp;I&nbsp;was&nbsp;trying&nbsp;to&nbsp;make&nbsp;is&nbsp;that&nbsp;that<br>
separating&nbsp;code&nbsp;into&nbsp;&quot;doers&quot;&nbsp;and&nbsp;&quot;thinkers&quot;&nbsp;or&nbsp;UI/processing&nbsp;models&nbsp;is<br>
a&nbsp;luxury&nbsp;afforded&nbsp;to&nbsp;a&nbsp;limited&nbsp;scope&nbsp;of&nbsp;applications&nbsp;that&nbsp;don't&nbsp;require<br>
tight&nbsp;synchronisation&nbsp;or&nbsp;direct&nbsp;access&nbsp;to&nbsp;limited&nbsp;resources.&nbsp;I&nbsp;know&nbsp;you<br>
are&nbsp;aware&nbsp;of&nbsp;this&nbsp;but&nbsp;it&nbsp;forms&nbsp;a&nbsp;valid&nbsp;argument&nbsp;for&nbsp;implementing&nbsp;real<br>
threads.&nbsp;Message-passing&nbsp;frameworks&nbsp;are&nbsp;fine&nbsp;for&nbsp;certain&nbsp;tasks&nbsp;but<br>
quite&nbsp;useless&nbsp;or&nbsp;annoying&nbsp;for&nbsp;others&nbsp;(which&nbsp;is&nbsp;what&nbsp;I&nbsp;was&nbsp;trying&nbsp;to<br>
demonstrate).&lt;br&gt;<br>
&lt;br&gt;<br>
A&nbsp;better&nbsp;example&nbsp;of&nbsp;the&nbsp;need&nbsp;for&nbsp;global&nbsp;access&nbsp;is&nbsp;a&nbsp;real-world&nbsp;issue&nbsp;I<br>
run&nbsp;into&nbsp;regularly.&nbsp;That&nbsp;is&nbsp;walking&nbsp;the&nbsp;DOM&nbsp;(such&nbsp;as&nbsp;when&nbsp;fixing<br>
browser&nbsp;shortcomings&nbsp;or&nbsp;performing&nbsp;actions&nbsp;based&nbsp;on&nbsp;a&nbsp;tag&nbsp;class&nbsp;or<br>
attribute).&nbsp;So&nbsp;far&nbsp;this&nbsp;is&nbsp;the&nbsp;only&nbsp;task&nbsp;I&nbsp;have&nbsp;ever&nbsp;performed&nbsp;in<br>
Javascript&nbsp;that&nbsp;had&nbsp;a&nbsp;noticable&nbsp;impact&nbsp;on&nbsp;the&nbsp;UI&nbsp;responsiveness.&nbsp;If&nbsp;I<br>
was&nbsp;ever&nbsp;going&nbsp;to&nbsp;move&nbsp;something&nbsp;to&nbsp;a&nbsp;worker&nbsp;thread&nbsp;this&nbsp;would&nbsp;be&nbsp;it.<br>
In&nbsp;the&nbsp;current&nbsp;WebWorkers&nbsp;this&nbsp;is&nbsp;not&nbsp;an&nbsp;option&nbsp;nor&nbsp;even&nbsp;available&nbsp;via<br>
workaround&nbsp;(I&nbsp;doubt&nbsp;you&nbsp;can&nbsp;marshal&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;DOM&nbsp;across&nbsp;to&nbsp;a<br>
worker&nbsp;with&nbsp;any&nbsp;sort&nbsp;of&nbsp;efficiency).&nbsp;On&nbsp;the&nbsp;other&nbsp;hand&nbsp;traditional<br>
thread&nbsp;or&nbsp;coroutine&nbsp;implementations&nbsp;would&nbsp;not&nbsp;be&nbsp;so&nbsp;constrained.&nbsp;It<br>
wouldn't&nbsp;even&nbsp;matter&nbsp;if&nbsp;the&nbsp;DOM&nbsp;was&nbsp;read&nbsp;only.&lt;br&gt;<br>
&lt;br&gt;<br>
It's&nbsp;well&nbsp;and&nbsp;good&nbsp;to&nbsp;insist&nbsp;on&nbsp;message-passing&nbsp;as&nbsp;the&nbsp;sole&nbsp;method&nbsp;of<br>
interaction&nbsp;and&nbsp;I&nbsp;accept&nbsp;it&nbsp;has&nbsp;many&nbsp;benefits.&nbsp;What&nbsp;I'm&nbsp;trying&nbsp;(and<br>
failing)&nbsp;to&nbsp;get&nbsp;across&nbsp;is&nbsp;that&nbsp;the&nbsp;class&nbsp;of&nbsp;applications&nbsp;that&nbsp;use<br>
message-parsing&nbsp;and&nbsp;isolation&nbsp;in&nbsp;the&nbsp;manner&nbsp;of&nbsp;WebWorkers&nbsp;are&nbsp;also&nbsp;the<br>
same&nbsp;class&nbsp;of&nbsp;applications&nbsp;that&nbsp;are&nbsp;generally&nbsp;wasteful,&nbsp;slow&nbsp;or<br>
difficult&nbsp;to&nbsp;implement&nbsp;in&nbsp;Javascript.&nbsp;Think&nbsp;about&nbsp;the&nbsp;kind&nbsp;of<br>
applications&nbsp;that&nbsp;use&nbsp;parallel&nbsp;&quot;compute&nbsp;nodes&quot;&nbsp;and&nbsp;you'll&nbsp;realise&nbsp;that<br>
98%&nbsp;don't&nbsp;exist&nbsp;outside&nbsp;of&nbsp;academia&nbsp;and&nbsp;laboratories&nbsp;due&nbsp;to<br>
synchronisation,&nbsp;network&nbsp;latencies&nbsp;and&nbsp;other&nbsp;issues&nbsp;that&nbsp;implementing<br>
Javascript&nbsp;workers&nbsp;won't&nbsp;solve.&nbsp;More&nbsp;importantly&nbsp;though&nbsp;there&nbsp;is&nbsp;a&nbsp;lack<br>
of&nbsp;general&nbsp;computing&nbsp;software&nbsp;that&nbsp;requires&nbsp;this&nbsp;model.&lt;br&gt;<br>
&lt;br&gt;<br>
In&nbsp;contrast&nbsp;there&nbsp;are&nbsp;literally&nbsp;thousands&nbsp;of&nbsp;desktop&nbsp;applications&nbsp;that<br>
could&nbsp;be&nbsp;ported&nbsp;from&nbsp;C,&nbsp;Perl&nbsp;or&nbsp;Python&nbsp;to&nbsp;a&nbsp;shared&nbsp;data&nbsp;Javascript<br>
environment&nbsp;but&nbsp;I&nbsp;don't&nbsp;see&nbsp;how&nbsp;without&nbsp;a&nbsp;closer&nbsp;emulation&nbsp;of&nbsp;the<br>
typical&nbsp;threading&nbsp;model&nbsp;adopted&nbsp;by&nbsp;90%&nbsp;of&nbsp;programming&nbsp;languages.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;blockquote<br>
&nbsp;cite=&quot;mid:278fd46c0808131303l4ac3f585sdba18de36213b829@mail.gmail.com&quot;<br>
&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;<br>
&nbsp;&nbsp;&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;I&nbsp;don't&nbsp;think&nbsp;I&nbsp;can&nbsp;stress&nbsp;enough&nbsp;how&nbsp;many&nbsp;important&nbsp;properties&nbsp;and<br>
functions&nbsp;of&nbsp;a&nbsp;web&nbsp;page&nbsp;are&nbsp;ONLY&nbsp;available&nbsp;as&nbsp;globals.&nbsp;DOM&nbsp;nodes,&nbsp;style<br>
properties,&nbsp;event&nbsp;handlers,&nbsp;window.status&nbsp;...&nbsp;the&nbsp;list&nbsp;goes&nbsp;on.&nbsp;These&nbsp;can't<br>
be&nbsp;duplicated&nbsp;because&nbsp;they&nbsp;are&nbsp;properties&nbsp;of&nbsp;the&nbsp;page&nbsp;all&nbsp;workers&nbsp;are<br>
sharing.&nbsp;Without&nbsp;direct&nbsp;access&nbsp;to&nbsp;these&nbsp;the&nbsp;only&nbsp;useful&nbsp;thing&nbsp;a&nbsp;worker&nbsp;can<br>
do&nbsp;is&nbsp;&quot;computation&quot;&nbsp;or&nbsp;more&nbsp;precisely&nbsp;string&nbsp;parsing&nbsp;and&nbsp;maths.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;/blockquote&gt;<br>
&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;&lt;!----&gt;<br>
You're&nbsp;forgetting&nbsp;the&nbsp;ability&nbsp;to&nbsp;do&nbsp;synchronous&nbsp;IO&nbsp;and&nbsp;the&nbsp;ability&nbsp;to<br>
share&nbsp;workers&nbsp;between&nbsp;pages.&nbsp;Both&nbsp;of&nbsp;these&nbsp;benefits&nbsp;have&nbsp;been<br>
explained&nbsp;in&nbsp;previous&nbsp;messages.<br>
&nbsp;&nbsp;&lt;/pre&gt;<br>
&lt;/blockquote&gt;<br>
&lt;br&gt;<br>
Once&nbsp;again&nbsp;someone&nbsp;mentions&nbsp;synchronous&nbsp;IO.&nbsp;I'm&nbsp;unfamiliar&nbsp;with&nbsp;any<br>
blocking&nbsp;Javascript&nbsp;IO&nbsp;operations&nbsp;except&nbsp;those&nbsp;explicitly&nbsp;created&nbsp;by<br>
the&nbsp;author&nbsp;(and&nbsp;I&nbsp;generally&nbsp;disagree&nbsp;with&nbsp;their&nbsp;logic&nbsp;for&nbsp;doing&nbsp;so).<br>
XHR&nbsp;is&nbsp;non-blocking.&nbsp;Even&nbsp;imageObject.src&nbsp;=&nbsp;'pic.jpg'&nbsp;is&nbsp;non-blocking.<br>
I'm&nbsp;still&nbsp;waiting&nbsp;for&nbsp;somebody&nbsp;to&nbsp;tell&nbsp;me&nbsp;what&nbsp;Javascript&nbsp;operations<br>
actually&nbsp;block&nbsp;the&nbsp;UI&nbsp;except&nbsp;where&nbsp;the&nbsp;author&nbsp;has&nbsp;made&nbsp;a&nbsp;conscious<br>
decision&nbsp;to&nbsp;do&nbsp;so;&nbsp;ie:&lt;br&gt;<br>
&lt;br&gt;<br>
longRunningFunction()&lt;br&gt;<br>
vs.&lt;br&gt;<br>
setTimeout(longRunningFunction,0)&lt;br&gt;<br>
&lt;br&gt;<br>
As&nbsp;for&nbsp;sharing&nbsp;workers&nbsp;between&nbsp;pages,&nbsp;this&nbsp;is&nbsp;a&nbsp;property&nbsp;of<br>
MessagePorts,&nbsp;not&nbsp;WebWorkers.&nbsp;I&nbsp;could&nbsp;easily&nbsp;create&nbsp;a&nbsp;coroutine,&nbsp;thread<br>
or&nbsp;even&nbsp;a&nbsp;setTimeout&nbsp;loop&nbsp;to&nbsp;acheive&nbsp;the&nbsp;same&nbsp;thing&nbsp;provided&nbsp;I&nbsp;only<br>
send&nbsp;primitive&nbsp;data&nbsp;rather&nbsp;than&nbsp;object&nbsp;references&nbsp;(which&nbsp;is&nbsp;all<br>
MessagePorts&nbsp;allows&nbsp;anyway).&nbsp;WebWorkers&nbsp;makes&nbsp;this&nbsp;easier&nbsp;yes&nbsp;but&nbsp;so<br>
would&nbsp;a&nbsp;better&nbsp;proposal.&nbsp;This&nbsp;isn't&nbsp;a&nbsp;matter&nbsp;of&nbsp;WebWorkers&nbsp;vs.&nbsp;nothing.<br>
It's&nbsp;about&nbsp;whether&nbsp;WebWorkers&nbsp;limitations,&nbsp;no&nbsp;matter&nbsp;how&nbsp;well<br>
intentioned,&nbsp;make&nbsp;it&nbsp;useful&nbsp;at&nbsp;all&nbsp;to&nbsp;web&nbsp;developers.&lt;br&gt;<br>
&lt;br&gt;<br>
This&nbsp;discussion&nbsp;has&nbsp;helped&nbsp;me&nbsp;understand&nbsp;your&nbsp;reasoning&nbsp;behind<br>
webworkers&nbsp;but&nbsp;truthfully&nbsp;I&nbsp;always&nbsp;knew&nbsp;the&nbsp;general&nbsp;'why'&nbsp;of&nbsp;it.&nbsp;What<br>
I'm&nbsp;trying&nbsp;to&nbsp;find&nbsp;out&nbsp;is&nbsp;whether&nbsp;anybody&nbsp;has&nbsp;a&nbsp;genuine&nbsp;need&nbsp;for&nbsp;a<br>
Javascript&nbsp;compute&nbsp;node&nbsp;or&nbsp;whether&nbsp;authors&nbsp;would&nbsp;be&nbsp;better&nbsp;served&nbsp;by<br>
threads&nbsp;or&nbsp;coroutines&nbsp;that&nbsp;manage&nbsp;a&nbsp;shared&nbsp;DOM&nbsp;according&nbsp;to&nbsp;the&nbsp;rules<br>
of&nbsp;normal&nbsp;multitasking&nbsp;paradigms&nbsp;that&nbsp;have&nbsp;serve&nbsp;us&nbsp;since&nbsp;the&nbsp;first&nbsp;SMP<br>
machines&nbsp;were&nbsp;built.&lt;br&gt;<br>
&lt;br&gt;<br>
I've&nbsp;trawled&nbsp;through&nbsp;many&nbsp;sources&nbsp;of&nbsp;information&nbsp;since&nbsp;starting&nbsp;this<br>
discussion&nbsp;and&nbsp;the&nbsp;overall&nbsp;impression&nbsp;I&nbsp;get&nbsp;is:&lt;br&gt;<br>
&lt;br&gt;<br>
a.)&nbsp;Nobody&nbsp;has&nbsp;ever&nbsp;created&nbsp;a&nbsp;successful&nbsp;wait-free,&nbsp;lock-free&nbsp;system<br>
for&nbsp;x86&nbsp;hardware.&lt;br&gt;<br>
b.)&nbsp;No&nbsp;one&nbsp;solution&nbsp;to&nbsp;this&nbsp;problem&nbsp;has&nbsp;ever&nbsp;been&nbsp;suitable&nbsp;to&nbsp;more&nbsp;than<br>
a&nbsp;subset&nbsp;of&nbsp;parallel&nbsp;applications.&lt;br&gt;<br>
c.)&nbsp;Despite&nbsp;its&nbsp;faults&nbsp;simple&nbsp;locking&nbsp;is&nbsp;currently&nbsp;the&nbsp;most&nbsp;common&nbsp;and<br>
successful&nbsp;paradigm&nbsp;for&nbsp;multi-core&nbsp;environments.&lt;br&gt;<br>
&lt;br&gt;<br>
Which&nbsp;leaves&nbsp;me&nbsp;with:&lt;br&gt;<br>
&lt;br&gt;<br>
a.)&nbsp;WebWorkers&nbsp;solves&nbsp;a&nbsp;specific&nbsp;class&nbsp;of&nbsp;problems&nbsp;(multiple<br>
compute/logic&nbsp;nodes&nbsp;for&nbsp;mathematical&nbsp;and&nbsp;scientific&nbsp;applications)&lt;br&gt;<br>
b.)&nbsp;Threads&nbsp;solves&nbsp;another&nbsp;set&nbsp;of&nbsp;problems&nbsp;(multiple&nbsp;action&nbsp;nodes&nbsp;on&nbsp;a<br>
large&nbsp;common&nbsp;dataset&nbsp;for&nbsp;general&nbsp;computing)&lt;br&gt;<br>
c.)&nbsp;WebWorkers&nbsp;and&nbsp;Threads&nbsp;may&nbsp;not&nbsp;be&nbsp;mutually&nbsp;exclusive.&nbsp;A&nbsp;thread<br>
could&nbsp;probably&nbsp;host&nbsp;or&nbsp;interact&nbsp;with&nbsp;a&nbsp;WebWorker&nbsp;and&nbsp;vice-versa.&lt;br&gt;<br>
&lt;br&gt;<br>
Which&nbsp;leaves&nbsp;me&nbsp;thinking&nbsp;there&nbsp;is&nbsp;a&nbsp;good&nbsp;argument&nbsp;for&nbsp;having&nbsp;both<br>
paradigms&nbsp;at&nbsp;some&nbsp;point&nbsp;rather&nbsp;than&nbsp;one&nbsp;or&nbsp;the&nbsp;other.&nbsp;Any&nbsp;thoughts&nbsp;on<br>
this?&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;blockquote<br>
&nbsp;cite=&quot;mid:278fd46c0808131303l4ac3f585sdba18de36213b829@mail.gmail.com&quot;<br>
&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;<br>
At&nbsp;this&nbsp;point&nbsp;I&nbsp;suspect&nbsp;we&nbsp;will&nbsp;have&nbsp;to&nbsp;agree&nbsp;to&nbsp;disagree.&nbsp;Perhaps<br>
keep&nbsp;an&nbsp;eye&nbsp;on&nbsp;the&nbsp;spec&nbsp;as&nbsp;it&nbsp;continues&nbsp;to&nbsp;evolve.&nbsp;Perhaps&nbsp;it&nbsp;will<br>
start&nbsp;to&nbsp;grow&nbsp;on&nbsp;you.<br>
&nbsp;&nbsp;&lt;/pre&gt;<br>
&lt;/blockquote&gt;<br>
&lt;br&gt;<br>
To&nbsp;do&nbsp;that&nbsp;it&nbsp;would&nbsp;have&nbsp;to&nbsp;at&nbsp;minimum&nbsp;allow&nbsp;the&nbsp;passing&nbsp;of&nbsp;Javascript<br>
primitives.&nbsp;Booleans,&nbsp;Integers,&nbsp;Floats,&nbsp;Strings,&nbsp;Nulls&nbsp;and&nbsp;Arrays<br>
should&nbsp;be&nbsp;passed&nbsp;by&nbsp;value&nbsp;(removing&nbsp;any&nbsp;custom&nbsp;properties&nbsp;they&nbsp;might<br>
have&nbsp;been&nbsp;given).&nbsp;Marshalling&nbsp;everything&nbsp;through&nbsp;Unicode&nbsp;strings&nbsp;is&nbsp;a<br>
terrible&nbsp;idea.&lt;br&gt;<br>
&lt;br&gt;<br>
Shannon&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/body&gt;<br>
&lt;/html&gt;<br>

</tt>
