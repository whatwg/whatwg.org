<tt>
&lt;div&gt;Thanks&nbsp;for&nbsp;the&nbsp;feedback!&nbsp;I&#39;d&nbsp;love&nbsp;to&nbsp;know&nbsp;more&nbsp;about&nbsp;your&nbsp;use&nbsp;case&nbsp;(if&nbsp;possible),&nbsp;since&nbsp;it&nbsp;may&nbsp;motivate&nbsp;further&nbsp;thinking&nbsp;on&nbsp;these&nbsp;limits...&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Indeed,&nbsp;the&nbsp;option&nbsp;of&nbsp;immediately&nbsp;throwing&nbsp;was&nbsp;also&nbsp;considered.&nbsp;It&nbsp;didn&#39;t&nbsp;look&nbsp;obviously&nbsp;better&nbsp;for&nbsp;the&nbsp;following&nbsp;reasons&nbsp;(I&nbsp;may&nbsp;forget&nbsp;something,&nbsp;but&nbsp;that&#39;s&nbsp;what&nbsp;I&nbsp;remember):&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1.&nbsp;Workers&nbsp;are&nbsp;asynchronous&nbsp;so&nbsp;even&nbsp;a&nbsp;successful&nbsp;(not-queued)&nbsp;start&nbsp;will&nbsp;incur&nbsp;some&nbsp;unspecified&nbsp;delay&nbsp;-&nbsp;the&nbsp;Worker&nbsp;object&nbsp;will&nbsp;be&nbsp;created&nbsp;instantly&nbsp;but&nbsp;actual&nbsp;initial&nbsp;script&nbsp;or&nbsp;postMessage&nbsp;handlers&nbsp;won&#39;t&nbsp;be&nbsp;invoked&nbsp;for&nbsp;some&nbsp;time.&nbsp;This&nbsp;time&nbsp;varies&nbsp;(can&nbsp;be&nbsp;seconds&nbsp;on&nbsp;a&nbsp;netbook&nbsp;with&nbsp;many&nbsp;opened&nbsp;tabs)&nbsp;so&nbsp;the&nbsp;page&nbsp;can&nbsp;not&nbsp;build&nbsp;expectations&nbsp;on&nbsp;&quot;instant&nbsp;start&quot;&nbsp;anyways.&nbsp;This&nbsp;reduces&nbsp;the&nbsp;benefit&nbsp;of&nbsp;&quot;knowing&nbsp;right&nbsp;away&nbsp;that&nbsp;worker&nbsp;can&nbsp;not&nbsp;start&quot;.&nbsp; In&nbsp;your&nbsp;case,&nbsp;for&nbsp;example,&nbsp;you&nbsp;might&nbsp;want&nbsp;a&nbsp;timer&nbsp;anyways,&nbsp;to&nbsp;close&nbsp;the&nbsp;worker&nbsp;and&nbsp;use&nbsp;the&nbsp;alternative&nbsp;route&nbsp;that&nbsp;you&nbsp;seem&nbsp;to&nbsp;have.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2.&nbsp;There&nbsp;are&nbsp;use&nbsp;cases&nbsp;which&nbsp;would&nbsp;use&nbsp;workers&nbsp;to&nbsp;perform&nbsp;certain operation and&nbsp;then&nbsp;close&nbsp;the&nbsp;workers.&nbsp;Typical&nbsp;example&nbsp;would&nbsp;be&nbsp;some&nbsp;operation&nbsp;that&nbsp;is&nbsp;longer&nbsp;then&nbsp;&quot;instant&quot;&nbsp;so&nbsp;the&nbsp;page&nbsp;UI&nbsp;would&nbsp;like&nbsp;to&nbsp;be&nbsp;responsive&nbsp;with&nbsp;Cancel&nbsp;button&nbsp;ready.&nbsp;Once&nbsp;the&nbsp;operation&nbsp;completes,&nbsp;the&nbsp;workers&nbsp;are&nbsp;left&nbsp;to&nbsp;terminate&nbsp;and&nbsp;die.&nbsp;This&nbsp;can&nbsp;take&nbsp;a&nbsp;moment&nbsp;and&nbsp;the&nbsp;page&nbsp;does&nbsp;not&nbsp;know&nbsp;when&nbsp;previous&nbsp;workers&nbsp;actually&nbsp;terminate.&nbsp;If&nbsp;the&nbsp;page&nbsp;can&nbsp;not&nbsp;create&nbsp;new&nbsp;workers&nbsp;during&nbsp;this&nbsp;finalization&nbsp;time,&nbsp;it&nbsp;creates&nbsp;more&nbsp;complexity&nbsp;for&nbsp;it.&nbsp;Having&nbsp;a&nbsp;queue&nbsp;solves&nbsp;those&nbsp;edge&nbsp;conditions&nbsp;nicely.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;3.&nbsp;The&nbsp;current&nbsp;Chrome&nbsp;limits&nbsp;of&nbsp;16&nbsp;per&nbsp;page&nbsp;and&nbsp;64&nbsp;total&nbsp;are&nbsp;much&nbsp;lower&nbsp;then&nbsp;we&nbsp;would&nbsp;like&nbsp;them&nbsp;to&nbsp;be,&nbsp;due&nbsp;to implementation limits&nbsp;we&nbsp;hope&nbsp;to&nbsp;remove&nbsp;in&nbsp;the&nbsp;future.&nbsp;These&nbsp;limits&nbsp;should&nbsp;be&nbsp;high&nbsp;enough&nbsp;to&nbsp;realistically&nbsp;never&nbsp;prompt&nbsp;app&nbsp;developers&nbsp;to&nbsp;consider&nbsp;coding&nbsp;around&nbsp;them.&nbsp;Basically&nbsp;creating&nbsp;multiple&nbsp;workers&nbsp;should&nbsp;only&nbsp;have&nbsp;a&nbsp;limit&nbsp;related&nbsp;to&nbsp;memory.&nbsp;It&nbsp;might&nbsp;happen&nbsp;that&nbsp;current&nbsp;queues&nbsp;will&nbsp;happen&nbsp;to&nbsp;be&nbsp;an&nbsp;implementation&nbsp;detail&nbsp;of&nbsp;Chrome&nbsp;for&nbsp;some&nbsp;time&nbsp;and&nbsp;does&nbsp;not&nbsp;need&nbsp;to&nbsp;be&nbsp;reflected&nbsp;in&nbsp;the&nbsp;spec.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;4.&nbsp;If&nbsp;we&nbsp;are&nbsp;to&nbsp;create&nbsp;a&nbsp;mechanism&nbsp;that&nbsp;provides&nbsp;useful&nbsp;guarantees&nbsp;around&nbsp;timely&nbsp;execution&nbsp;in&nbsp;multi-thread&nbsp;environment,&nbsp;I&nbsp;believe&nbsp;we&#39;d&nbsp;have&nbsp;to specify much&nbsp;more&nbsp;complex&nbsp;api,&nbsp;providing&nbsp;fair&nbsp;scheduling,&nbsp;guarantee&nbsp;against&nbsp;starvation,&nbsp;some&nbsp;real-time&nbsp;support&nbsp;etc&nbsp;-&nbsp;but&nbsp;we&nbsp;are&nbsp;not&nbsp;there&nbsp;yet&nbsp;:-) &lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;5.&nbsp;Normally,&nbsp;the&nbsp;JS&nbsp;APIs&nbsp;that&nbsp;can&nbsp;return&nbsp;&quot;quota exceeded&quot;&nbsp;errors&nbsp;typically&nbsp;imply&nbsp;mechanisms&nbsp;for&nbsp;granting/monitoring/revoking&nbsp;the&nbsp;said&nbsp;quotas,&nbsp;perhaps&nbsp;with&nbsp;UI&nbsp;for&nbsp;the&nbsp;user,&nbsp;as&nbsp;Database&nbsp;API&nbsp;does&nbsp;for&nbsp;example.&nbsp;No&nbsp;matter&nbsp;how&nbsp;initial&nbsp;quotas&nbsp;are&nbsp;set,&nbsp;there&nbsp;will&nbsp;be&nbsp;the&nbsp;app&nbsp;that&nbsp;legitimately&nbsp;needs&nbsp;a&nbsp;lot&nbsp;of&nbsp;resources&nbsp;while&nbsp;we&nbsp;also&nbsp;don&#39;t&nbsp;want&nbsp;to&nbsp;give&nbsp;the&nbsp;same&nbsp;to&nbsp;any&nbsp;random&nbsp;page.&nbsp;I think we&nbsp;don&#39;t&nbsp;have&nbsp;enough&nbsp;evidence&nbsp;yet&nbsp;to&nbsp;consider&nbsp;worker&nbsp;creation&nbsp;in&nbsp;the&nbsp;same&nbsp;category,&nbsp;but&nbsp;if&nbsp;it&nbsp;comes&nbsp;to&nbsp;that&nbsp;at&nbsp;some&nbsp;point,&nbsp;the&nbsp;exception&nbsp;from&nbsp;Workers&nbsp;constructor&nbsp;probably&nbsp;won&#39;t&nbsp;be&nbsp;enough.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Again,&nbsp;knowing&nbsp;your&nbsp;use&nbsp;case&nbsp;in&nbsp;more&nbsp;details&nbsp;can&nbsp;help&nbsp;in&nbsp;the&nbsp;future&nbsp;design&nbsp;steps&nbsp;here.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Dmitry&lt;br&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Thu,&nbsp;Sep&nbsp;23,&nbsp;2010&nbsp;at&nbsp;2:06&nbsp;AM,&nbsp;Ivan&nbsp;Kozik&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:ivan@ludios.org&quot;&gt;ivan@ludios.org&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;What&nbsp;should&nbsp;happen&nbsp;when&nbsp;instantiating&nbsp;a&nbsp;Worker&nbsp;that&nbsp;cannot&nbsp;be&nbsp;started&lt;br&gt;<br>
because&nbsp;of&nbsp;the&nbsp;limit&nbsp;on&nbsp;the&nbsp;number&nbsp;of&nbsp;workers?&nbsp; Chrome&nbsp;6&nbsp;and&nbsp;Chromium&lt;br&gt;<br>
7.0.532.0&nbsp;(60255)&nbsp;put&nbsp;the&nbsp;17th&nbsp;worker&nbsp;in&nbsp;a&nbsp;queue,&nbsp;to&nbsp;be&nbsp;created&nbsp;when&lt;br&gt;<br>
some&nbsp;existing&nbsp;worker&nbsp;terminates.&nbsp; This&nbsp;queue&nbsp;seems&nbsp;to&nbsp;be&nbsp;limitless&nbsp;in&lt;br&gt;<br>
size&nbsp;(or&nbsp;at&nbsp;least&nbsp;it&nbsp;is&nbsp;large).&nbsp; In&nbsp;Opera&nbsp;10.70&nbsp;(9049),&nbsp;instantiating&lt;br&gt;<br>
the&nbsp;17th&nbsp;Worker&nbsp;throws&nbsp;&quot;Error:&nbsp;QUOTA_EXCEEDED_ERR&quot;.&lt;br&gt;<br>
&lt;br&gt;<br>
I&#39;d&nbsp;much&nbsp;prefer&nbsp;that&nbsp;it&nbsp;failed&nbsp;immediately,&nbsp;rather&nbsp;than&nbsp;being&nbsp;put&nbsp;in&nbsp;a&lt;br&gt;<br>
queue.&nbsp; I&nbsp;use&nbsp;a&nbsp;SharedWorker&nbsp;as&nbsp;an&nbsp;enhancement,&nbsp;and&nbsp;I&nbsp;don&#39;t&nbsp;want&nbsp;to&lt;br&gt;<br>
implement&nbsp;a&nbsp;timeout&nbsp;for&nbsp;the&nbsp;Worker&nbsp;spawning&nbsp;(I&#39;d&nbsp;rather&nbsp;have&nbsp;it&nbsp;fail,&lt;br&gt;<br>
so&nbsp;that&nbsp;I&nbsp;can&nbsp;immediately&nbsp;do&nbsp;something&nbsp;else).&nbsp; I&nbsp;can&nbsp;avoid&nbsp;spawning&lt;br&gt;<br>
more&nbsp;than&nbsp;16&nbsp;workers,&nbsp;but&nbsp;I&nbsp;never&nbsp;know&nbsp;if&nbsp;another&nbsp;tab&nbsp;has&nbsp;already&lt;br&gt;<br>
created&nbsp;enough&nbsp;workers&nbsp;to&nbsp;exhaust&nbsp;the&nbsp;global&nbsp;worker&nbsp;limit&nbsp;(64&nbsp;in&lt;br&gt;<br>
Chrome,&nbsp;~118&nbsp;in&nbsp;Opera).&nbsp; And&nbsp;if&nbsp;I&nbsp;really&nbsp;want&nbsp;to&nbsp;spawn&nbsp;the&nbsp;worker,&nbsp;I&lt;br&gt;<br>
can&nbsp;always&nbsp;try&nbsp;spawning&nbsp;it&nbsp;again&nbsp;soon.&lt;br&gt;<br>
&lt;br&gt;<br>
This&nbsp;message&nbsp;describes&nbsp;why&nbsp;Chromium&nbsp;queues&nbsp;up&nbsp;excessive&nbsp;workers:&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2009-July/020865.html&quot;&nbsp;target=&quot;_blank&quot;&gt;http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2009-July/020865.html&lt;/a&gt;&lt;br&gt;<br>
&lt;br&gt;<br>
I&#39;m&nbsp;not&nbsp;sure&nbsp;that&nbsp;making&nbsp;it&nbsp;work&nbsp;like&nbsp;a&nbsp;&quot;sea&nbsp;of&nbsp;XHRs&quot;&nbsp;is&nbsp;the&nbsp;right&lt;br&gt;<br>
thing,&nbsp;for&nbsp;two&nbsp;reasons:&lt;br&gt;<br>
1)&nbsp;Workers&nbsp;often&nbsp;stay&nbsp;running&nbsp;for&nbsp;a&nbsp;long&nbsp;time;&nbsp;XHRs&nbsp;are&nbsp;usually&nbsp;short-lived.&lt;br&gt;<br>
2)&nbsp;Most&nbsp;web&nbsp;applications&nbsp;don&#39;t&nbsp;expect&nbsp;to&nbsp;definitely&nbsp;have&nbsp;access&nbsp;to&nbsp;a&lt;br&gt;<br>
Worker,&nbsp;so&nbsp;they&nbsp;work&nbsp;around&nbsp;it&nbsp;by&nbsp;running&nbsp;code&nbsp;in&nbsp;the&nbsp;page&nbsp;instead&nbsp;of&lt;br&gt;<br>
the&nbsp;worker.&nbsp; This&nbsp;same&nbsp;code&nbsp;path&nbsp;could&nbsp;be&nbsp;used&nbsp;when&nbsp;the&nbsp;worker&nbsp;limit&lt;br&gt;<br>
is&nbsp;exhausted.&nbsp; With&nbsp;XHRs,&nbsp;there&#39;s&nbsp;generally&nbsp;no&nbsp;workaround:&nbsp;you&nbsp;need&lt;br&gt;<br>
the&nbsp;data,&nbsp;no&nbsp;matter&nbsp;what.&lt;br&gt;<br>
&lt;br&gt;<br>
Here&#39;s&nbsp;a&nbsp;crude&nbsp;test&nbsp;page&nbsp;that&nbsp;instantiates&nbsp;17&nbsp;workers:&lt;br&gt;<br>
&lt;!doctype&nbsp;html&gt;&lt;br&gt;<br>
&lt;div&nbsp;id=&quot;log&quot;&gt;&lt;/div&gt;&lt;br&gt;<br>
&lt;script&gt;&lt;br&gt;<br>
var&nbsp;workers&nbsp;=&nbsp;[];&lt;br&gt;<br>
for(var&nbsp;i=0;&nbsp;i&nbsp;&lt;&nbsp;17;&nbsp;i++)&nbsp;{&lt;br&gt;<br>
&nbsp; try&nbsp;{&lt;br&gt;<br>
&nbsp; &nbsp; workers.push(new&nbsp;Worker(&#39;empty.js&#39;));&lt;br&gt;<br>
&nbsp; &nbsp; document.getElementById(&#39;log&#39;).innerHTML&nbsp;+=&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &#39;Worker&nbsp;#&#39;&nbsp;+&nbsp;i&nbsp;+&nbsp;&#39;&nbsp;instantiated.&lt;br&gt;&#39;;&lt;br&gt;<br>
&nbsp; }&nbsp;catch(e)&nbsp;{&lt;br&gt;<br>
&nbsp; &nbsp; document.getElementById(&#39;log&#39;).innerHTML&nbsp;+=&nbsp;e.toString()&nbsp;+&nbsp;&#39;&lt;br&gt;&#39;;&lt;br&gt;<br>
&nbsp; }&lt;br&gt;<br>
}&lt;br&gt;<br>
&lt;/script&gt;&lt;br&gt;<br>
&lt;br&gt;<br>
Any&nbsp;thoughts&nbsp;would&nbsp;be&nbsp;appreciated.&lt;br&gt;<br>
&lt;br&gt;<br>
Thanks,&lt;br&gt;<br>
&lt;font&nbsp;color=&quot;#888888&quot;&gt;&lt;br&gt;<br>
Ivan&lt;br&gt;<br>
&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;<br>

</tt>
