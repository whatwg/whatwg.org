<tt>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Wed,&nbsp;Sep&nbsp;9,&nbsp;2009&nbsp;at&nbsp;3:37&nbsp;PM,&nbsp;Maciej&nbsp;Stachowiak&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:mjs@apple.com&quot;&gt;mjs@apple.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
&lt;div&nbsp;class=&quot;im&quot;&gt;&lt;br&gt;<br>
On&nbsp;Sep&nbsp;9,&nbsp;2009,&nbsp;at&nbsp;10:55&nbsp;AM,&nbsp;Darin&nbsp;Fisher&nbsp;wrote:&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
The&nbsp;recent&nbsp;discussion&nbsp;about&nbsp;the&nbsp;storage&nbsp;mutex&nbsp;for&nbsp;Cookies&nbsp;and&nbsp;LocalStorage&nbsp;got&nbsp;me&nbsp;thinking....&lt;br&gt;<br>
&lt;br&gt;<br>
Perhaps&nbsp;instead&nbsp;of&nbsp;trying&nbsp;to&nbsp;build&nbsp;implicit&nbsp;locking&nbsp;into&nbsp;those&nbsp;features,&nbsp;we&nbsp;should&nbsp;give&nbsp;web&nbsp;apps&nbsp;the&nbsp;tools&nbsp;to&nbsp;manage&nbsp;exclusive&nbsp;access&nbsp;to&nbsp;shared&nbsp;resources.&lt;br&gt;<br>
&lt;/blockquote&gt;<br>
&lt;br&gt;&lt;/div&gt;<br>
I&#39;m&nbsp;really&nbsp;hesitant&nbsp;to&nbsp;expose&nbsp;explicit&nbsp;locking&nbsp;to&nbsp;the&nbsp;Web&nbsp;platform.&nbsp;Mutexes&nbsp;are&nbsp;incredibly&nbsp;hard&nbsp;to&nbsp;program&nbsp;with&nbsp;correctly,&nbsp;and&nbsp;we&nbsp;will&nbsp;surely&nbsp;end&nbsp;up&nbsp;with&nbsp;stuck&nbsp;locks,&nbsp;race&nbsp;conditions,&nbsp;livelocks,&nbsp;and&nbsp;so&nbsp;forth.&nbsp;For&nbsp;Workers&nbsp;I&nbsp;was&nbsp;happy&nbsp;that&nbsp;we&nbsp;managed&nbsp;to&nbsp;avoid&nbsp;any&nbsp;locking&nbsp;primitives&nbsp;by&nbsp;using&nbsp;a&nbsp;message-passing&nbsp;model,&nbsp;but&nbsp;explicit&nbsp;mutexes&nbsp;would&nbsp;ruin&nbsp;that.&lt;br&gt;<br>
&lt;font&nbsp;color=&quot;#888888&quot;&gt;<br>
&lt;br&gt;<br>
 -&nbsp;Maciej&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Note:&nbsp;I&nbsp;probably&nbsp;made&nbsp;a&nbsp;mistake&nbsp;calling&nbsp;these&nbsp;locks&nbsp;since&nbsp;they&nbsp;do&nbsp;not&nbsp;work&nbsp;like&nbsp;normal&nbsp;mutexes.&nbsp; You&nbsp;can&nbsp;only&nbsp;wait&nbsp;for&nbsp;one&nbsp;of&nbsp;these&nbsp;locks&nbsp;asynchronously.&nbsp; There&nbsp;is&nbsp;no&nbsp;synchronous&nbsp;blocking,&nbsp;which&nbsp;avoids&nbsp;most&nbsp;of&nbsp;the&nbsp;problems&nbsp;you&nbsp;mention.&nbsp; Also,&nbsp;the&nbsp;locks&nbsp;are&nbsp;cleared&nbsp;when&nbsp;the&nbsp;page&nbsp;is&nbsp;destroyed&nbsp;or&nbsp;navigated&nbsp;to&nbsp;another&nbsp;domain,&nbsp;so&nbsp;you&nbsp;lose&nbsp;the&nbsp;problem&nbsp;of&nbsp;stuck&nbsp;locks.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What&nbsp;motivated&nbsp;this&nbsp;was&nbsp;that&nbsp;I&nbsp;wanted&nbsp;the&nbsp;ability&nbsp;to&nbsp;simulate&nbsp;the&nbsp;database&nbsp;transaction&nbsp;model.&nbsp; Since&nbsp;we&nbsp;support&nbsp;that,&nbsp;we&nbsp;might&nbsp;as&nbsp;well&nbsp;support&nbsp;a&nbsp;similar&nbsp;system&nbsp;that&nbsp;is&nbsp;independent&nbsp;of&nbsp;a&nbsp;particular&nbsp;storage&nbsp;mechanism.&nbsp; Seems&nbsp;reasonable&nbsp;to&nbsp;me.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Alternatively,&nbsp;if&nbsp;we&nbsp;had&nbsp;a&nbsp;way&nbsp;to&nbsp;set&nbsp;a&nbsp;value&nbsp;in&nbsp;local&nbsp;storage&nbsp;and&nbsp;read&nbsp;the&nbsp;value&nbsp;that&nbsp;was&nbsp;there,&nbsp;then&nbsp;a&nbsp;web&nbsp;page&nbsp;could&nbsp;implement&nbsp;a&nbsp;&quot;flag&quot;&nbsp;to&nbsp;indicate&nbsp;mutual&nbsp;exclusion.&nbsp;Someone&nbsp;interested&nbsp;in&nbsp;acquiring&nbsp;a&nbsp;flag&nbsp;could&nbsp;wait&nbsp;for&nbsp;a&nbsp;storage&nbsp;event&nbsp;to&nbsp;indicate&nbsp;that&nbsp;the&nbsp;flag&nbsp;was&nbsp;cleared.&nbsp; However,&nbsp;what&nbsp;is&nbsp;missing&nbsp;is&nbsp;that&nbsp;there&nbsp;isn&#39;t&nbsp;a&nbsp;way&nbsp;for&nbsp;the&nbsp;&quot;flag&quot;&nbsp;to&nbsp;be&nbsp;auto-cleared&nbsp;when&nbsp;the&nbsp;DOM&nbsp;window&nbsp;is&nbsp;closed&nbsp;or&nbsp;navigated&nbsp;to&nbsp;another&nbsp;domain.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-Darin&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;&lt;div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;<br>
&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
&lt;br&gt;<br>
----&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;imagine&nbsp;a&nbsp;simple&nbsp;lock&nbsp;API:&lt;br&gt;<br>
&lt;br&gt;<br>
window.acquireLock(&quot;name&quot;)&lt;br&gt;<br>
window.releaseLock(&quot;name&quot;)&lt;br&gt;<br>
&lt;br&gt;<br>
acquireLock&nbsp;works&nbsp;like&nbsp;pthread_mutex_trylock&nbsp;in&nbsp;that&nbsp;it&nbsp;is&nbsp;non-blocking.&nbsp; it&nbsp;returns&nbsp;true&nbsp;if&nbsp;you&nbsp;succeeded&nbsp;in&nbsp;acquiring&nbsp;the&nbsp;lock,&nbsp;else&nbsp;it&nbsp;returns&nbsp;false.&nbsp; releaseLock&nbsp;does&nbsp;as&nbsp;its&nbsp;name&nbsp;suggests:&nbsp;releases&nbsp;the&nbsp;lock&nbsp;so&nbsp;that&nbsp;others&nbsp;may&nbsp;acquire&nbsp;it.&lt;br&gt;<br>
<br>
&lt;br&gt;<br>
Any&nbsp;locks&nbsp;acquired&nbsp;would&nbsp;be&nbsp;automatically&nbsp;released&nbsp;when&nbsp;the&nbsp;DOM&nbsp;window&nbsp;is&nbsp;destroyed&nbsp;or&nbsp;navigated&nbsp;cross&nbsp;origin.&nbsp; This&nbsp;API&nbsp;could&nbsp;also&nbsp;be&nbsp;supported&nbsp;by&nbsp;workers.&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;name&nbsp;parameter&nbsp;is&nbsp;scoped&nbsp;to&nbsp;the&nbsp;origin&nbsp;of&nbsp;the&nbsp;page.&nbsp; So,&nbsp;this&nbsp;locking&nbsp;API&nbsp;only&nbsp;works&nbsp;between&nbsp;pages&nbsp;in&nbsp;the&nbsp;same&nbsp;origin.&lt;br&gt;<br>
&lt;br&gt;<br>
----&lt;br&gt;<br>
&lt;br&gt;<br>
We&nbsp;could&nbsp;also&nbsp;extend&nbsp;acquireLock&nbsp;to&nbsp;support&nbsp;an&nbsp;asynchronous&nbsp;callback&nbsp;when&nbsp;the&nbsp;lock&nbsp;becomes&nbsp;available:&lt;br&gt;<br>
&lt;br&gt;<br>
window.acquireLock(&quot;name&quot;,&nbsp;function()&nbsp;{&nbsp;/*&nbsp;lock&nbsp;acquired&nbsp;*/&nbsp;});&lt;br&gt;<br>
&lt;br&gt;<br>
If&nbsp;the&nbsp;callback&nbsp;function&nbsp;is&nbsp;given,&nbsp;then&nbsp;upon&nbsp;lock&nbsp;acquisition,&nbsp;the&nbsp;callback&nbsp;function&nbsp;would&nbsp;be&nbsp;invoked.&nbsp; In&nbsp;this&nbsp;case,&nbsp;the&nbsp;return&nbsp;value&nbsp;of&nbsp;acquireLock&nbsp;is&nbsp;true&nbsp;if&nbsp;the&nbsp;function&nbsp;was&nbsp;invoked&nbsp;or&nbsp;false&nbsp;if&nbsp;the&nbsp;function&nbsp;will&nbsp;be&nbsp;invoked&nbsp;once&nbsp;the&nbsp;lock&nbsp;can&nbsp;be&nbsp;acquired.&lt;br&gt;<br>
<br>
&lt;br&gt;<br>
----&lt;br&gt;<br>
&lt;br&gt;<br>
Finally,&nbsp;there&nbsp;could&nbsp;be&nbsp;a&nbsp;helper&nbsp;for&nbsp;scoping&nbsp;lock&nbsp;acquisition:&lt;br&gt;<br>
&lt;br&gt;<br>
window.acquireScopedLock(&quot;name&quot;,&nbsp;function()&nbsp;{&nbsp;/*&nbsp;lock&nbsp;acquired&nbsp;for&nbsp;this&nbsp;scope&nbsp;only&nbsp;*/&nbsp;});&lt;br&gt;<br>
&lt;br&gt;<br>
----&lt;br&gt;<br>
&lt;br&gt;<br>
This&nbsp;lock&nbsp;API&nbsp;would&nbsp;provide&nbsp;developers&nbsp;with&nbsp;the&nbsp;ability&nbsp;to&nbsp;indicate&nbsp;that&nbsp;their&nbsp;instance&nbsp;of&nbsp;the&nbsp;web&nbsp;app&nbsp;is&nbsp;the&nbsp;only&nbsp;one&nbsp;that&nbsp;should&nbsp;play&nbsp;with&nbsp;LocalStorage.&nbsp; Other&nbsp;instances&nbsp;could&nbsp;then&nbsp;know&nbsp;that&nbsp;they&nbsp;don&#39;t&nbsp;have&nbsp;exclusive&nbsp;access&nbsp;and&nbsp;could&nbsp;take&nbsp;appropriate&nbsp;action.&lt;br&gt;<br>
<br>
&lt;br&gt;<br>
This&nbsp;API&nbsp;seems&nbsp;like&nbsp;it&nbsp;could&nbsp;be&nbsp;used&nbsp;to&nbsp;allow&nbsp;LocalStorage&nbsp;to&nbsp;be&nbsp;usable&nbsp;from&nbsp;workers.&nbsp; Also,&nbsp;as&nbsp;we&nbsp;start&nbsp;developing&nbsp;other&nbsp;means&nbsp;of&nbsp;local&nbsp;storage&nbsp;(File&nbsp;APIs),&nbsp;it&nbsp;seems&nbsp;like&nbsp;having&nbsp;to&nbsp;again&nbsp;invent&nbsp;a&nbsp;reasonable&nbsp;implicit&nbsp;locking&nbsp;system&nbsp;will&nbsp;be&nbsp;a&nbsp;pain.&nbsp; Perhaps&nbsp;it&nbsp;would&nbsp;just&nbsp;be&nbsp;better&nbsp;to&nbsp;develop&nbsp;something&nbsp;explicit&nbsp;that&nbsp;application&nbsp;developers&nbsp;can&nbsp;use&nbsp;independent&nbsp;of&nbsp;the&nbsp;local&nbsp;storage&nbsp;mechanism&nbsp;:-)&lt;br&gt;<br>
<br>
&lt;br&gt;<br>
----&lt;br&gt;<br>
&lt;br&gt;<br>
It&nbsp;may&nbsp;be&nbsp;the&nbsp;case&nbsp;that&nbsp;we&nbsp;want&nbsp;to&nbsp;only&nbsp;provide&nbsp;acquireScopedLock&nbsp;(or&nbsp;something&nbsp;like&nbsp;it)&nbsp;to&nbsp;enforce&nbsp;fine&nbsp;grained&nbsp;locking,&nbsp;but&nbsp;I&nbsp;think&nbsp;that&nbsp;would&nbsp;only&nbsp;force&nbsp;people&nbsp;to&nbsp;implement&nbsp;long-lived&nbsp;locks&nbsp;by&nbsp;setting&nbsp;a&nbsp;field&nbsp;in&nbsp;LocalStorage.&nbsp; That&nbsp;would&nbsp;then&nbsp;result&nbsp;in&nbsp;the&nbsp;locks&nbsp;not&nbsp;being&nbsp;managed&nbsp;by&nbsp;the&nbsp;UA,&nbsp;which&nbsp;means&nbsp;that&nbsp;they&nbsp;cannot&nbsp;be&nbsp;reliably&nbsp;cleaned&nbsp;up&nbsp;when&nbsp;the&nbsp;page&nbsp;closes.&nbsp; I&nbsp;think&nbsp;it&nbsp;is&nbsp;very&nbsp;important&nbsp;that&nbsp;we&nbsp;provide&nbsp;facilities&nbsp;to&nbsp;guide&nbsp;people&nbsp;away&nbsp;from&nbsp;building&nbsp;such&nbsp;ad-hoc&nbsp;locks&nbsp;on&nbsp;top&nbsp;of&nbsp;LocalStorage.&nbsp; This&nbsp;is&nbsp;why&nbsp;I&nbsp;like&nbsp;the&nbsp;explicit&nbsp;(non-blocking!)&nbsp;acquireLock&nbsp;and&nbsp;releaseLock&nbsp;methods.&lt;br&gt;<br>
<br>
&lt;br&gt;<br>
-Darin&lt;br&gt;<br>
&lt;/blockquote&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;<br>

</tt>
