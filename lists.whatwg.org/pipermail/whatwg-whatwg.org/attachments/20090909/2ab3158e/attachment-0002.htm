<tt>
&lt;div&gt;Great&nbsp;analysis.&nbsp; I&nbsp;only&nbsp;have&nbsp;a&nbsp;few&nbsp;comments/questions:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;On&nbsp;Wed,&nbsp;Sep&nbsp;9,&nbsp;2009&nbsp;at&nbsp;1:41&nbsp;PM,&nbsp;Chris&nbsp;Jones&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:cjones@mozilla.com&quot;&gt;cjones@mozilla.com&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;<br>
<br>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;Jeremy&nbsp;Orlow&nbsp;wrote:&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;&lt;div&nbsp;class=&quot;im&quot;&gt;<br>
On&nbsp;Wed,&nbsp;Sep&nbsp;9,&nbsp;2009&nbsp;at&nbsp;4:39&nbsp;AM,&nbsp;Chris&nbsp;Jones&nbsp;&lt;&lt;a&nbsp;href=&quot;mailto:cjones@mozilla.com&quot;&nbsp;target=&quot;_blank&quot;&gt;cjones@mozilla.com&lt;/a&gt;&nbsp;&lt;mailto:&lt;a&nbsp;href=&quot;mailto:cjones@mozilla.com&quot;&nbsp;target=&quot;_blank&quot;&gt;cjones@mozilla.com&lt;/a&gt;&gt;&gt;&nbsp;wrote:&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
&nbsp; &nbsp; Aaron&nbsp;Boodman&nbsp;wrote:&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; On&nbsp;Tue,&nbsp;Sep&nbsp;8,&nbsp;2009&nbsp;at&nbsp;11:23&nbsp;AM,&nbsp;Chris&nbsp;Jones&lt;&lt;a&nbsp;href=&quot;mailto:cjones@mozilla.com&quot;&nbsp;target=&quot;_blank&quot;&gt;cjones@mozilla.com&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;im&quot;&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &lt;mailto:&lt;a&nbsp;href=&quot;mailto:cjones@mozilla.com&quot;&nbsp;target=&quot;_blank&quot;&gt;cjones@mozilla.com&lt;/a&gt;&gt;&gt;&nbsp;wrote:&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; In&nbsp;general,&nbsp;I&nbsp;agree&nbsp;with&nbsp;Rob&nbsp;about&nbsp;this&nbsp;proposal.&nbsp; What&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; problem&nbsp;with&nbsp;storage&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mutex&nbsp;as&nbsp;spec&#39;d&nbsp;today&nbsp;does&nbsp;your&nbsp;proposal&nbsp;solve?&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; The&nbsp;spec&nbsp;requires&nbsp;a&nbsp;single&nbsp;storage&nbsp;mutex&nbsp;for&nbsp;the&nbsp;entire&nbsp;UA.&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; Therefore&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; in&nbsp;a&nbsp;MELUA&nbsp;a&nbsp;web&nbsp;page&nbsp;can&nbsp;become&nbsp;unresponsive&nbsp;while&nbsp;waiting&nbsp;for&nbsp;some&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; other&nbsp;page&nbsp;to&nbsp;give&nbsp;up&nbsp;the&nbsp;lock.&nbsp;This&nbsp;is&nbsp;not&nbsp;good&nbsp;and&nbsp;something&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; we&nbsp;have&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; tried&nbsp;to&nbsp;avoid&nbsp;everywhere&nbsp;else&nbsp;in&nbsp;the&nbsp;spec.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; Attempts&nbsp;to&nbsp;address&nbsp;this&nbsp;by&nbsp;doing&nbsp;per-origin&nbsp;locks&nbsp;wind&nbsp;up&nbsp;with&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; deadlocks&nbsp;being&nbsp;possible.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Aaron&nbsp;Boodman&nbsp;wrote:&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; On&nbsp;Tue,&nbsp;Sep&nbsp;8,&nbsp;2009&nbsp;at&nbsp;1:41&nbsp;AM,&nbsp;Robert&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; O&#39;Callahan&lt;&lt;a&nbsp;href=&quot;mailto:robert@ocallahan.org&quot;&nbsp;target=&quot;_blank&quot;&gt;robert@ocallahan.org&lt;/a&gt;&lt;br&gt;&lt;/div&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;mailto:&lt;a&nbsp;href=&quot;mailto:robert@ocallahan.org&quot;&nbsp;target=&quot;_blank&quot;&gt;robert@ocallahan.org&lt;/a&gt;&gt;&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wrote:&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; What&nbsp;is&nbsp;the&nbsp;intended&nbsp;semantics&nbsp;here?&nbsp;Chris&#39;&nbsp;explicit&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; commitTransaction&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; would&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; throw&nbsp;an&nbsp;exception&nbsp;if&nbsp;the&nbsp;transaction&nbsp;was&nbsp;aborted&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; due&nbsp;to&nbsp;data&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inconsistency,&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; leaving&nbsp;it&nbsp;up&nbsp;to&nbsp;the&nbsp;script&nbsp;to&nbsp;retry&nbsp;---&nbsp;and&nbsp;making&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; it&nbsp;clear&nbsp;to&nbsp;script&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; authors&nbsp;that&nbsp;non-storage&nbsp;side&nbsp;effects&nbsp;during&nbsp;the&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transaction&nbsp;are&nbsp;not&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; undone.&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; How&nbsp;would&nbsp;you&nbsp;handle&nbsp;transaction&nbsp;aborts?&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Calls&nbsp;to&nbsp;transaction()&nbsp;are&nbsp;queued&nbsp;and&nbsp;executed&nbsp;serially&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; per-origin&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; with&nbsp;exclusive&nbsp;access.&nbsp;There&nbsp;is&nbsp;no&nbsp;such&nbsp;thing&nbsp;as&nbsp;a&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transaction&nbsp;abort&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; because&nbsp;there&nbsp;cannot&nbsp;be&nbsp;consistency&nbsp;problems&nbsp;because&nbsp;of&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; the&nbsp;serialized&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; access.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; No,&nbsp;transactions&nbsp;can&nbsp;still&nbsp;fail.&nbsp; They&nbsp;can&nbsp;fail&nbsp;in&nbsp;ways&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; immediately&nbsp;hidden&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; from&nbsp;the&nbsp;script&nbsp;that&nbsp;requested&nbsp;them&nbsp;if&nbsp;the&nbsp;UA&nbsp;has&nbsp;to&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; interrupt&nbsp;the&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; conceptually&nbsp;executing&nbsp;transaction&nbsp;in&nbsp;the&nbsp;ways&nbsp;enumerated&nbsp;in&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a&nbsp;separate&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; branch&nbsp;of&nbsp;this&nbsp;thread.&nbsp; Later&nbsp;script&nbsp;executions&nbsp;can&nbsp;observe&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inconsistent&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; state&nbsp;unless&nbsp;more&nbsp;is&nbsp;specified&nbsp;by&nbsp;your&nbsp;proposal.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Transactions&nbsp;can&nbsp;also&nbsp;fail&nbsp;visibly&nbsp;if&nbsp;write-to-disk&nbsp;fails&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (probably&nbsp;also&nbsp;in&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; other&nbsp;ways&nbsp;I&nbsp;haven&#39;t&nbsp;considered).&nbsp; It&#39;s&nbsp;not&nbsp;clear&nbsp;what&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; should&nbsp;happen&nbsp;wrt&nbsp;to&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; your&nbsp;proposal&nbsp;in&nbsp;this&nbsp;case.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; If&nbsp;so,&nbsp;I&nbsp;agree&nbsp;with&nbsp;roc&#39;s&nbsp;responses&nbsp;to&nbsp;them&nbsp;that&nbsp;they&nbsp;could&nbsp;probably&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; be&nbsp;handled&nbsp;without&nbsp;surfacing&nbsp;errors&nbsp;to&nbsp;the&nbsp;developer.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; OTOH,&nbsp;I&#39;m&nbsp;not&nbsp;really&nbsp;against&nbsp;adding&nbsp;the&nbsp;concept&nbsp;of&nbsp;fallibility&nbsp;here.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; In&nbsp;fact,&nbsp;I&nbsp;believe&nbsp;that&nbsp;the&nbsp;&quot;Synchronous&nbsp;database&nbsp;API&quot;&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; describes&nbsp;the&nbsp;same&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transaction&nbsp;semantics&nbsp;as&nbsp;I&nbsp;proposed&nbsp;in&nbsp;the&nbsp;OP.&nbsp; That&nbsp;spec&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; adds&nbsp;implicit&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; begin/commitTransaction&nbsp;and&nbsp;read-only&nbsp;transactions,&nbsp;but&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; otherwise&nbsp;the&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; semantics&nbsp;are&nbsp;the&nbsp;same.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; So&nbsp;I&#39;d&nbsp;like&nbsp;to&nbsp;amend&nbsp;my&nbsp;original&nbsp;proposal&nbsp;to&nbsp;be&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Use&nbsp;Synchronous&nbsp;Web&nbsp;Database&nbsp;API&nbsp;transaction&nbsp;semantics.&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Except&nbsp;do&nbsp;not&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; offer&nbsp;readTransaction:&nbsp;a&nbsp;transaction&nbsp;is&nbsp;implicitly&nbsp;a&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; read-only&nbsp;transaction&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&nbsp;only&nbsp;getItem()&nbsp;is&nbsp;called&nbsp;on&nbsp;localStorage&nbsp;from&nbsp;within&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; localStorage.transaction().&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; Agree.&nbsp;That&nbsp;is&nbsp;what&nbsp;I&nbsp;was&nbsp;trying&nbsp;to&nbsp;propose,&nbsp;too.&nbsp;I&#39;m&nbsp;not&nbsp;sure&nbsp;where&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; we&nbsp;disagree&nbsp;:).&nbsp;Is&nbsp;it&nbsp;just&nbsp;that&nbsp;my&nbsp;proposal&nbsp;has&nbsp;no&nbsp;concept&nbsp;of&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; errors?&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; I&#39;m&nbsp;not&nbsp;against&nbsp;adding&nbsp;them,&nbsp;mainly&nbsp;I&nbsp;was&nbsp;trying&nbsp;to&nbsp;keep&nbsp;my&nbsp;proposal&lt;br&gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp; simple&nbsp;for&nbsp;purposes&nbsp;of&nbsp;discussion.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; Ay,&nbsp;there&#39;s&nbsp;the&nbsp;rub:&nbsp;I&nbsp;think&nbsp;the&nbsp;disagreement&nbsp;is&nbsp;between&nbsp;&quot;mutex&quot;&nbsp;vs.&lt;br&gt;<br>
&nbsp; &nbsp; &quot;transaction&quot;&nbsp;semantics.&nbsp; So&nbsp;far,&nbsp;I&nbsp;think&nbsp;perhaps&nbsp;&quot;mutex&quot;&nbsp;has&nbsp;been&lt;br&gt;<br>
&nbsp; &nbsp; used&nbsp;as&nbsp;shorthand&nbsp;for&nbsp;&quot;transaction.&quot;&nbsp; But&nbsp;they&nbsp;aren&#39;t&nbsp;the&nbsp;same.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; I&nbsp;think&nbsp;we&nbsp;all&nbsp;agree&nbsp;that&nbsp;a&nbsp;script&nbsp;may&nbsp;fail&nbsp;to&nbsp;modify&nbsp;localStorage&lt;br&gt;<br>
&nbsp; &nbsp; in&nbsp;some&nbsp;situations&nbsp;(irrespective&nbsp;of&nbsp;global&nbsp;mutex&nbsp;vs.&nbsp;per-domain&lt;br&gt;<br>
&nbsp; &nbsp; mutex).&nbsp;One&nbsp;camp,&nbsp;wanting&nbsp;&quot;mutex&quot;&nbsp;semantics,&nbsp;would&nbsp;prefer&nbsp;to&nbsp;pretend&lt;br&gt;<br>
&nbsp; &nbsp; that&nbsp;the&nbsp;failures&nbsp;never&nbsp;happen&nbsp;and&nbsp;let&nbsp;scripts&nbsp;clean&nbsp;up&nbsp;the&nbsp;mess&lt;br&gt;<br>
&nbsp; &nbsp; (partially-applied&nbsp;changes)&nbsp;if&nbsp;they&nbsp;do&nbsp;occur.&nbsp; This&nbsp;is&nbsp;semantically&lt;br&gt;<br>
&nbsp; &nbsp; broken,&nbsp;IMHO.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; The&nbsp;second&nbsp;camp,&nbsp;wanting&nbsp;&quot;transaction&quot;&nbsp;semantics,&nbsp;explicitly&lt;br&gt;<br>
&nbsp; &nbsp; acknowledge&nbsp;to&nbsp;web&nbsp;authors&nbsp;that&nbsp;localStorage&nbsp;is&nbsp;fallible,&nbsp;guarantee&lt;br&gt;<br>
&nbsp; &nbsp; that&nbsp;modifications&nbsp;to&nbsp;localStorage&nbsp;are&nbsp;atomic,&nbsp;and&nbsp;notify&nbsp;scripts&lt;br&gt;<br>
&nbsp; &nbsp; when&nbsp;modifications&nbsp;can&#39;t&nbsp;be&nbsp;made&nbsp;atomically.&nbsp; This&nbsp;is&nbsp;the&nbsp;same&lt;br&gt;<br>
&nbsp; &nbsp; approach&nbsp;taken&nbsp;by&nbsp;Web&nbsp;Database.&nbsp; IMHO,&nbsp;this&nbsp;is&nbsp;much&nbsp;better&lt;br&gt;<br>
&nbsp; &nbsp; semantically&nbsp;because&nbsp;(i)&nbsp;it&nbsp;gives&nbsp;web&nbsp;apps&nbsp;stronger&nbsp;guarantees;&nbsp;and&lt;br&gt;<br>
&nbsp; &nbsp; (ii)&nbsp;it&nbsp;makes&nbsp;the&nbsp;discussion&nbsp;about&nbsp;global&nbsp;mutex/per-domain&lt;br&gt;<br>
&nbsp; &nbsp; mutex/non-blocking&nbsp;an&nbsp;implementation&nbsp;issue&nbsp;rather&nbsp;semantic&nbsp;issue,&nbsp;as&lt;br&gt;<br>
&nbsp; &nbsp; it&nbsp;should&nbsp;be.&lt;br&gt;<br>
&lt;br&gt;<br>
&nbsp; &nbsp; Can&nbsp;those&nbsp;in&nbsp;the&nbsp;first&nbsp;camp&nbsp;explain&nbsp;why&nbsp;&quot;mutex&quot;&nbsp;semantics&nbsp;is&nbsp;better&lt;br&gt;<br>
&nbsp; &nbsp; than&nbsp;&quot;transaction&quot;&nbsp;semantics?&nbsp; And&nbsp;why&nbsp;it&#39;s&nbsp;desirable&nbsp;to&nbsp;have&nbsp;one&nbsp;DB&lt;br&gt;<br>
&nbsp; &nbsp; spec&nbsp;specify&nbsp;&quot;transaction&quot;&nbsp;semantics&nbsp;(Web&nbsp;Database)&nbsp;and&nbsp;a&nbsp;second&lt;br&gt;<br>
&nbsp; &nbsp; specify&nbsp;&quot;mutex&quot;&nbsp;semantics&nbsp;(localStorage)?&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;way&nbsp;I&nbsp;understand&nbsp;it,&nbsp;there&#39;s&nbsp;3&nbsp;camps...and&nbsp;I&nbsp;think&nbsp;they&#39;ve&nbsp;been&nbsp;abusing&nbsp;both&nbsp;the&nbsp;word&nbsp;transaction&nbsp;and&nbsp;mutex.&nbsp; We&nbsp;should&nbsp;probably&nbsp;all&nbsp;start&nbsp;being&nbsp;more&nbsp;precise&nbsp;with&nbsp;our&nbsp;wording&nbsp;in&nbsp;this&nbsp;respect.&nbsp; :-)&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;<br>
&lt;br&gt;<br>
I&#39;d&nbsp;like&nbsp;to&nbsp;refine&nbsp;the&nbsp;above&nbsp;description&nbsp;of&nbsp;the&nbsp;design&nbsp;space.&nbsp; I&nbsp;think&nbsp;there&nbsp;are&nbsp;three&nbsp;main&nbsp;design&nbsp;decisions:&nbsp;what&nbsp;ACID&nbsp;properties&nbsp;are&nbsp;guaranteed&nbsp;and&nbsp;at&nbsp;what&nbsp;granularity,&nbsp;sync&nbsp;and/or&nbsp;async&nbsp;API,&nbsp;and&nbsp;whether&nbsp;or&nbsp;not&nbsp;scripts&nbsp;can&nbsp;be&nbsp;notified&nbsp;when&nbsp;modifications&nbsp;to&nbsp;localStorage&nbsp;fail.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
In&nbsp;the&nbsp;current&nbsp;localStorage&nbsp;spec,&nbsp;the&nbsp;unit&nbsp;of&nbsp;atomicity/consistency&nbsp;is&nbsp;each&nbsp;modification&nbsp;(setItem()/removeItem()/clear())&nbsp;of&nbsp;localStorage.&nbsp; But&nbsp;the&nbsp;unit&nbsp;of&nbsp;isolation&nbsp;is&nbsp;all&nbsp;operations&nbsp;to&nbsp;localStorage&nbsp;between&nbsp;acquiring&nbsp;the&nbsp;storage&nbsp;mutex&nbsp;and&nbsp;releasing&nbsp;it.&nbsp; And&nbsp;durability&nbsp;isn&#39;t&nbsp;specified&nbsp;AFAICT.&nbsp; And&nbsp;AFAICT,&nbsp;scripts&nbsp;can&nbsp;observe&nbsp;some&nbsp;failed&nbsp;modifications&nbsp;to&nbsp;localStorage,&nbsp;but&nbsp;not&nbsp;all.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
In&nbsp;the&nbsp;current&nbsp;Web&nbsp;Database&nbsp;spec,&nbsp;the&nbsp;unit&nbsp;of&nbsp;A/C/I&nbsp;is&nbsp;each&nbsp;transaction,&nbsp;i.e.,&nbsp;all&nbsp;executeSql()&nbsp;statements&nbsp;invoked&nbsp;on&nbsp;a&nbsp;Transaction&nbsp;object.&nbsp;Durability&nbsp;isn&#39;t&nbsp;defined,&nbsp;but&nbsp;it&nbsp;seems&nbsp;reasonable&nbsp;to&nbsp;assume&nbsp;that&nbsp;successful&nbsp;Transactions&nbsp;should&nbsp;be&nbsp;durable&nbsp;(best&nbsp;effort).&nbsp; So&nbsp;a&nbsp;Transaction&nbsp;object&nbsp;is&nbsp;(best-effort)&nbsp;ACID.&nbsp; Scripts&nbsp;*can*&nbsp;observe&nbsp;failed&nbsp;transactions&nbsp;and&nbsp;thus&nbsp;&quot;rolled-back&quot;&nbsp;changes.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
The&nbsp;first&nbsp;point&nbsp;on&nbsp;which&nbsp;the&nbsp;new&nbsp;proposals&nbsp;for&nbsp;localStorage&nbsp;in&nbsp;this&nbsp;thread&nbsp;differ&nbsp;is&nbsp;whether&nbsp;to&nbsp;guarantee&nbsp;ACID&nbsp;(best&nbsp;effort)&nbsp;at&nbsp;a&nbsp;*uniform*&nbsp;granularity&nbsp;or&nbsp;not.&nbsp; All&nbsp;the&nbsp;proposals&nbsp;have&nbsp;some&nbsp;notion&nbsp;of&nbsp;&quot;begin&quot;&nbsp;and&nbsp;&quot;end&quot;.&nbsp; All&nbsp;of&nbsp;the&nbsp;proposals&nbsp;seem&nbsp;to&nbsp;want&nbsp;all&nbsp;operations&nbsp;between&nbsp;begin&nbsp;and&nbsp;end&nbsp;to&nbsp;be&nbsp;isolated&nbsp;(although&nbsp;some&nbsp;implementations&nbsp;in&nbsp;the&nbsp;wild&nbsp;do&nbsp;not&nbsp;guarantee&nbsp;this).&nbsp; Some&nbsp;choose&nbsp;individual&nbsp;operations&nbsp;(get/set/remove/clear)&nbsp;of&nbsp;localStorage&nbsp;as&nbsp;the&nbsp;unit&nbsp;of&nbsp;atomicity/consistency.&nbsp; This&nbsp;allows&nbsp;for&nbsp;some&nbsp;modifications&nbsp;between&nbsp;begin&nbsp;and&nbsp;end&nbsp;to&nbsp;be&nbsp;applied&nbsp;even&nbsp;if&nbsp;all&nbsp;changes&nbsp;couldn&#39;t&nbsp;be&nbsp;applied.&nbsp; Others&nbsp;choose&nbsp;all&nbsp;modifications&nbsp;between&nbsp;begin&nbsp;and&nbsp;end&nbsp;as&nbsp;the&nbsp;unit&nbsp;of&nbsp;atomicity/consistency.&nbsp; For&nbsp;this&nbsp;last&nbsp;group,&nbsp;&quot;end&quot;&nbsp;really&nbsp;means&nbsp;&quot;commit&quot;,&nbsp;because&nbsp;begin/commit&nbsp;define&nbsp;a&nbsp;transaction&nbsp;in&nbsp;the&nbsp;sense&nbsp;of&nbsp;Web&nbsp;Database&#39;s&nbsp;Transaction&nbsp;objects.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
Semantically,&nbsp;an&nbsp;async&nbsp;vs.&nbsp;sync&nbsp;API&nbsp;doesn&#39;t&nbsp;change&nbsp;anything.&nbsp; It&nbsp;does,&nbsp;however,&nbsp;affect&nbsp;the&nbsp;optimizations&nbsp;available&nbsp;to&nbsp;implementations.&nbsp; An&nbsp;async&nbsp;callback&nbsp;might&nbsp;only&nbsp;be&nbsp;invoked&nbsp;by&nbsp;a&nbsp;SELUA&nbsp;when&nbsp;localStorage&nbsp;was&nbsp;loaded&nbsp;from&nbsp;disk&nbsp;into&nbsp;memory,&nbsp;so&nbsp;that&nbsp;the&nbsp;app&nbsp;could&nbsp;handle&nbsp;events&nbsp;in&nbsp;the&nbsp;mean&nbsp;time&nbsp;rather&nbsp;than&nbsp;blocking&nbsp;on&nbsp;disk.&nbsp; In&nbsp;addition,&nbsp;a&nbsp;MELUA&nbsp;with&nbsp;a&nbsp;mutex&nbsp;implementation&nbsp;might&nbsp;only&nbsp;invoke&nbsp;the&nbsp;localStorage&nbsp;callback&nbsp;when&nbsp;the&nbsp;mutex&nbsp;could&nbsp;be&nbsp;acquired&nbsp;(e.g.&nbsp;only&nbsp;when&nbsp;a&nbsp;trylock()&nbsp;succeeded).&nbsp; I&#39;m&nbsp;beginning&nbsp;to&nbsp;be&nbsp;convinced&nbsp;that&nbsp;async&nbsp;callbacks&nbsp;are&nbsp;superior&nbsp;because&nbsp;of&nbsp;more&nbsp;flexible&nbsp;(and&nbsp;possibly&nbsp;performant)&nbsp;implementation&nbsp;options.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
Finally&nbsp;there&#39;s&nbsp;observable&nbsp;vs.&nbsp;unobservable&nbsp;&quot;failures.&quot;&nbsp; What&nbsp;&quot;failure&quot;&nbsp;means&nbsp;depends&nbsp;on&nbsp;the&nbsp;subset&nbsp;of&nbsp;ACID&nbsp;preserved,&nbsp;and&nbsp;at&nbsp;what&nbsp;granularity.&nbsp; Some&nbsp;proposals&nbsp;do&nbsp;not&nbsp;allow&nbsp;scripts&nbsp;to&nbsp;observe&nbsp;failures.&nbsp; For&nbsp;any&nbsp;proposal&nbsp;wishing&nbsp;to&nbsp;expand&nbsp;the&nbsp;unit&nbsp;of&nbsp;atomicity/consistency&nbsp;beyond&nbsp;single&nbsp;modifications&nbsp;(single&nbsp;set/remove/clear),&nbsp;I&nbsp;believe&nbsp;that&nbsp;the&nbsp;proposal&nbsp;must&nbsp;immediately&nbsp;terminate&nbsp;web&nbsp;apps&nbsp;if&nbsp;all&nbsp;changes&nbsp;between&nbsp;begin/end&nbsp;could&nbsp;not&nbsp;be&nbsp;applied.&nbsp; Otherwise&nbsp;the&nbsp;UA&nbsp;has&nbsp;the&nbsp;non-option&nbsp;of&nbsp;either&nbsp;exposing&nbsp;non-atomic&nbsp;or&nbsp;inconsistent&nbsp;changes&nbsp;to&nbsp;localStorage,&nbsp;or&nbsp;allowing&nbsp;side-effecty&nbsp;script&nbsp;statements&nbsp;to&nbsp;complete&nbsp;in&nbsp;between&nbsp;attempted&nbsp;modifications&nbsp;to&nbsp;localStorage&nbsp;that&nbsp;fail.&nbsp; Other&nbsp;proposals&nbsp;explicitly&nbsp;*allow*&nbsp;scripts&nbsp;to&nbsp;be&nbsp;notified&nbsp;of&nbsp;failures,&nbsp;with&nbsp;the&nbsp;intention&nbsp;that&nbsp;a&nbsp;script&nbsp;could&nbsp;retry&nbsp;failed&nbsp;modifications.&nbsp; One&nbsp;use&nbsp;for&nbsp;such&nbsp;an&nbsp;API&nbsp;is&nbsp;a&nbsp;localStorage&nbsp;implementation&nbsp;with&nbsp;optimistic&nbsp;transactions,&nbsp;i.e.&nbsp;transactions&nbsp;implemented&nbsp;with&nbsp;STM-like&nbsp;techniques&nbsp;(which&nbsp;is&nbsp;what&nbsp;I&nbsp;had&nbsp;in&nbsp;mind&nbsp;with&nbsp;the&nbsp;OP).&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
(For&nbsp;the&nbsp;latter,&nbsp;Rob&nbsp;O&#39;Callahan&nbsp;proposed&nbsp;a&nbsp;very&nbsp;interesting&nbsp;&quot;localStorage&nbsp;developer/debug&nbsp;mode&quot;&nbsp;in&nbsp;which&nbsp;the&nbsp;UA&nbsp;would&nbsp;always&nbsp;fail&nbsp;a&nbsp;transaction&nbsp;at&nbsp;least&nbsp;once&nbsp;before&nbsp;succeeding.&nbsp; This&nbsp;would&nbsp;allow&nbsp;authors&nbsp;to&nbsp;ensure&nbsp;that&nbsp;they&nbsp;uniformly&nbsp;handled&nbsp;failed&nbsp;transactions.&nbsp; This&nbsp;could&nbsp;even&nbsp;be&nbsp;exposed&nbsp;as&nbsp;localStorage.__debug__&nbsp;or&nbsp;somesuch&nbsp;rather&nbsp;than&nbsp;through&nbsp;UA-specific&nbsp;preferences.)&lt;div&nbsp;class=&quot;im&quot;&gt;<br>
<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
&lt;br&gt;<br>
Those&nbsp;who&nbsp;want&nbsp;pessimistic&nbsp;transactions.&nbsp; I.e.&nbsp;using&nbsp;locking&nbsp;so&nbsp;that&nbsp;you&nbsp;never&nbsp;need&nbsp;to&nbsp;do&nbsp;a&nbsp;rollback&nbsp;(because&nbsp;it&nbsp;can&nbsp;never&nbsp;&quot;fail&quot;).&nbsp; This&nbsp;would&nbsp;be&nbsp;compatible&nbsp;with&nbsp;either&nbsp;a&nbsp;sync&nbsp;or&nbsp;an&nbsp;async&nbsp;interface.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/blockquote&gt;<br>
&lt;br&gt;&lt;/div&gt;<br>
By&nbsp;the&nbsp;above&nbsp;characterization:&nbsp;{&nbsp;uniform&nbsp;granularity&nbsp;of&nbsp;ACID&nbsp;(traditional&nbsp;transactions),&nbsp;async/sync&nbsp;unspecified,&nbsp;unobservable&nbsp;transaction&nbsp;failures&nbsp;}.&lt;div&nbsp;class=&quot;im&quot;&gt;&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
Those&nbsp;who&nbsp;optimistic&nbsp;transactions.&nbsp; I.e.&nbsp;rollback&nbsp;may&nbsp;happen.&nbsp; Either&nbsp;we&nbsp;need&nbsp;to&nbsp;restrict&nbsp;what&nbsp;can&nbsp;be&nbsp;done&nbsp;during&nbsp;a&nbsp;localStorage&nbsp;transaction&nbsp;or&nbsp;we&nbsp;need&nbsp;to&nbsp;have&nbsp;an&nbsp;exception&nbsp;that&nbsp;tells&nbsp;the&nbsp;script&nbsp;to&nbsp;undo&nbsp;itself.&nbsp; This&nbsp;was&nbsp;the&nbsp;original&nbsp;proposal,&nbsp;AFAICT.&nbsp; It&nbsp;would&nbsp;work&nbsp;with&nbsp;both&nbsp;a&nbsp;sync&nbsp;or&nbsp;an&nbsp;async&nbsp;interface.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
&lt;/blockquote&gt;<br>
&lt;br&gt;&lt;/div&gt;<br>
{&nbsp;Traditional&nbsp;transactions,&nbsp;sync/async&nbsp;unspecified,&nbsp;observable&nbsp;transaction&nbsp;failures&nbsp;}.&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;should&nbsp;note&nbsp;that&nbsp;I&#39;m&nbsp;now&nbsp;of&nbsp;the&nbsp;opinion&nbsp;that&nbsp;{&nbsp;traditional&nbsp;transactions,&nbsp;async,&nbsp;observable&nbsp;transaction&nbsp;failures&nbsp;}&nbsp;is&nbsp;the&nbsp;way&nbsp;to&nbsp;go.&lt;div&nbsp;class=&quot;im&quot;&gt;&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
Those&nbsp;who&nbsp;want&nbsp;a&nbsp;queue.&nbsp; I.e.&nbsp;those&nbsp;who&nbsp;want&nbsp;an&nbsp;asynchronous&nbsp;callback&nbsp;based&nbsp;interface&nbsp;and&nbsp;the&nbsp;UA&nbsp;will&nbsp;only&nbsp;call&nbsp;one&nbsp;callback&nbsp;at&nbsp;a&nbsp;time.&nbsp; Perhaps&nbsp;on&nbsp;a&nbsp;per-origin&nbsp;basis.&nbsp; Note&nbsp;that&nbsp;this&nbsp;can&nbsp;never&nbsp;&quot;fail&quot;,&nbsp;need&nbsp;to&nbsp;be&nbsp;rolled&nbsp;back,&nbsp;etc.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
&lt;/blockquote&gt;<br>
&lt;br&gt;&lt;/div&gt;<br>
This&nbsp;sounds&nbsp;to&nbsp;me&nbsp;like&nbsp;{&nbsp;traditional&nbsp;transactions,&nbsp;async,&nbsp;unobservable&nbsp;transaction&nbsp;failures&nbsp;}&nbsp;which&nbsp;is&nbsp;the&nbsp;same&nbsp;as&nbsp;your&nbsp;first&nbsp;camp&nbsp;above&nbsp;except&nbsp;async&nbsp;only.&nbsp; Or&nbsp;are&nbsp;you&nbsp;proposing&nbsp;that&nbsp;the&nbsp;unit&nbsp;of&nbsp;atomicity/consistency&nbsp;is&nbsp;not&nbsp;all&nbsp;operations&nbsp;performed&nbsp;in&nbsp;the&nbsp;callback;&nbsp;i.e.,&nbsp;that&nbsp;modifications&nbsp;done&nbsp;in&nbsp;the&nbsp;callback&nbsp;can&nbsp;be&nbsp;partially&nbsp;applied?&lt;/blockquote&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It&#39;s&nbsp;just&nbsp;an&nbsp;implementational&nbsp;difference.&nbsp; A&nbsp;queue&nbsp;means&nbsp;that&nbsp;the&nbsp;event&nbsp;loop&nbsp;can&nbsp;continue&nbsp;processing&nbsp;stuff&nbsp;while&nbsp;waiting&nbsp;for&nbsp;the&nbsp;&#39;lock&#39;&nbsp;(which&nbsp;maybe&nbsp;is&nbsp;better&nbsp;described&nbsp;as&nbsp;an&nbsp;&#39;update&nbsp;token&#39;&nbsp;or&nbsp;something).&nbsp; If&nbsp;you&nbsp;implement&nbsp;it&nbsp;as&nbsp;a&nbsp;lock&nbsp;(which&nbsp;you&nbsp;would&nbsp;for&nbsp;a&nbsp;synchronous&nbsp;interface)&nbsp;then&nbsp;the&nbsp;event&nbsp;loop&nbsp;is&nbsp;blocked.&lt;/div&gt;<br>
<br>
&lt;div&gt; &lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;&lt;div&nbsp;class=&quot;im&quot;&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
<br>
<br>
I&nbsp;believe&nbsp;Aaron&nbsp;is&nbsp;in&nbsp;the&nbsp;queue&nbsp;camp&nbsp;with&nbsp;me.&nbsp; I&#39;m&nbsp;becoming&nbsp;more&nbsp;and&nbsp;more&nbsp;convinced&nbsp;that&nbsp;Chromium&nbsp;should/will&nbsp;not&nbsp;implement&nbsp;the&nbsp;storage&nbsp;mutex&nbsp;at&nbsp;all&nbsp;(even&nbsp;for&nbsp;LocalStorage)&nbsp;unless&nbsp;we&nbsp;can&nbsp;come&nbsp;up&nbsp;with&nbsp;a&nbsp;way&nbsp;for&nbsp;event&nbsp;loops&nbsp;to&nbsp;not&nbsp;be&nbsp;blocked.&nbsp; And,&nbsp;as&nbsp;far&nbsp;as&nbsp;I&nbsp;can&nbsp;tell,&nbsp;Async&nbsp;interfaces&nbsp;are&nbsp;the&nbsp;only&nbsp;way&nbsp;to&nbsp;accomplish&nbsp;this.&lt;br&gt;<br>
<br>
<br>
&lt;/blockquote&gt;<br>
&lt;br&gt;&lt;/div&gt;<br>
In&nbsp;general,&nbsp;agreed.&nbsp; I&nbsp;still&nbsp;believe&nbsp;that&nbsp;a&nbsp;sync&nbsp;API&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The&nbsp;problem&nbsp;with&nbsp;a&nbsp;sync&nbsp;interface,&nbsp;especially&nbsp;if&nbsp;it&#39;s&nbsp;one&nbsp;that&nbsp;can&nbsp;be&nbsp;held&nbsp;after&nbsp;the&nbsp;top&nbsp;level&nbsp;script&nbsp;context,&nbsp;is&nbsp;deadlock&nbsp;issues&nbsp;with&nbsp;WebDatabase&nbsp;(and&nbsp;possibly&nbsp;others).&nbsp; What&#39;s&nbsp;there&nbsp;now&nbsp;doesn&#39;t&nbsp;have&nbsp;this&nbsp;issue&nbsp;because&nbsp;you&#39;d&nbsp;never&nbsp;have&nbsp;the&nbsp;lock&nbsp;when&nbsp;calling&nbsp;the&nbsp;database&nbsp;transaction&nbsp;callback.&lt;/div&gt;<br>
<br>
&lt;div&gt; &lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;with&nbsp;exposed&nbsp;transaction&nbsp;failures&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You&#39;ll&nbsp;only&nbsp;have&nbsp;transaction&nbsp;failures&nbsp;in&nbsp;an&nbsp;optimistic&nbsp;transaction&nbsp;model,&nbsp;right?&nbsp; So&nbsp;is&nbsp;that&nbsp;what&nbsp;you&#39;re&nbsp;suggesting?&lt;/div&gt;<br>
<br>
&lt;div&gt; &lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;(as&nbsp;I&nbsp;proposed&nbsp;in&nbsp;the&nbsp;OP)&nbsp;and&nbsp;the&nbsp;right&nbsp;implementation&nbsp;could&nbsp;do&nbsp;quite&nbsp;well.&nbsp; But&nbsp;I&nbsp;now&nbsp;think&nbsp;that&nbsp;an&nbsp;async&nbsp;version&nbsp;of&nbsp;that&nbsp;same&nbsp;API&nbsp;could&nbsp;perform&nbsp;even&nbsp;better.&nbsp; In&nbsp;addition,&nbsp;that&nbsp;API&nbsp;is&nbsp;most&nbsp;flexible&nbsp;in&nbsp;terms&nbsp;of&nbsp;possible&nbsp;UA&nbsp;implementations.&lt;/blockquote&gt;<br>
<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
<br>
<br>
IOW,&nbsp;I&nbsp;think&nbsp;that&nbsp;{&nbsp;traditional&nbsp;transactions,&nbsp;async,&nbsp;observable&nbsp;failures&nbsp;}&nbsp;subsumes&nbsp;both&nbsp;{&nbsp;traditional&nbsp;transactions,&nbsp;sync,&nbsp;observable&nbsp;failures&nbsp;}&nbsp;(OP&#39;s&nbsp;proposal)&nbsp;*and*&nbsp;{&nbsp;traditional&nbsp;transactions,&nbsp;async,&nbsp;unobservable&nbsp;failures&nbsp;}&nbsp;(your&nbsp;and&nbsp;Aaron&#39;s&nbsp;proposal).&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
IMHO&nbsp;there&nbsp;are&nbsp;two&nbsp;remaining&nbsp;questions:&nbsp;first,&nbsp;whether&nbsp;the&nbsp;&quot;ideal&quot;&nbsp;localStorage&nbsp;transactional&nbsp;API&nbsp;should&nbsp;allow&nbsp;observable&nbsp;transaction&nbsp;failures.&nbsp; I&nbsp;believe&nbsp;that&nbsp;it&nbsp;should,&nbsp;as&nbsp;this&nbsp;allows&nbsp;for&nbsp;the&nbsp;widest&nbsp;variety&nbsp;of&nbsp;efficient&nbsp;implementations&nbsp;without&nbsp;changing&nbsp;ACID&nbsp;(best&nbsp;effort)&nbsp;guarantees&nbsp;given&nbsp;to&nbsp;authors&nbsp;or&nbsp;significantly&nbsp;complicating&nbsp;the&nbsp;localStorage&nbsp;API.&lt;br&gt;<br>
<br>
&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What&nbsp;failures&nbsp;could&nbsp;there&nbsp;be&nbsp;in&nbsp;a&nbsp;pesimistic/queue&nbsp;model?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
Second,&nbsp;what&nbsp;is&nbsp;the&nbsp;best&nbsp;way&nbsp;to&nbsp;go&nbsp;forward&nbsp;with&nbsp;transactional&nbsp;localStorage&nbsp;while&nbsp;remaining&nbsp;backwards-compatible&nbsp;with&nbsp;current&nbsp;implementations.&nbsp; One&nbsp;option&nbsp;would&nbsp;be&nbsp;to&nbsp;deprecate&nbsp;localStorage&nbsp;in&nbsp;favor&nbsp;of&nbsp;a&nbsp;future,&nbsp;transactional&nbsp;window.domainStorage&nbsp;or&nbsp;somesuch.&lt;br&gt;<br>
<br>
&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If&nbsp;we&nbsp;do&nbsp;this,&nbsp;we&nbsp;might&nbsp;as&nbsp;well&nbsp;just&nbsp;adopt&nbsp;something&nbsp;like&nbsp;the&nbsp;WebSimpleDatabase&nbsp;proposal&nbsp;(which&nbsp;I&nbsp;still&nbsp;haven&#39;t&nbsp;gotten&nbsp;around&nbsp;to&nbsp;reading&nbsp;yet)&nbsp;which&nbsp;seems&nbsp;much&nbsp;more&nbsp;powerful&nbsp;in&nbsp;many&nbsp;other&nbsp;ways.&lt;/div&gt;<br>
<br>
&lt;div&gt; &lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
Another,&nbsp;probably&nbsp;better,&nbsp;option&nbsp;is&nbsp;Maciej&#39;s&nbsp;proposal,&nbsp;a&nbsp;two-headed&nbsp;localStorage.&nbsp; The&nbsp;non-transactional&nbsp;localStorage&nbsp;would&nbsp;be&nbsp;deprecated&nbsp;and&nbsp;remain&nbsp;spec&#39;d&nbsp;as&nbsp;today&nbsp;{&nbsp;single-modification&nbsp;AC/storage-mutex&nbsp;I/undefined&nbsp;D,&nbsp;sync,&nbsp;some&nbsp;observable&nbsp;failures&nbsp;}.&lt;/blockquote&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This&nbsp;is&nbsp;how&nbsp;I&#39;d&nbsp;lean.&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;In&nbsp;addition,&nbsp;for&nbsp;cases&nbsp;like&nbsp;&quot;clear&nbsp;private&nbsp;data&quot;,&nbsp;UAs&nbsp;would&nbsp;be&nbsp;allowed&nbsp;to&nbsp;silently&nbsp;break&nbsp;storage-mutex&nbsp;isolation&nbsp;for&nbsp;apps&nbsp;using&nbsp;the&nbsp;non-transactional&nbsp;API.&lt;br&gt;<br>
<br>
&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;think&nbsp;it&#39;d&nbsp;be&nbsp;better&nbsp;if&nbsp;they&nbsp;waited&nbsp;for&nbsp;the&nbsp;lock&nbsp;to&nbsp;be&nbsp;freed.&lt;/div&gt;&lt;/div&gt;<br>

</tt>
