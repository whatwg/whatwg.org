<tt>
On&nbsp;Fri,&nbsp;Oct&nbsp;2,&nbsp;2009&nbsp;at&nbsp;9:58&nbsp;PM,&nbsp;Darin&nbsp;Fisher&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&lt;&lt;a&nbsp;href=&quot;mailto:darin@chromium.org&quot;&gt;darin@chromium.org&lt;/a&gt;&gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;<br>
<br>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;<br>
<br>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;<br>
<br>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;padding-left:&nbsp;1ex;&quot;&gt;&lt;div&gt;&lt;div&gt;<br>
&gt;&gt;&nbsp;&gt;&gt;&nbsp;Not&nbsp;quite&nbsp;sure&nbsp;I&nbsp;follow&nbsp;your&nbsp;proposal.&nbsp;How&nbsp;would&nbsp;you&nbsp;for&nbsp;example&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&gt;&nbsp;increase&nbsp;the&nbsp;value&nbsp;of&nbsp;a&nbsp;property&nbsp;by&nbsp;one&nbsp;without&nbsp;risking&nbsp;race&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&gt;&nbsp;conditions?&nbsp;Or&nbsp;keep&nbsp;two&nbsp;values&nbsp;in&nbsp;different&nbsp;properties&nbsp;in&nbsp;sync?&nbsp;I.e.&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&gt;&nbsp;so&nbsp;that&nbsp;if&nbsp;you&nbsp;update&nbsp;one&nbsp;always&nbsp;update&nbsp;the&nbsp;other,&nbsp;so&nbsp;that&nbsp;they&nbsp;never&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&gt;&nbsp;have&nbsp;different&nbsp;values.&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&gt;&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&gt;&nbsp;/&nbsp;Jonas&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp;Easy.&nbsp; Just&nbsp;like&nbsp;with&nbsp;database,&nbsp;the&nbsp;transaction&nbsp;is&nbsp;the&nbsp;storage&nbsp;lock.&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp; Any&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp;storage&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp;operation&nbsp;performed&nbsp;on&nbsp;that&nbsp;transaction&nbsp;are&nbsp;done&nbsp;atomically.&nbsp; However,&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp;all&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp;storage&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp;operations&nbsp;are&nbsp;asynchronous.&nbsp; You&nbsp;basically&nbsp;string&nbsp;together&nbsp;asynchronous&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp;storage&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp;operations&nbsp;by&nbsp;using&nbsp;the&nbsp;same&nbsp;transaction&nbsp;for&nbsp;each.&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp;We&nbsp;could&nbsp;add&nbsp;methods&nbsp;to&nbsp;get/set&nbsp;multiple&nbsp;items&nbsp;at&nbsp;once&nbsp;to&nbsp;simplify&nbsp;life&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp;for&lt;br&gt;<br>
&gt;&gt;&nbsp;&gt;&nbsp;the&nbsp;coder.&lt;br&gt;<br>
&gt;&gt;&lt;br&gt;<br>
&gt;&gt;&nbsp;I&nbsp;think&nbsp;I&nbsp;still&nbsp;don&#39;t&nbsp;understand&nbsp;your&nbsp;proposal,&nbsp;could&nbsp;you&nbsp;give&nbsp;some&lt;br&gt;<br>
&gt;&gt;&nbsp;code&nbsp;examples?&lt;br&gt;<br>
&gt;&gt;&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&lt;br&gt;<br>
&gt;&nbsp;ripping&nbsp;off&nbsp;database:&lt;br&gt;<br>
&gt;&nbsp;interface&nbsp;ValueStorage&nbsp;{&lt;br&gt;<br>
&gt;&nbsp;  void&nbsp;transaction(in&nbsp;DOMString&nbsp;namespace,&nbsp;in&lt;br&gt;<br>
&gt;&nbsp;ValueStorageTransactionCallback&nbsp;callback);&lt;br&gt;<br>
&gt;&nbsp;};&lt;br&gt;<br>
&gt;&nbsp;interface&nbsp;ValueStorageTransactionCallback&nbsp;{&lt;br&gt;<br>
&gt;&nbsp;  void&nbsp;handleEvent(in&nbsp;ValueStorageTransaction&nbsp;transaction);&lt;br&gt;<br>
&gt;&nbsp;};&lt;br&gt;<br>
&gt;&nbsp;interface&nbsp;ValueStorageTransaction&nbsp;{&lt;br&gt;<br>
&gt;&nbsp;  void&nbsp;readValue(in&nbsp;DOMString&nbsp;name,&nbsp;in&nbsp;ValueStorageReadCallback&nbsp;callback);&lt;br&gt;<br>
&gt;&nbsp;  void&nbsp;writeValue(in&nbsp;DOMString&nbsp;name,&nbsp;in&nbsp;DOMString&nbsp;value);&lt;br&gt;<br>
&gt;&nbsp;};&lt;br&gt;<br>
&gt;&nbsp;interface&nbsp;ValueStorageReadCallback&nbsp;{&lt;br&gt;<br>
&gt;&nbsp;  void&nbsp;handleEvent(in&nbsp;ValueStorageTransaction&nbsp;transaction,&nbsp;in&nbsp;DOMString&lt;br&gt;<br>
&gt;&nbsp;value);&lt;br&gt;<br>
&gt;&nbsp;};&lt;br&gt;<br>
&gt;&nbsp;then,&nbsp;to&nbsp;use&nbsp;these&nbsp;interfaces,&nbsp;you&nbsp;could&nbsp;implement&nbsp;thread-safe&nbsp;increment:&lt;br&gt;<br>
&gt;&nbsp;window.localStorage.transaction(&quot;slice&quot;,&nbsp;function(transaction)&nbsp;{&lt;br&gt;<br>
&gt;&nbsp;  transaction.readValue(&quot;foo&quot;,&nbsp;function(transaction,&nbsp;fooValue)&nbsp;{&lt;br&gt;<br>
&gt;&nbsp;  &nbsp; transaction.writeValue(&quot;foo&quot;,&nbsp;++fooValue);&lt;br&gt;<br>
&gt;&nbsp;  })&lt;br&gt;<br>
&gt;&nbsp;})&lt;br&gt;<br>
&gt;&nbsp;to&nbsp;fetch&nbsp;multiple&nbsp;values,&nbsp;you&nbsp;could&nbsp;do&nbsp;this:&lt;br&gt;<br>
&gt;&nbsp;var&nbsp;values&nbsp;=&nbsp;[];&lt;br&gt;<br>
&gt;&nbsp;var&nbsp;numValues&nbsp;=&nbsp;10;&lt;br&gt;<br>
&gt;&nbsp;function&nbsp;readNextValue(transaction)&nbsp;{&lt;br&gt;<br>
&gt;&nbsp;  if&nbsp;(values.length&nbsp;==&nbsp;numValues)&lt;br&gt;<br>
&gt;&nbsp;  &nbsp;return;&nbsp; //&nbsp;done!&lt;br&gt;<br>
&gt;&nbsp;  var&nbsp;index&nbsp;=&nbsp;values.length;&lt;br&gt;<br>
&gt;&nbsp;  transaction.readValue(&quot;value&quot;&nbsp;+&nbsp;index,&nbsp;function(transaction,&nbsp;value)&nbsp;{&lt;br&gt;<br>
&gt;&nbsp;  &nbsp; values.push(value);&lt;br&gt;<br>
&gt;&nbsp;  &nbsp; readNextValue(transaction);&lt;br&gt;<br>
&gt;&nbsp;  })&lt;br&gt;<br>
&gt;&nbsp;}&lt;br&gt;<br>
&gt;&nbsp;window.localStorage.transaction(&quot;slice&quot;,&nbsp;readNextValue);&lt;br&gt;<br>
&gt;&nbsp;This&nbsp;has&nbsp;the&nbsp;property&nbsp;that&nbsp;all&nbsp;IO&nbsp;is&nbsp;non-blocking&nbsp;and&nbsp;the&nbsp;&quot;lock&quot;&nbsp;is&nbsp;held&lt;br&gt;<br>
&gt;&nbsp;only&lt;br&gt;<br>
&gt;&nbsp;for&nbsp;a&nbsp;very&nbsp;limited&nbsp;scope.&nbsp; The&nbsp;programmer&nbsp;is&nbsp;however&nbsp;free&nbsp;to&nbsp;extend&nbsp;the&lt;br&gt;<br>
&gt;&nbsp;life&nbsp;of&nbsp;the&nbsp;lock&nbsp;as&nbsp;needed.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;&lt;/div&gt;What&nbsp;do&nbsp;you&nbsp;mean&nbsp;by&nbsp;that&nbsp;the&nbsp;&quot;lock&quot;&nbsp;is&nbsp;held&nbsp;for&nbsp;only&nbsp;a&nbsp;very&nbsp;limited&lt;br&gt;<br>
scope?&nbsp;You&nbsp;still&nbsp;want&nbsp;to&nbsp;prevent&nbsp;modifications&nbsp;for&nbsp;as&nbsp;long&nbsp;as&nbsp;the&lt;br&gt;<br>
transaction&nbsp;is&nbsp;being&nbsp;used&nbsp;right?&nbsp;I.e.&nbsp;no&nbsp;modifications&nbsp;can&nbsp;happen&lt;br&gt;<br>
between&nbsp;the&nbsp;read&nbsp;and&nbsp;the&nbsp;write&nbsp;in&nbsp;the&nbsp;first&nbsp;example,&nbsp;and&nbsp;between&nbsp;the&lt;br&gt;<br>
different&nbsp;reads&nbsp;in&nbsp;the&nbsp;second.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Yes.&nbsp; I&nbsp;only&nbsp;meant&nbsp;that&nbsp;the&nbsp;programmer&nbsp;doesn&#39;t&nbsp;have&nbsp;to&nbsp;call&nbsp;a&nbsp;special&lt;/div&gt;&lt;div&gt;function&nbsp;to&nbsp;close&nbsp;the&nbsp;transaction.&nbsp; It&nbsp;closes&nbsp;by&nbsp;virtue&nbsp;of&nbsp;the&nbsp;last&nbsp;handleEvent&lt;/div&gt;<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&lt;div&gt;call&nbsp;referring&nbsp;to&nbsp;the&nbsp;transaction&nbsp;returning.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;So&nbsp;wouldn&#39;t&nbsp;you&nbsp;implement&nbsp;this&nbsp;transaction&nbsp;using&nbsp;a&nbsp;lock?&nbsp;To&nbsp;prevent&nbsp;other&nbsp;pages&nbsp;from&nbsp;accessing&nbsp;the&nbsp;localStorage?&lt;br&gt;&lt;br&gt;&lt;/div&gt;<br>
<br>
<br>
<br>
<br>
<br>
&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Yes,&nbsp;but&nbsp;it&nbsp;wouldn&#39;t&nbsp;need&nbsp;to&nbsp;be&nbsp;a&nbsp;normal&nbsp;mutex&nbsp;if&nbsp;that&#39;s&nbsp;what&nbsp;you&nbsp;mean.&nbsp; You&nbsp;could&nbsp;just&nbsp;defer&nbsp;callbacks&nbsp;until&nbsp;the&nbsp;transaction&nbsp;completes.&nbsp; It&nbsp;is&nbsp;purely&nbsp;asynchronous&nbsp;locking.&lt;/div&gt;<br>
<br>
<br>
<br>
<br>
&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;So&nbsp;how&nbsp;is&nbsp;that&nbsp;then&nbsp;different&nbsp;from&nbsp;from&nbsp;using&nbsp;a&nbsp;Storage&nbsp;API,&nbsp;but&nbsp;only&nbsp;letting&nbsp;you&nbsp;get&nbsp;a&nbsp;reference&nbsp;to&nbsp;the&nbsp;Storage&nbsp;object&nbsp;using&nbsp;a&nbsp;asynchronous&nbsp;API?&nbsp;And&nbsp;of&nbsp;course&nbsp;not&nbsp;allowing&nbsp;the&nbsp;Storage&nbsp;object&nbsp;to&nbsp;be&nbsp;stored&nbsp;in&nbsp;a&nbsp;variable&nbsp;and&nbsp;used&nbsp;outside&nbsp;the&nbsp;callback.&lt;br&gt;<br>
<br>
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;The&nbsp;difference&nbsp;is&nbsp;that&nbsp;storage&nbsp;IO&nbsp;is&nbsp;fully&nbsp;asynchronous&nbsp;in&nbsp;the&nbsp;API&nbsp;I&nbsp;proposed.&nbsp; It&nbsp;doesn&#39;t&nbsp;have&nbsp;to&nbsp;block&nbsp;the&nbsp;calling&nbsp;thread&nbsp;for&nbsp;reads.&nbsp; I&nbsp;think&nbsp;that&nbsp;is&nbsp;important.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We&nbsp;should&nbsp;never&nbsp;design&nbsp;any&nbsp;APIs&nbsp;that&nbsp;involve&nbsp;synchronous&nbsp;IO&nbsp;(filesystem&nbsp;or&nbsp;network)&nbsp;from&nbsp;the&nbsp;main&nbsp;UI&nbsp;thread.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;Ah,&nbsp;that&#39;s&nbsp;a&nbsp;different&nbsp;problem&nbsp;from&nbsp;what&nbsp;I&nbsp;thought&nbsp;you&nbsp;talked&nbsp;about&nbsp;initially.&lt;br&gt;<br>
<br>
&lt;br&gt;I&nbsp;wasn&#39;t&nbsp;part&nbsp;of&nbsp;the&nbsp;initial&nbsp;design-phase&nbsp;of&nbsp;this&nbsp;API.&nbsp;But&nbsp;as&nbsp;I&nbsp;understand&nbsp;it,&nbsp;the&nbsp;idea&nbsp;was&nbsp;that&nbsp;it&#39;s&nbsp;expected&nbsp;that&nbsp;people&nbsp;will&nbsp;store&nbsp;small&nbsp;enough&nbsp;amounts&nbsp;of&nbsp;information&nbsp;in&nbsp;localStorage&nbsp;that&nbsp;the&nbsp;database&nbsp;can&nbsp;be&nbsp;kept&nbsp;in&nbsp;memory.&nbsp;Behind&nbsp;the&nbsp;scenes&nbsp;you&nbsp;can&nbsp;always&nbsp;write&nbsp;to&nbsp;disc&nbsp;asynchronously&nbsp;in&nbsp;order&nbsp;to&nbsp;reduce&nbsp;risk&nbsp;of&nbsp;dataloss&nbsp;in&nbsp;case&nbsp;of&nbsp;crash.&lt;br&gt;<br>
<br>
&lt;br&gt;I&#39;m&nbsp;not&nbsp;sure&nbsp;if&nbsp;this&nbsp;is&nbsp;practical&nbsp;or&nbsp;not.&nbsp;I&nbsp;suspect&nbsp;that&nbsp;many&nbsp;times&nbsp;it&nbsp;won&#39;t&nbsp;be.&nbsp;However&nbsp;even&nbsp;here&nbsp;a&nbsp;asynchronous&nbsp;getter&nbsp;would&nbsp;help&nbsp;since&nbsp;you&nbsp;can&nbsp;read&nbsp;in&nbsp;the&nbsp;full&nbsp;database&nbsp;into&nbsp;memory&nbsp;at&nbsp;that&nbsp;point.&lt;br&gt;&lt;br&gt;/&nbsp;Jonas&lt;br&gt;<br>
<br>
&lt;/div&gt;&lt;/div&gt;<br>

</tt>
